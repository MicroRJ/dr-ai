; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	stbi_write_tga_with_rle
PUBLIC	stbi_write_png_compression_level
PUBLIC	stbi_write_force_png_filter
_DATA	SEGMENT
stbi_write_tga_with_rle DD 01H
stbi_write_png_compression_level DD 08H
stbi_write_force_png_filter DD 0ffffffffH
_DATA	ENDS
CONST	SEGMENT
$SG8281	DB	00H
$SG150997 DB	00H
	ORG $+2
$SG8295	DB	00H, 00H
	ORG $+2
$SG155784 DB	'..\detroit', 00H
	ORG $+1
$SG155786 DB	'.', 00H
	ORG $+2
$SG155785 DB	'dr-ai-vis', 00H
	ORG $+2
$SG148241 DB	'bad TQ', 00H
	ORG $+1
$SG141020 DB	'1', 00H
	ORG $+2
$SG155787 DB	'd', 00H, 'r', 00H, '-', 00H, 'a', 00H, 'i', 00H, '-', 00H
	DB	'v', 00H, 'i', 00H, 's', 00H, 00H, 00H
$SG10865 DB	'%f', 00H
	ORG $+1
$SG155788 DB	'..\dr-ai', 00H
	ORG $+3
$SG148236 DB	'bad H', 00H
	ORG $+2
$SG148266 DB	'no SOI', 00H
	ORG $+1
$SG10869 DB	'%s', 00H
	ORG $+1
$SG155789 DB	'data\train-labels.idx1-ubyte', 00H
	ORG $+3
$SG155790 DB	'data\train-images.idx3-ubyte', 00H
	ORG $+3
$SG155792 DB	'label: %i', 00H
	ORG $+2
$SG148270 DB	'no SOF', 00H
	ORG $+1
$SG142401 DB	'0', 00H, 00H, 00H
$SG148100 DB	'expected marker', 00H
$SG148103 DB	'bad DRI len', 00H
$SG142678 DB	'0', 00H, 00H, 00H
$SG148106 DB	'bad DQT type', 00H
	ORG $+3
$SG148108 DB	'bad DQT table', 00H
	ORG $+2
$SG148112 DB	'bad DHT header', 00H
	ORG $+1
$SG148124 DB	'bad COM len', 00H
$SG142696 DB	'0', 00H, 00H, 00H
$SG148125 DB	'bad APP len', 00H
$SG142911 DB	'0', 00H, 00H, 00H
$SG148133 DB	'unknown marker', 00H
	ORG $+1
$SG148152 DB	'bad SOS component count', 00H
$SG148154 DB	'bad SOS len', 00H
$SG151422 DB	'-Y ', 00H
$SG148158 DB	'bad DC huff', 00H
$SG151425 DB	'+X ', 00H
$SG148160 DB	'bad AC huff', 00H
$SG151480 DB	'-Y ', 00H
$SG148165 DB	'bad SOS', 00H
$SG148167 DB	'bad SOS', 00H
$SG148170 DB	'bad SOS', 00H
$SG148218 DB	'bad SOF len', 00H
$SG151482 DB	'+X ', 00H
$SG148220 DB	'only 8-bit', 00H
	ORG $+1
$SG151682 DB	'rb', 00H
	ORG $+1
$SG148222 DB	'no header height', 00H
	ORG $+3
$SG148239 DB	'bad V', 00H
	ORG $+2
$SG140584 DB	'B != 0', 00H
	ORG $+1
$SG151699 DB	'rb', 00H
	ORG $+1
$SG148224 DB	'0 width', 00H
$SG148226 DB	'too large', 00H
	ORG $+2
$SG140950 DB	'MainVS', 00H
	ORG $+1
$SG151862 DB	'wb', 00H
	ORG $+1
$SG148228 DB	'too large', 00H
	ORG $+2
$SG140953 DB	'MainPS', 00H
	ORG $+1
$SG151928 DB	'0', 00H, 00H, 00H
$SG148230 DB	'bad component count', 00H
$SG152304 DB	'p', 00H, 00H, 00H
$SG148232 DB	'bad SOF len', 00H
$SG152758 DB	'wb', 00H
	ORG $+1
$SG148244 DB	'too large', 00H
	ORG $+2
$SG148248 DB	'bad H', 00H
	ORG $+2
$SG148250 DB	'bad V', 00H
	ORG $+2
$SG140956 DB	'MainCS', 00H
	ORG $+1
$SG80358 DB	'C:', 00H
	ORG $+1
$SG148252 DB	'outofmem', 00H
	ORG $+3
$SG140576 DB	'W > 0', 00H
	ORG $+2
$SG140965 DB	'vs_4_0', 00H
	ORG $+1
$SG80384 DB	'*', 00H
	ORG $+2
$SG148255 DB	'outofmem', 00H
	ORG $+3
$SG140580 DB	'H > 0', 00H
	ORG $+2
$SG140968 DB	'ps_4_0', 00H
	ORG $+1
$SG146031 DB	'rb', 00H
	ORG $+1
$SG148296 DB	'bad DNL len', 00H
$SG146068 DB	'rb', 00H
	ORG $+1
$SG148298 DB	'bad DNL height', 00H
	ORG $+1
$SG140263 DB	'modules\renderer\model.hlsl', 00H
$SG146169 DB	'rb', 00H
	ORG $+1
$SG140264 DB	'plain3D', 00H
$SG140265 DB	'POSITION', 00H
	ORG $+3
$SG140970 DB	'cs_4_0', 00H
	ORG $+1
$SG146190 DB	'rb', 00H
	ORG $+1
$SG140266 DB	'plain3D', 00H
$SG140267 DB	'modules\renderer\textured.hlsl', 00H
	ORG $+1
$SG140268 DB	'textured3D', 00H
	ORG $+1
$SG80668 DB	'%s,', 00H
$SG140269 DB	'TEXCOORD', 00H
	ORG $+3
$SG140976 DB	'vs_5_0', 00H
	ORG $+1
$SG146372 DB	'0', 00H, 00H, 00H
$SG140270 DB	'POSITION', 00H
	ORG $+3
$SG140979 DB	'ps_5_0', 00H
	ORG $+1
$SG146464 DB	'0', 00H, 00H, 00H
$SG140271 DB	'textured3D', 00H
	ORG $+1
$SG155156 DB	'..', 00H
	ORG $+1
$SG140272 DB	'modules\renderer\text.hlsl', 00H
	ORG $+1
$SG140273 DB	'text', 00H
	ORG $+3
$SG140981 DB	'cs_5_0', 00H
	ORG $+5
$SG140274 DB	'POSITION', 00H
	ORG $+7
$SG140275 DB	'GLYPHIDX', 00H
	ORG $+3
$SG140276 DB	'text', 00H
	ORG $+7
$SG140401 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, 'u', 00H, 'c', 00H, 't', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'r', 00H, 'v', 00H, 00H, 00H
	ORG $+2
$SG140402 DB	'ID3D11Device_CreateImmutableStructBufferSRV', 00H
	ORG $+4
$SG140403 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140550 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'h', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'e'
	DB	00H, 'x', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H
	DB	'v', 00H, 'i', 00H, 'e', 00H, 'w', 00H, 00H, 00H
	ORG $+6
$SG140551 DB	'ID3D11Driver_CreateShaderTextureView', 00H
	ORG $+3
$SG140552 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140575 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'S', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG140577 DB	'ID3D11Driver_CreateTexture', 00H
	ORG $+5
$SG140578 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140579 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'S', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG140581 DB	'ID3D11Driver_CreateTexture', 00H
	ORG $+5
$SG140582 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140583 DB	'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'T', 00H, 'e', 00H, 'x', 00H, 't', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, ' ', 00H, 'D', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, 00H, 00H
	ORG $+6
$SG140585 DB	'ID3D11Driver_CreateTexture', 00H
	ORG $+5
$SG140586 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG9514	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9515	DB	'V <= ((unsigned __int64)(0x000000000000000F))', 00H
	ORG $+2
$SG140588 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'm', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
	ORG $+2
$SG9516	DB	'safe_cast_u4', 00H
	ORG $+3
$SG140589 DB	'ID3D11Driver_CreateTexture', 00H
	ORG $+5
$SG9517	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG140590 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG9524	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9525	DB	'V <= ((unsigned __int64)(0x00000000000000FF))', 00H
	ORG $+2
$SG9526	DB	'safe_cast_u8', 00H
	ORG $+3
$SG9527	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG9534	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG9535	DB	'V <= ((unsigned __int64)(0x000000000000FFFF))', 00H
	ORG $+2
$SG9536	DB	'safe_cast_u16', 00H
	ORG $+2
$SG9537	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG148803 DB	'bad req_comp', 00H
	ORG $+3
$SG140614 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'h', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c', 00H, 'e', 00H
	DB	' ', 00H, 'v', 00H, 'i', 00H, 'e', 00H, 'w', 00H, 00H, 00H
	ORG $+4
$SG140615 DB	'ID3D11Device_CreateSRV', 00H
	ORG $+1
$SG140616 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG9544	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG148809 DB	'outofmem', 00H
	ORG $+7
$SG9545	DB	'V <= ((unsigned __int64)(0x00000000FFFFFFFF))', 00H
	ORG $+2
$SG9546	DB	'safe_cast_u32', 00H
	ORG $+2
$SG9547	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG9554	DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG148819 DB	'outofmem', 00H
	ORG $+7
$SG9555	DB	'V <= ((unsigned __int64)(0xFFFFFFFFFFFFFFFF))', 00H
	ORG $+2
$SG9556	DB	'safe_cast_u64', 00H
	ORG $+2
$SG9557	DB	'W:\cpp\void\dr/pack.h', 00H
	ORG $+2
$SG140649 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ' '
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H
	DB	00H, 00H
$SG140650 DB	'ID3D11Device_CreateRenderTargetViewFromTexture2D', 00H
	ORG $+7
$SG140651 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG141026 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG140652 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'a'
	DB	00H, 'r', 00H, 'g', 00H, 'e', 00H, 't', 00H, ' ', 00H, 'v', 00H
	DB	'i', 00H, 'e', 00H, 'w', 00H, 00H, 00H
$SG140653 DB	'ID3D11Device_CreateRenderTargetViewFromTexture2D', 00H
	ORG $+7
$SG140654 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG148861 DB	'outofmem', 00H
	ORG $+7
$SG148870 DB	'outofmem', 00H
	ORG $+7
$SG148892 DB	'outofmem', 00H
	ORG $+7
$SG148921 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '1', 00H, '6', 00H, 00H, 00H
	ORG $+2
$SG148920 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG148956 DB	'bad sizes', 00H
	ORG $+6
$SG148959 DB	'bad codelengths', 00H
$SG140827 DB	'S', 00H, 'o', 00H, 'm', 00H, 'e', 00H, 'C', 00H, 'l', 00H
	DB	'a', 00H, 's', 00H, 's', 00H, 'N', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, 00H, 00H
$SG10867 DB	'%lli', 00H
	ORG $+7
$SG140828 DB	'W', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H
	DB	'S', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'X', 00H, ' ', 00H, '='
	DB	00H, ' ', 00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'W', 00H
	DB	'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 'S', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 'Y', 00H, ' ', 00H, '=', 00H, ' ', 00H
	DB	'%', 00H, 'i', 00H, 00H, 00H
	ORG $+2
$SG140829 DB	'ID3D11Device_CreateWindow', 00H
	ORG $+6
$SG140830 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140840 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a', 00H, 'k'
	DB	00H, 'e', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H
	DB	'o', 00H, 'w', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'p', 00H, '-'
	DB	00H, 'm', 00H, 'o', 00H, 's', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG140841 DB	'ID3D11Device_CreateWindow', 00H
	ORG $+6
$SG140842 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140843 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG140844 DB	'ID3D11Device_CreateWindow', 00H
	ORG $+6
$SG140845 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140846 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'a', 00H, 'd', 00H, 'j'
	DB	00H, 'u', 00H, 's', 00H, 't', 00H, ' ', 00H, 'w', 00H, 'i', 00H
	DB	'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' ', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H
	ORG $+6
$SG140847 DB	'ID3D11Device_CreateWindow', 00H
	ORG $+6
$SG140848 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG142481 DB	'typ1', 00H
	ORG $+7
$SG140849 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'g'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'r', 00H, ' ', 00H
	DB	'w', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'w', 00H, ' '
	DB	00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H
$SG140850 DB	'ID3D11Device_CreateWindow', 00H
	ORG $+6
$SG140851 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG149044 DB	'output buffer limit', 00H
	ORG $+4
$SG149046 DB	'outofmem', 00H
	ORG $+7
$SG140855 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'g', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 'I', 00H, 'D', 00H, 'X', 00H, 'G', 00H, 'I', 00H
	DB	'_', 00H, 'F', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'O', 00H, 'R'
	DB	00H, 'Y', 00H, 00H, 00H
$SG149048 DB	'outofmem', 00H
	ORG $+7
$SG140856 DB	'ID3D11Device_CreateWindow', 00H
	ORG $+6
$SG140857 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG149050 DB	'outofmem', 00H
	ORG $+7
?stbi__zlength_base@@3QBHB DD 03H			; stbi__zlength_base
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0dH
	DD	0fH
	DD	011H
	DD	013H
	DD	017H
	DD	01bH
	DD	01fH
	DD	023H
	DD	02bH
	DD	033H
	DD	03bH
	DD	043H
	DD	053H
	DD	063H
	DD	073H
	DD	083H
	DD	0a3H
	DD	0c3H
	DD	0e3H
	DD	0102H
	DD	00H
	DD	00H
	ORG $+4
?stbi__zlength_extra@@3QBHB DD 00H			; stbi__zlength_extra
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	00H
	DD	00H
	DD	00H
	ORG $+4
?stbi__zdist_base@@3QBHB DD 01H				; stbi__zdist_base
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	07H
	DD	09H
	DD	0dH
	DD	011H
	DD	019H
	DD	021H
	DD	031H
	DD	041H
	DD	061H
	DD	081H
	DD	0c1H
	DD	0101H
	DD	0181H
	DD	0201H
	DD	0301H
	DD	0401H
	DD	0601H
	DD	0801H
	DD	0c01H
	DD	01001H
	DD	01801H
	DD	02001H
	DD	03001H
	DD	04001H
	DD	06001H
	DD	00H
	DD	00H
$SG140861 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'w', 00H
	DB	'a', 00H, 'p', 00H, ' ', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'i'
	DB	00H, 'n', 00H, 00H, 00H
$SG140863 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
?stbi__zdist_extra@@3QBHB DD 00H			; stbi__zdist_extra
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	08H
	DD	08H
	DD	09H
	DD	09H
	DD	0aH
	DD	0aH
	DD	0bH
	DD	0bH
	DD	0cH
	DD	0cH
	DD	0dH
	DD	0dH
	ORG $+8
$SG140862 DB	'ID3D11Device_CreateWindow', 00H
	ORG $+6
$SG149078 DB	'bad huffman code', 00H
	ORG $+7
$SG140886 DB	'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG140887 DB	'ID3D11Window_Present', 00H
	ORG $+3
$SG140888 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140889 DB	'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 'n', 00H
	DB	'a', 00H, 'l', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG140890 DB	'ID3D11Window_Present', 00H
	ORG $+3
$SG140891 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG149084 DB	'bad huffman code', 00H
	ORG $+7
$SG149087 DB	'bad dist', 00H
	ORG $+7
$SG140917 DB	'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'm', 00H, 'p', 00H
	DB	't', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'w', 00H, 'i'
	DB	00H, 't', 00H, 'h', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'w', 00H
	DB	'e', 00H, 'r', 00H, ' ', 00H, 'f', 00H, 'e', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'l', 00H, 'e', 00H
	DB	'v', 00H, 'e', 00H, 'l', 00H, 00H, 00H
$SG140918 DB	'ID3D11Driver_InitializeCompatible', 00H
	ORG $+6
$SG140919 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG140921 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'd', 00H, 'r', 00H
	DB	'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 00H, 00H
$SG140922 DB	'ID3D11Driver_InitializeCompatible', 00H
	ORG $+6
$SG140923 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG149121 DB	'bad codelengths', 00H
$SG149127 DB	'bad codelengths', 00H
$SG149132 DB	'bad codelengths', 00H
$SG149134 DB	'bad codelengths', 00H
$SG149136 DB	'bad codelengths', 00H
$SG140946 DB	'invalid', 00H
$SG140947 DB	'invalid', 00H
$SG140957 DB	'u', 00H, 'n', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 's'
	DB	00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
$SG140958 DB	'ID3D11Driver_GetShaderCompilationInfo', 00H
	ORG $+2
$SG140959 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG149153 DB	'zlib corrupt', 00H
	ORG $+3
$SG149155 DB	'zlib corrupt', 00H
	ORG $+3
$SG149157 DB	'read past buffer', 00H
	ORG $+7
$SG149167 DB	'bad zlib header', 00H
$SG149169 DB	'bad zlib header', 00H
$SG149171 DB	'no preset dict', 00H
	ORG $+1
$SG149173 DB	'bad compression', 00H
$SG140982 DB	'u', 00H, 'n', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'd'
	DB	00H, 'r', 00H, 'i', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+2
?stbi__zdefault_length@@3QBEB DB 08H			; stbi__zdefault_length
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	09H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
	DB	08H
?stbi__zdefault_distance@@3QBEB DB 05H			; stbi__zdefault_distance
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
$SG140983 DB	'ID3D11Driver_GetShaderCompilationInfo', 00H
	ORG $+2
$SG140984 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141016 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, 00H
	DB	00H
	ORG $+6
$SG141017 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG141018 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141019 DB	'COMPILE_SHADER', 00H
	ORG $+1
$SG141023 DB	'*', 00H, '*', 00H, '*', 00H, ' ', 00H, 's', 00H, 'h', 00H
	DB	'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l', 00H, 'a', 00H, 't', 00H
	DB	'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H, 'e', 00H, 'n', 00H, 'd'
	DB	00H, 'e', 00H, 'd', 00H, ' ', 00H, 'w', 00H, 'i', 00H, 't', 00H
	DB	'h', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, ' ', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	00H, 00H
	ORG $+4
$SG141024 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG141025 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141027 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG141028 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141029 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	00H, 00H
	ORG $+4
$SG141030 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG141031 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141048 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'n', 00H
	DB	'p', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'l', 00H, 'a', 00H, 'y'
	DB	00H, 'o', 00H, 'u', 00H, 't', 00H, '!', 00H, 00H, 00H
	ORG $+2
$SG141049 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG141050 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141051 DB	's', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 't', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG141052 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG141053 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141054 DB	's', 00H, 'h', 00H, 'a', 00H, 'd', 00H, 'e', 00H, 'r', 00H
	DB	' ', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, 'i', 00H, 'l'
	DB	00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ' ', 00H
	DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H
	ORG $+4
$SG141055 DB	'ID3D11Driver_CreateShaderFromData', 00H
	ORG $+6
$SG141056 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141070 DB	'_', 00H, '_', 00H, 'f', 00H, 'u', 00H, 'n', 00H, 'c', 00H
	DB	'_', 00H, '_', 00H, 00H, 00H
	ORG $+6
$SG141071 DB	'"', 00H, 'W', 00H, ':', 00H, '\', 00H, '\', 00H, 'c', 00H
	DB	'p', 00H, 'p', 00H, '\', 00H, '\', 00H, 'v', 00H, 'o', 00H, 'i'
	DB	00H, 'd', 00H, '\', 00H, '\', 00H, 'd', 00H, 'e', 00H, 't', 00H
	DB	'r', 00H, 'o', 00H, 'i', 00H, 't', 00H, '\', 00H, '\', 00H, 'd'
	DB	00H, 'e', 00H, 't', 00H, 'r', 00H, 'o', 00H, 'i', 00H, 't', 00H
	DB	'-', 00H, 'd', 00H, '3', 00H, 'd', 00H, '1', 00H, '1', 00H, '.'
	DB	00H, 'c', 00H, '"', 00H, 00H, 00H
	ORG $+4
$SG141107 DB	'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, 's'
	DB	00H, 'l', 00H, 'o', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG141108 DB	'ID3D11Graphics_CreateTexture', 00H
	ORG $+3
$SG141109 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG149310 DB	'bad png sig', 00H
	ORG $+4
$SG141147 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG141148 DB	'CurrentFont', 00H
	ORG $+4
$SG141149 DB	'ID3D11Graphics_AcquireGlyphFont', 00H
$SG141150 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
?stbi__depth_scale_table@@3QBEB DB 00H			; stbi__depth_scale_table
	DB	0ffH
	DB	055H
	DB	00H
	DB	011H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	ORG $+7
$SG141178 DB	'o', 00H, 'u', 00H, 't', 00H, ' ', 00H, 'o', 00H, 'f', 00H
	DB	' ', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' ', 00H, 's'
	DB	00H, 'l', 00H, 'o', 00H, 't', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG141179 DB	'ID3D11Graphics_CreateGlyphFont', 00H
	ORG $+1
$SG141180 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141298 DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l'
	DB	00H, 'o', 00H, 'w', 00H, 00H, 00H
$SG141299 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG141300 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141302 DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H
	DB	'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 'f', 00H, 'l', 00H, 'o'
	DB	00H, 'w', 00H, 00H, 00H
	ORG $+2
$SG141303 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG141304 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
	ORG $+4
$SG141305 DB	'l', 00H, 'o', 00H, 'o', 00H, 's', 00H, 'e', 00H, ' ', 00H
	DB	's', 00H, 't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H, 'p'
	DB	00H, 'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
$SG141306 DB	'ID3D11Graphics_MatrixStackCheck', 00H
$SG141307 DB	'W:\cpp\void\detroit\detroit-d3d11.c', 00H
$SG142482 DB	'typ1', 00H
	ORG $+7
$SG149500 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG149507 DB	'not enough pixels', 00H
	ORG $+6
$SG149501 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H, '>', 00H, 'i'
	DB	00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, '-', 00H
	DB	'>', 00H, 'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+'
	DB	00H, '1', 00H, 00H, 00H
	ORG $+6
$SG149503 DB	'outofmem', 00H
	ORG $+7
$SG149505 DB	'too large', 00H
	ORG $+6
$SG149509 DB	'invalid filter', 00H
	ORG $+1
$SG149512 DB	'invalid width', 00H
	ORG $+2
$SG149538 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'u'
	DB	00H, 't', 00H, '_', 00H, 'n', 00H, 00H, 00H
	ORG $+6
$SG149537 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG149569 DB	'i', 00H, 'm', 00H, 'g', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '3', 00H, 00H, 00H
	ORG $+2
$SG149568 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG149607 DB	'outofmem', 00H
	ORG $+7
$SG149628 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG149627 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG149651 DB	'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '2', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG149650 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG149677 DB	'outofmem', 00H
	ORG $+7
$SG149724 DB	's', 00H, '-', 00H, '>', 00H, 'i', 00H, 'm', 00H, 'g', 00H
	DB	'_', 00H, 'o', 00H, 'u', 00H, 't', 00H, '_', 00H, 'n', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+4
$SG149723 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG10484 DB	'u', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'd', 00H, 'e', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'o', 00H, 'p', 00H
	DB	'e', 00H, 'r', 00H, 'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, 00H
	DB	00H
	ORG $+4
$SG10485 DB	'operator *', 00H
	ORG $+5
$SG10486 DB	'W:\cpp\void\dr/wide.c', 00H
	ORG $+2
$SG149821 DB	'multiple IHDR', 00H
	ORG $+2
$SG149823 DB	'bad IHDR len', 00H
	ORG $+3
$SG149825 DB	'too large', 00H
	ORG $+6
$SG149827 DB	'too large', 00H
	ORG $+6
$SG149829 DB	'1/2/4/8/16-bit only', 00H
	ORG $+4
$SG149831 DB	'bad ctype', 00H
	ORG $+6
$SG149833 DB	'bad ctype', 00H
	ORG $+6
$SG149837 DB	'bad ctype', 00H
	ORG $+6
$SG149839 DB	'bad comp method', 00H
$SG149841 DB	'bad filter method', 00H
	ORG $+6
$SG149843 DB	'bad interlace method', 00H
	ORG $+3
$SG149846 DB	'0-pixel image', 00H
	ORG $+2
$SG149850 DB	'too large', 00H
	ORG $+6
$SG149853 DB	'too large', 00H
	ORG $+6
$SG149856 DB	'first not IHDR', 00H
	ORG $+1
$SG149858 DB	'invalid PLTE', 00H
	ORG $+3
$SG149860 DB	'invalid PLTE', 00H
	ORG $+3
$SG149863 DB	'first not IHDR', 00H
	ORG $+1
$SG149865 DB	'tRNS after IDAT', 00H
$SG149870 DB	'tRNS before PLTE', 00H
	ORG $+7
$SG149872 DB	'bad tRNS len', 00H
	ORG $+3
$SG149874 DB	'tRNS with alpha', 00H
$SG149876 DB	'bad tRNS len', 00H
	ORG $+3
$SG149881 DB	'first not IHDR', 00H
	ORG $+1
$SG149883 DB	'no PLTE', 00H
$SG149889 DB	'outofmem', 00H
	ORG $+7
$SG149891 DB	'outofdata', 00H
	ORG $+6
$SG149894 DB	'first not IHDR', 00H
	ORG $+1
$SG149897 DB	'no IDAT', 00H
$SG149917 DB	'first not IHDR', 00H
	ORG $+1
$SG149936 DB	'bad req_comp', 00H
	ORG $+3
$SG149942 DB	'bad bits_per_channel', 00H
	ORG $+3
$SG10712 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG10713 DB	'invalid aspect ratio!', 00H
	ORG $+2
$SG10714 DB	'AspectRatio != 0 && "invalid aspect ratio!"', 00H
	ORG $+4
$SG10715 DB	'MatrixP', 00H
$SG10716 DB	'W:\cpp\void\dr/wide.c', 00H
	ORG $+2
$SG150025 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG150026 DB	'v', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5', 00H
	DB	'6', 00H, 00H, 00H
$SG150093 DB	'not BMP', 00H
$SG150027 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG150028 DB	'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '>', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'b', 00H, 'i', 00H, 't', 00H, 's', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, '8', 00H, 00H, 00H
	ORG $+2
$SG150095 DB	'bad BMP', 00H
$SG150097 DB	'unknown BMP', 00H
	ORG $+4
$SG150101 DB	'bad BMP', 00H
$SG150105 DB	'BMP RLE', 00H
$SG150107 DB	'BMP JPEG/PNG', 00H
	ORG $+3
$SG150109 DB	'bad BMP', 00H
$SG150121 DB	'bad BMP', 00H
$SG150122 DB	'bad BMP', 00H
$SG150124 DB	'bad BMP', 00H
$SG10871 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG10872 DB	'Unsupported Format Specifier!', 00H
	ORG $+2
$SG10873 DB	'! "Unsupported Format Specifier!"', 00H
	ORG $+6
$SG10874 DB	'rx__printf', 00H
	ORG $+5
$SG10875 DB	'W:\cpp\void\dr/text.c', 00H
	ORG $+2
$SG150246 DB	'too large', 00H
	ORG $+6
$SG150248 DB	'too large', 00H
	ORG $+6
$SG150255 DB	'bad offset', 00H
	ORG $+5
$SG150261 DB	'too large', 00H
	ORG $+6
$SG150263 DB	'outofmem', 00H
	ORG $+7
$SG150268 DB	'invalid', 00H
$SG150276 DB	'bad bpp', 00H
$SG150297 DB	'bad masks', 00H
	ORG $+6
$SG150300 DB	'bad masks', 00H
	ORG $+6
$SG150488 DB	'too large', 00H
	ORG $+6
$SG150490 DB	'too large', 00H
	ORG $+6
$SG150495 DB	'bad format', 00H
	ORG $+5
$SG150498 DB	'too large', 00H
	ORG $+6
$SG150500 DB	'outofmem', 00H
	ORG $+7
$SG150505 DB	'bad palette', 00H
	ORG $+4
$SG150507 DB	'outofmem', 00H
	ORG $+7
$SG150511 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG150513 DB	'bad palette', 00H
$SG142483 DB	'typ1', 00H
	ORG $+7
$SG150510 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG142335 DB	'!', 00H, '(', 00H, 'o', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'b', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'o', 00H, ' ', 00H
	DB	'<', 00H, ' ', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG142352 DB	'n', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'n', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG150525 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG150526 DB	't', 00H, 'g', 00H, 'a', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'S'
	DB	00H, 'T', 00H, 'B', 00H, 'I', 00H, '_', 00H, 'r', 00H, 'g', 00H
	DB	'b', 00H, 00H, 00H
	ORG $+6
$SG142363 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, '0', 00H, 'x', 00H, '4', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '0', 00H, 00H, 00H
	ORG $+4
$SG142334 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142351 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142362 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142383 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142384 DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG142400 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142411 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142412 DB	'b', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'2', 00H, '8', 00H, 00H, 00H
	ORG $+6
$SG142461 DB	'i', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	00H, 00H
$SG142460 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142462 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142463 DB	'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+6
$SG150659 DB	'not PSD', 00H
$SG150661 DB	'wrong version', 00H
	ORG $+2
$SG150664 DB	'wrong channel count', 00H
	ORG $+4
$SG150666 DB	'too large', 00H
	ORG $+6
$SG150668 DB	'too large', 00H
	ORG $+6
$SG150670 DB	'unsupported bit depth', 00H
	ORG $+2
$SG150672 DB	'wrong color format', 00H
	ORG $+5
$SG150674 DB	'bad compression', 00H
$SG150676 DB	'too large', 00H
	ORG $+2
$SG142484 DB	'typ1', 00H
	ORG $+3
$SG142486 DB	'OTTO', 00H
	ORG $+3
$SG142487 DB	'OTTO', 00H
	ORG $+7
$SG150680 DB	'outofmem', 00H
	ORG $+3
$SG142488 DB	'OTTO', 00H
	ORG $+3
$SG142489 DB	'OTTO', 00H
	ORG $+3
$SG142492 DB	'true', 00H
	ORG $+3
$SG142493 DB	'true', 00H
	ORG $+7
$SG150686 DB	'corrupt', 00H
$SG142494 DB	'true', 00H
	ORG $+3
$SG142495 DB	'true', 00H
	ORG $+3
$SG142516 DB	'ttcf', 00H
	ORG $+3
$SG142517 DB	'ttcf', 00H
	ORG $+3
$SG142518 DB	'ttcf', 00H
	ORG $+3
$SG142519 DB	'ttcf', 00H
	ORG $+3
$SG142528 DB	'ttcf', 00H
	ORG $+3
$SG142529 DB	'ttcf', 00H
	ORG $+3
$SG142530 DB	'ttcf', 00H
	ORG $+3
$SG150723 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG142531 DB	'ttcf', 00H
	ORG $+3
$SG150725 DB	'PICT', 00H
	ORG $+3
$SG142554 DB	'SVG ', 00H
	ORG $+3
$SG150755 DB	'bad file', 00H
	ORG $+3
$SG142598 DB	'cmap', 00H
	ORG $+3
$SG142599 DB	'loca', 00H
	ORG $+3
$SG142600 DB	'head', 00H
	ORG $+3
$SG142601 DB	'glyf', 00H
	ORG $+3
$SG142602 DB	'hhea', 00H
	ORG $+3
$SG142603 DB	'hmtx', 00H
	ORG $+3
$SG142604 DB	'kern', 00H
	ORG $+3
$SG142605 DB	'GPOS', 00H
	ORG $+3
$SG142611 DB	'CFF ', 00H
	ORG $+3
$SG142617 DB	'maxp', 00H
	ORG $+7
$SG150837 DB	'bad format', 00H
	ORG $+5
$SG150839 DB	'bad file', 00H
	ORG $+7
$SG150841 DB	'bad format', 00H
	ORG $+5
$SG150843 DB	'bad format', 00H
	ORG $+5
$SG150848 DB	'bad file', 00H
	ORG $+7
$SG150853 DB	'bad file', 00H
	ORG $+7
$SG150859 DB	'bad file', 00H
	ORG $+7
$SG150862 DB	'bad file', 00H
	ORG $+7
$SG150894 DB	'too large', 00H
	ORG $+6
$SG142723 DB	'!', 00H, 'i', 00H, 'n', 00H, 'f', 00H, 'o', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'f', 00H, 'f', 00H, '.', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H
$SG150992 DB	'not GIF', 00H
$SG142677 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG142695 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG150896 DB	'too large', 00H
	ORG $+6
$SG150898 DB	'bad file', 00H
	ORG $+7
$SG150900 DB	'too large', 00H
	ORG $+6
$SG150902 DB	'outofmem', 00H
	ORG $+7
$SG142722 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG150994 DB	'not GIF', 00H
$SG150996 DB	'not GIF', 00H
$SG150999 DB	'too large', 00H
	ORG $+6
$SG151001 DB	'too large', 00H
	ORG $+6
$SG151015 DB	'outofmem', 00H
	ORG $+7
$SG151082 DB	'no clear code', 00H
	ORG $+2
$SG151086 DB	'too many codes', 00H
	ORG $+1
$SG151088 DB	'illegal code in raster', 00H
	ORG $+1
$SG151090 DB	'illegal code in raster', 00H
	ORG $+1
$SG142910 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG151147 DB	'too large', 00H
	ORG $+6
$SG151150 DB	'outofmem', 00H
	ORG $+7
$SG151161 DB	'bad Image Descriptor', 00H
	ORG $+3
$SG151169 DB	'missing color table', 00H
	ORG $+4
$SG151183 DB	'unknown code', 00H
	ORG $+3
$SG151193 DB	'outofmem', 00H
	ORG $+7
$SG151247 DB	'not GIF', 00H
$SG151284 DB	'#?RADIANCE', 0aH, 00H
	ORG $+4
$SG151286 DB	'#?RGBE', 0aH, 00H
$SG143213 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143214 DB	'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u', 00H, 't', 00H
	DB	'_', 00H, 'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H
	DB	'_', 00H, 'c', 00H, 't', 00H, 'x', 00H, '.', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, '_', 00H, 'v', 00H, 'e', 00H, 'r', 00H, 't', 00H
	DB	'i', 00H, 'c', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+4
$SG151413 DB	'#?RADIANCE', 00H
	ORG $+1
$SG151414 DB	'#?RGBE', 00H
	ORG $+5
$SG151415 DB	'not HDR', 00H
$SG151418 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG151420 DB	'unsupported format', 00H
	ORG $+5
$SG151423 DB	'unsupported data layout', 00H
$SG151426 DB	'unsupported data layout', 00H
$SG151428 DB	'too large', 00H
	ORG $+6
$SG151430 DB	'too large', 00H
	ORG $+6
$SG151434 DB	'too large', 00H
	ORG $+6
$SG151436 DB	'outofmem', 00H
	ORG $+7
$SG151443 DB	'invalid decoded scanline length', 00H
$SG151446 DB	'outofmem', 00H
	ORG $+7
$SG151450 DB	'corrupt', 00H
$SG151452 DB	'corrupt', 00H
$SG151477 DB	'FORMAT=32-bit_rle_rgbe', 00H
	ORG $+1
$SG151546 DB	'S', 080H, 0f6H, '4', 00H
	ORG $+3
$SG151585 DB	'too large', 00H
	ORG $+6
$SG151587 DB	'too large', 00H
	ORG $+6
$SG151590 DB	'too large', 00H
	ORG $+6
$SG151592 DB	'outofmem', 00H
	ORG $+7
$SG151645 DB	'max value > 65535', 00H
	ORG $+6
$SG151667 DB	'unknown image type', 00H
	ORG $+1
$SG143478 DB	'OS/2', 00H
	ORG $+7
$SG151684 DB	'can''t fopen', 00H
	ORG $+4
$SG151701 DB	'can''t fopen', 00H
	ORG $+4
$SG143703 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143704 DB	'z', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG143732 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143733 DB	'y', 00H, '0', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'y', 00H
	DB	'1', 00H, 00H, 00H
$SG143734 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG151927 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG143735 DB	'e', 00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e'
	DB	00H, 'y', 00H, 00H, 00H
	ORG $+2
$SG143743 DB	'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+4
$SG143742 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143746 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143747 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, 00H, 00H
$SG143750 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143751 DB	'x', 00H, '1', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, 00H, 00H
$SG143754 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143755 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, '+', 00H, '1', 00H, 00H, 00H
$SG152731 DB	'IHDR', 00H
	ORG $+7
$SG143756 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143757 DB	'x', 00H, '1', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H
	DB	'1', 00H, 00H, 00H
	ORG $+6
$SG143762 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143763 DB	'x', 00H, '0', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'x', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '0'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H
	DB	'1', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'x', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '1', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, 'x', 00H, '+', 00H, '1', 00H, 00H, 00H
	ORG $+6
$SG143773 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143774 DB	't', 00H, 'o', 00H, 'p', 00H, '_', 00H, 'w', 00H, 'i', 00H
	DB	'd', 00H, 't', 00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
$SG143775 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143776 DB	'b', 00H, 'o', 00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H
	DB	'_', 00H, 'w', 00H, 'i', 00H, 'd', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
$SG152732 DB	'IHDR', 00H
	ORG $+7
$SG143856 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG152049 DB	'11 4 22 44 44 22 444444', 00H
$SG143857 DB	'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o'
	DB	00H, 'p', 00H, 00H, 00H
	ORG $+2
$SG152050 DB	'11 4 22 44 44 22 444444 4444 4 444 444 444 444', 00H
	ORG $+1
$SG143874 DB	'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, ' ', 00H, '<'
	DB	00H, ' ', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H
	ORG $+4
$SG143863 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143864 DB	'e', 00H, '-', 00H, '>', 00H, 's', 00H, 'y', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H, 'b', 00H, 'o'
	DB	00H, 't', 00H, 't', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'e', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y'
	DB	00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'y', 00H, '_', 00H
	DB	't', 00H, 'o', 00H, 'p', 00H, 00H, 00H
$SG143883 DB	'f', 00H, 'a', 00H, 'b', 00H, 's', 00H, '(', 00H, 'a', 00H
	DB	'r', 00H, 'e', 00H, 'a', 00H, ')', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '1', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG143873 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143876 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143877 DB	'd', 00H, 'y', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG143878 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143879 DB	'd', 00H, 'x', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H
$SG143882 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143884 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143885 DB	's', 00H, 'y', 00H, '1', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'y', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l'
	DB	00H, '-', 00H, '0', 00H, '.', 00H, '0', 00H, '1', 00H, 'f', 00H
	DB	00H, 00H
$SG152116 DB	'111 221 2222 11', 00H
$SG152117 DB	'111 221 2222 11', 00H
$SG143959 DB	'z', 00H, '-', 00H, '>', 00H, 'e', 00H, 'y', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'n'
	DB	00H, '_', 00H, 'y', 00H, '_', 00H, 't', 00H, 'o', 00H, 'p', 00H
	DB	00H, 00H
$SG143952 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG143953 DB	'z', 00H, '-', 00H, '>', 00H, 'd', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 00H
	DB	00H
	ORG $+6
$SG143958 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG152175 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG152176 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	'+', 00H, '1', 00H, '2', 00H, '8', 00H, ' ', 00H, '<', 00H, '='
	DB	00H, ' ', 00H, '2', 00H, '5', 00H, '5', 00H, 00H, 00H
	ORG $+4
$SG152186 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG152187 DB	'l', 00H, 'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H
	DB	' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H, '2', 00H, '8'
	DB	00H, 00H, 00H
$SG152733 DB	'IHDR', 00H
	ORG $+7
$SG152260 DB	'#?RADIANCE', 0aH, '# Written by stb_image_write.h', 0aH, 'F'
	DB	'ORMAT=32-bit_rle_rgbe', 0aH, 00H
	ORG $+6
$SG152261 DB	'EXPOSURE=          1.0000000000000', 0aH, 0aH, '-Y %d +X'
	DB	' %d', 0aH, 00H
	ORG $+7
$SG152303 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG152549 DB	'd', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '3', 00H
	DB	'2', 00H, '7', 00H, '6', 00H, '7', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'b', 00H, 'e', 00H, 's', 00H, 't', 00H, ' ', 00H
	DB	'<', 00H, '=', 00H, ' ', 00H, '2', 00H, '5', 00H, '8', 00H, 00H
	DB	00H
	ORG $+4
$SG152548 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG144381 DB	'x', 00H, '+', 00H, 'g', 00H, 'w', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'w', 00H, 00H, 00H
	ORG $+4
$SG144380 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG144382 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG144383 DB	'y', 00H, '+', 00H, 'g', 00H, 'h', 00H, ' ', 00H, '<', 00H
	DB	' ', 00H, 'p', 00H, 'h', 00H, 00H, 00H
$SG152734 DB	'IHDR', 00H
	ORG $+7
$SG144511 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG144512 DB	'h', 00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H
$SG152735 DB	'IDAT', 00H
	ORG $+7
$SG144513 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG144514 DB	'v', 00H, '_', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	's', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '8', 00H, 00H, 00H
$SG152736 DB	'IDAT', 00H
	ORG $+3
$SG152737 DB	'IDAT', 00H
	ORG $+3
$SG152738 DB	'IDAT', 00H
	ORG $+3
$SG152739 DB	'IEND', 00H
	ORG $+3
$SG152740 DB	'IEND', 00H
	ORG $+3
$SG152741 DB	'IEND', 00H
	ORG $+3
$SG152742 DB	'IEND', 00H
	ORG $+7
$SG152743 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '.'
	DB	00H, 'h', 00H, 00H, 00H
	ORG $+6
$SG152744 DB	'o', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H
	DB	'u', 00H, 't', 00H, ' ', 00H, '+', 00H, ' ', 00H, '*', 00H, 'o'
	DB	00H, 'u', 00H, 't', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H
	DB	00H, 00H
$SG144569 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG144570 DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	'[', 00H, 'i', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H
	ORG $+2
?stbiw__jpg_ZigZag@@3QBEB DB 00H			; stbiw__jpg_ZigZag
	DB	01H
	DB	05H
	DB	06H
	DB	0eH
	DB	0fH
	DB	01bH
	DB	01cH
	DB	02H
	DB	04H
	DB	07H
	DB	0dH
	DB	010H
	DB	01aH
	DB	01dH
	DB	02aH
	DB	03H
	DB	08H
	DB	0cH
	DB	011H
	DB	019H
	DB	01eH
	DB	029H
	DB	02bH
	DB	09H
	DB	0bH
	DB	012H
	DB	018H
	DB	01fH
	DB	028H
	DB	02cH
	DB	035H
	DB	0aH
	DB	013H
	DB	017H
	DB	020H
	DB	027H
	DB	02dH
	DB	034H
	DB	036H
	DB	014H
	DB	016H
	DB	021H
	DB	026H
	DB	02eH
	DB	033H
	DB	037H
	DB	03cH
	DB	015H
	DB	022H
	DB	025H
	DB	02fH
	DB	032H
	DB	038H
	DB	03bH
	DB	03dH
	DB	023H
	DB	024H
	DB	030H
	DB	031H
	DB	039H
	DB	03aH
	DB	03eH
	DB	03fH
$SG144619 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG144620 DB	'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l', 00H, 's', 00H
	DB	'[', 00H, 'i', 00H, '*', 00H, 's', 00H, 't', 00H, 'r', 00H, 'i'
	DB	00H, 'd', 00H, 'e', 00H, '_', 00H, 'i', 00H, 'n', 00H, '_', 00H
	DB	'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ']', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H
	ORG $+2
$SG145106 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 't', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, '.', 00H, 'h', 00H, 00H, 00H
	ORG $+4
$SG145107 DB	'i', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H
	ORG $+2
$SG145208 DB	'name', 00H
	ORG $+3
$SG79707 DB	'[WARNING] write console failed, are you using visual stu'
	DB	'dio?', 0aH, 00H
	ORG $+2
$SG79713 DB	'[WARNING] write console failed, are you using visual stu'
	DB	'dio?', 0aH, 00H
	ORG $+2
$SG145261 DB	'head', 00H
	ORG $+3
$SG145263 DB	'name', 00H
	ORG $+3
$SG79738 DB	'%s, %i %s() [%i] %s', 00H
	ORG $+4
$SG79739 DB	'Break Handler Invoked', 00H
	ORG $+2
$SG79740 DB	'B', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, ' ', 00H
	DB	'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'o', 00H, 'k', 00H
	DB	'e', 00H, 'd', 00H, 00H, 00H
	ORG $+4
$SG79741 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, 00H, 00H
$SG79742 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG79743 DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, 00H, 00H
	ORG $+4
$SG79744 DB	'Choose Your Poison', 00H
	ORG $+5
$SG79761 DB	'GetErrorCode', 00H
	ORG $+3
$SG79786 DB	'GetErrorStringA', 00H
$SG79795 DB	'no error message, or message too large', 00H
	ORG $+1
$SG79745 DB	'Would You Like To Exit (Abort), Debug (Retry) or Continu'
	DB	'e (Ignore)?', 00H
$SG80633 DB	'DEVICE', 00H
	ORG $+5
$SG79760 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r'
	DB	00H, ' ', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	',', 00H, ' ', 00H, 'e', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 'E', 00H
	DB	'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H, 'L'
	DB	00H, 'A', 00H, 'S', 00H, 'S', 00H, '_', 00H, 'G', 00H, 'E', 00H
	DB	'N', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'L', 00H, '''', 00H, ' '
	DB	00H, 'o', 00H, 'r', 00H, ' ', 00H, '''', 00H, 'E', 00H, 'R', 00H
	DB	'R', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'A'
	DB	00H, 'S', 00H, 'S', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'T', 00H
	DB	'W', 00H, 'O', 00H, 'R', 00H, 'K', 00H, '''', 00H, 00H, 00H
	ORG $+6
$SG79762 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79785 DB	'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H
	DB	'c', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, ' ', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'o', 00H, 'r', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'w', 00H, 'h', 00H, 'e', 00H, 'n', 00H, ' ', 00H, 'e'
	DB	00H, 'r', 00H, 'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, ' ', 00H, 's', 00H, 'p', 00H, 'e'
	DB	00H, 'c', 00H, 'i', 00H, 'f', 00H, 'i', 00H, 'e', 00H, 'd', 00H
	DB	00H, 00H
	ORG $+4
$SG79787 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79792 DB	'n', 00H, 'o', 00H, ' ', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	'o', 00H, 'r', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 'a', 00H, 'g', 00H, 'e', 00H, ',', 00H, ' ', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, 'm', 00H, 'e', 00H, 's', 00H, 's', 00H, 'a'
	DB	00H, 'g', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'o', 00H
	DB	' ', 00H, 'l', 00H, 'a', 00H, 'r', 00H, 'g', 00H, 'e', 00H, 00H
	DB	00H
	ORG $+2
$SG79793 DB	'GetErrorStringA', 00H
$SG79794 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79809 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'S', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, 'H', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H
	DB	'e', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'f', 00H, 'o', 00H, 'r'
	DB	00H, 'm', 00H, 'a', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+4
$SG79810 DB	'CreateInheritablePipe', 00H
	ORG $+2
$SG79811 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79852 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'p', 00H, 'r', 00H
	DB	'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H, ' ', 00H, 'p'
	DB	00H, 'i', 00H, 'p', 00H, 'e', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG79853 DB	'CreateProcessWithArguments', 00H
	ORG $+5
$SG79854 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79855 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e'
	DB	00H, 's', 00H, 's', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'g', 00H
	DB	'u', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG79856 DB	'CreateProcessWithArguments', 00H
	ORG $+5
$SG79857 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79891 DB	'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 's'
	DB	00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '?', 00H, 00H, 00H
	ORG $+2
$SG79892 DB	'FlushProcessOutputAndErrorToStandardOut', 00H
$SG79893 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79895 DB	'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'o', 00H, 'l', 00H, 'e'
	DB	00H, ' ', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	'd', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'u', 00H, 's', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'v', 00H, 'i', 00H, 's'
	DB	00H, 'u', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'u', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '?', 00H, 00H, 00H
	ORG $+2
$SG79896 DB	'FlushProcessOutputAndErrorToStandardOut', 00H
$SG79897 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG79952 DB	'user32.dll', 00H
	ORG $+5
$SG79953 DB	'SetProcessDPIAwarenessContext', 00H
	ORG $+2
$SG79954 DB	'SetProcessDPIAware', 00H
	ORG $+5
$SG80012 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG80013 DB	'LoadFileData', 00H
	ORG $+3
$SG80014 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80016 DB	'F', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 'T', 00H, 'o', 00H, ' ', 00H, 'L', 00H, 'o', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG80017 DB	'LoadFileData', 00H
	ORG $+3
$SG80018 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80033 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H
	DB	' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG80034 DB	'WriteFileData', 00H
	ORG $+2
$SG80035 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80036 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '[', 00H, '%'
	DB	00H, 's', 00H, ']', 00H, 00H, 00H
	ORG $+6
$SG80037 DB	'WriteFileData', 00H
	ORG $+2
$SG80038 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80163 DB	'w', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 'g', 00H, ' ', 00H
	DB	'o', 00H, 'r', 00H, 'd', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'o'
	DB	00H, 'f', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'p', 00H, 'u', 00H
	DB	't', 00H, 's', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'b', 00H, 's'
	DB	00H, 'o', 00H, 'l', 00H, 'u', 00H, 't', 00H, 'e', 00H, ' ', 00H
	DB	'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ' ', 00H, 's', 00H, 'h'
	DB	00H, 'o', 00H, 'u', 00H, 'l', 00H, 'd', 00H, ' ', 00H, 'g', 00H
	DB	'o', 00H, ' ', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, 00H, 00H
	ORG $+6
$SG80164 DB	'FileNameMerge', 00H
	ORG $+2
$SG80165 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80230 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'c', 00H, 'r', 00H, 'e'
	DB	00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H, ' '
	DB	00H, 'p', 00H, 'a', 00H, 't', 00H, 'h', 00H, ',', 00H, ' ', 00H
	DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+2
$SG80231 DB	'CreateCompleteFilePath', 00H
	ORG $+1
$SG80232 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80297 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'P', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'e', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
$SG80298 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG80299 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80302 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'R', 00H
	DB	'e', 00H, 'm', 00H, 'o', 00H, 'v', 00H, 'e', 00H, 'd', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 00H, 00H
$SG80303 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG80304 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80306 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG80307 DB	'Old->File.IsFile == New->File.IsFile', 00H
	ORG $+3
$SG80308 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG80309 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80311 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'M', 00H, 'a', 00H, 'd'
	DB	00H, 'e', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG80312 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG80313 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80315 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'd', 00H, 'i'
	DB	00H, 't', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG80316 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG80317 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80319 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'T', 00H
	DB	'i', 00H, 'm', 00H, 'e', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'C', 00H, 'h', 00H, 'a', 00H, 'n', 00H
	DB	'g', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H
	DB	00H
	ORG $+4
$SG80320 DB	'FileTreeReviseSingle', 00H
	ORG $+3
$SG80321 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG154083 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG145891 DB	'unknown image type', 00H
	ORG $+5
$SG154084 DB	'I.F == PIXEL_FORMAT_RGB8', 00H
	ORG $+7
$SG154085 DB	'ImageGetMemoryAtOffset', 00H
	ORG $+1
$SG154086 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG145909 DB	'outofmem', 00H
	ORG $+7
$SG145928 DB	'outofmem', 00H
	ORG $+7
$SG154146 DB	'u', 00H, 'n', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H
$SG154147 DB	'ImageFillWithColor', 00H
	ORG $+5
$SG154148 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG145980 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG154190 DB	'u', 00H, 'n', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'c', 00H
	DB	'h', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H
$SG145981 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
	ORG $+4
$SG154191 DB	'ImageDrawQuad', 00H
	ORG $+2
$SG154192 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
$SG80636 DB	'HIDDEN', 00H
	ORG $+5
$SG146000 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG80471 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG146001 DB	'r', 00H, 'i', 00H, '.', 00H, 'b', 00H, 'i', 00H, 't', 00H
	DB	's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r', 00H, '_', 00H, 'c'
	DB	00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H, 'e', 00H, 'l', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '8', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'r', 00H, 'i', 00H, '.', 00H, 'b', 00H
	DB	'i', 00H, 't', 00H, 's', 00H, '_', 00H, 'p', 00H, 'e', 00H, 'r'
	DB	00H, '_', 00H, 'c', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, '6', 00H, 00H, 00H
	ORG $+4
$SG80472 DB	'Queue->ConsumerTail <= Queue->Consumer', 00H
	ORG $+1
$SG80473 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG80474 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80475 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG80476 DB	'Queue->ProducerTail <= Queue->Producer', 00H
	ORG $+1
$SG80477 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG80478 DB	'W:\cpp\void\dr/plat-win32.c', 00H
$SG80638 DB	'NORMAL', 00H
	ORG $+5
$SG80482 DB	'N', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'E', 00H, 'n', 00H
	DB	'o', 00H, 'u', 00H, 'g', 00H, 'h', 00H, ' ', 00H, 'T', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, 's', 00H, ',', 00H, ' ', 00H, 'A', 00H
	DB	's', 00H, 'k', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'F', 00H, 'o'
	DB	00H, 'r', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H
	DB	' ', 00H, 'T', 00H, 'h', 00H, 'e', 00H, 'r', 00H, 'e', 00H, ' '
	DB	00H, 'A', 00H, 'r', 00H, 'e', 00H, ' ', 00H, 'O', 00H, 'n', 00H
	DB	'l', 00H, 'y', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']'
	DB	00H, 00H, 00H
	ORG $+6
$SG80483 DB	'FileQueueGetTask', 00H
	ORG $+7
$SG80484 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG146033 DB	'can''t fopen', 00H
	ORG $+4
$SG80503 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG80504 DB	'Queue->ConsumerTail <= Queue->Consumer', 00H
	ORG $+1
$SG80505 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG80506 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80507 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG80508 DB	'Queue->ProducerTail <= Queue->Producer', 00H
	ORG $+1
$SG80509 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG80510 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80514 DB	'T', 00H, 'o', 00H, 'o', 00H, ' ', 00H, 'M', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, ' ', 00H, 'T', 00H, 'a', 00H, 's', 00H, 'k'
	DB	00H, 's', 00H, 00H, 00H
	ORG $+2
$SG80515 DB	'FileQueueSetTask', 00H
	ORG $+7
$SG80516 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG154254 DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 00H, 00H
$SG154255 DB	'I->F == R->F', 00H
	ORG $+3
$SG154256 DB	'ImageDrawImage', 00H
	ORG $+1
$SG154257 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG154258 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG154259 DB	'ImageCheck(I)', 00H
	ORG $+2
$SG154260 DB	'ImageDrawImage', 00H
	ORG $+1
$SG154261 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG154262 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG146070 DB	'can''t fopen', 00H
	ORG $+4
$SG154263 DB	'ImageCheck(R)', 00H
	ORG $+2
$SG154264 DB	'ImageDrawImage', 00H
	ORG $+1
$SG154265 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG154266 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG154267 DB	'OffX >= 0', 00H
	ORG $+6
$SG154268 DB	'ImageDrawImage', 00H
	ORG $+1
$SG80540 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, 'E', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'r', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+4
$SG154269 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80541 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG154270 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG80542 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG154271 DB	'OffY >= 0', 00H
	ORG $+6
$SG80543 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'T', 00H, 'a', 00H
	DB	's', 00H, 'k', 00H, '.', 00H, 'W', 00H, 'o', 00H, 'r', 00H, 'k'
	DB	00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H
	ORG $+2
$SG154272 DB	'ImageDrawImage', 00H
	ORG $+1
$SG80544 DB	'FileTask.Work != NULL', 00H
	ORG $+2
$SG154273 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80545 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG80546 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80550 DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	' ', 00H, 'L', 00H, 'e', 00H, 'a', 00H, 'v', 00H, 'e', 00H, 's'
	DB	00H, 00H, 00H
	ORG $+4
$SG80551 DB	'FileQueueThreadRoutine', 00H
	ORG $+1
$SG80552 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG146138 DB	'unknown image type', 00H
	ORG $+5
$SG80603 DB	'FileQueueBegin', 00H
	ORG $+1
$SG80631 DB	'ARCHIVE', 00H
$SG80602 DB	'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'Q', 00H, 'u', 00H
	DB	'e', 00H, 'u', 00H, 'e', 00H, '.', 00H, 'C', 00H, 'o', 00H, 'r'
	DB	00H, 'e', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H, '.', 00H
	DB	'S', 00H, 'e', 00H, 't', 00H, 's', 00H, ' ', 00H, '=', 00H, ' '
	DB	00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 's', 00H, ' ', 00H, '=', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, 00H, 00H
$SG80604 DB	'W:\cpp\void\dr/plat-win32.c', 00H
	ORG $+4
$SG80632 DB	'COMPRESSED', 00H
	ORG $+5
$SG80634 DB	'DIRECTORY', 00H
	ORG $+6
$SG146171 DB	'can''t fopen', 00H
	ORG $+4
$SG80635 DB	'ENCRYPTED', 00H
	ORG $+6
$SG80637 DB	'INTEGRITY_STREAM', 00H
	ORG $+7
$SG80639 DB	'NOT_CONTENT_INDEXED', 00H
	ORG $+4
$SG80640 DB	'NO_SCRUB_DATA', 00H
	ORG $+2
$SG80641 DB	'OFFLINE', 00H
$SG80642 DB	'READONLY', 00H
	ORG $+7
$SG80643 DB	'RECALL_ON_DATA_ACCESS', 00H
	ORG $+2
$SG80644 DB	'RECALL_ON_OPEN', 00H
	ORG $+1
$SG80645 DB	'REPARSE_POINT', 00H
	ORG $+2
$SG80646 DB	'SPARSE_FILE', 00H
$SG80647 DB	'SYSTEM', 00H
	ORG $+5
$SG80648 DB	'TEMPORARY', 00H
	ORG $+6
$SG80649 DB	'VIRTUAL', 00H
$SG80650 DB	'PINNED', 00H
	ORG $+1
$SG80651 DB	'UNPINNED', 00H
	ORG $+7
$SG154384 DB	'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 's', 00H
	DB	' ', 00H, 'd', 00H, 'i', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, ' ', 00H, 'i', 00H, 'n', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, 00H, 00H
$SG154385 DB	'I->F == R->F', 00H
	ORG $+3
$SG154386 DB	'ImageCopy', 00H
	ORG $+6
$SG154387 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80665 DB	'INVALID_FILE_ATTRIBUTES', 00H
$SG80669 DB	'%s %s', 00H
	ORG $+2
$SG80676 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, ')', 00H, 00H, 00H
$SG80678 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'R', 00H, 'E', 00H
	DB	'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80680 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80682 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'V', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '3', 00H, ')', 00H, 00H, 00H
$SG80684 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, '5', 00H, ')', 00H, 00H, 00H
$SG80686 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'C', 00H, 'T', 00H
	DB	'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG80688 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'C', 00H, 'U', 00H, 'S', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '7', 00H, ')', 00H
	DB	00H, 00H
$SG80690 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'I', 00H, 'L', 00H
	DB	'L', 00H, 'F', 00H, 'O', 00H, 'C', 00H, 'U', 00H, 'S', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80692 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'A', 00H
	DB	'B', 00H, 'L', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '0', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80694 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'R', 00H, 'E', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'W', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '0', 00H, 'B', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80696 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80698 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80700 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, 'L', 00H, 'E', 00H, 'N'
	DB	00H, 'G', 00H, 'T', 00H, 'H', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '0', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80702 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '0', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80704 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'O', 00H
	DB	'S', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '1', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80706 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'S', 00H, 'E'
	DB	00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG80708 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'O', 00H, 'P', 00H, 'E', 00H, 'N', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80710 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'D', 00H
	DB	'S', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80712 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'I', 00H
	DB	'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
$SG80714 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'R', 00H, 'A', 00H
	DB	'S', 00H, 'E', 00H, 'B', 00H, 'K', 00H, 'G', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80716 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'C', 00H, 'H'
	DB	00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '0', 00H, '1', 00H, '5', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG80718 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'H', 00H, 'O', 00H
	DB	'W', 00H, 'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80720 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'I', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N'
	DB	00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG80722 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H
	DB	'M', 00H, 'O', 00H, 'D', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '1', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80724 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'C', 00H, 'T', 00H
	DB	'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, 'A', 00H, 'P'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'1', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80726 DB	'W', 00H, 'M', 00H, '_', 00H, 'F', 00H, 'O', 00H, 'N', 00H
	DB	'T', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'D', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80728 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'I', 00H, 'M', 00H
	DB	'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80730 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'N', 00H
	DB	'C', 00H, 'E', 00H, 'L', 00H, 'M', 00H, 'O', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '1', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80732 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'C', 00H, 'U', 00H, 'R', 00H, 'S', 00H, 'O', 00H, 'R', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80734 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG154464 DB	'u', 00H, 'n', 00H, 's', 00H, 'u', 00H, 'p', 00H, 'p', 00H
	DB	'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'i'
	DB	00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H, 00H, 00H
	ORG $+4
$SG80736 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'I', 00H
	DB	'L', 00H, 'D', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG154465 DB	'ImageLoad', 00H
	ORG $+6
$SG154466 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80738 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'U', 00H, 'E', 00H, 'S', 00H, 'Y', 00H, 'N', 00H, 'C', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG154467 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H
	DB	'e', 00H, ' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H
	DB	00H
	ORG $+4
$SG154468 DB	'ImageLoad', 00H
	ORG $+6
$SG80740 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'M', 00H, 'I', 00H, 'N', 00H, 'M', 00H, 'A', 00H, 'X', 00H, 'I'
	DB	00H, 'N', 00H, 'F', 00H, 'O', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG154469 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80742 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, '6', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80744 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'C', 00H, 'O', 00H
	DB	'N', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'S', 00H, 'E', 00H, 'B'
	DB	00H, 'K', 00H, 'G', 00H, 'N', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '0', 00H, '2', 00H, '7', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG80746 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'X', 00H
	DB	'T', 00H, 'D', 00H, 'L', 00H, 'G', 00H, 'C', 00H, 'T', 00H, 'L'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG154476 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'w', 00H, 'r', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'a', 00H
	DB	'g', 00H, 'e', 00H, ' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']'
	DB	00H, 00H, 00H
	ORG $+2
$SG80748 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'P', 00H, 'O', 00H
	DB	'O', 00H, 'L', 00H, 'E', 00H, 'R', 00H, 'S', 00H, 'T', 00H, 'A'
	DB	00H, 'T', 00H, 'U', 00H, 'S', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '2', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG154477 DB	'ImageWriteOut', 00H
	ORG $+2
$SG154478 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80750 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'W', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H, 'B', 00H, ')', 00H
	DB	00H, 00H
$SG80752 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'A', 00H
	DB	'S', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E'
	DB	00H, 'M', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'2', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80754 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'D', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80756 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'K', 00H, 'E', 00H
	DB	'Y', 00H, 'T', 00H, 'O', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80758 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'R', 00H, 'T', 00H, 'O', 00H, 'I', 00H, 'T', 00H, 'E', 00H, 'M'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '2', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80760 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '3', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80762 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'F', 00H, 'O', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '3', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80764 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'O', 00H, 'T', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80766 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'O', 00H, 'T', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80768 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'G', 00H, 'I'
	DB	00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '3', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80770 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'I', 00H, 'T', 00H, 'E'
	DB	00H, 'M', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'3', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80772 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'O', 00H, 'B', 00H, 'J', 00H, 'E', 00H, 'C', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '3', 00H, 'D', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80774 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'P', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'G'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80776 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'M', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'F', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80778 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4'
	DB	00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80780 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'I', 00H, 'N', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H, '7'
	DB	00H, ')', 00H, 00H, 00H
$SG80782 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'W', 00H
	DB	'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '4', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80784 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'P', 00H
	DB	'Y', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'A', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '4', 00H, 'A', 00H, ')', 00H
	DB	00H, 00H
$SG80786 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'N', 00H
	DB	'C', 00H, 'E', 00H, 'L', 00H, 'J', 00H, 'O', 00H, 'U', 00H, 'R'
	DB	00H, 'N', 00H, 'A', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '4', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80788 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'I', 00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, '4', 00H, 'E', 00H, ')', 00H, 00H, 00H
$SG154603 DB	'ASCII', 00H
	ORG $+6
$SG80790 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, 'L', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'R', 00H
	DB	'E', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+4
$SG80792 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, 'L', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG80794 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'C', 00H, 'A', 00H
	DB	'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, '5', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80796 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'E', 00H, 'L', 00H
	DB	'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '5'
	DB	00H, '3', 00H, ')', 00H, 00H, 00H
$SG80798 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'S', 00H, 'E', 00H
	DB	'R', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'5', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80800 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'I', 00H, 'F', 00H, 'Y', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '5', 00H, '5', 00H, ')', 00H, 00H, 00H
$SG80802 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'N', 00H
	DB	'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N'
	DB	00H, 'U', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'7', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80804 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'Y', 00H
	DB	'L', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '7', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80806 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'Y', 00H
	DB	'L', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'0', 00H, '7', 00H, 'D', 00H, ')', 00H, 00H, 00H
$SG80808 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'I', 00H, 'S', 00H
	DB	'P', 00H, 'L', 00H, 'A', 00H, 'Y', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, '7', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80810 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '7', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80812 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '8', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80814 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'C', 00H
	DB	'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '1', 00H, ')', 00H
	DB	00H, 00H
$SG80816 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'D', 00H
	DB	'E', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG146354 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG80818 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'C', 00H
	DB	'A', 00H, 'L', 00H, 'C', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG146355 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG80820 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'H', 00H
	DB	'I', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '4', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG146357 DB	'outofmem', 00H
	ORG $+7
$SG80822 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'A', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '0', 00H, '8', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80824 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'A', 00H
	DB	'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80826 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'D', 00H, 'L', 00H, 'G', 00H, 'C', 00H, 'O', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H
	DB	'7', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG154556 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'p', 00H, 'i', 00H, 'x', 00H, 'e', 00H, 'l'
	DB	00H, ' ', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H
	DB	't', 00H, 00H, 00H
	ORG $+6
$SG80828 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'N', 00H
	DB	'C', 00H, 'P', 00H, 'A', 00H, 'I', 00H, 'N', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H, '8', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG154557 DB	'PixelBuffer_GenerateSDF', 00H
$SG154558 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80830 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG154560 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 's', 00H, 'o', 00H, 'u', 00H, 'r', 00H, 'c'
	DB	00H, 'e', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG80832 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG154561 DB	'PixelBuffer_GenerateSDF', 00H
$SG154562 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80834 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80836 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'L', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '3', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG146371 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG154564 DB	'i', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'i', 00H
	DB	'd', 00H, ' ', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'p', 00H, 'u'
	DB	00H, 't', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H
	DB	'e', 00H, 00H, 00H
	ORG $+6
$SG154565 DB	'PixelBuffer_GenerateSDF', 00H
$SG146373 DB	'unsupported', 00H
	ORG $+4
$SG154566 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80838 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80840 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80842 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'R', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '6', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG80844 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80846 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80848 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, '9', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG80850 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '0', 00H, 'A', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80852 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0', 00H
	DB	'A', 00H, 'C', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80854 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'X', 00H
	DB	'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D'
	DB	00H, 'B', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '0', 00H, 'A', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG80856 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H, 'I'
	DB	00H, 'C', 00H, 'E', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '0', 00H, 'F', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80858 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'P', 00H
	DB	'U', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '0'
	DB	00H, 'F', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80860 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'D', 00H, 'O', 00H, 'W', 00H, 'N', 00H, '_', 00H, 'O', 00H, 'R'
	DB	00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'F', 00H, 'I', 00H
	DB	'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '1', 00H, '0', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80862 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80864 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '0'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
$SG80866 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'A', 00H
	DB	'D', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG80868 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, 'D', 00H, 'O', 00H, 'W', 00H, 'N'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H
	DB	'4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80870 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '0', 00H, '5', 00H, ')', 00H
	DB	00H, 00H
$SG80872 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80874 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'D', 00H, 'E', 00H, 'A', 00H, 'D', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'0', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80876 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '_', 00H, 'O', 00H, 'R'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG154606 DB	'ASCII-EX', 00H
	ORG $+7
$SG80878 DB	'U', 00H, 'N', 00H, 'I', 00H, 'C', 00H, 'O', 00H, 'D', 00H
	DB	'E', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, 'F', 00H, 'F', 00H
	DB	'F', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80880 DB	'W', 00H, 'M', 00H, '_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80890 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'M', 00H
	DB	'M', 00H, 'A', 00H, 'N', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80882 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'T', 00H, 'A', 00H, 'R', 00H, 'T', 00H, 'C'
	DB	00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H
	DB	'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
$SG80884 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'C', 00H, 'O', 00H, 'M'
	DB	00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H, 'T', 00H, 'I', 00H
	DB	'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '0', 00H, 'E', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80886 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '_', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'C', 00H
	DB	'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I', 00H, 'T'
	DB	00H, 'I', 00H, 'O', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '0', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80888 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'D', 00H, 'I', 00H, 'A', 00H, 'L', 00H, 'O', 00H, 'G'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80892 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'Y', 00H, 'S', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80894 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'I', 00H, 'M', 00H
	DB	'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1'
	DB	00H, '1', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80896 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80898 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80900 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG80902 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'P', 00H, 'O'
	DB	00H, 'P', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '1', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80904 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '1', 00H, '1', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80906 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'O', 00H, 'T'
	DB	00H, 'I', 00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80908 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '1', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
$SG154716 DB	'ASCII', 00H
	ORG $+6
$SG146446 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG80910 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '0', 00H, ')', 00H
	DB	00H, 00H
$SG146447 DB	'r', 00H, 'e', 00H, 'q', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'm', 00H, 'p', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'q', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'm', 00H, 'p', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H, 00H
	ORG $+2
$SG80912 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'I', 00H, 'D', 00H, 'L', 00H, 'E', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '1', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG146449 DB	'outofmem', 00H
	ORG $+7
$SG80914 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'R', 00H, 'B', 00H, 'U', 00H, 'T', 00H, 'T', 00H, 'O'
	DB	00H, 'N', 00H, 'U', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80916 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'D', 00H, 'R', 00H, 'A', 00H, 'G', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG80918 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'G', 00H, 'E', 00H, 'T', 00H, 'O', 00H, 'B', 00H, 'J'
	DB	00H, 'E', 00H, 'C', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80920 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'I', 00H
	DB	'N', 00H, 'I', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U'
	DB	00H, 'P', 00H, 'O', 00H, 'P', 00H, 'U', 00H, 'P', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '1', 00H, '2', 00H, '5', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG80922 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'N', 00H
	DB	'U', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N'
	DB	00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'2', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80924 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80926 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'P', 00H, 'D', 00H
	DB	'A', 00H, 'T', 00H, 'E', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '1', 00H, '2', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG146463 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG80928 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'U', 00H, 'I', 00H, 'S', 00H, 'T', 00H, 'A'
	DB	00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'1', 00H, '2', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG146465 DB	'unsupported', 00H
	ORG $+4
$SG80930 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'S'
	DB	00H, 'G', 00H, 'B', 00H, 'O', 00H, 'X', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '1', 00H, '3', 00H, '2', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG80932 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'E', 00H, 'D'
	DB	00H, 'I', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'1', 00H, '3', 00H, '3', 00H, ')', 00H, 00H, 00H
$SG80934 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'L', 00H, 'I'
	DB	00H, 'S', 00H, 'T', 00H, 'B', 00H, 'O', 00H, 'X', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '1', 00H, '3', 00H, '4', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG80936 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'B', 00H, 'T'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80938 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'D', 00H, 'L'
	DB	00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H
	DB	'3', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80940 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'S', 00H, 'C'
	DB	00H, 'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'B', 00H, 'A', 00H
	DB	'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '1', 00H, '3'
	DB	00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80942 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'L', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'S', 00H, 'T'
	DB	00H, 'A', 00H, 'T', 00H, 'I', 00H, 'C', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '1', 00H, '3', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG80944 DB	'M', 00H, 'N', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'H', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '1', 00H, 'E', 00H, '1', 00H, ')', 00H
	DB	00H, 00H
$SG80952 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80946 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'M', 00H, 'O', 00H, 'V', 00H, 'E', 00H, '_'
	DB	00H, 'O', 00H, 'R', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'F', 00H, 'I', 00H, 'R', 00H, 'S', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80948 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80950 DB	'W', 00H, 'M', 00H, '_', 00H, 'L', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '2', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80954 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG146492 DB	'outofmem', 00H
	ORG $+7
$SG80956 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '5', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80958 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80960 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80962 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, '8', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80964 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80966 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'W', 00H, 'H', 00H, 'E', 00H, 'E', 00H, 'L'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H
	DB	'A', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80968 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG80970 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '0', 00H, 'C', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80972 DB	'W', 00H, 'M', 00H, '_', 00H, 'X', 00H, 'B', 00H, 'U', 00H
	DB	'T', 00H, 'T', 00H, 'O', 00H, 'N', 00H, 'D', 00H, 'B', 00H, 'L'
	DB	00H, 'C', 00H, 'L', 00H, 'K', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80974 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'H', 00H, 'W', 00H, 'H', 00H, 'E', 00H, 'E'
	DB	00H, 'L', 00H, '_', 00H, 'O', 00H, 'R', 00H, '_', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'0', 00H, 'E', 00H, ')', 00H, 00H, 00H
$SG80976 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'R', 00H
	DB	'E', 00H, 'N', 00H, 'T', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I'
	DB	00H, 'F', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG80978 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'O', 00H, 'O', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '1', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG80980 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'X', 00H, 'I', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'O'
	DB	00H, 'O', 00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG80982 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'E', 00H, 'X', 00H
	DB	'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '1', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
$SG80984 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '1', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG154712 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'i', 00H, 'n', 00H, 'i'
	DB	00H, 't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, 'p', 00H, 'a', 00H, 'r', 00H, 's', 00H, 'e', 00H, 'r', 00H
	DB	00H, 00H
	ORG $+6
$SG154713 DB	'GenerateGlyphFontFromFileData', 00H
	ORG $+2
$SG154714 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG80986 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'P', 00H
	DB	'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '1', 00H, '5', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG146524 DB	'outofmem', 00H
	ORG $+7
$SG80988 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'V', 00H
	DB	'I', 00H, 'N', 00H, 'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '1', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80990 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'W', 00H
	DB	'E', 00H, 'R', 00H, 'B', 00H, 'R', 00H, 'O', 00H, 'A', 00H, 'D'
	DB	00H, 'C', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '1', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG80992 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'V', 00H
	DB	'I', 00H, 'C', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N'
	DB	00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '1', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG154721 DB	'sdf_atlas_1.png', 00H
$SG80994 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'C', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H, '0', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG80996 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'D', 00H, 'E', 00H, 'S', 00H, 'T', 00H, 'R', 00H, 'O', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG80998 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'A', 00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81000 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'R', 00H, 'E', 00H, 'S', 00H, 'T', 00H, 'O', 00H, 'R', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81002 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'N', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '2', 00H, '2', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81004 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'M', 00H, 'A', 00H, 'X', 00H, 'I', 00H, 'M', 00H, 'I', 00H, 'Z'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'2', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81006 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'T', 00H, 'I', 00H, 'L', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '2', 00H, '2', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81008 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'C', 00H, 'A', 00H, 'S', 00H, 'C', 00H, 'A', 00H, 'D', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '2', 00H
	DB	'7', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81010 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'I', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'A', 00H, 'R', 00H, 'R'
	DB	00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '2', 00H, '8', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG81012 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'G', 00H, 'E', 00H, 'T', 00H, 'A', 00H, 'C', 00H, 'T', 00H, 'I'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '2', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG81014 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'S', 00H, 'E', 00H, 'T', 00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '3', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81016 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'E', 00H, 'R', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'M'
	DB	00H, 'O', 00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '3', 00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81018 DB	'W', 00H, 'M', 00H, '_', 00H, 'E', 00H, 'X', 00H, 'I', 00H
	DB	'T', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'M', 00H, 'O'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '3', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG81020 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'O', 00H
	DB	'P', 00H, 'F', 00H, 'I', 00H, 'L', 00H, 'E', 00H, 'S', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '3', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG81022 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'D', 00H, 'I', 00H
	DB	'R', 00H, 'E', 00H, 'F', 00H, 'R', 00H, 'E', 00H, 'S', 00H, 'H'
	DB	00H, 'M', 00H, 'E', 00H, 'N', 00H, 'U', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '3', 00H, '4', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG81024 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '2'
	DB	00H, '3', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81026 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'I', 00H, 'N', 00H, 'R', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '2', 00H, '3', 00H, '9', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81028 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'E', 00H, 'V'
	DB	00H, 'I', 00H, 'C', 00H, 'E', 00H, 'O', 00H, 'U', 00H, 'T', 00H
	DB	'O', 00H, 'F', 00H, 'R', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '2', 00H, '3', 00H, 'A', 00H
	DB	')', 00H, 00H, 00H
	ORG $+4
$SG81030 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'O', 00H, 'U', 00H
	DB	'C', 00H, 'H', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2'
	DB	00H, '4', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81032 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U'
	DB	00H, 'P', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG81034 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D'
	DB	00H, 'O', 00H, 'W', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81036 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'P', 00H
	DB	'O', 00H, 'I', 00H, 'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U'
	DB	00H, 'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'4', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81038 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U', 00H, 'P', 00H, 'D'
	DB	00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, '5', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81040 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'4', 00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81042 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, '7', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG81044 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T'
	DB	00H, 'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, '9', 00H, ')', 00H, 00H, 00H
$SG81046 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'L', 00H, 'E', 00H, 'A'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG81048 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'T'
	DB	00H, 'I', 00H, 'V', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'B', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG81050 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'C', 00H, 'A', 00H, 'P'
	DB	00H, 'T', 00H, 'U', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'C', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG81052 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'O', 00H, 'U', 00H
	DB	'C', 00H, 'H', 00H, 'H', 00H, 'I', 00H, 'T', 00H, 'T', 00H, 'E'
	DB	00H, 'S', 00H, 'T', 00H, 'I', 00H, 'N', 00H, 'G', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '4', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG81054 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'W', 00H, 'H', 00H, 'E'
	DB	00H, 'E', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, '4', 00H, 'E', 00H, ')', 00H, 00H, 00H
$SG81056 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'H', 00H, 'W', 00H, 'H'
	DB	00H, 'E', 00H, 'E', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81058 DB	'D', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'H', 00H, 'I', 00H, 'T'
	DB	00H, 'T', 00H, 'E', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '5', 00H, '0', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG81060 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'T', 00H, 'O', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '2', 00H, '5', 00H, '1', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG81062 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'A', 00H, 'W', 00H, 'A', 00H
	DB	'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '5'
	DB	00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81066 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, 'C', 00H, 'O', 00H, 'N'
	DB	00H, 'T', 00H, 'E', 00H, 'X', 00H, 'T', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '2', 00H, '8', 00H, '1', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG81064 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'O', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'U'
	DB	00H, 'T', 00H, 'E', 00H, 'D', 00H, 'R', 00H, 'E', 00H, 'L', 00H
	DB	'E', 00H, 'A', 00H, 'S', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '5', 00H, '3', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG81068 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'N', 00H, 'O', 00H, 'T', 00H, 'I', 00H, 'F', 00H, 'Y'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81070 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'O', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'O'
	DB	00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81072 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S'
	DB	00H, 'I', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'F', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '2', 00H, '8', 00H, '4', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81074 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'C', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H
	DB	'5', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81076 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'R', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '2', 00H, '8', 00H, '6', 00H, ')', 00H
	DB	00H, 00H
$SG81078 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'Q', 00H, 'U', 00H, 'E', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'8', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81080 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'D', 00H, 'O', 00H, 'W'
	DB	00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'9', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81082 DB	'W', 00H, 'M', 00H, '_', 00H, 'I', 00H, 'M', 00H, 'E', 00H
	DB	'_', 00H, 'K', 00H, 'E', 00H, 'Y', 00H, 'U', 00H, 'P', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, '9', 00H, '1', 00H
	DB	')', 00H, 00H, 00H
	ORG $+6
$SG81084 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'H', 00H, 'O', 00H, 'V', 00H, 'E', 00H, 'R'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'A', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81086 DB	'W', 00H, 'M', 00H, '_', 00H, 'M', 00H, 'O', 00H, 'U', 00H
	DB	'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'A', 00H, 'V', 00H, 'E'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'A', 00H
	DB	'3', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81088 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'H', 00H, 'O', 00H, 'V'
	DB	00H, 'E', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'A', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG81090 DB	'W', 00H, 'M', 00H, '_', 00H, 'N', 00H, 'C', 00H, 'M', 00H
	DB	'O', 00H, 'U', 00H, 'S', 00H, 'E', 00H, 'L', 00H, 'E', 00H, 'A'
	DB	00H, 'V', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'A', 00H, '2', 00H, ')', 00H, 00H, 00H
$SG81092 DB	'W', 00H, 'M', 00H, '_', 00H, 'W', 00H, 'T', 00H, 'S', 00H
	DB	'S', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'I', 00H, 'O', 00H, 'N'
	DB	00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H
	DB	'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'B'
	DB	00H, '1', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81094 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'A', 00H, 'B', 00H
	DB	'L', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'F', 00H, 'I', 00H, 'R'
	DB	00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'2', 00H, 'c', 00H, '0', 00H, ')', 00H, 00H, 00H
$SG81096 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'A', 00H, 'B', 00H
	DB	'L', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'L', 00H, 'A', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H
	DB	'd', 00H, 'f', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81098 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H
	DB	'0', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81100 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '_', 00H, 'B', 00H, 'E', 00H, 'F', 00H, 'O', 00H, 'R', 00H
	DB	'E', 00H, 'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H
	DB	'2', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81104 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'D', 00H, 'P', 00H, 'I', 00H, 'S', 00H, 'C', 00H, 'A', 00H, 'L'
	DB	00H, 'E', 00H, 'D', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H, '4'
	DB	00H, ')', 00H, 00H, 00H
$SG81102 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'P', 00H, 'I', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D'
	DB	00H, '_', 00H, 'A', 00H, 'F', 00H, 'T', 00H, 'E', 00H, 'R', 00H
	DB	'P', 00H, 'A', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'T', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '2', 00H, 'E', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
	ORG $+4
$SG81106 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'U', 00H, 'T', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81108 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'O', 00H, 'P', 00H
	DB	'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0'
	DB	00H, '1', 00H, ')', 00H, 00H, 00H
$SG81110 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'S', 00H
	DB	'T', 00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '0', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81112 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'E', 00H
	DB	'A', 00H, 'R', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '0', 00H, '3', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81114 DB	'W', 00H, 'M', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'D', 00H
	DB	'O', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0'
	DB	00H, '4', 00H, ')', 00H, 00H, 00H
$SG81116 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'N', 00H
	DB	'D', 00H, 'E', 00H, 'R', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M'
	DB	00H, 'A', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '0', 00H, '5', 00H, ')', 00H, 00H, 00H
$SG81118 DB	'W', 00H, 'M', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'N', 00H
	DB	'D', 00H, 'E', 00H, 'R', 00H, 'A', 00H, 'L', 00H, 'L', 00H, 'F'
	DB	00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A', 00H, 'T', 00H, 'S', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '6'
	DB	00H, ')', 00H, 00H, 00H
$SG81120 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, 'R', 00H, 'O', 00H, 'Y', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, '7'
	DB	00H, ')', 00H, 00H, 00H
$SG81122 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'R', 00H, 'A', 00H
	DB	'W', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B', 00H, 'O'
	DB	00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81124 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B'
	DB	00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '0', 00H, '9', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG81126 DB	'W', 00H, 'M', 00H, '_', 00H, 'V', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'A'
	DB	00H, ')', 00H, 00H, 00H
$SG81128 DB	'W', 00H, 'M', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'P', 00H, 'B', 00H, 'O'
	DB	00H, 'A', 00H, 'R', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, 'B', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81130 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'S', 00H, 'K', 00H
	DB	'C', 00H, 'B', 00H, 'F', 00H, 'O', 00H, 'R', 00H, 'M', 00H, 'A'
	DB	00H, 'T', 00H, 'N', 00H, 'A', 00H, 'M', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'C', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG81132 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'H', 00H, 'A', 00H
	DB	'N', 00H, 'G', 00H, 'E', 00H, 'C', 00H, 'B', 00H, 'C', 00H, 'H'
	DB	00H, 'A', 00H, 'I', 00H, 'N', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '0', 00H, 'D', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG146670 DB	'bad code lengths', 00H
	ORG $+7
$SG81134 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'S', 00H, 'C', 00H
	DB	'R', 00H, 'O', 00H, 'L', 00H, 'L', 00H, 'C', 00H, 'L', 00H, 'I'
	DB	00H, 'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'E'
	DB	00H, ')', 00H, 00H, 00H
$SG81136 DB	'W', 00H, 'M', 00H, '_', 00H, 'Q', 00H, 'U', 00H, 'E', 00H
	DB	'R', 00H, 'Y', 00H, 'N', 00H, 'E', 00H, 'W', 00H, 'P', 00H, 'A'
	DB	00H, 'L', 00H, 'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '0', 00H, 'F', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG81138 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'I', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1'
	DB	00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81140 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'L', 00H
	DB	'E', 00H, 'T', 00H, 'T', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '1', 00H, '1', 00H, ')', 00H, 00H
	DB	00H
	ORG $+4
$SG81142 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'O', 00H, 'T', 00H
	DB	'K', 00H, 'E', 00H, 'Y', 00H, '(', 00H, '0', 00H, 'x', 00H, '0'
	DB	00H, '3', 00H, '1', 00H, '2', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81144 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3'
	DB	00H, '1', 00H, '7', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81146 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'R', 00H, 'I', 00H
	DB	'N', 00H, 'T', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'E', 00H, 'N'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'1', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81148 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'P', 00H, 'P', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'M', 00H, 'A', 00H, 'N', 00H, 'D'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H
	DB	'9', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81150 DB	'W', 00H, 'M', 00H, '_', 00H, 'T', 00H, 'H', 00H, 'E', 00H
	DB	'M', 00H, 'E', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '1', 00H, 'A', 00H, ')', 00H, 00H, 00H
$SG81152 DB	'W', 00H, 'M', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'I', 00H
	DB	'P', 00H, 'B', 00H, 'O', 00H, 'A', 00H, 'R', 00H, 'D', 00H, 'U'
	DB	00H, 'P', 00H, 'D', 00H, 'A', 00H, 'T', 00H, 'E', 00H, '(', 00H
	DB	'0', 00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H
	ORG $+2
$SG81154 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'C', 00H, 'O', 00H, 'M', 00H, 'P', 00H, 'O', 00H, 'S', 00H, 'I'
	DB	00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'E', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG81168 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'N', 00H
	DB	'D', 00H, 'H', 00H, 'E', 00H, 'L', 00H, 'D', 00H, 'F', 00H, 'I'
	DB	00H, 'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H
	DB	'0', 00H, '3', 00H, '5', 00H, '8', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81156 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'N', 00H, 'C', 00H, 'R', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'E'
	DB	00H, 'R', 00H, 'I', 00H, 'N', 00H, 'G', 00H, 'C', 00H, 'H', 00H
	DB	'A', 00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '1', 00H, 'F', 00H, ')', 00H
	DB	00H, 00H
	ORG $+6
$SG81170 DB	'W', 00H, 'M', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'N', 00H
	DB	'D', 00H, 'H', 00H, 'E', 00H, 'L', 00H, 'D', 00H, 'L', 00H, 'A'
	DB	00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H
	DB	'3', 00H, '5', 00H, 'F', 00H, ')', 00H, 00H, 00H
$SG81172 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'F', 00H, 'X', 00H
	DB	'F', 00H, 'I', 00H, 'R', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0'
	DB	00H, 'x', 00H, '0', 00H, '3', 00H, '6', 00H, '0', 00H, ')', 00H
	DB	00H, 00H
$SG81158 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'C', 00H, 'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'I', 00H, 'Z'
	DB	00H, 'A', 00H, 'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, 'C', 00H
	DB	'O', 00H, 'L', 00H, 'O', 00H, 'R', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'N', 00H, 'G', 00H, 'E', 00H, 'D', 00H, '(', 00H, '0', 00H
	DB	'x', 00H, '0', 00H, '3', 00H, '2', 00H, '0', 00H, ')', 00H, 00H
	DB	00H
	ORG $+2
$SG81160 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 'O', 00H, 'W', 00H, 'M'
	DB	00H, 'A', 00H, 'X', 00H, 'I', 00H, 'M', 00H, 'I', 00H, 'Z', 00H
	DB	'E', 00H, 'D', 00H, 'C', 00H, 'H', 00H, 'A', 00H, 'N', 00H, 'G'
	DB	00H, 'E', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'2', 00H, '1', 00H, ')', 00H, 00H, 00H
$SG81174 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'F', 00H, 'X', 00H
	DB	'L', 00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, '0', 00H, 'x'
	DB	00H, '0', 00H, '3', 00H, '7', 00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81162 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'S', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'C', 00H, 'O'
	DB	00H, 'N', 00H, 'I', 00H, 'C', 00H, 'T', 00H, 'H', 00H, 'U', 00H
	DB	'M', 00H, 'B', 00H, 'N', 00H, 'A', 00H, 'I', 00H, 'L', 00H, '('
	DB	00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '2', 00H, '3', 00H
	DB	')', 00H, 00H, 00H
$SG81317 DB	'%', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG81164 DB	'W', 00H, 'M', 00H, '_', 00H, 'D', 00H, 'W', 00H, 'M', 00H
	DB	'S', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'C', 00H, 'O'
	DB	00H, 'N', 00H, 'I', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'V', 00H
	DB	'E', 00H, 'P', 00H, 'R', 00H, 'E', 00H, 'V', 00H, 'I', 00H, 'E'
	DB	00H, 'W', 00H, 'B', 00H, 'I', 00H, 'T', 00H, 'M', 00H, 'A', 00H
	DB	'P', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '2'
	DB	00H, '6', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81166 DB	'W', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H
	DB	'T', 00H, 'I', 00H, 'T', 00H, 'L', 00H, 'E', 00H, 'B', 00H, 'A'
	DB	00H, 'R', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, 'E', 00H
	DB	'X', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '3'
	DB	00H, 'F', 00H, ')', 00H, 00H, 00H
	ORG $+6
$SG81176 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'N', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'F', 00H, 'I', 00H, 'R', 00H, 'S'
	DB	00H, 'T', 00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H
	DB	'8', 00H, '0', 00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81181 DB	'U', 00H, 'N', 00H, 'K', 00H, 'N', 00H, 'O', 00H, 'W', 00H
	DB	'N', 00H, 00H, 00H
$SG81206 DB	'STATIC_ALLOCATOR', 00H
	ORG $+7
?stbi__bmask@@3QBIB DD 00H				; stbi__bmask
	DD	01H
	DD	03H
	DD	07H
	DD	0fH
	DD	01fH
	DD	03fH
	DD	07fH
	DD	0ffH
	DD	01ffH
	DD	03ffH
	DD	07ffH
	DD	0fffH
	DD	01fffH
	DD	03fffH
	DD	07fffH
	DD	0ffffH
	ORG $+4
$SG81178 DB	'W', 00H, 'M', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'N', 00H
	DB	'W', 00H, 'I', 00H, 'N', 00H, 'L', 00H, 'A', 00H, 'S', 00H, 'T'
	DB	00H, '(', 00H, '0', 00H, 'x', 00H, '0', 00H, '3', 00H, '8', 00H
	DB	'F', 00H, ')', 00H, 00H, 00H
	ORG $+4
$SG81180 DB	'W', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'P', 00H, 'P', 00H
	DB	'(', 00H, '0', 00H, 'x', 00H, '8', 00H, '0', 00H, '0', 00H, '0'
	DB	00H, ')', 00H, 00H, 00H
	ORG $+2
$SG81207 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG146725 DB	'W', 00H, ':', 00H, '\', 00H, 'c', 00H, 'p', 00H, 'p', 00H
	DB	'\', 00H, 'v', 00H, 'o', 00H, 'i', 00H, 'd', 00H, '\', 00H, 'v'
	DB	00H, 'e', 00H, 'n', 00H, 'd', 00H, 'o', 00H, 'r', 00H, '\', 00H
	DB	's', 00H, 't', 00H, 'b', 00H, '\', 00H, 's', 00H, 't', 00H, 'b'
	DB	00H, '_', 00H, 'i', 00H, 'm', 00H, 'a', 00H, 'g', 00H, 'e', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H
	ORG $+2
$SG81211 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG146726 DB	'(', 00H, '(', 00H, '(', 00H, 'j', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, ' ', 00H
	DB	'>', 00H, '>', 00H, ' ', 00H, '(', 00H, '3', 00H, '2', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'h', 00H, '-', 00H, '>', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 's', 00H, 't', 00H
	DB	'b', 00H, 'i', 00H, '_', 00H, '_', 00H, 'b', 00H, 'm', 00H, 'a'
	DB	00H, 's', 00H, 'k', 00H, '[', 00H, 'h', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '[', 00H, 'c', 00H, ']'
	DB	00H, ']', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'h', 00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '[', 00H, 'c', 00H, ']', 00H, 00H, 00H
$SG155151 DB	'assets', 00H
	ORG $+5
?stbi__jbias@@3QBHB DD 00H				; stbi__jbias
	DD	0ffffffffH
	DD	0fffffffdH
	DD	0fffffff9H
	DD	0fffffff1H
	DD	0ffffffe1H
	DD	0ffffffc1H
	DD	0ffffff81H
	DD	0ffffff01H
	DD	0fffffe01H
	DD	0fffffc01H
	DD	0fffff801H
	DD	0fffff001H
	DD	0ffffe001H
	DD	0ffffc001H
	DD	0ffff8001H
$SG81205 DB	's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 't', 00H
	DB	'o', 00H, 'o', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'g', 00H, 00H
	DB	00H
	ORG $+6
?stbi__jpeg_dezigzag@@3QBEB DB 00H			; stbi__jpeg_dezigzag
	DB	01H
	DB	08H
	DB	010H
	DB	09H
	DB	02H
	DB	03H
	DB	0aH
	DB	011H
	DB	018H
	DB	020H
	DB	019H
	DB	012H
	DB	0bH
	DB	04H
	DB	05H
	DB	0cH
	DB	013H
	DB	01aH
	DB	021H
	DB	028H
	DB	030H
	DB	029H
	DB	022H
	DB	01bH
	DB	014H
	DB	0dH
	DB	06H
	DB	07H
	DB	0eH
	DB	015H
	DB	01cH
	DB	023H
	DB	02aH
	DB	031H
	DB	038H
	DB	039H
	DB	032H
	DB	02bH
	DB	024H
	DB	01dH
	DB	016H
	DB	0fH
	DB	017H
	DB	01eH
	DB	025H
	DB	02cH
	DB	033H
	DB	03aH
	DB	03bH
	DB	034H
	DB	02dH
	DB	026H
	DB	01fH
	DB	027H
	DB	02eH
	DB	035H
	DB	03cH
	DB	03dH
	DB	036H
	DB	02fH
	DB	037H
	DB	03eH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	DB	03fH
	ORG $+1
$SG81212 DB	'not supported for static allocations', 00H
	ORG $+3
$SG81213 DB	'!"not supported for static allocations"', 00H
$SG81214 DB	'STATIC_ALLOCATOR', 00H
	ORG $+7
$SG81215 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG81231 DB	'W:\cpp\void\dr/cator.c', 00H
	ORG $+1
$SG146774 DB	'bad huffman code', 00H
	ORG $+7
$SG146779 DB	'bad huffman code', 00H
	ORG $+7
$SG81254 DB	'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG81256 DB	'D', 00H, 'E', 00H, 'B', 00H, 'U', 00H, 'G', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG81258 DB	'I', 00H, 'N', 00H, 'F', 00H, 'O', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG146795 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG81260 DB	'W', 00H, 'A', 00H, 'R', 00H, 'N', 00H, 'I', 00H, 'N', 00H
	DB	'G', 00H, ':', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG81262 DB	'E', 00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG81264 DB	'F', 00H, 'A', 00H, 'T', 00H, 'A', 00H, 'L', 00H, ':', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG146801 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG81266 DB	'V', 00H, 'E', 00H, 'R', 00H, 'B', 00H, 'O', 00H, 'S', 00H
	DB	'E', 00H, ':', 00H, ' ', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG81268 DB	'P', 00H, 'E', 00H, 'D', 00H, 'A', 00H, 'N', 00H, 'T', 00H
	DB	'I', 00H, 'C', 00H, ':', 00H, ' ', 00H, 00H, 00H
	ORG $+2
$SG81269 DB	'I', 00H, 'N', 00H, 'V', 00H, 'A', 00H, 'L', 00H, 'I', 00H
	DB	'D', 00H, '_', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E'
	DB	00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'A', 00H
	DB	'G', 00H, 'E', 00H, 00H, 00H
	ORG $+4
$SG81286 DB	'K', 00H, 'L', 00H, 'A', 00H, 'R', 00H, 'K', 00H, '_', 00H
	DB	'A', 00H, 'P', 00H, 'P', 00H, ' ', 00H, '%', 00H, 's', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	'(', 00H, ')', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']'
	DB	00H, ' ', 00H, '%', 00H, 's', 00H, 0aH, 00H, 00H, 00H
	ORG $+2
$SG81300 DB	'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, '_', 00H
	DB	'B', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, ' ', 00H, '['
	DB	00H, '%', 00H, 's', 00H, ']', 00H, ' ', 00H, '%', 00H, 'f', 00H
	DB	'(', 00H, 'm', 00H, 's', 00H, ')', 00H, 00H, 00H
$SG146838 DB	'can''t merge dc and ac', 00H
	ORG $+2
$SG146846 DB	'bad huffman code', 00H
	ORG $+7
$SG146859 DB	'bad huffman code', 00H
	ORG $+7
$SG146866 DB	'bad huffman code', 00H
	ORG $+7
$SG155130 DB	'm', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'l', 00H, ' ', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H, 'n', 00H, 'o'
	DB	00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	'd', 00H, 00H, 00H
	ORG $+6
$SG155131 DB	'LoadModel', 00H
	ORG $+6
$SG155132 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155140 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155141 DB	'LoadModel', 00H
	ORG $+6
$SG155142 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155148 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155149 DB	'LoadModel', 00H
	ORG $+6
$SG155150 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155153 DB	'l', 00H, 'i', 00H, 'b', 00H, 'r', 00H, 'a', 00H, 'r', 00H
	DB	'y', 00H, ' ', 00H, '[', 00H, '%', 00H, 's', 00H, ']', 00H, ' '
	DB	00H, 'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'f', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 'd', 00H, 00H, 00H
	ORG $+2
$SG155154 DB	'LoadModel', 00H
	ORG $+6
$SG155155 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
$SG155441 DB	'ASCII', 00H
	ORG $+6
$SG155164 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155165 DB	'LoadModel', 00H
	ORG $+6
$SG155166 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155174 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155175 DB	'LoadModel', 00H
	ORG $+6
$SG155176 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155194 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ','
	DB	00H, ' ', 00H, '(', 00H, 'D', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'a'
	DB	00H, 'n', 00H, ' ', 00H, '<', 00H, 'd', 00H, '>', 00H, '?', 00H
	DB	')', 00H, 00H, 00H
	ORG $+2
$SG155195 DB	'LoadModel', 00H
	ORG $+6
$SG155196 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+12
$SG155205 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'I', 00H, 'n', 00H, 'v', 00H, 'a', 00H, 'l'
	DB	00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, ','
	DB	00H, ' ', 00H, '(', 00H, 'D', 00H, 'i', 00H, 'd', 00H, ' ', 00H
	DB	'Y', 00H, 'o', 00H, 'u', 00H, ' ', 00H, 'M', 00H, 'e', 00H, 'a'
	DB	00H, 'n', 00H, ' ', 00H, '<', 00H, 'N', 00H, 's', 00H, '>', 00H
	DB	' ', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '<', 00H, 'N', 00H, 'i'
	DB	00H, '>', 00H, '?', 00H, ')', 00H, 00H, 00H
$SG155206 DB	'LoadModel', 00H
	ORG $+6
$SG155207 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155215 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155216 DB	'Invalid Statement, (Did You Mean <Ka> or <Kd> or <Ks> or'
	DB	' <Ke>?)', 00H
$SG155217 DB	'! "Invalid Statement, (Did You Mean <Ka> or <Kd> or <Ks>'
	DB	' or <Ke>?)"', 00H
	ORG $+4
$SG155218 DB	'LoadModel', 00H
	ORG $+6
$SG155219 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155220 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155224 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155221 DB	'Invalid Statement, Did You Mean (<Ns> or <Ni> or <Ka> or'
	DB	' <Kd> or <Ks> or <Ke>?)', 00H
$SG155222 DB	'! "Invalid Statement, Did You Mean (<Ns> or <Ni> or <Ka>'
	DB	' or <Kd> or <Ks> or <Ke>?)"', 00H
	ORG $+4
$SG155223 DB	'LoadModel', 00H
	ORG $+6
$SG155237 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155238 DB	'Invalid Statement, Did You Mean <map_d> or <map_Kd> or <'
	DB	'map_Ke> or <map_Bump>?', 00H
	ORG $+1
$SG155239 DB	'! "Invalid Statement, Did You Mean <map_d> or <map_Kd> o'
	DB	'r <map_Ke> or <map_Bump>?"', 00H
	ORG $+5
$SG155240 DB	'LoadModel', 00H
	ORG $+6
$SG155241 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155244 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155248 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155245 DB	'Invalid Statement, Did You Mean <newmtl> or <illum> or <'
	DB	'map_d> or <map_Kd> or <map_Ke> or <map_Bump>?', 00H
	ORG $+2
$SG155256 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155246 DB	'! "Invalid Statement, Did You Mean <newmtl> or <illum> o'
	DB	'r <map_d> or <map_Kd> or <map_Ke> or <map_Bump>?"', 00H
	ORG $+6
$SG155247 DB	'LoadModel', 00H
	ORG $+6
$SG155254 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155255 DB	'LoadModel', 00H
	ORG $+6
$SG155264 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155262 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155263 DB	'LoadModel', 00H
	ORG $+6
$SG155274 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155272 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155273 DB	'LoadModel', 00H
	ORG $+6
$SG155282 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155280 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155281 DB	'LoadModel', 00H
	ORG $+6
$SG155290 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155288 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155289 DB	'LoadModel', 00H
	ORG $+6
$SG155298 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155296 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155297 DB	'LoadModel', 00H
	ORG $+6
$SG155307 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155305 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155306 DB	'LoadModel', 00H
	ORG $+6
$SG155309 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 's', 00H
	DB	'''', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG155310 DB	'LoadModel', 00H
	ORG $+6
$SG155311 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155315 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '''', 00H, 'f', 00H
	DB	'''', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H, 00H
	ORG $+2
$SG155316 DB	'LoadModel', 00H
	ORG $+6
$SG155317 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155331 DB	'W:\cpp\void\detroit\detroit-asset.c', 00H
	ORG $+4
$SG155329 DB	'%', 00H, 's', 00H, '(', 00H, '%', 00H, 'i', 00H, ')', 00H
	DB	':', 00H, ' ', 00H, 'E', 00H, 'x', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, 'e', 00H, 'd', 00H, ' ', 00H, 'L', 00H, 'i', 00H
	DB	'n', 00H, 'e', 00H, ' ', 00H, 'E', 00H, 'n', 00H, 'd', 00H, 'i'
	DB	00H, 'n', 00H, 'g', 00H, ',', 00H, ' ', 00H, 'G', 00H, 'o', 00H
	DB	't', 00H, ' ', 00H, '%', 00H, 'c', 00H, ' ', 00H, 'I', 00H, 'n'
	DB	00H, 's', 00H, 't', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ',', 00H
	DB	' ', 00H, 'I', 00H, 's', 00H, ' ', 00H, 'T', 00H, 'h', 00H, 'i'
	DB	00H, 's', 00H, ' ', 00H, 'A', 00H, ' ', 00H, 'V', 00H, 'a', 00H
	DB	'l', 00H, 'i', 00H, 'd', 00H, ' ', 00H, 'S', 00H, 't', 00H, 'a'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	'?', 00H, 00H, 00H
	ORG $+6
$SG155330 DB	'LoadModel', 00H
	ORG $+6
$SG155360 DB	'%s\%s.dll', 00H
	ORG $+6
$SG155363 DB	'%s\%s.exe', 00H
	ORG $+6
$SG155364 DB	'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'l', 00H, 'o', 00H, 'a'
	DB	00H, 'd', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H
	ORG $+6
$SG155365 DB	'DetroitApp_LoadModule', 00H
	ORG $+2
$SG155366 DB	'W:\cpp\void\detroit\detroit-app.c', 00H
	ORG $+6
$SG155370 DB	'MODULE_UPDATE', 00H
	ORG $+2
$SG155371 DB	'm', 00H, 'i', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H
	DB	'g', 00H, ' ', 00H, '''', 00H, 'M', 00H, 'O', 00H, 'D', 00H, 'U'
	DB	00H, 'L', 00H, 'E', 00H, '_', 00H, 'U', 00H, 'P', 00H, 'D', 00H
	DB	'A', 00H, 'T', 00H, 'E', 00H, '''', 00H, ' ', 00H, 'e', 00H, 'x'
	DB	00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, ' ', 00H, 'f', 00H
	DB	'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, 'm', 00H, 'o', 00H, 'd'
	DB	00H, 'u', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '%', 00H, 's', 00H
	DB	00H, 00H
	ORG $+4
$SG155372 DB	'DetroitApp_LoadModule', 00H
	ORG $+2
$SG155373 DB	'W:\cpp\void\detroit\detroit-app.c', 00H
	ORG $+6
$SG155425 DB	'user32.dll', 00H
	ORG $+5
$SG155428 DB	'SetProcessDPIAwarenessContext', 00H
	ORG $+2
$SG155430 DB	'SetProcessDPIAware', 00H
	ORG $+5
$SG155437 DB	'DetroitApp_Init', 00H
$SG155438 DB	'W:\cpp\void\detroit\detroit-app.c', 00H
	ORG $+6
$SG155436 DB	'C', 00H, 'o', 00H, 'n', 00H, 'v', 00H, 'e', 00H, 'r', 00H
	DB	't', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, 'T', 00H, 'o', 00H, 'F', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'r', 00H, '(', 00H, ')', 00H, ' ', 00H, 'F', 00H, 'A', 00H, 'I'
	DB	00H, 'L', 00H, 'E', 00H, ' ', 00H, '[', 00H, '%', 00H, 's', 00H
	DB	']', 00H, 00H, 00H
	ORG $+4
$SG155440 DB	'C:\Windows\Fonts\CascadiaMono.ttf', 00H
	ORG $+6
$SG155544 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155545 DB	'lhs.len == rhs.len', 00H
	ORG $+5
$SG155546 DB	'vec_sub', 00H
$SG155547 DB	'W:\cpp\void\dr-ai\dr-vec.h', 00H
	ORG $+5
$SG155568 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155569 DB	'lhs.len == rhs.len', 00H
	ORG $+5
$SG155570 DB	'vec_add', 00H
$SG155571 DB	'W:\cpp\void\dr-ai\dr-vec.h', 00H
	ORG $+5
$SG155592 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155593 DB	'lhs.len == rhs.len', 00H
	ORG $+5
$SG155594 DB	'vec_mul', 00H
$SG155595 DB	'W:\cpp\void\dr-ai\dr-vec.h', 00H
	ORG $+5
$SG155607 DB	'N', 00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H
	DB	'S', 00H, 'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H
	ORG $+2
$SG155608 DB	'lhs.len == rhs.len', 00H
	ORG $+5
$SG155609 DB	'vec_dot', 00H
$SG155610 DB	'W:\cpp\void\dr-ai\dr-vec.h', 00H
	ORG $+5
?COLOR_VOID@@3Urx_f32x4@@B DD 000000000r	; 0	; COLOR_VOID
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
?COLOR_GRAY@@3Urx_f32x4@@B DD 03f000000r	; 0.5	; COLOR_GRAY
	DD	03f000000r			; 0.5
	DD	03f000000r			; 0.5
	DD	03f800000r			; 1
?COLOR_BLUE@@3Urx_f32x4@@B DD 000000000r	; 0	; COLOR_BLUE
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	03f800000r			; 1
?COLOR_GREEN@@3Urx_f32x4@@B DD 000000000r	; 0	; COLOR_GREEN
	DD	03f800000r			; 1
	DD	000000000r			; 0
	DD	03f800000r			; 1
?COLOR_RED@@3Urx_f32x4@@B DD 03f800000r		; 1	; COLOR_RED
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	03f800000r			; 1
?RECT_I32_FULL@@3UDETROIT_RECT_I32@@B DD 00H		; RECT_I32_FULL
	DD	00H
	DD	0ffffffffH
	DD	0ffffffffH
?STANDARD_BASIS_X@@3Uf32x3@@B DD 03f800000r	; 1	; STANDARD_BASIS_X
	DD	000000000r			; 0
	DD	000000000r			; 0
	ORG $+4
?STANDARD_BASIS_Y@@3Uf32x3@@B DD 000000000r	; 0	; STANDARD_BASIS_Y
	DD	03f800000r			; 1
	DD	000000000r			; 0
	ORG $+4
?STANDARD_BASIS_Z@@3Uf32x3@@B DD 000000000r	; 0	; STANDARD_BASIS_Z
	DD	000000000r			; 0
	DD	03f800000r			; 1
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnwprintf_l
PUBLIC	_vsnwprintf
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	_vsprintf_s_l
PUBLIC	vsprintf_s
PUBLIC	sprintf
PUBLIC	??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z	; _TRACE_BLOCK::_TRACE_BLOCK
PUBLIC	??1_TRACE_BLOCK@@QEAA@XZ			; _TRACE_BLOCK::~_TRACE_BLOCK
PUBLIC	??Bstr32@@QEAAPEADXZ				; str32::operator char *
PUBLIC	??Bstr32@@QEAA_JXZ				; str32::operator __int64
PUBLIC	??Bstr32@@QEAA_KXZ				; str32::operator unsigned __int64
PUBLIC	??Bstr32@@QEAANXZ				; str32::operator double
PUBLIC	??Bstr32@@QEAAMXZ				; str32::operator float
PUBLIC	??Bstr32@@QEAAIXZ				; str32::operator unsigned int
PUBLIC	??Bstr32@@QEAAHXZ				; str32::operator int
PUBLIC	??7str32@@QEAAHXZ				; str32::operator!
PUBLIC	WinMain
PUBLIC	?ID3D11_WINDOW_MessageFiberRoutine@@YAXPEAX@Z	; ID3D11_WINDOW_MessageFiberRoutine
PUBLIC	stbtt_BakeFontBitmap
PUBLIC	stbtt_GetBakedQuad
PUBLIC	stbtt_GetScaledFontVMetrics
PUBLIC	stbtt_PackBegin
PUBLIC	stbtt_PackEnd
PUBLIC	stbtt_PackFontRange
PUBLIC	stbtt_PackFontRanges
PUBLIC	stbtt_PackSetOversampling
PUBLIC	stbtt_PackSetSkipMissingCodepoints
PUBLIC	stbtt_GetPackedQuad
PUBLIC	stbtt_PackFontRangesGatherRects
PUBLIC	stbtt_PackFontRangesPackRects
PUBLIC	stbtt_PackFontRangesRenderIntoRects
PUBLIC	stbtt_GetNumberOfFonts
PUBLIC	stbtt_GetFontOffsetForIndex
PUBLIC	stbtt_InitFont
PUBLIC	stbtt_FindGlyphIndex
PUBLIC	stbtt_ScaleForPixelHeight
PUBLIC	stbtt_ScaleForMappingEmToPixels
PUBLIC	stbtt_GetFontVMetrics
PUBLIC	stbtt_GetFontVMetricsOS2
PUBLIC	stbtt_GetFontBoundingBox
PUBLIC	stbtt_GetCodepointHMetrics
PUBLIC	stbtt_GetCodepointKernAdvance
PUBLIC	stbtt_GetCodepointBox
PUBLIC	stbtt_GetGlyphHMetrics
PUBLIC	stbtt_GetGlyphKernAdvance
PUBLIC	stbtt_GetGlyphBox
PUBLIC	stbtt_GetKerningTableLength
PUBLIC	stbtt_GetKerningTable
PUBLIC	stbtt_IsGlyphEmpty
PUBLIC	stbtt_GetCodepointShape
PUBLIC	stbtt_GetGlyphShape
PUBLIC	stbtt_FreeShape
PUBLIC	stbtt_FindSVGDoc
PUBLIC	stbtt_GetCodepointSVG
PUBLIC	stbtt_GetGlyphSVG
PUBLIC	stbtt_FreeBitmap
PUBLIC	stbtt_GetCodepointBitmap
PUBLIC	stbtt_GetCodepointBitmapSubpixel
PUBLIC	stbtt_MakeCodepointBitmap
PUBLIC	stbtt_MakeCodepointBitmapSubpixel
PUBLIC	stbtt_MakeCodepointBitmapSubpixelPrefilter
PUBLIC	stbtt_GetCodepointBitmapBox
PUBLIC	stbtt_GetCodepointBitmapBoxSubpixel
PUBLIC	stbtt_GetGlyphBitmap
PUBLIC	stbtt_GetGlyphBitmapSubpixel
PUBLIC	stbtt_MakeGlyphBitmap
PUBLIC	stbtt_MakeGlyphBitmapSubpixel
PUBLIC	stbtt_MakeGlyphBitmapSubpixelPrefilter
PUBLIC	stbtt_GetGlyphBitmapBox
PUBLIC	stbtt_GetGlyphBitmapBoxSubpixel
PUBLIC	stbtt_Rasterize
PUBLIC	stbtt_FreeSDF
PUBLIC	stbtt_GetGlyphSDF
PUBLIC	stbtt_GetCodepointSDF
PUBLIC	stbtt_FindMatchingFont
PUBLIC	stbtt_CompareUTF8toUTF16_bigendian
PUBLIC	stbtt_GetFontNameString
PUBLIC	stbi_load_from_memory
PUBLIC	stbi_load_from_callbacks
PUBLIC	stbi_load
PUBLIC	stbi_load_from_file
PUBLIC	stbi_load_gif_from_memory
PUBLIC	stbi_load_16_from_memory
PUBLIC	stbi_load_16_from_callbacks
PUBLIC	stbi_load_16
PUBLIC	stbi_load_from_file_16
PUBLIC	stbi_loadf_from_memory
PUBLIC	stbi_loadf_from_callbacks
PUBLIC	stbi_loadf
PUBLIC	stbi_loadf_from_file
PUBLIC	stbi_hdr_to_ldr_gamma
PUBLIC	stbi_hdr_to_ldr_scale
PUBLIC	stbi_ldr_to_hdr_gamma
PUBLIC	stbi_ldr_to_hdr_scale
PUBLIC	stbi_is_hdr_from_callbacks
PUBLIC	stbi_is_hdr_from_memory
PUBLIC	stbi_is_hdr
PUBLIC	stbi_is_hdr_from_file
PUBLIC	stbi_failure_reason
PUBLIC	stbi_image_free
PUBLIC	stbi_info_from_memory
PUBLIC	stbi_info_from_callbacks
PUBLIC	stbi_is_16_bit_from_memory
PUBLIC	stbi_is_16_bit_from_callbacks
PUBLIC	stbi_info
PUBLIC	stbi_info_from_file
PUBLIC	stbi_is_16_bit
PUBLIC	stbi_is_16_bit_from_file
PUBLIC	stbi_set_unpremultiply_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb
PUBLIC	stbi_set_flip_vertically_on_load
PUBLIC	stbi_convert_iphone_png_to_rgb_thread
PUBLIC	stbi_set_flip_vertically_on_load_thread
PUBLIC	stbi_zlib_decode_malloc_guesssize
PUBLIC	stbi_zlib_decode_malloc_guesssize_headerflag
PUBLIC	stbi_zlib_decode_malloc
PUBLIC	stbi_zlib_decode_buffer
PUBLIC	stbi_zlib_decode_noheader_malloc
PUBLIC	stbi_zlib_decode_noheader_buffer
PUBLIC	?stbi__unpremultiply_on_load_thread@@YAXH@Z	; stbi__unpremultiply_on_load_thread
PUBLIC	stbi_write_png
PUBLIC	stbi_write_bmp
PUBLIC	stbi_write_tga
PUBLIC	stbi_write_hdr
PUBLIC	stbi_write_jpg
PUBLIC	stbi_write_png_to_func
PUBLIC	stbi_write_bmp_to_func
PUBLIC	stbi_write_tga_to_func
PUBLIC	stbi_write_hdr_to_func
PUBLIC	stbi_write_jpg_to_func
PUBLIC	stbi_flip_vertically_on_write
PUBLIC	stbi_zlib_compress
PUBLIC	stbi_write_png_to_mem
PUBLIC	?xorshift32@@YAII@Z				; xorshift32
PUBLIC	?rand_f@@YAMMM@Z				; rand_f
PUBLIC	?mat_row_vec@@YA?AUai_vec@@Uai_mat@@H@Z		; mat_row_vec
PUBLIC	?mat_col_vec@@YA?AUai_vec@@Uai_mat@@H@Z		; mat_col_vec
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@0a4fb11f
PUBLIC	__real@3a83126f
PUBLIC	__real@3c23d70a
PUBLIC	__real@3da685db
PUBLIC	__real@3de978d5
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e800000
PUBLIC	__real@3e828f5c
PUBLIC	__real@3e991687
PUBLIC	__real@3ea99ae9
PUBLIC	__real@3eaa7efa
PUBLIC	__real@3eb33333
PUBLIC	__real@3ec3ef15
PUBLIC	__real@3ed65e89
PUBLIC	__real@3f000000
PUBLIC	__real@3f0a8bd4
PUBLIC	__real@3f1645a2
PUBLIC	__real@3f3504f3
PUBLIC	__real@3f7d70a4
PUBLIC	__real@3f800000
PUBLIC	__real@3fa73d75
PUBLIC	__real@3fd5555560000000
PUBLIC	__real@3fddb3d7
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3ff028f5c0000000
PUBLIC	__real@3ff921fafc8b007a
PUBLIC	__real@40000000
PUBLIC	__real@4000000000000000
PUBLIC	__real@40400000
PUBLIC	__real@40490fdb
PUBLIC	__real@40800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@41100000
PUBLIC	__real@41d80000
PUBLIC	__real@42000000
PUBLIC	__real@42800000
PUBLIC	__real@42b40000
PUBLIC	__real@43000000
PUBLIC	__real@43340000
PUBLIC	__real@437f0000
PUBLIC	__real@43800000
PUBLIC	__real@447a0000
PUBLIC	__real@46800000
PUBLIC	__real@477fff00
PUBLIC	__real@47800000
PUBLIC	__real@497423f0
PUBLIC	__real@4f800000
PUBLIC	__real@5f000000
PUBLIC	__real@80000000
PUBLIC	__real@be2cca2e
PUBLIC	__real@bf000000
PUBLIC	__real@bf800000
PUBLIC	__real@c0000000
PUBLIC	__real@c1d80000
PUBLIC	__xmm@00000200000002000000020000000200
PUBLIC	__xmm@00080008000800080008000800080008
PUBLIC	__xmm@00ff00ff00ff00ff00ff00ff00ff00ff
PUBLIC	__xmm@01010000010100000101000001010000
PUBLIC	__xmm@08a914e808a914e808a914e808a914e8
PUBLIC	__xmm@11c8e09e11c8e09e11c8e09e11c8e09e
PUBLIC	__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
PUBLIC	__xmm@12d0046b12d0046b12d0046b12d0046b
PUBLIC	__xmm@166f166f166f166f166f166f166f166f
PUBLIC	__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
PUBLIC	__xmm@80000000000000008000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__xmm@80808080808080808080808080808080
PUBLIC	__xmm@e09ee565e09ee565e09ee565e09ee565
PUBLIC	__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
PUBLIC	__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
PUBLIC	__xmm@f493f493f493f493f493f493f493f493
PUBLIC	__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
PUBLIC	__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
EXTRN	_Init_thread_header:PROC
EXTRN	_Init_thread_footer:PROC
EXTRN	__imp__aligned_free_dbg:PROC
EXTRN	__imp__aligned_realloc_dbg:PROC
EXTRN	abs:PROC
EXTRN	acos:PROC
EXTRN	cos:PROC
EXTRN	fabs:PROC
EXTRN	fmod:PROC
EXTRN	pow:PROC
EXTRN	sqrt:PROC
EXTRN	__imp_ceil:PROC
EXTRN	__imp_floor:PROC
EXTRN	__imp_frexp:PROC
EXTRN	__imp_ldexp:PROC
EXTRN	__imp_cosf:PROC
EXTRN	__imp_sinf:PROC
EXTRN	__imp_tanf:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vswprintf:PROC
EXTRN	__imp_fopen_s:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_feof:PROC
EXTRN	__imp_ferror:PROC
EXTRN	__imp_fgetc:PROC
EXTRN	__imp_fread:PROC
EXTRN	__imp_fseek:PROC
EXTRN	__imp_ftell:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_ungetc:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp___stdio_common_vsprintf_s:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	__imp_realloc:PROC
EXTRN	_lrotl:PROC
EXTRN	__imp_strtol:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memmove:PROC
EXTRN	memset:PROC
EXTRN	__imp_wcslen:PROC
EXTRN	strcmp:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_SetCurrentDirectoryA:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_DebugBreak:PROC
EXTRN	__imp_OutputDebugStringW:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_WaitForSingleObjectEx:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetModuleHandleW:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_SwitchToFiber:PROC
EXTRN	__imp_CreateFiber:PROC
EXTRN	__imp_ConvertThreadToFiber:PROC
EXTRN	__imp_FormatMessageA:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageW:PROC
EXTRN	__imp_PeekMessageA:PROC
EXTRN	__imp_DefWindowProcW:PROC
EXTRN	__imp_PostQuitMessage:PROC
EXTRN	__imp_RegisterClassW:PROC
EXTRN	__imp_CreateWindowExW:PROC
EXTRN	__imp_IsWindow:PROC
EXTRN	__imp_ShowWindow:PROC
EXTRN	__imp_SetWindowPos:PROC
EXTRN	__imp_GetWindowPlacement:PROC
EXTRN	__imp_SetTimer:PROC
EXTRN	__imp_KillTimer:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_AdjustWindowRect:PROC
EXTRN	__imp_MessageBoxA:PROC
EXTRN	__imp_GetWindowLongPtrA:PROC
EXTRN	__imp_SetWindowLongPtrA:PROC
EXTRN	__imp_MultiByteToWideChar:PROC
EXTRN	__imp_AllocConsole:PROC
EXTRN	__imp_WriteConsoleW:PROC
EXTRN	__imp_GetConsoleWindow:PROC
EXTRN	__imp_timeBeginPeriod:PROC
EXTRN	__imp_timeEndPeriod:PROC
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	D3DCompile:PROC
EXTRN	D3D11CreateDevice:PROC
EXTRN	__imp__wassert:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	_Init_thread_epoch:DWORD
EXTRN	IID_IDXGIDevice:BYTE
EXTRN	IID_IDXGIFactory2:BYTE
EXTRN	IID_ID3D11Texture2D:BYTE
EXTRN	IID_ID3D11InfoQueue:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA DQ 01H DUP (?) ; Global_TraceMessageHook
?ARGUMENTS@@3U_ARGUMENTS@@A DB 030H DUP (?)		; ARGUMENTS
?SYSTEM@@3U_SYSTEM@@A DB 048H DUP (?)			; SYSTEM
?PROCESS@@3U_PROCESS@@A DB 088H DUP (?)			; PROCESS
_BSS	ENDS
;	COMDAT ?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
_TLS	SEGMENT
?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA DQ 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::Bed
_TLS	ENDS
;	COMDAT ?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
_TLS	SEGMENT
?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA DD 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::$S1
_TLS	ENDS
_BSS	SEGMENT
?STANDARD_BASIS@@3Trx_f32_3x3@@B DB 024H DUP (?)	; STANDARD_BASIS
?STANDARD_BASIS_COLOR@@3QBUrx_f32x4@@B DB 030H DUP (?)	; STANDARD_BASIS_COLOR
_BSS	ENDS
;	COMDAT ?ElementArray@?1??D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ@4PAU3@A
_TLS	SEGMENT
?ElementArray@?1??D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ@4PAU3@A DB 0200H DUP (?) ; `D3D11DescribeInputLayoutInternal'::`2'::ElementArray
_TLS	ENDS
;	COMDAT ?VertexBuffer@?1??ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z@4PEAUID3D11Buffer@@EA
_BSS	SEGMENT
?VertexBuffer@?1??ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z@4PEAUID3D11Buffer@@EA DQ 01H DUP (?) ; `ID3D11Graphics_DrawImageData'::`2'::VertexBuffer
_BSS	ENDS
;	COMDAT ?VertexArray@?1??ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z@4PAUGLYPH_VERTEX@@A
_BSS	SEGMENT
?VertexArray@?1??ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z@4PAUGLYPH_VERTEX@@A DB 0c00H DUP (?) ; `ID3D11Graphics_DrawText'::`2'::VertexArray
_BSS	ENDS
_TLS	SEGMENT
?stbi__g_failure_reason@@3PEBDEB DQ 01H DUP (?)		; stbi__g_failure_reason
_TLS	ENDS
_BSS	SEGMENT
?stbi__vertically_flip_on_load_global@@3HA DD 01H DUP (?) ; stbi__vertically_flip_on_load_global
_BSS	ENDS
_TLS	SEGMENT
?stbi__vertically_flip_on_load_local@@3HA DD 01H DUP (?) ; stbi__vertically_flip_on_load_local
?stbi__vertically_flip_on_load_set@@3HA DD 01H DUP (?)	; stbi__vertically_flip_on_load_set
_TLS	ENDS
_BSS	SEGMENT
?stbi__unpremultiply_on_load_global@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_global
?stbi__de_iphone_flag_global@@3HA DD 01H DUP (?)	; stbi__de_iphone_flag_global
_BSS	ENDS
_TLS	SEGMENT
?stbi__unpremultiply_on_load_local@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_local
?stbi__unpremultiply_on_load_set@@3HA DD 01H DUP (?)	; stbi__unpremultiply_on_load_set
?stbi__de_iphone_flag_local@@3HA DD 01H DUP (?)		; stbi__de_iphone_flag_local
?stbi__de_iphone_flag_set@@3HA DD 01H DUP (?)		; stbi__de_iphone_flag_set
_TLS	ENDS
_BSS	SEGMENT
?stbi__flip_vertically_on_write@@3HA DD 01H DUP (?)	; stbi__flip_vertically_on_write
_BSS	ENDS
;	COMDAT ?state@?1??rand_f@@YAMMM@Z@4IA
_BSS	SEGMENT
?state@?1??rand_f@@YAMMM@Z@4IA DD 01H DUP (?)		; `rand_f'::`2'::state
_BSS	ENDS
;	COMDAT ?$TSS0@?1??rand_f@@YAMMM@Z@4HA
_BSS	SEGMENT
?$TSS0@?1??rand_f@@YAMMM@Z@4HA DD 01H DUP (?)		; `rand_f'::`2'::$TSS0
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnwprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$_vsnwprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+68
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+66
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN5
	DD	imagerel $LN5+111
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsprintf_s DD imagerel $LN3
	DD	imagerel $LN3+62
	DD	imagerel $unwind$vsprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$?rx7__stoi@@YAHHPEA_JPEBD1@Z DD imagerel ?rx7__stoi@@YAHHPEA_JPEBD1@Z
	DD	imagerel ?rx7__stoi@@YAHHPEA_JPEBD1@Z+496
	DD	imagerel $unwind$?rx7__stoi@@YAHHPEA_JPEBD1@Z
$pdata$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD imagerel $LN3
	DD	imagerel $LN3+81
	DD	imagerel $unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z
$pdata$??1_TRACE_BLOCK@@QEAA@XZ DD imagerel $LN7
	DD	imagerel $LN7+238
	DD	imagerel $unwind$??1_TRACE_BLOCK@@QEAA@XZ
$pdata$?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z DD imagerel ?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z
	DD	imagerel ?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z+92
	DD	imagerel $unwind$?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z
$pdata$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+424
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
$pdata$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+82
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
$pdata$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+82
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
$pdata$?HeapFree@@YAXPEAX@Z DD imagerel ?HeapFree@@YAXPEAX@Z
	DD	imagerel ?HeapFree@@YAXPEAX@Z+51
	DD	imagerel $unwind$?HeapFree@@YAXPEAX@Z
$pdata$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+810
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
$pdata$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+222
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
$pdata$??Bstr32@@QEAA_JXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAA_JXZ
$pdata$??Bstr32@@QEAA_KXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAA_KXZ
$pdata$??Bstr32@@QEAANXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bstr32@@QEAANXZ
$pdata$??Bstr32@@QEAAMXZ DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$??Bstr32@@QEAAMXZ
$pdata$??Bstr32@@QEAAIXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAAIXZ
$pdata$??Bstr32@@QEAAHXZ DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$??Bstr32@@QEAAHXZ
$pdata$??7str32@@QEAAHXZ DD imagerel $LN5
	DD	imagerel $LN5+43
	DD	imagerel $unwind$??7str32@@QEAAHXZ
$pdata$?strtoi@@YA_JUstr32@@@Z DD imagerel ?strtoi@@YA_JUstr32@@@Z
	DD	imagerel ?strtoi@@YA_JUstr32@@@Z+71
	DD	imagerel $unwind$?strtoi@@YA_JUstr32@@@Z
$pdata$?MAIN@@YAXXZ DD imagerel ?MAIN@@YAXXZ
	DD	imagerel ?MAIN@@YAXXZ+1080
	DD	imagerel $unwind$?MAIN@@YAXXZ
$pdata$?GetThreadID@@YAHXZ DD imagerel ?GetThreadID@@YAHXZ
	DD	imagerel ?GetThreadID@@YAHXZ+15
	DD	imagerel $unwind$?GetThreadID@@YAHXZ
$pdata$?GetPerformanceFrequency@@YA_KXZ DD imagerel ?GetPerformanceFrequency@@YA_KXZ
	DD	imagerel ?GetPerformanceFrequency@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceFrequency@@YA_KXZ
$pdata$?GetPerformanceCounter@@YA_KXZ DD imagerel ?GetPerformanceCounter@@YA_KXZ
	DD	imagerel ?GetPerformanceCounter@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceCounter@@YA_KXZ
$pdata$?Widen@@YAPEA_WHPEBD@Z DD imagerel ?Widen@@YAPEA_WHPEBD@Z
	DD	imagerel ?Widen@@YAPEA_WHPEBD@Z+339
	DD	imagerel $unwind$?Widen@@YAPEA_WHPEBD@Z
$pdata$?OutputW@@YAXPEB_W@Z DD imagerel ?OutputW@@YAXPEB_W@Z
	DD	imagerel ?OutputW@@YAXPEB_W@Z+103
	DD	imagerel $unwind$?OutputW@@YAXPEB_W@Z
$pdata$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
	DD	imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z+475
	DD	imagerel $unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
$pdata$?UnloadFileData@@YAXPEAX@Z DD imagerel ?UnloadFileData@@YAXPEAX@Z
	DD	imagerel ?UnloadFileData@@YAXPEAX@Z+33
	DD	imagerel $unwind$?UnloadFileData@@YAXPEAX@Z
$pdata$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+621
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
$pdata$?GetErrorCode@@YAHH@Z DD imagerel ?GetErrorCode@@YAHH@Z
	DD	imagerel ?GetErrorCode@@YAHH@Z+180
	DD	imagerel $unwind$?GetErrorCode@@YAHH@Z
$pdata$?GetErrorStringA@@YAPEBDHH@Z DD imagerel ?GetErrorStringA@@YAPEBDHH@Z
	DD	imagerel ?GetErrorStringA@@YAPEBDHH@Z+473
	DD	imagerel $unwind$?GetErrorStringA@@YAPEBDHH@Z
$pdata$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+257
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
$pdata$??D@YA?AUf32x3@@U0@M@Z DD imagerel ??D@YA?AUf32x3@@U0@M@Z
	DD	imagerel ??D@YA?AUf32x3@@U0@M@Z+161
	DD	imagerel $unwind$??D@YA?AUf32x3@@U0@M@Z
$pdata$??D@YA?AUf32x3@@U0@0@Z DD imagerel ??D@YA?AUf32x3@@U0@0@Z
	DD	imagerel ??D@YA?AUf32x3@@U0@0@Z+171
	DD	imagerel $unwind$??D@YA?AUf32x3@@U0@0@Z
$pdata$??G@YA?AUf32x3@@U0@@Z DD imagerel ??G@YA?AUf32x3@@U0@@Z
	DD	imagerel ??G@YA?AUf32x3@@U0@@Z+145
	DD	imagerel $unwind$??G@YA?AUf32x3@@U0@@Z
$pdata$??H@YA?AUf32x3@@U0@0@Z DD imagerel ??H@YA?AUf32x3@@U0@0@Z
	DD	imagerel ??H@YA?AUf32x3@@U0@0@Z+155
	DD	imagerel $unwind$??H@YA?AUf32x3@@U0@0@Z
$pdata$??G@YA?AUf32x3@@U0@0@Z DD imagerel ??G@YA?AUf32x3@@U0@0@Z
	DD	imagerel ??G@YA?AUf32x3@@U0@0@Z+155
	DD	imagerel $unwind$??G@YA?AUf32x3@@U0@0@Z
$pdata$??X@YAAEAUf32x3@@AEAU0@M@Z DD imagerel ??X@YAAEAUf32x3@@AEAU0@M@Z
	DD	imagerel ??X@YAAEAUf32x3@@AEAU0@M@Z+135
	DD	imagerel $unwind$??X@YAAEAUf32x3@@AEAU0@M@Z
$pdata$??Y@YAAEAUf32x3@@AEAU0@U0@@Z DD imagerel ??Y@YAAEAUf32x3@@AEAU0@U0@@Z
	DD	imagerel ??Y@YAAEAUf32x3@@AEAU0@U0@@Z+145
	DD	imagerel $unwind$??Y@YAAEAUf32x3@@AEAU0@U0@@Z
$pdata$??Z@YAAEAUf32x3@@AEAU0@U0@@Z DD imagerel ??Z@YAAEAUf32x3@@AEAU0@U0@@Z
	DD	imagerel ??Z@YAAEAUf32x3@@AEAU0@U0@@Z+145
	DD	imagerel $unwind$??Z@YAAEAUf32x3@@AEAU0@U0@@Z
$pdata$?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z DD imagerel ?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z
	DD	imagerel ?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z+652
	DD	imagerel $unwind$?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z
$pdata$?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z DD imagerel ?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z
	DD	imagerel ?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z+470
	DD	imagerel $unwind$?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z
$pdata$?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z DD imagerel ?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z
	DD	imagerel ?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z+189
	DD	imagerel $unwind$?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z
$pdata$?MatrixI@@YA?AUrx_f32_4x4@@XZ DD imagerel ?MatrixI@@YA?AUrx_f32_4x4@@XZ
	DD	imagerel ?MatrixI@@YA?AUrx_f32_4x4@@XZ+245
	DD	imagerel $unwind$?MatrixI@@YA?AUrx_f32_4x4@@XZ
$pdata$?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z DD imagerel ?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z
	DD	imagerel ?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z+244
	DD	imagerel $unwind$?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z
$pdata$?MatrixRX@@YA?AUrx_f32_4x4@@M@Z DD imagerel ?MatrixRX@@YA?AUrx_f32_4x4@@M@Z
	DD	imagerel ?MatrixRX@@YA?AUrx_f32_4x4@@M@Z+375
	DD	imagerel $unwind$?MatrixRX@@YA?AUrx_f32_4x4@@M@Z
$pdata$?MatrixRY@@YA?AUrx_f32_4x4@@M@Z DD imagerel ?MatrixRY@@YA?AUrx_f32_4x4@@M@Z
	DD	imagerel ?MatrixRY@@YA?AUrx_f32_4x4@@M@Z+339
	DD	imagerel $unwind$?MatrixRY@@YA?AUrx_f32_4x4@@M@Z
$pdata$?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z DD imagerel ?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z
	DD	imagerel ?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z+667
	DD	imagerel $unwind$?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z
$pdata$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
	DD	imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z+119
	DD	imagerel $unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
$pdata$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
	DD	imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z+122
	DD	imagerel $unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
$pdata$?FormatA@@YAPEADPEBDZZ DD imagerel ?FormatA@@YAPEADPEBDZZ
	DD	imagerel ?FormatA@@YAPEADPEBDZZ+104
	DD	imagerel $unwind$?FormatA@@YAPEADPEBDZZ
$pdata$?FormatW@@YAPEA_WPEB_WZZ DD imagerel ?FormatW@@YAPEA_WPEB_WZZ
	DD	imagerel ?FormatW@@YAPEA_WPEB_WZZ+105
	DD	imagerel $unwind$?FormatW@@YAPEA_WPEB_WZZ
$pdata$?RuneIsEOL@@YAHH@Z DD imagerel ?RuneIsEOL@@YAHH@Z
	DD	imagerel ?RuneIsEOL@@YAHH@Z+46
	DD	imagerel $unwind$?RuneIsEOL@@YAHH@Z
$pdata$WinMain DD imagerel $LN9
	DD	imagerel $LN9+480
	DD	imagerel $unwind$WinMain
$pdata$?SetConsoleWindowDimensions@@YAKKKKK@Z DD imagerel ?SetConsoleWindowDimensions@@YAKKKKK@Z
	DD	imagerel ?SetConsoleWindowDimensions@@YAKKKKK@Z+282
	DD	imagerel $unwind$?SetConsoleWindowDimensions@@YAKKKKK@Z
$pdata$?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z DD imagerel ?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z
	DD	imagerel ?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z+246
	DD	imagerel $unwind$?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z
$pdata$?PlatformInitialize@@YAXXZ DD imagerel ?PlatformInitialize@@YAXXZ
	DD	imagerel ?PlatformInitialize@@YAXXZ+267
	DD	imagerel $unwind$?PlatformInitialize@@YAXXZ
$pdata$?PlatformDeinitialize@@YAXXZ DD imagerel ?PlatformDeinitialize@@YAXXZ
	DD	imagerel ?PlatformDeinitialize@@YAXXZ+30
	DD	imagerel $unwind$?PlatformDeinitialize@@YAXXZ
$pdata$?CStrW@@YAPEB_WPEBD@Z DD imagerel ?CStrW@@YAPEB_WPEBD@Z
	DD	imagerel ?CStrW@@YAPEB_WPEBD@Z+29
	DD	imagerel $unwind$?CStrW@@YAPEB_WPEBD@Z
$pdata$?TraceMessageKindToString@@YAPEB_WH@Z DD imagerel ?TraceMessageKindToString@@YAPEB_WH@Z
	DD	imagerel ?TraceMessageKindToString@@YAPEB_WH@Z+160
	DD	imagerel $unwind$?TraceMessageKindToString@@YAPEB_WH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ESTANDARD_BASIS@@YAXXZ DD imagerel ??__ESTANDARD_BASIS@@YAXXZ
	DD	imagerel ??__ESTANDARD_BASIS@@YAXXZ+87
	DD	imagerel $unwind$??__ESTANDARD_BASIS@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??__ESTANDARD_BASIS_COLOR@@YAXXZ DD imagerel ??__ESTANDARD_BASIS_COLOR@@YAXXZ
	DD	imagerel ??__ESTANDARD_BASIS_COLOR@@YAXXZ+87
	DD	imagerel $unwind$??__ESTANDARD_BASIS_COLOR@@YAXXZ
pdata	ENDS
pdata	SEGMENT
$pdata$?PIXEL_FORMAT_SIZE@@YAHH@Z DD imagerel ?PIXEL_FORMAT_SIZE@@YAHH@Z
	DD	imagerel ?PIXEL_FORMAT_SIZE@@YAHH@Z+66
	DD	imagerel $unwind$?PIXEL_FORMAT_SIZE@@YAHH@Z
$pdata$?ID3D11Window_Update@@YAHPEAUID3D11_WINDOW@@@Z DD imagerel ?ID3D11Window_Update@@YAHPEAUID3D11_WINDOW@@@Z
	DD	imagerel ?ID3D11Window_Update@@YAHPEAUID3D11_WINDOW@@@Z+153
	DD	imagerel $unwind$?ID3D11Window_Update@@YAHPEAUID3D11_WINDOW@@@Z
$pdata$?ID3D11Window_Present@@YAXPEAUID3D11_WINDOW@@@Z DD imagerel ?ID3D11Window_Present@@YAXPEAUID3D11_WINDOW@@@Z
	DD	imagerel ?ID3D11Window_Present@@YAXPEAUID3D11_WINDOW@@@Z+465
	DD	imagerel $unwind$?ID3D11Window_Present@@YAXPEAUID3D11_WINDOW@@@Z
$pdata$?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z DD imagerel ?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z
	DD	imagerel ?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z+806
	DD	imagerel $unwind$?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z
$pdata$?ID3D11Driver_CreateWindow@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z DD imagerel ?ID3D11Driver_CreateWindow@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z
	DD	imagerel ?ID3D11Driver_CreateWindow@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z+101
	DD	imagerel $unwind$?ID3D11Driver_CreateWindow@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z
$pdata$?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD imagerel ?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
	DD	imagerel ?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z+559
	DD	imagerel $unwind$?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
$pdata$?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z DD imagerel ?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z
	DD	imagerel ?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z+2478
	DD	imagerel $unwind$?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z
$pdata$?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z DD imagerel ?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z
	DD	imagerel ?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z+1570
	DD	imagerel $unwind$?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z
$pdata$?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Urx_f32x4@@@Z DD imagerel ?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Urx_f32x4@@@Z
	DD	imagerel ?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Urx_f32x4@@@Z+208
	DD	imagerel $unwind$?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Urx_f32x4@@@Z
$pdata$?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAXHHHHPEB_W@Z DD imagerel ?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAXHHHHPEB_W@Z
	DD	imagerel ?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAXHHHHPEB_W@Z+3264
	DD	imagerel $unwind$?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAXHHHHPEB_W@Z
$pdata$?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z DD imagerel ?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	imagerel ?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z+1174
	DD	imagerel $unwind$?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z
$pdata$?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z DD imagerel ?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	imagerel ?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z+244
	DD	imagerel $unwind$?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z
$pdata$?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z DD imagerel ?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	imagerel ?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z+123
	DD	imagerel $unwind$?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z
$pdata$?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z DD imagerel ?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z
	DD	imagerel ?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z+207
	DD	imagerel $unwind$?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z
$pdata$?ID3D11Graphics_SetCameraMode@@YA?AW4DET_CAMERA_MODE@@PEAUID3D11_GRAPHICS@@W41@@Z DD imagerel ?ID3D11Graphics_SetCameraMode@@YA?AW4DET_CAMERA_MODE@@PEAUID3D11_GRAPHICS@@W41@@Z
	DD	imagerel ?ID3D11Graphics_SetCameraMode@@YA?AW4DET_CAMERA_MODE@@PEAUID3D11_GRAPHICS@@W41@@Z+42
	DD	imagerel $unwind$?ID3D11Graphics_SetCameraMode@@YA?AW4DET_CAMERA_MODE@@PEAUID3D11_GRAPHICS@@W41@@Z
$pdata$?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z DD imagerel ?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z
	DD	imagerel ?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z+114
	DD	imagerel $unwind$?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z
$pdata$?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ DD imagerel ?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ
	DD	imagerel ?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ+311
	DD	imagerel $unwind$?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ
$pdata$?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z DD imagerel ?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z
	DD	imagerel ?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z+262
	DD	imagerel $unwind$?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z
$pdata$?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z DD imagerel ?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z
	DD	imagerel ?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z+218
	DD	imagerel $unwind$?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z
$pdata$?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z DD imagerel ?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z
	DD	imagerel ?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z+2758
	DD	imagerel $unwind$?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z
$pdata$?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z DD imagerel ?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	imagerel ?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z+32
	DD	imagerel $unwind$?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z
$pdata$?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z DD imagerel ?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z
	DD	imagerel ?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z+50
	DD	imagerel $unwind$?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z
$pdata$?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z DD imagerel ?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z
	DD	imagerel ?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z+131
	DD	imagerel $unwind$?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z
$pdata$?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z DD imagerel ?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z
	DD	imagerel ?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z+534
	DD	imagerel $unwind$?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z
$pdata$?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z DD imagerel ?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z
	DD	imagerel ?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z+193
	DD	imagerel $unwind$?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z
$pdata$?ID3D11DeviceContext_UpdateDynamicVertexBuffer@@YAHPEAUID3D11DeviceContext@@PEAUID3D11Buffer@@IIPEAX@Z DD imagerel ?ID3D11DeviceContext_UpdateDynamicVertexBuffer@@YAHPEAUID3D11DeviceContext@@PEAUID3D11Buffer@@IIPEAX@Z
	DD	imagerel ?ID3D11DeviceContext_UpdateDynamicVertexBuffer@@YAHPEAUID3D11DeviceContext@@PEAUID3D11Buffer@@IIPEAX@Z+169
	DD	imagerel $unwind$?ID3D11DeviceContext_UpdateDynamicVertexBuffer@@YAHPEAUID3D11DeviceContext@@PEAUID3D11Buffer@@IIPEAX@Z
$pdata$?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z DD imagerel ?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z
	DD	imagerel ?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z+152
	DD	imagerel $unwind$?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z
$pdata$?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z DD imagerel ?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z
	DD	imagerel ?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z+119
	DD	imagerel $unwind$?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z
$pdata$?ID3D11View_ReleaseResouce@@YAXPEAUID3D11View@@@Z DD imagerel ?ID3D11View_ReleaseResouce@@YAXPEAUID3D11View@@@Z
	DD	imagerel ?ID3D11View_ReleaseResouce@@YAXPEAUID3D11View@@@Z+88
	DD	imagerel $unwind$?ID3D11View_ReleaseResouce@@YAXPEAUID3D11View@@@Z
$pdata$?ID3D11View_ReleaseAll@@YAXPEAUID3D11View@@@Z DD imagerel ?ID3D11View_ReleaseAll@@YAXPEAUID3D11View@@@Z
	DD	imagerel ?ID3D11View_ReleaseAll@@YAXPEAUID3D11View@@@Z+50
	DD	imagerel $unwind$?ID3D11View_ReleaseAll@@YAXPEAUID3D11View@@@Z
$pdata$?ID3D11ShaderResourceView_ReleaseAll@@YAXPEAUID3D11ShaderResourceView@@@Z DD imagerel ?ID3D11ShaderResourceView_ReleaseAll@@YAXPEAUID3D11ShaderResourceView@@@Z
	DD	imagerel ?ID3D11ShaderResourceView_ReleaseAll@@YAXPEAUID3D11ShaderResourceView@@@Z+24
	DD	imagerel $unwind$?ID3D11ShaderResourceView_ReleaseAll@@YAXPEAUID3D11ShaderResourceView@@@Z
$pdata$?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z DD imagerel ?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z
	DD	imagerel ?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z+223
	DD	imagerel $unwind$?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z
$pdata$?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z DD imagerel ?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z
	DD	imagerel ?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z+708
	DD	imagerel $unwind$?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z
$pdata$?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z DD imagerel ?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z
	DD	imagerel ?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z+533
	DD	imagerel $unwind$?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z
$pdata$?ID3D11Device_CreateRenderTargetViewFromTexture2D@@YAPEAUID3D11RenderTargetView@@PEAUID3D11Device@@PEAUID3D11Texture2D@@@Z DD imagerel ?ID3D11Device_CreateRenderTargetViewFromTexture2D@@YAPEAUID3D11RenderTargetView@@PEAUID3D11Device@@PEAUID3D11Texture2D@@@Z
	DD	imagerel ?ID3D11Device_CreateRenderTargetViewFromTexture2D@@YAPEAUID3D11RenderTargetView@@PEAUID3D11Device@@PEAUID3D11Texture2D@@@Z+357
	DD	imagerel $unwind$?ID3D11Device_CreateRenderTargetViewFromTexture2D@@YAPEAUID3D11RenderTargetView@@PEAUID3D11Device@@PEAUID3D11Texture2D@@@Z
$pdata$?ID3D11_WINDOW_MessageFiberRoutine@@YAXPEAX@Z DD imagerel $LN35
	DD	imagerel $LN35+936
	DD	imagerel $unwind$?ID3D11_WINDOW_MessageFiberRoutine@@YAXPEAX@Z
$pdata$?D3D11_WINDOW_WndProc@@YA_JPEAUHWND__@@I_K_J@Z DD imagerel ?D3D11_WINDOW_WndProc@@YA_JPEAUHWND__@@I_K_J@Z
	DD	imagerel ?D3D11_WINDOW_WndProc@@YA_JPEAUHWND__@@I_K_J@Z+244
	DD	imagerel $unwind$?D3D11_WINDOW_WndProc@@YA_JPEAUHWND__@@I_K_J@Z
$pdata$?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z DD imagerel ?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z
	DD	imagerel ?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z+2431
	DD	imagerel $unwind$?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z
$pdata$?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4D3D11_SHADER_KIND@@PEAHPEAPEBD3@Z DD imagerel ?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4D3D11_SHADER_KIND@@PEAHPEAPEBD3@Z
	DD	imagerel ?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4D3D11_SHADER_KIND@@PEAHPEAPEBD3@Z+710
	DD	imagerel $unwind$?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4D3D11_SHADER_KIND@@PEAHPEAPEBD3@Z
$pdata$?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z DD imagerel ?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z
	DD	imagerel ?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z+1647
	DD	imagerel $unwind$?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z
$pdata$?ID3D11Graphics_AcquireGlyphFont@@YAPEAUID3D11_FONT_ENTRY@@PEAUID3D11_GRAPHICS@@H@Z DD imagerel ?ID3D11Graphics_AcquireGlyphFont@@YAPEAUID3D11_FONT_ENTRY@@PEAUID3D11_GRAPHICS@@H@Z
	DD	imagerel ?ID3D11Graphics_AcquireGlyphFont@@YAPEAUID3D11_FONT_ENTRY@@PEAUID3D11_GRAPHICS@@H@Z+203
	DD	imagerel $unwind$?ID3D11Graphics_AcquireGlyphFont@@YAPEAUID3D11_FONT_ENTRY@@PEAUID3D11_GRAPHICS@@H@Z
$pdata$?ID3D11Graphics_CreateGlyphFont@@YAHPEAUID3D11_GRAPHICS@@PEAUGLYPH_FONT@@@Z DD imagerel ?ID3D11Graphics_CreateGlyphFont@@YAHPEAUID3D11_GRAPHICS@@PEAUGLYPH_FONT@@@Z
	DD	imagerel ?ID3D11Graphics_CreateGlyphFont@@YAHPEAUID3D11_GRAPHICS@@PEAUGLYPH_FONT@@@Z+466
	DD	imagerel $unwind$?ID3D11Graphics_CreateGlyphFont@@YAHPEAUID3D11_GRAPHICS@@PEAUGLYPH_FONT@@@Z
$pdata$?ID3D11Graphics_DrawGlyphFontVertices@@YAXPEAUID3D11_GRAPHICS@@PEAUID3D11_FONT_ENTRY@@MHPEAUGLYPH_VERTEX@@@Z DD imagerel ?ID3D11Graphics_DrawGlyphFontVertices@@YAXPEAUID3D11_GRAPHICS@@PEAUID3D11_FONT_ENTRY@@MHPEAUGLYPH_VERTEX@@@Z
	DD	imagerel ?ID3D11Graphics_DrawGlyphFontVertices@@YAXPEAUID3D11_GRAPHICS@@PEAUID3D11_FONT_ENTRY@@MHPEAUGLYPH_VERTEX@@@Z+1637
	DD	imagerel $unwind$?ID3D11Graphics_DrawGlyphFontVertices@@YAXPEAUID3D11_GRAPHICS@@PEAUID3D11_FONT_ENTRY@@MHPEAUGLYPH_VERTEX@@@Z
$pdata$?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z DD imagerel ?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z
	DD	imagerel ?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z+519
	DD	imagerel $unwind$?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z
$pdata$?ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z DD imagerel ?ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z
	DD	imagerel ?ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z+219
	DD	imagerel $unwind$?ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z
$pdata$stbtt_BakeFontBitmap DD imagerel $LN3
	DD	imagerel $LN3+111
	DD	imagerel $unwind$stbtt_BakeFontBitmap
$pdata$stbtt_GetBakedQuad DD imagerel $LN5
	DD	imagerel $LN5+544
	DD	imagerel $unwind$stbtt_GetBakedQuad
$pdata$stbtt_GetScaledFontVMetrics DD imagerel $LN5
	DD	imagerel $LN5+268
	DD	imagerel $unwind$stbtt_GetScaledFontVMetrics
$pdata$stbtt_PackBegin DD imagerel $LN10
	DD	imagerel $LN10+417
	DD	imagerel $unwind$stbtt_PackBegin
$pdata$stbtt_PackEnd DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_PackEnd
$pdata$stbtt_PackFontRange DD imagerel $LN3
	DD	imagerel $LN3+125
	DD	imagerel $unwind$stbtt_PackFontRange
$pdata$stbtt_PackFontRanges DD imagerel $LN13
	DD	imagerel $LN13+597
	DD	imagerel $unwind$stbtt_PackFontRanges
$pdata$stbtt_PackSetOversampling DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$stbtt_PackSetOversampling
$pdata$stbtt_GetPackedQuad DD imagerel $LN5
	DD	imagerel $LN5+616
	DD	imagerel $unwind$stbtt_GetPackedQuad
$pdata$stbtt_PackFontRangesGatherRects DD imagerel $LN17
	DD	imagerel $LN17+833
	DD	imagerel $unwind$stbtt_PackFontRangesGatherRects
$pdata$stbtt_PackFontRangesPackRects DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbtt_PackFontRangesPackRects
$pdata$stbtt_PackFontRangesRenderIntoRects DD imagerel $LN22
	DD	imagerel $LN22+2023
	DD	imagerel $unwind$stbtt_PackFontRangesRenderIntoRects
$pdata$stbtt_GetNumberOfFonts DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$stbtt_GetNumberOfFonts
$pdata$stbtt_GetFontOffsetForIndex DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$stbtt_GetFontOffsetForIndex
$pdata$stbtt_InitFont DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_InitFont
$pdata$stbtt_FindGlyphIndex DD imagerel $LN33
	DD	imagerel $LN33+1540
	DD	imagerel $unwind$stbtt_FindGlyphIndex
$pdata$stbtt_ScaleForPixelHeight DD imagerel $LN3
	DD	imagerel $LN3+113
	DD	imagerel $unwind$stbtt_ScaleForPixelHeight
$pdata$stbtt_ScaleForMappingEmToPixels DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$stbtt_ScaleForMappingEmToPixels
$pdata$stbtt_GetFontVMetrics DD imagerel $LN6
	DD	imagerel $LN6+170
	DD	imagerel $unwind$stbtt_GetFontVMetrics
$pdata$stbtt_GetFontVMetricsOS2 DD imagerel $LN7
	DD	imagerel $LN7+210
	DD	imagerel $unwind$stbtt_GetFontVMetricsOS2
$pdata$stbtt_GetFontBoundingBox DD imagerel $LN3
	DD	imagerel $LN3+185
	DD	imagerel $unwind$stbtt_GetFontBoundingBox
$pdata$stbtt_GetCodepointHMetrics DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$stbtt_GetCodepointHMetrics
$pdata$stbtt_GetCodepointKernAdvance DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$stbtt_GetCodepointKernAdvance
$pdata$stbtt_GetCodepointBox DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$stbtt_GetCodepointBox
$pdata$stbtt_GetGlyphHMetrics DD imagerel $LN9
	DD	imagerel $LN9+357
	DD	imagerel $unwind$stbtt_GetGlyphHMetrics
$pdata$stbtt_GetGlyphKernAdvance DD imagerel $LN6
	DD	imagerel $LN6+121
	DD	imagerel $unwind$stbtt_GetGlyphKernAdvance
$pdata$stbtt_GetGlyphBox DD imagerel $LN10
	DD	imagerel $LN10+297
	DD	imagerel $unwind$stbtt_GetGlyphBox
$pdata$stbtt_GetKerningTableLength DD imagerel $LN6
	DD	imagerel $LN6+130
	DD	imagerel $unwind$stbtt_GetKerningTableLength
$pdata$stbtt_GetKerningTable DD imagerel $LN10
	DD	imagerel $LN10+349
	DD	imagerel $unwind$stbtt_GetKerningTable
$pdata$stbtt_IsGlyphEmpty DD imagerel $LN9
	DD	imagerel $LN9+185
	DD	imagerel $unwind$stbtt_IsGlyphEmpty
$pdata$stbtt_GetCodepointShape DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$stbtt_GetCodepointShape
$pdata$stbtt_GetGlyphShape DD imagerel $LN5
	DD	imagerel $LN5+76
	DD	imagerel $unwind$stbtt_GetGlyphShape
$pdata$stbtt_FreeShape DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$stbtt_FreeShape
$pdata$stbtt_FindSVGDoc DD imagerel $LN7
	DD	imagerel $LN7+200
	DD	imagerel $unwind$stbtt_FindSVGDoc
$pdata$stbtt_GetCodepointSVG DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$stbtt_GetCodepointSVG
$pdata$stbtt_GetGlyphSVG DD imagerel $LN6
	DD	imagerel $LN6+162
	DD	imagerel $unwind$stbtt_GetGlyphSVG
$pdata$stbtt_FreeBitmap DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$stbtt_FreeBitmap
$pdata$stbtt_GetCodepointBitmap DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$stbtt_GetCodepointBitmap
$pdata$stbtt_GetCodepointBitmapSubpixel DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$stbtt_GetCodepointBitmapSubpixel
$pdata$stbtt_MakeCodepointBitmap DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$stbtt_MakeCodepointBitmap
$pdata$stbtt_MakeCodepointBitmapSubpixel DD imagerel $LN3
	DD	imagerel $LN3+146
	DD	imagerel $unwind$stbtt_MakeCodepointBitmapSubpixel
$pdata$stbtt_MakeCodepointBitmapSubpixelPrefilter DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$stbtt_MakeCodepointBitmapSubpixelPrefilter
$pdata$stbtt_GetCodepointBitmapBox DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$stbtt_GetCodepointBitmapBox
$pdata$stbtt_GetCodepointBitmapBoxSubpixel DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$stbtt_GetCodepointBitmapBoxSubpixel
$pdata$stbtt_GetGlyphBitmap DD imagerel $LN3
	DD	imagerel $LN3+127
	DD	imagerel $unwind$stbtt_GetGlyphBitmap
$pdata$stbtt_GetGlyphBitmapSubpixel DD imagerel $LN12
	DD	imagerel $LN12+689
	DD	imagerel $unwind$stbtt_GetGlyphBitmapSubpixel
$pdata$stbtt_MakeGlyphBitmap DD imagerel $LN3
	DD	imagerel $LN3+126
	DD	imagerel $unwind$stbtt_MakeGlyphBitmap
$pdata$stbtt_MakeGlyphBitmapSubpixel DD imagerel $LN4
	DD	imagerel $LN4+383
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixel
$pdata$stbtt_MakeGlyphBitmapSubpixelPrefilter DD imagerel $LN5
	DD	imagerel $LN5+310
	DD	imagerel $unwind$stbtt_MakeGlyphBitmapSubpixelPrefilter
$pdata$stbtt_GetGlyphBitmapBox DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBox
$pdata$stbtt_GetGlyphBitmapBoxSubpixel DD imagerel $LN13
	DD	imagerel $LN13+419
	DD	imagerel $unwind$stbtt_GetGlyphBitmapBoxSubpixel
$pdata$stbtt_Rasterize DD imagerel $LN6
	DD	imagerel $LN6+357
	DD	imagerel $unwind$stbtt_Rasterize
$pdata$stbtt_FreeSDF DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$stbtt_FreeSDF
$pdata$stbtt_GetGlyphSDF DD imagerel $LN83
	DD	imagerel $LN83+6524
	DD	imagerel $unwind$stbtt_GetGlyphSDF
$pdata$stbtt_GetCodepointSDF DD imagerel $LN3
	DD	imagerel $LN3+147
	DD	imagerel $unwind$stbtt_GetCodepointSDF
$pdata$stbtt_FindMatchingFont DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$stbtt_FindMatchingFont
$pdata$stbtt_CompareUTF8toUTF16_bigendian DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$stbtt_CompareUTF8toUTF16_bigendian
$pdata$stbtt_GetFontNameString DD imagerel $LN8
	DD	imagerel $LN8+445
	DD	imagerel $unwind$stbtt_GetFontNameString
$pdata$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z+82
	DD	imagerel $unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z
$pdata$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z+122
	DD	imagerel $unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z
$pdata$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z+42
	DD	imagerel $unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z
$pdata$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
	DD	imagerel ?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z+140
	DD	imagerel $unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z
$pdata$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
	DD	imagerel ?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z+118
	DD	imagerel $unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z
$pdata$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
	DD	imagerel ?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z+192
	DD	imagerel $unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z
$pdata$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
	DD	imagerel ?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z+249
	DD	imagerel $unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z
$pdata$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z+289
	DD	imagerel $unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z
$pdata$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z+163
	DD	imagerel $unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z
$pdata$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
	DD	imagerel ?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z+368
	DD	imagerel $unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z
$pdata$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
	DD	imagerel ?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z+141
	DD	imagerel $unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z
$pdata$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
	DD	imagerel ?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z+41
	DD	imagerel $unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z
$pdata$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z+324
	DD	imagerel $unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z
$pdata$?stbtt__find_table@@YAIPEAEIPEBD@Z DD imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z
	DD	imagerel ?stbtt__find_table@@YAIPEAEIPEBD@Z+349
	DD	imagerel $unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z
$pdata$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
	DD	imagerel ?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z+366
	DD	imagerel $unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z
$pdata$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z DD imagerel ?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z
	DD	imagerel ?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z+283
	DD	imagerel $unwind$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z
$pdata$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
	DD	imagerel ?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z+485
	DD	imagerel $unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z
$pdata$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z DD imagerel ?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z
	DD	imagerel ?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z+137
	DD	imagerel $unwind$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z
$pdata$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
	DD	imagerel ?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z+2243
	DD	imagerel $unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z
$pdata$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z+393
	DD	imagerel $unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z
$pdata$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
	DD	imagerel ?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z+391
	DD	imagerel $unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z
$pdata$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
	DD	imagerel ?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z+416
	DD	imagerel $unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z
$pdata$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+5027
	DD	imagerel $unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
$pdata$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
	DD	imagerel ?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z+250
	DD	imagerel $unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z
$pdata$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z+132
	DD	imagerel $unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z
$pdata$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z+214
	DD	imagerel $unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z
$pdata$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
	DD	imagerel ?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z+148
	DD	imagerel $unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z
$pdata$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
	DD	imagerel ?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z+243
	DD	imagerel $unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z
$pdata$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
	DD	imagerel ?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z+303
	DD	imagerel $unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z
$pdata$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
	DD	imagerel ?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z+559
	DD	imagerel $unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z
$pdata$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
	DD	imagerel ?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z+5184
	DD	imagerel $unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
$pdata$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z+415
	DD	imagerel $unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
$pdata$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD imagerel ?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
	DD	imagerel ?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z+313
	DD	imagerel $unwind$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
$pdata$?stbtt__GetCoverageIndex@@YAHPEAEH@Z DD imagerel ?stbtt__GetCoverageIndex@@YAHPEAEH@Z
	DD	imagerel ?stbtt__GetCoverageIndex@@YAHPEAEH@Z+553
	DD	imagerel $unwind$?stbtt__GetCoverageIndex@@YAHPEAEH@Z
$pdata$?stbtt__GetGlyphClass@@YAHPEAEH@Z DD imagerel ?stbtt__GetGlyphClass@@YAHPEAEH@Z
	DD	imagerel ?stbtt__GetGlyphClass@@YAHPEAEH@Z+472
	DD	imagerel $unwind$?stbtt__GetGlyphClass@@YAHPEAEH@Z
$pdata$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD imagerel ?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
	DD	imagerel ?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z+1552
	DD	imagerel $unwind$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z
$pdata$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
	DD	imagerel ?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z+300
	DD	imagerel $unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z
$pdata$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
	DD	imagerel ?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z+76
	DD	imagerel $unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z
$pdata$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
	DD	imagerel ?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z+433
	DD	imagerel $unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z
$pdata$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
	DD	imagerel ?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z+1091
	DD	imagerel $unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z
$pdata$?stbtt__sized_trapezoid_area@@YAMMMM@Z DD imagerel ?stbtt__sized_trapezoid_area@@YAMMMM@Z
	DD	imagerel ?stbtt__sized_trapezoid_area@@YAMMMM@Z+141
	DD	imagerel $unwind$?stbtt__sized_trapezoid_area@@YAMMMM@Z
$pdata$?stbtt__position_trapezoid_area@@YAMMMMMM@Z DD imagerel ?stbtt__position_trapezoid_area@@YAMMMMMM@Z
	DD	imagerel ?stbtt__position_trapezoid_area@@YAMMMMMM@Z+72
	DD	imagerel $unwind$?stbtt__position_trapezoid_area@@YAMMMMMM@Z
$pdata$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
	DD	imagerel ?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z+4071
	DD	imagerel $unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z
$pdata$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z+1293
	DD	imagerel $unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
$pdata$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z+341
	DD	imagerel $unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z+1119
	DD	imagerel $unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
	DD	imagerel ?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z+46
	DD	imagerel $unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z
$pdata$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
	DD	imagerel ?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z+1008
	DD	imagerel $unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z
$pdata$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z+632
	DD	imagerel $unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z
$pdata$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
	DD	imagerel ?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z+1342
	DD	imagerel $unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z
$pdata$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
	DD	imagerel ?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z+1487
	DD	imagerel $unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z
$pdata$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z DD imagerel ?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z
	DD	imagerel ?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z+926
	DD	imagerel $unwind$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z
$pdata$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z DD imagerel ?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z
	DD	imagerel ?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z+384
	DD	imagerel $unwind$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z
$pdata$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__h_prefilter@@YAXPEAEHHHI@Z+1091
	DD	imagerel $unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z
$pdata$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z
	DD	imagerel ?stbtt__v_prefilter@@YAXPEAEHHHI@Z+1214
	DD	imagerel $unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z
$pdata$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z DD imagerel ?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z
	DD	imagerel ?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z+1775
	DD	imagerel $unwind$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z
$pdata$?equal@@YAHPEAM0@Z DD imagerel ?equal@@YAHPEAM0@Z
	DD	imagerel ?equal@@YAHPEAM0@Z+124
	DD	imagerel $unwind$?equal@@YAHPEAM0@Z
$pdata$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z DD imagerel ?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
	DD	imagerel ?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z+2341
	DD	imagerel $unwind$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
$pdata$?stbtt__cuberoot@@YAMM@Z DD imagerel ?stbtt__cuberoot@@YAMM@Z
	DD	imagerel ?stbtt__cuberoot@@YAMM@Z+97
	DD	imagerel $unwind$?stbtt__cuberoot@@YAMM@Z
$pdata$?stbtt__solve_cubic@@YAHMMMPEAM@Z DD imagerel ?stbtt__solve_cubic@@YAHMMMPEAM@Z
	DD	imagerel ?stbtt__solve_cubic@@YAHMMMPEAM@Z+754
	DD	imagerel $unwind$?stbtt__solve_cubic@@YAHMMMPEAM@Z
$pdata$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z DD imagerel ?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z
	DD	imagerel ?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z+1079
	DD	imagerel $unwind$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z
$pdata$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z DD imagerel ?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z
	DD	imagerel ?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z+80
	DD	imagerel $unwind$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z
$pdata$?stbtt__matchpair@@YAHPEAEI0HHH@Z DD imagerel ?stbtt__matchpair@@YAHPEAEI0HHH@Z
	DD	imagerel ?stbtt__matchpair@@YAHPEAEI0HHH@Z+874
	DD	imagerel $unwind$?stbtt__matchpair@@YAHPEAEI0HHH@Z
$pdata$?stbtt__matches@@YAHPEAEI0H@Z DD imagerel ?stbtt__matches@@YAHPEAEI0H@Z
	DD	imagerel ?stbtt__matches@@YAHPEAEI0H@Z+526
	DD	imagerel $unwind$?stbtt__matches@@YAHPEAEI0H@Z
$pdata$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z DD imagerel ?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z
	DD	imagerel ?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z+111
	DD	imagerel $unwind$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z
$pdata$stbi_load_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_from_memory
$pdata$stbi_load_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_from_callbacks
$pdata$stbi_load DD imagerel $LN6
	DD	imagerel $LN6+157
	DD	imagerel $unwind$stbi_load
$pdata$stbi_load_from_file DD imagerel $LN4
	DD	imagerel $LN4+196
	DD	imagerel $unwind$stbi_load_from_file
$pdata$stbi_load_gif_from_memory DD imagerel $LN6
	DD	imagerel $LN6+315
	DD	imagerel $unwind$stbi_load_gif_from_memory
$pdata$stbi_load_16_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_load_16_from_memory
$pdata$stbi_load_16_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_load_16_from_callbacks
$pdata$stbi_load_16 DD imagerel $LN6
	DD	imagerel $LN6+157
	DD	imagerel $unwind$stbi_load_16
$pdata$stbi_load_from_file_16 DD imagerel $LN4
	DD	imagerel $LN4+196
	DD	imagerel $unwind$stbi_load_from_file_16
$pdata$stbi_loadf_from_memory DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$stbi_loadf_from_memory
$pdata$stbi_loadf_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$stbi_loadf_from_callbacks
$pdata$stbi_loadf DD imagerel $LN6
	DD	imagerel $LN6+157
	DD	imagerel $unwind$stbi_loadf
$pdata$stbi_loadf_from_file DD imagerel $LN3
	DD	imagerel $LN3+132
	DD	imagerel $unwind$stbi_loadf_from_file
$pdata$stbi_is_hdr_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_hdr_from_callbacks
$pdata$stbi_is_hdr_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_hdr_from_memory
$pdata$stbi_is_hdr DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$stbi_is_hdr
$pdata$stbi_is_hdr_from_file DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_is_hdr_from_file
$pdata$stbi_image_free DD imagerel $LN3
	DD	imagerel $LN3+25
	DD	imagerel $unwind$stbi_image_free
$pdata$stbi_info_from_memory DD imagerel $LN3
	DD	imagerel $LN3+128
	DD	imagerel $unwind$stbi_info_from_memory
$pdata$stbi_info_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_info_from_callbacks
$pdata$stbi_is_16_bit_from_memory DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$stbi_is_16_bit_from_memory
$pdata$stbi_is_16_bit_from_callbacks DD imagerel $LN3
	DD	imagerel $LN3+95
	DD	imagerel $unwind$stbi_is_16_bit_from_callbacks
$pdata$stbi_info DD imagerel $LN4
	DD	imagerel $LN4+117
	DD	imagerel $unwind$stbi_info
$pdata$stbi_info_from_file DD imagerel $LN3
	DD	imagerel $LN3+168
	DD	imagerel $unwind$stbi_info_from_file
$pdata$stbi_is_16_bit DD imagerel $LN4
	DD	imagerel $LN4+87
	DD	imagerel $unwind$stbi_is_16_bit
$pdata$stbi_is_16_bit_from_file DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$stbi_is_16_bit_from_file
$pdata$stbi_zlib_decode_malloc_guesssize DD imagerel $LN7
	DD	imagerel $LN7+250
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize
$pdata$stbi_zlib_decode_malloc_guesssize_headerflag DD imagerel $LN7
	DD	imagerel $LN7+253
	DD	imagerel $unwind$stbi_zlib_decode_malloc_guesssize_headerflag
$pdata$stbi_zlib_decode_malloc DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$stbi_zlib_decode_malloc
$pdata$stbi_zlib_decode_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_buffer
$pdata$stbi_zlib_decode_noheader_malloc DD imagerel $LN7
	DD	imagerel $LN7+237
	DD	imagerel $unwind$stbi_zlib_decode_noheader_malloc
$pdata$stbi_zlib_decode_noheader_buffer DD imagerel $LN5
	DD	imagerel $LN5+180
	DD	imagerel $unwind$stbi_zlib_decode_noheader_buffer
$pdata$?stbi__cpuid3@@YAHXZ DD imagerel ?stbi__cpuid3@@YAHXZ
	DD	imagerel ?stbi__cpuid3@@YAHXZ+80
	DD	imagerel $unwind$?stbi__cpuid3@@YAHXZ
$pdata$?stbi__sse2_available@@YAHXZ DD imagerel ?stbi__sse2_available@@YAHXZ
	DD	imagerel ?stbi__sse2_available@@YAHXZ+54
	DD	imagerel $unwind$?stbi__sse2_available@@YAHXZ
$pdata$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z DD imagerel ?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z
	DD	imagerel ?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z+241
	DD	imagerel $unwind$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z
$pdata$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z DD imagerel ?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z
	DD	imagerel ?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z+147
	DD	imagerel $unwind$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z
$pdata$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z DD imagerel ?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z
	DD	imagerel ?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z+184
	DD	imagerel $unwind$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z
$pdata$?stbi__stdio_read@@YAHPEAXPEADH@Z DD imagerel ?stbi__stdio_read@@YAHPEAXPEADH@Z
	DD	imagerel ?stbi__stdio_read@@YAHPEAXPEADH@Z+53
	DD	imagerel $unwind$?stbi__stdio_read@@YAHPEAXPEADH@Z
$pdata$?stbi__stdio_skip@@YAXPEAXH@Z DD imagerel ?stbi__stdio_skip@@YAXPEAXH@Z
	DD	imagerel ?stbi__stdio_skip@@YAXPEAXH@Z+76
	DD	imagerel $unwind$?stbi__stdio_skip@@YAXPEAXH@Z
$pdata$?stbi__stdio_eof@@YAHPEAX@Z DD imagerel ?stbi__stdio_eof@@YAHPEAX@Z
	DD	imagerel ?stbi__stdio_eof@@YAHPEAX@Z+66
	DD	imagerel $unwind$?stbi__stdio_eof@@YAHPEAX@Z
$pdata$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z DD imagerel ?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z
	DD	imagerel ?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z+41
	DD	imagerel $unwind$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z
$pdata$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z+118
	DD	imagerel $unwind$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+173
	DD	imagerel $unwind$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z+123
	DD	imagerel $unwind$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__png_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__png_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__png_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__png_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+94
	DD	imagerel $unwind$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z+64
	DD	imagerel $unwind$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__png_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__png_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__png_is16@@YAHPEAUstbi__context@@@Z+76
	DD	imagerel $unwind$?stbi__png_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__bmp_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__bmp_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+4553
	DD	imagerel $unwind$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z+249
	DD	imagerel $unwind$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__tga_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__tga_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__tga_test@@YAHPEAUstbi__context@@@Z+402
	DD	imagerel $unwind$?stbi__tga_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+2686
	DD	imagerel $unwind$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z+612
	DD	imagerel $unwind$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__psd_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__psd_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__psd_test@@YAHPEAUstbi__context@@@Z+71
	DD	imagerel $unwind$?stbi__psd_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD imagerel ?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
	DD	imagerel ?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z+2958
	DD	imagerel $unwind$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
$pdata$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z+327
	DD	imagerel $unwind$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__psd_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__psd_is16@@YAHPEAUstbi__context@@@Z+194
	DD	imagerel $unwind$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__hdr_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__hdr_test@@YAHPEAUstbi__context@@@Z+87
	DD	imagerel $unwind$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+2336
	DD	imagerel $unwind$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z+543
	DD	imagerel $unwind$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pic_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pic_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pic_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__pic_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+657
	DD	imagerel $unwind$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z+652
	DD	imagerel $unwind$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__gif_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__gif_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__gif_test@@YAHPEAUstbi__context@@@Z+42
	DD	imagerel $unwind$?stbi__gif_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+319
	DD	imagerel $unwind$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z DD imagerel ?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
	DD	imagerel ?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z+1010
	DD	imagerel $unwind$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
$pdata$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z+54
	DD	imagerel $unwind$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pnm_test@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pnm_test@@YAHPEAUstbi__context@@@Z+91
	DD	imagerel $unwind$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z+661
	DD	imagerel $unwind$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z+379
	DD	imagerel $unwind$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z+46
	DD	imagerel $unwind$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__malloc@@YAPEAX_K@Z DD imagerel ?stbi__malloc@@YAPEAX_K@Z
	DD	imagerel ?stbi__malloc@@YAPEAX_K@Z+25
	DD	imagerel $unwind$?stbi__malloc@@YAPEAX_K@Z
$pdata$?stbi__addsizes_valid@@YAHHH@Z DD imagerel ?stbi__addsizes_valid@@YAHHH@Z
	DD	imagerel ?stbi__addsizes_valid@@YAHHH@Z+62
	DD	imagerel $unwind$?stbi__addsizes_valid@@YAHHH@Z
$pdata$?stbi__mul2sizes_valid@@YAHHH@Z DD imagerel ?stbi__mul2sizes_valid@@YAHHH@Z
	DD	imagerel ?stbi__mul2sizes_valid@@YAHHH@Z+84
	DD	imagerel $unwind$?stbi__mul2sizes_valid@@YAHHH@Z
$pdata$?stbi__mad2sizes_valid@@YAHHHH@Z DD imagerel ?stbi__mad2sizes_valid@@YAHHHH@Z
	DD	imagerel ?stbi__mad2sizes_valid@@YAHHHH@Z+85
	DD	imagerel $unwind$?stbi__mad2sizes_valid@@YAHHHH@Z
$pdata$?stbi__mad3sizes_valid@@YAHHHHH@Z DD imagerel ?stbi__mad3sizes_valid@@YAHHHHH@Z
	DD	imagerel ?stbi__mad3sizes_valid@@YAHHHHH@Z+119
	DD	imagerel $unwind$?stbi__mad3sizes_valid@@YAHHHHH@Z
$pdata$?stbi__mad4sizes_valid@@YAHHHHHH@Z DD imagerel ?stbi__mad4sizes_valid@@YAHHHHHH@Z
	DD	imagerel ?stbi__mad4sizes_valid@@YAHHHHHH@Z+153
	DD	imagerel $unwind$?stbi__mad4sizes_valid@@YAHHHHHH@Z
$pdata$?stbi__malloc_mad2@@YAPEAXHHH@Z DD imagerel ?stbi__malloc_mad2@@YAPEAXHHH@Z
	DD	imagerel ?stbi__malloc_mad2@@YAPEAXHHH@Z+71
	DD	imagerel $unwind$?stbi__malloc_mad2@@YAPEAXHHH@Z
$pdata$?stbi__malloc_mad3@@YAPEAXHHHH@Z DD imagerel ?stbi__malloc_mad3@@YAPEAXHHHH@Z
	DD	imagerel ?stbi__malloc_mad3@@YAPEAXHHHH@Z+86
	DD	imagerel $unwind$?stbi__malloc_mad3@@YAPEAXHHHH@Z
$pdata$?stbi__malloc_mad4@@YAPEAXHHHHH@Z DD imagerel ?stbi__malloc_mad4@@YAPEAXHHHHH@Z
	DD	imagerel ?stbi__malloc_mad4@@YAPEAXHHHHH@Z+99
	DD	imagerel $unwind$?stbi__malloc_mad4@@YAPEAXHHHHH@Z
$pdata$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z DD imagerel ?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z
	DD	imagerel ?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z+487
	DD	imagerel $unwind$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z
$pdata$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z DD imagerel ?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z
	DD	imagerel ?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z+579
	DD	imagerel $unwind$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z
$pdata$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD imagerel ?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
	DD	imagerel ?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z+819
	DD	imagerel $unwind$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z
$pdata$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z DD imagerel ?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z
	DD	imagerel ?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z+196
	DD	imagerel $unwind$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z
$pdata$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z DD imagerel ?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z
	DD	imagerel ?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z+211
	DD	imagerel $unwind$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z
$pdata$?stbi__vertical_flip@@YAXPEAXHHH@Z DD imagerel ?stbi__vertical_flip@@YAXPEAXHHH@Z
	DD	imagerel ?stbi__vertical_flip@@YAXPEAXHHH@Z+410
	DD	imagerel $unwind$?stbi__vertical_flip@@YAXPEAXHHH@Z
$pdata$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z DD imagerel ?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z
	DD	imagerel ?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z+133
	DD	imagerel $unwind$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z
$pdata$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z+454
	DD	imagerel $unwind$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z+460
	DD	imagerel $unwind$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z DD imagerel ?stbi__float_postprocess@@YAXPEAMPEAH11H@Z
	DD	imagerel ?stbi__float_postprocess@@YAXPEAMPEAH11H@Z+194
	DD	imagerel $unwind$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z
$pdata$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z DD imagerel ?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z
	DD	imagerel ?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z+58
	DD	imagerel $unwind$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z
$pdata$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z DD imagerel ?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
	DD	imagerel ?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z+354
	DD	imagerel $unwind$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
$pdata$?stbi__get8@@YAEPEAUstbi__context@@@Z DD imagerel ?stbi__get8@@YAEPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get8@@YAEPEAUstbi__context@@@Z+169
	DD	imagerel $unwind$?stbi__get8@@YAEPEAUstbi__context@@@Z
$pdata$?stbi__at_eof@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__at_eof@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__at_eof@@YAHPEAUstbi__context@@@Z+127
	DD	imagerel $unwind$?stbi__at_eof@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__skip@@YAXPEAUstbi__context@@H@Z DD imagerel ?stbi__skip@@YAXPEAUstbi__context@@H@Z
	DD	imagerel ?stbi__skip@@YAXPEAUstbi__context@@H@Z+215
	DD	imagerel $unwind$?stbi__skip@@YAXPEAUstbi__context@@H@Z
$pdata$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z DD imagerel ?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z
	DD	imagerel ?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z+355
	DD	imagerel $unwind$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z
$pdata$?stbi__get16be@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__get16be@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get16be@@YAHPEAUstbi__context@@@Z+63
	DD	imagerel $unwind$?stbi__get16be@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__get32be@@YAIPEAUstbi__context@@@Z DD imagerel ?stbi__get32be@@YAIPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get32be@@YAIPEAUstbi__context@@@Z+57
	DD	imagerel $unwind$?stbi__get32be@@YAIPEAUstbi__context@@@Z
$pdata$?stbi__get16le@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__get16le@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get16le@@YAHPEAUstbi__context@@@Z+55
	DD	imagerel $unwind$?stbi__get16le@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__get32le@@YAIPEAUstbi__context@@@Z DD imagerel ?stbi__get32le@@YAIPEAUstbi__context@@@Z
	DD	imagerel ?stbi__get32le@@YAIPEAUstbi__context@@@Z+57
	DD	imagerel $unwind$?stbi__get32le@@YAIPEAUstbi__context@@@Z
$pdata$?stbi__convert_format@@YAPEAEPEAEHHII@Z DD imagerel ?stbi__convert_format@@YAPEAEPEAEHHII@Z
	DD	imagerel ?stbi__convert_format@@YAPEAEPEAEHHII@Z+2668
	DD	imagerel $unwind$?stbi__convert_format@@YAPEAEPEAEHHII@Z
$pdata$?stbi__convert_format16@@YAPEAGPEAGHHII@Z DD imagerel ?stbi__convert_format16@@YAPEAGPEAGHHII@Z
	DD	imagerel ?stbi__convert_format16@@YAPEAGPEAGHHII@Z+2720
	DD	imagerel $unwind$?stbi__convert_format16@@YAPEAGPEAGHHII@Z
$pdata$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z DD imagerel ?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z
	DD	imagerel ?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z+658
	DD	imagerel $unwind$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z
$pdata$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z DD imagerel ?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z
	DD	imagerel ?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z+367
	DD	imagerel $unwind$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z
$pdata$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z+264
	DD	imagerel $unwind$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z DD imagerel ?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z
	DD	imagerel ?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z+662
	DD	imagerel $unwind$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z
$pdata$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z+209
	DD	imagerel $unwind$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z+164
	DD	imagerel $unwind$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z+110
	DD	imagerel $unwind$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z DD imagerel ?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z
	DD	imagerel ?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z+762
	DD	imagerel $unwind$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z
$pdata$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z DD imagerel ?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z
	DD	imagerel ?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z+414
	DD	imagerel $unwind$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z
$pdata$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z DD imagerel ?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z
	DD	imagerel ?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z+1710
	DD	imagerel $unwind$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z
$pdata$?stbi__idct_block@@YAXPEAEHQEAF@Z DD imagerel ?stbi__idct_block@@YAXPEAEHQEAF@Z
	DD	imagerel ?stbi__idct_block@@YAXPEAEHQEAF@Z+2715
	DD	imagerel $unwind$?stbi__idct_block@@YAXPEAEHQEAF@Z
$pdata$?stbi__idct_simd@@YAXPEAEHQEAF@Z DD imagerel ?stbi__idct_simd@@YAXPEAEHQEAF@Z
	DD	imagerel ?stbi__idct_simd@@YAXPEAEHQEAF@Z+11002
	DD	imagerel $unwind$?stbi__idct_simd@@YAXPEAEHQEAF@Z
$pdata$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z DD imagerel ?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z+137
	DD	imagerel $unwind$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z+237
	DD	imagerel $unwind$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z+3188
	DD	imagerel $unwind$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z DD imagerel ?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z
	DD	imagerel ?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z+88
	DD	imagerel $unwind$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z
$pdata$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z+467
	DD	imagerel $unwind$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z+1716
	DD	imagerel $unwind$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z+812
	DD	imagerel $unwind$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z DD imagerel ?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z
	DD	imagerel ?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z+355
	DD	imagerel $unwind$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z
$pdata$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z+2318
	DD	imagerel $unwind$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z DD imagerel ?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z
	DD	imagerel ?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z+345
	DD	imagerel $unwind$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z
$pdata$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z DD imagerel ?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z+487
	DD	imagerel $unwind$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z
$pdata$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z+110
	DD	imagerel $unwind$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z+474
	DD	imagerel $unwind$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z+383
	DD	imagerel $unwind$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z+1637
	DD	imagerel $unwind$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z
$pdata$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z DD imagerel ?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z
	DD	imagerel ?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z+131
	DD	imagerel $unwind$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z
$pdata$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z DD imagerel ?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z
	DD	imagerel ?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z+451
	DD	imagerel $unwind$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z
$pdata$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z DD imagerel ?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z
	DD	imagerel ?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z+1986
	DD	imagerel $unwind$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z
$pdata$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z+137
	DD	imagerel $unwind$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD imagerel ?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z
	DD	imagerel ?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z+38
	DD	imagerel $unwind$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z
$pdata$?stbi__blinn_8x8@@YAEEE@Z DD imagerel ?stbi__blinn_8x8@@YAEEE@Z
	DD	imagerel ?stbi__blinn_8x8@@YAEEE@Z+54
	DD	imagerel $unwind$?stbi__blinn_8x8@@YAEEE@Z
$pdata$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z DD imagerel ?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
	DD	imagerel ?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z+4606
	DD	imagerel $unwind$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
$pdata$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z DD imagerel ?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z
	DD	imagerel ?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z+172
	DD	imagerel $unwind$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z
$pdata$?stbi__bit_reverse@@YAHHH@Z DD imagerel ?stbi__bit_reverse@@YAHHH@Z
	DD	imagerel ?stbi__bit_reverse@@YAHHH@Z+72
	DD	imagerel $unwind$?stbi__bit_reverse@@YAHHH@Z
$pdata$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z DD imagerel ?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
	DD	imagerel ?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z+896
	DD	imagerel $unwind$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
$pdata$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z+52
	DD	imagerel $unwind$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z DD imagerel ?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z+77
	DD	imagerel $unwind$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z
$pdata$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z DD imagerel ?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z+181
	DD	imagerel $unwind$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z
$pdata$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z DD imagerel ?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z
	DD	imagerel ?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z+143
	DD	imagerel $unwind$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z
$pdata$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD imagerel ?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
	DD	imagerel ?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z+290
	DD	imagerel $unwind$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
$pdata$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD imagerel ?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
	DD	imagerel ?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z+193
	DD	imagerel $unwind$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z
$pdata$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z DD imagerel ?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z
	DD	imagerel ?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z+325
	DD	imagerel $unwind$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z
$pdata$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z+716
	DD	imagerel $unwind$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z+787
	DD	imagerel $unwind$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z+498
	DD	imagerel $unwind$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z DD imagerel ?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z
	DD	imagerel ?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z+178
	DD	imagerel $unwind$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z
$pdata$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z DD imagerel ?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z
	DD	imagerel ?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z+296
	DD	imagerel $unwind$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z
$pdata$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z DD imagerel ?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z
	DD	imagerel ?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z+108
	DD	imagerel $unwind$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z
$pdata$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z DD imagerel ?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z
	DD	imagerel ?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z+47
	DD	imagerel $unwind$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z
$pdata$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__check_png_header@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__check_png_header@@YAHPEAUstbi__context@@@Z+95
	DD	imagerel $unwind$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__paeth@@YAHHHH@Z DD imagerel ?stbi__paeth@@YAHHHH@Z
	DD	imagerel ?stbi__paeth@@YAHHHH@Z+157
	DD	imagerel $unwind$?stbi__paeth@@YAHHHH@Z
$pdata$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z DD imagerel ?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z
	DD	imagerel ?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z+6312
	DD	imagerel $unwind$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z
$pdata$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z DD imagerel ?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
	DD	imagerel ?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z+1286
	DD	imagerel $unwind$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
$pdata$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z DD imagerel ?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z
	DD	imagerel ?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z+451
	DD	imagerel $unwind$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z
$pdata$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z DD imagerel ?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z
	DD	imagerel ?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z+454
	DD	imagerel $unwind$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z
$pdata$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z DD imagerel ?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z
	DD	imagerel ?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z+563
	DD	imagerel $unwind$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z
$pdata$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z DD imagerel ?stbi__de_iphone@@YAXPEAUstbi__png@@@Z
	DD	imagerel ?stbi__de_iphone@@YAXPEAUstbi__png@@@Z+801
	DD	imagerel $unwind$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z
$pdata$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z DD imagerel ?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
	DD	imagerel ?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z+3413
	DD	imagerel $unwind$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
$pdata$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z DD imagerel ?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z
	DD	imagerel ?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z+581
	DD	imagerel $unwind$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z
$pdata$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z DD imagerel ?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z
	DD	imagerel ?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z+150
	DD	imagerel $unwind$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z
$pdata$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z+180
	DD	imagerel $unwind$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__high_bit@@YAHI@Z DD imagerel ?stbi__high_bit@@YAHI@Z
	DD	imagerel ?stbi__high_bit@@YAHI@Z+169
	DD	imagerel $unwind$?stbi__high_bit@@YAHI@Z
$pdata$?stbi__shiftsigned@@YAHIHH@Z DD imagerel ?stbi__shiftsigned@@YAHIHH@Z
	DD	imagerel ?stbi__shiftsigned@@YAHIHH@Z+208
	DD	imagerel $unwind$?stbi__shiftsigned@@YAHIHH@Z
$pdata$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z DD imagerel ?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z
	DD	imagerel ?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z+1359
	DD	imagerel $unwind$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z
$pdata$?stbi__tga_get_comp@@YAHHHPEAH@Z DD imagerel ?stbi__tga_get_comp@@YAHHHPEAH@Z
	DD	imagerel ?stbi__tga_get_comp@@YAHHHPEAH@Z+144
	DD	imagerel $unwind$?stbi__tga_get_comp@@YAHHHPEAH@Z
$pdata$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z DD imagerel ?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z
	DD	imagerel ?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z+197
	DD	imagerel $unwind$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z
$pdata$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z DD imagerel ?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z
	DD	imagerel ?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z+318
	DD	imagerel $unwind$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z
$pdata$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z DD imagerel ?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z
	DD	imagerel ?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z+88
	DD	imagerel $unwind$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z
$pdata$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z+108
	DD	imagerel $unwind$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z DD imagerel ?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z
	DD	imagerel ?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z+169
	DD	imagerel $unwind$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z
$pdata$?stbi__copyval@@YAXHPEAEPEBE@Z DD imagerel ?stbi__copyval@@YAXHPEAEPEBE@Z
	DD	imagerel ?stbi__copyval@@YAXHPEAEPEBE@Z+108
	DD	imagerel $unwind$?stbi__copyval@@YAXHPEAEPEBE@Z
$pdata$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z DD imagerel ?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
	DD	imagerel ?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z+1609
	DD	imagerel $unwind$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
$pdata$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z+152
	DD	imagerel $unwind$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z
$pdata$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z DD imagerel ?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z
	DD	imagerel ?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z+235
	DD	imagerel $unwind$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z
$pdata$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z DD imagerel ?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z
	DD	imagerel ?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z+524
	DD	imagerel $unwind$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z
$pdata$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z+182
	DD	imagerel $unwind$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z DD imagerel ?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z
	DD	imagerel ?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z+662
	DD	imagerel $unwind$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z
$pdata$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z DD imagerel ?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z
	DD	imagerel ?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z+1107
	DD	imagerel $unwind$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z
$pdata$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z DD imagerel ?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z
	DD	imagerel ?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z+2536
	DD	imagerel $unwind$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z
$pdata$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z DD imagerel ?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z
	DD	imagerel ?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z+160
	DD	imagerel $unwind$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z
$pdata$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z DD imagerel ?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z
	DD	imagerel ?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z+109
	DD	imagerel $unwind$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z
$pdata$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z+179
	DD	imagerel $unwind$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z
$pdata$?stbi__hdr_convert@@YAXPEAMPEAEH@Z DD imagerel ?stbi__hdr_convert@@YAXPEAMPEAEH@Z
	DD	imagerel ?stbi__hdr_convert@@YAXPEAMPEAEH@Z+613
	DD	imagerel $unwind$?stbi__hdr_convert@@YAXPEAMPEAEH@Z
$pdata$?stbi__pnm_isspace@@YAHD@Z DD imagerel ?stbi__pnm_isspace@@YAHD@Z
	DD	imagerel ?stbi__pnm_isspace@@YAHD@Z+92
	DD	imagerel $unwind$?stbi__pnm_isspace@@YAHD@Z
$pdata$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z+162
	DD	imagerel $unwind$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z
$pdata$?stbi__pnm_isdigit@@YAHD@Z DD imagerel ?stbi__pnm_isdigit@@YAHD@Z
	DD	imagerel ?stbi__pnm_isdigit@@YAHD@Z+52
	DD	imagerel $unwind$?stbi__pnm_isdigit@@YAHD@Z
$pdata$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z DD imagerel ?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z
	DD	imagerel ?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z+102
	DD	imagerel $unwind$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z
$pdata$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z DD imagerel ?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z
	DD	imagerel ?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z+380
	DD	imagerel $unwind$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z
$pdata$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z DD imagerel ?stbi__is_16_main@@YAHPEAUstbi__context@@@Z
	DD	imagerel ?stbi__is_16_main@@YAHPEAUstbi__context@@@Z+79
	DD	imagerel $unwind$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z
$pdata$stbi_write_png DD imagerel $LN5
	DD	imagerel $LN5+194
	DD	imagerel $unwind$stbi_write_png
$pdata$stbi_write_bmp DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_bmp
$pdata$stbi_write_tga DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_tga
$pdata$stbi_write_hdr DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$stbi_write_hdr
$pdata$stbi_write_jpg DD imagerel $LN5
	DD	imagerel $LN5+190
	DD	imagerel $unwind$stbi_write_jpg
$pdata$stbi_write_png_to_func DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$stbi_write_png_to_func
$pdata$stbi_write_bmp_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_bmp_to_func
$pdata$stbi_write_tga_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_tga_to_func
$pdata$stbi_write_hdr_to_func DD imagerel $LN3
	DD	imagerel $LN3+160
	DD	imagerel $unwind$stbi_write_hdr_to_func
$pdata$stbi_write_jpg_to_func DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$stbi_write_jpg_to_func
$pdata$?stbi__stdio_write@@YAXPEAX0H@Z DD imagerel ?stbi__stdio_write@@YAXPEAX0H@Z
	DD	imagerel ?stbi__stdio_write@@YAXPEAX0H@Z+53
	DD	imagerel $unwind$?stbi__stdio_write@@YAXPEAX0H@Z
$pdata$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z DD imagerel ?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z
	DD	imagerel ?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z+58
	DD	imagerel $unwind$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z
$pdata$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z DD imagerel ?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z
	DD	imagerel ?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z+93
	DD	imagerel $unwind$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z
$pdata$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z DD imagerel ?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z
	DD	imagerel ?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z+29
	DD	imagerel $unwind$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z
$pdata$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z DD imagerel ?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z
	DD	imagerel ?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z+699
	DD	imagerel $unwind$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z
$pdata$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ DD imagerel ?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ
	DD	imagerel ?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ+68
	DD	imagerel $unwind$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ
$pdata$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z DD imagerel ?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z
	DD	imagerel ?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z+84
	DD	imagerel $unwind$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z
$pdata$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z DD imagerel ?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z
	DD	imagerel ?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z+55
	DD	imagerel $unwind$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z
$pdata$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z DD imagerel ?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z
	DD	imagerel ?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z+87
	DD	imagerel $unwind$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z
$pdata$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z DD imagerel ?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z
	DD	imagerel ?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z+149
	DD	imagerel $unwind$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z
$pdata$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z DD imagerel ?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z
	DD	imagerel ?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z+519
	DD	imagerel $unwind$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z
$pdata$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z DD imagerel ?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z
	DD	imagerel ?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z+329
	DD	imagerel $unwind$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z
$pdata$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ DD imagerel ?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ
	DD	imagerel ?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ+208
	DD	imagerel $unwind$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ
$pdata$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z DD imagerel ?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z
	DD	imagerel ?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z+902
	DD	imagerel $unwind$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z
$pdata$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z DD imagerel ?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z
	DD	imagerel ?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z+1764
	DD	imagerel $unwind$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z
$pdata$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z DD imagerel ?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z
	DD	imagerel ?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z+581
	DD	imagerel $unwind$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z
$pdata$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z DD imagerel ?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z
	DD	imagerel ?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z+159
	DD	imagerel $unwind$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z
$pdata$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z DD imagerel ?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z
	DD	imagerel ?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z+147
	DD	imagerel $unwind$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z
$pdata$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z DD imagerel ?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
	DD	imagerel ?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z+1573
	DD	imagerel $unwind$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
$pdata$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z DD imagerel ?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
	DD	imagerel ?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z+456
	DD	imagerel $unwind$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
$pdata$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z DD imagerel ?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z
	DD	imagerel ?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z+292
	DD	imagerel $unwind$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z
$pdata$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z DD imagerel ?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z
	DD	imagerel ?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z+244
	DD	imagerel $unwind$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z
$pdata$?stbiw__zlib_bitrev@@YAHHH@Z DD imagerel ?stbiw__zlib_bitrev@@YAHHH@Z
	DD	imagerel ?stbiw__zlib_bitrev@@YAHHH@Z+81
	DD	imagerel $unwind$?stbiw__zlib_bitrev@@YAHHH@Z
$pdata$?stbiw__zlib_countm@@YAIPEAE0H@Z DD imagerel ?stbiw__zlib_countm@@YAIPEAE0H@Z
	DD	imagerel ?stbiw__zlib_countm@@YAIPEAE0H@Z+96
	DD	imagerel $unwind$?stbiw__zlib_countm@@YAIPEAE0H@Z
$pdata$?stbiw__zhash@@YAIPEAE@Z DD imagerel ?stbiw__zhash@@YAIPEAE@Z
	DD	imagerel ?stbiw__zhash@@YAIPEAE@Z+180
	DD	imagerel $unwind$?stbiw__zhash@@YAIPEAE@Z
$pdata$stbi_zlib_compress DD imagerel $LN100
	DD	imagerel $LN100+6676
	DD	imagerel $unwind$stbi_zlib_compress
$pdata$?stbiw__crc32@@YAIPEAEH@Z DD imagerel ?stbiw__crc32@@YAIPEAEH@Z
	DD	imagerel ?stbiw__crc32@@YAIPEAEH@Z+108
	DD	imagerel $unwind$?stbiw__crc32@@YAIPEAEH@Z
$pdata$?stbiw__wpcrc@@YAXPEAPEAEH@Z DD imagerel ?stbiw__wpcrc@@YAXPEAPEAEH@Z
	DD	imagerel ?stbiw__wpcrc@@YAXPEAPEAEH@Z+204
	DD	imagerel $unwind$?stbiw__wpcrc@@YAXPEAPEAEH@Z
$pdata$?stbiw__paeth@@YAEHHH@Z DD imagerel ?stbiw__paeth@@YAEHHH@Z
	DD	imagerel ?stbiw__paeth@@YAEHHH@Z+172
	DD	imagerel $unwind$?stbiw__paeth@@YAEHHH@Z
$pdata$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z DD imagerel ?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z
	DD	imagerel ?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z+1576
	DD	imagerel $unwind$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z
$pdata$stbi_write_png_to_mem DD imagerel $LN23
	DD	imagerel $LN23+2558
	DD	imagerel $unwind$stbi_write_png_to_mem
$pdata$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z DD imagerel ?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z
	DD	imagerel ?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z+230
	DD	imagerel $unwind$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z
$pdata$?stbiw__jpg_DCT@@YAXPEAM0000000@Z DD imagerel ?stbiw__jpg_DCT@@YAXPEAM0000000@Z
	DD	imagerel ?stbiw__jpg_DCT@@YAXPEAM0000000@Z+837
	DD	imagerel $unwind$?stbiw__jpg_DCT@@YAXPEAM0000000@Z
$pdata$?stbiw__jpg_calcBits@@YAXHQEAG@Z DD imagerel ?stbiw__jpg_calcBits@@YAXHQEAG@Z
	DD	imagerel ?stbiw__jpg_calcBits@@YAXHQEAG@Z+229
	DD	imagerel $unwind$?stbiw__jpg_calcBits@@YAXHQEAG@Z
$pdata$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z DD imagerel ?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
	DD	imagerel ?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z+1771
	DD	imagerel $unwind$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
$pdata$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z DD imagerel ?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
	DD	imagerel ?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z+4889
	DD	imagerel $unwind$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
$pdata$?ImageGetStride@@YAHU_PIXEL_BUFFER@@@Z DD imagerel ?ImageGetStride@@YAHU_PIXEL_BUFFER@@@Z
	DD	imagerel ?ImageGetStride@@YAHU_PIXEL_BUFFER@@@Z+35
	DD	imagerel $unwind$?ImageGetStride@@YAHU_PIXEL_BUFFER@@@Z
$pdata$?ImageGetMemoryAtOffset@@YAPEAEU_PIXEL_BUFFER@@MM@Z DD imagerel ?ImageGetMemoryAtOffset@@YAPEAEU_PIXEL_BUFFER@@MM@Z
	DD	imagerel ?ImageGetMemoryAtOffset@@YAPEAEU_PIXEL_BUFFER@@MM@Z+235
	DD	imagerel $unwind$?ImageGetMemoryAtOffset@@YAPEAEU_PIXEL_BUFFER@@MM@Z
$pdata$?ImageCheck@@YAHPEAU_PIXEL_BUFFER@@@Z DD imagerel ?ImageCheck@@YAHPEAU_PIXEL_BUFFER@@@Z
	DD	imagerel ?ImageCheck@@YAHPEAU_PIXEL_BUFFER@@@Z+77
	DD	imagerel $unwind$?ImageCheck@@YAHPEAU_PIXEL_BUFFER@@@Z
$pdata$?ImageFillWithColor@@YAXU_PIXEL_BUFFER@@Urx_f32x4@@@Z DD imagerel ?ImageFillWithColor@@YAXU_PIXEL_BUFFER@@Urx_f32x4@@@Z
	DD	imagerel ?ImageFillWithColor@@YAXU_PIXEL_BUFFER@@Urx_f32x4@@@Z+736
	DD	imagerel $unwind$?ImageFillWithColor@@YAXU_PIXEL_BUFFER@@Urx_f32x4@@@Z
$pdata$?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z DD imagerel ?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z
	DD	imagerel ?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z+129
	DD	imagerel $unwind$?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z
$pdata$?ImageCreateFilled@@YA?AU_PIXEL_BUFFER@@HUrx_f32x4@@HH@Z DD imagerel ?ImageCreateFilled@@YA?AU_PIXEL_BUFFER@@HUrx_f32x4@@HH@Z
	DD	imagerel ?ImageCreateFilled@@YA?AU_PIXEL_BUFFER@@HUrx_f32x4@@HH@Z+181
	DD	imagerel $unwind$?ImageCreateFilled@@YA?AU_PIXEL_BUFFER@@HUrx_f32x4@@HH@Z
$pdata$?ImageWriteOut@@YAHU_PIXEL_BUFFER@@PEBD@Z DD imagerel ?ImageWriteOut@@YAHU_PIXEL_BUFFER@@PEBD@Z
	DD	imagerel ?ImageWriteOut@@YAHU_PIXEL_BUFFER@@PEBD@Z+348
	DD	imagerel $unwind$?ImageWriteOut@@YAHU_PIXEL_BUFFER@@PEBD@Z
$pdata$?GetCharSet@@YAPEAHPEBD@Z DD imagerel ?GetCharSet@@YAPEAHPEBD@Z
	DD	imagerel ?GetCharSet@@YAPEAHPEBD@Z+438
	DD	imagerel $unwind$?GetCharSet@@YAPEAHPEBD@Z
$pdata$?GenerateGlyphFontFromFileData@@YA?AUGLYPH_FONT@@HPEAHMPEAX@Z DD imagerel ?GenerateGlyphFontFromFileData@@YA?AUGLYPH_FONT@@HPEAHMPEAX@Z
	DD	imagerel ?GenerateGlyphFontFromFileData@@YA?AUGLYPH_FONT@@HPEAHMPEAX@Z+2625
	DD	imagerel $unwind$?GenerateGlyphFontFromFileData@@YA?AUGLYPH_FONT@@HPEAHMPEAX@Z
$pdata$?LoadGlyphFont@@YA?AUGLYPH_FONT@@HPEAHMPEBD@Z DD imagerel ?LoadGlyphFont@@YA?AUGLYPH_FONT@@HPEAHMPEBD@Z
	DD	imagerel ?LoadGlyphFont@@YA?AUGLYPH_FONT@@HPEAHMPEBD@Z+227
	DD	imagerel $unwind$?LoadGlyphFont@@YA?AUGLYPH_FONT@@HPEAHMPEBD@Z
$pdata$?DetroitApp_DrawText@@YAXPEAUDETROIT_APP@@MPEBDZZ DD imagerel ?DetroitApp_DrawText@@YAXPEAUDETROIT_APP@@MPEBDZZ
	DD	imagerel ?DetroitApp_DrawText@@YAXPEAUDETROIT_APP@@MPEBDZZ+136
	DD	imagerel $unwind$?DetroitApp_DrawText@@YAXPEAUDETROIT_APP@@MPEBDZZ
$pdata$?DetroitApp_LoadModule@@YAXPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z DD imagerel ?DetroitApp_LoadModule@@YAXPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z
	DD	imagerel ?DetroitApp_LoadModule@@YAXPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z+646
	DD	imagerel $unwind$?DetroitApp_LoadModule@@YAXPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z
$pdata$?DetroitApp_PullTime@@YAXPEAUDETROIT_APP@@@Z DD imagerel ?DetroitApp_PullTime@@YAXPEAUDETROIT_APP@@@Z
	DD	imagerel ?DetroitApp_PullTime@@YAXPEAUDETROIT_APP@@@Z+555
	DD	imagerel $unwind$?DetroitApp_PullTime@@YAXPEAUDETROIT_APP@@@Z
$pdata$?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z DD imagerel ?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z
	DD	imagerel ?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z+82
	DD	imagerel $unwind$?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z
$pdata$?DetroitApp_Push@@YAXPEAUDETROIT_APP@@@Z DD imagerel ?DetroitApp_Push@@YAXPEAUDETROIT_APP@@@Z
	DD	imagerel ?DetroitApp_Push@@YAXPEAUDETROIT_APP@@@Z+111
	DD	imagerel $unwind$?DetroitApp_Push@@YAXPEAUDETROIT_APP@@@Z
$pdata$?DetroitApp_Tick@@YAXPEAUDETROIT_APP@@@Z DD imagerel ?DetroitApp_Tick@@YAXPEAUDETROIT_APP@@@Z
	DD	imagerel ?DetroitApp_Tick@@YAXPEAUDETROIT_APP@@@Z+34
	DD	imagerel $unwind$?DetroitApp_Tick@@YAXPEAUDETROIT_APP@@@Z
$pdata$?DetroitApp_Init@@YAXPEAUDETROIT_APP@@PEB_W@Z DD imagerel ?DetroitApp_Init@@YAXPEAUDETROIT_APP@@PEB_W@Z
	DD	imagerel ?DetroitApp_Init@@YAXPEAUDETROIT_APP@@PEB_W@Z+1049
	DD	imagerel $unwind$?DetroitApp_Init@@YAXPEAUDETROIT_APP@@PEB_W@Z
$pdata$?rand_f@@YAMMM@Z DD imagerel $LN4
	DD	imagerel $LN4+152
	DD	imagerel $unwind$?rand_f@@YAMMM@Z
$pdata$?mat_row_vec@@YA?AUai_vec@@Uai_mat@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+105
	DD	imagerel $unwind$?mat_row_vec@@YA?AUai_vec@@Uai_mat@@H@Z
$pdata$?mat_col_vec@@YA?AUai_vec@@Uai_mat@@H@Z DD imagerel $LN3
	DD	imagerel $LN3+106
	DD	imagerel $unwind$?mat_col_vec@@YA?AUai_vec@@Uai_mat@@H@Z
pdata	ENDS
;	COMDAT ?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
_TLS	SEGMENT
?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA DD 00H ; `STATIC_ALLOCATOR'::`2'::Min
_TLS	ENDS
CRT$XCU	SEGMENT
?STANDARD_BASIS$initializer$@@3P6AXXZEA DQ FLAT:??__ESTANDARD_BASIS@@YAXXZ ; STANDARD_BASIS$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
CONST	SEGMENT
__xmm@fa7efa7efa7efa7efa7efa7efa7efa7e DB '~', 0faH, '~', 0faH, '~', 0faH
	DB	'~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH, '~', 0faH
CONST	ENDS
;	COMDAT __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
CONST	SEGMENT
__xmm@f9c31a9df9c31a9df9c31a9df9c31a9d DB 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH
	DB	0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H, 09dH, 01aH, 0c3H, 0f9H
CONST	ENDS
;	COMDAT __xmm@f493f493f493f493f493f493f493f493
CONST	SEGMENT
__xmm@f493f493f493f493f493f493f493f493 DB 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
	DB	093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H, 093H, 0f4H
CONST	ENDS
;	COMDAT __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
CONST	SEGMENT
__xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9 DB 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H
	DB	01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH, 0a9H, 08H, 01aH, 0ebH
CONST	ENDS
;	COMDAT __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
CONST	SEGMENT
__xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0 DB 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H
	DB	0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H, 0d0H, 012H, 0cfH, 0e9H
CONST	ENDS
;	COMDAT __xmm@e09ee565e09ee565e09ee565e09ee565
CONST	SEGMENT
__xmm@e09ee565e09ee565e09ee565e09ee565 DB 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H
	DB	09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H, 'e', 0e5H, 09eH, 0e0H
CONST	ENDS
;	COMDAT __xmm@80808080808080808080808080808080
CONST	SEGMENT
__xmm@80808080808080808080808080808080 DB 080H, 080H, 080H, 080H, 080H, 080H
	DB	080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@80000000000000008000000000000000
CONST	SEGMENT
__xmm@80000000000000008000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
CONST	SEGMENT
__xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a DB 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
	DB	'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH, 'Z', 01cH
CONST	ENDS
;	COMDAT __xmm@166f166f166f166f166f166f166f166f
CONST	SEGMENT
__xmm@166f166f166f166f166f166f166f166f DB 'o', 016H, 'o', 016H, 'o', 016H
	DB	'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H, 'o', 016H
CONST	ENDS
;	COMDAT __xmm@12d0046b12d0046b12d0046b12d0046b
CONST	SEGMENT
__xmm@12d0046b12d0046b12d0046b12d0046b DB 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H
	DB	012H, 'k', 04H, 0d0H, 012H, 'k', 04H, 0d0H, 012H
CONST	ENDS
;	COMDAT __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
CONST	SEGMENT
__xmm@11c8f9c311c8f9c311c8f9c311c8f9c3 DB 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H
	DB	0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H, 0c3H, 0f9H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
CONST	SEGMENT
__xmm@11c8e09e11c8e09e11c8e09e11c8e09e DB 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H
	DB	0c8H, 011H, 09eH, 0e0H, 0c8H, 011H, 09eH, 0e0H, 0c8H, 011H
CONST	ENDS
;	COMDAT __xmm@08a914e808a914e808a914e808a914e8
CONST	SEGMENT
__xmm@08a914e808a914e808a914e808a914e8 DB 0e8H, 014H, 0a9H, 08H, 0e8H, 014H
	DB	0a9H, 08H, 0e8H, 014H, 0a9H, 08H, 0e8H, 014H, 0a9H, 08H
CONST	ENDS
;	COMDAT __xmm@01010000010100000101000001010000
CONST	SEGMENT
__xmm@01010000010100000101000001010000 DB 00H, 00H, 01H, 01H, 00H, 00H, 01H
	DB	01H, 00H, 00H, 01H, 01H, 00H, 00H, 01H, 01H
CONST	ENDS
;	COMDAT __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
CONST	SEGMENT
__xmm@00ff00ff00ff00ff00ff00ff00ff00ff DB 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
	DB	0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H, 0ffH, 00H
CONST	ENDS
;	COMDAT __xmm@00080008000800080008000800080008
CONST	SEGMENT
__xmm@00080008000800080008000800080008 DB 08H, 00H, 08H, 00H, 08H, 00H, 08H
	DB	00H, 08H, 00H, 08H, 00H, 08H, 00H, 08H, 00H
CONST	ENDS
;	COMDAT __xmm@00000200000002000000020000000200
CONST	SEGMENT
__xmm@00000200000002000000020000000200 DB 00H, 02H, 00H, 00H, 00H, 02H, 00H
	DB	00H, 00H, 02H, 00H, 00H, 00H, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __real@c1d80000
CONST	SEGMENT
__real@c1d80000 DD 0c1d80000r			; -27
CONST	ENDS
;	COMDAT __real@c0000000
CONST	SEGMENT
__real@c0000000 DD 0c0000000r			; -2
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bf000000
CONST	SEGMENT
__real@bf000000 DD 0bf000000r			; -0.5
CONST	ENDS
;	COMDAT __real@be2cca2e
CONST	SEGMENT
__real@be2cca2e DD 0be2cca2er			; -0.16874
CONST	ENDS
;	COMDAT __real@80000000
CONST	SEGMENT
__real@80000000 DD 080000000r			; -0
CONST	ENDS
;	COMDAT __real@5f000000
CONST	SEGMENT
__real@5f000000 DD 05f000000r			; 9.22337e+18
CONST	ENDS
;	COMDAT __real@4f800000
CONST	SEGMENT
__real@4f800000 DD 04f800000r			; 4.29497e+09
CONST	ENDS
;	COMDAT __real@497423f0
CONST	SEGMENT
__real@497423f0 DD 0497423f0r			; 999999
CONST	ENDS
;	COMDAT __real@47800000
CONST	SEGMENT
__real@47800000 DD 047800000r			; 65536
CONST	ENDS
;	COMDAT __real@477fff00
CONST	SEGMENT
__real@477fff00 DD 0477fff00r			; 65535
CONST	ENDS
;	COMDAT __real@46800000
CONST	SEGMENT
__real@46800000 DD 046800000r			; 16384
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@43800000
CONST	SEGMENT
__real@43800000 DD 043800000r			; 256
CONST	ENDS
;	COMDAT __real@437f0000
CONST	SEGMENT
__real@437f0000 DD 0437f0000r			; 255
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@43000000
CONST	SEGMENT
__real@43000000 DD 043000000r			; 128
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42800000
CONST	SEGMENT
__real@42800000 DD 042800000r			; 64
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41d80000
CONST	SEGMENT
__real@41d80000 DD 041d80000r			; 27
CONST	ENDS
;	COMDAT __real@41100000
CONST	SEGMENT
__real@41100000 DD 041100000r			; 9
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490fdb
CONST	SEGMENT
__real@40490fdb DD 040490fdbr			; 3.14159
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@4000000000000000
CONST	SEGMENT
__real@4000000000000000 DQ 04000000000000000r	; 2
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff921fafc8b007a
CONST	SEGMENT
__real@3ff921fafc8b007a DQ 03ff921fafc8b007ar	; 1.5708
CONST	ENDS
;	COMDAT __real@3ff028f5c0000000
CONST	SEGMENT
__real@3ff028f5c0000000 DQ 03ff028f5c0000000r	; 1.01
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fddb3d7
CONST	SEGMENT
__real@3fddb3d7 DD 03fddb3d7r			; 1.73205
CONST	ENDS
;	COMDAT __real@3fd5555560000000
CONST	SEGMENT
__real@3fd5555560000000 DQ 03fd5555560000000r	; 0.333333
CONST	ENDS
;	COMDAT __real@3fa73d75
CONST	SEGMENT
__real@3fa73d75 DD 03fa73d75r			; 1.30656
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f7d70a4
CONST	SEGMENT
__real@3f7d70a4 DD 03f7d70a4r			; 0.99
CONST	ENDS
;	COMDAT __real@3f3504f3
CONST	SEGMENT
__real@3f3504f3 DD 03f3504f3r			; 0.707107
CONST	ENDS
;	COMDAT __real@3f1645a2
CONST	SEGMENT
__real@3f1645a2 DD 03f1645a2r			; 0.587
CONST	ENDS
;	COMDAT __real@3f0a8bd4
CONST	SEGMENT
__real@3f0a8bd4 DD 03f0a8bd4r			; 0.541196
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ed65e89
CONST	SEGMENT
__real@3ed65e89 DD 03ed65e89r			; 0.41869
CONST	ENDS
;	COMDAT __real@3ec3ef15
CONST	SEGMENT
__real@3ec3ef15 DD 03ec3ef15r			; 0.382683
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3eaa7efa
CONST	SEGMENT
__real@3eaa7efa DD 03eaa7efar			; 0.333
CONST	ENDS
;	COMDAT __real@3ea99ae9
CONST	SEGMENT
__real@3ea99ae9 DD 03ea99ae9r			; 0.33126
CONST	ENDS
;	COMDAT __real@3e991687
CONST	SEGMENT
__real@3e991687 DD 03e991687r			; 0.299
CONST	ENDS
;	COMDAT __real@3e828f5c
CONST	SEGMENT
__real@3e828f5c DD 03e828f5cr			; 0.255
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3de978d5
CONST	SEGMENT
__real@3de978d5 DD 03de978d5r			; 0.114
CONST	ENDS
;	COMDAT __real@3da685db
CONST	SEGMENT
__real@3da685db DD 03da685dbr			; 0.08131
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3a83126f
CONST	SEGMENT
__real@3a83126f DD 03a83126fr			; 0.001
CONST	ENDS
;	COMDAT __real@0a4fb11f
CONST	SEGMENT
__real@0a4fb11f DD 00a4fb11fr			; 1e-32
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT ?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB
CONST	SEGMENT
?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB DW 07fH ; `stbi_write_jpg_core'::`13'::fillBits
	DW	07H
CONST	ENDS
;	COMDAT ?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 0ffH ; `stbi_write_jpg_core'::`12'::head2
	DB	0daH
	DB	00H
	DB	0cH
	DB	03H
	DB	01H
	DB	00H
	DB	02H
	DB	011H
	DB	03H
	DB	011H
	DB	00H
	DB	03fH
	DB	00H
CONST	ENDS
;	COMDAT ?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 0ffH ; `stbi_write_jpg_core'::`12'::head0
	DB	0d8H
	DB	0ffH
	DB	0e0H
	DB	00H
	DB	010H
	DB	04aH
	DB	046H
	DB	049H
	DB	046H
	DB	00H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0dbH
	DB	00H
	DB	084H
	DB	00H
CONST	ENDS
;	COMDAT ?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
CONST	SEGMENT
?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB DD 0403504f3r ; 2.82843 ; `stbi_write_jpg_core'::`2'::aasf
	DD	0407b14bfr			; 3.92314
	DD	0406c835fr			; 3.69552
	DD	04054db30r			; 3.32588
	DD	0403504f3r			; 2.82843
	DD	0400e39dar			; 2.22228
	DD	03fc3ef15r			; 1.53073
	DD	03f47c5c2r			; 0.780361
CONST	ENDS
;	COMDAT ?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
CONST	SEGMENT
?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB DD 011H ; `stbi_write_jpg_core'::`2'::UVQT
	DD	012H
	DD	018H
	DD	02fH
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	012H
	DD	015H
	DD	01aH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	018H
	DD	01aH
	DD	038H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	02fH
	DD	042H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
	DD	063H
CONST	ENDS
;	COMDAT ?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
CONST	SEGMENT
?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB DD 010H ; `stbi_write_jpg_core'::`2'::YQT
	DD	0bH
	DD	0aH
	DD	010H
	DD	018H
	DD	028H
	DD	033H
	DD	03dH
	DD	0cH
	DD	0cH
	DD	0eH
	DD	013H
	DD	01aH
	DD	03aH
	DD	03cH
	DD	037H
	DD	0eH
	DD	0dH
	DD	010H
	DD	018H
	DD	028H
	DD	039H
	DD	045H
	DD	038H
	DD	0eH
	DD	011H
	DD	016H
	DD	01dH
	DD	033H
	DD	057H
	DD	050H
	DD	03eH
	DD	012H
	DD	016H
	DD	025H
	DD	038H
	DD	044H
	DD	06dH
	DD	067H
	DD	04dH
	DD	018H
	DD	023H
	DD	037H
	DD	040H
	DD	051H
	DD	068H
	DD	071H
	DD	05cH
	DD	031H
	DD	040H
	DD	04eH
	DD	057H
	DD	067H
	DD	079H
	DD	078H
	DD	065H
	DD	048H
	DD	05cH
	DD	05fH
	DD	062H
	DD	070H
	DD	064H
	DD	067H
	DD	063H
CONST	ENDS
;	COMDAT ?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::UVAC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0aH
	DW	04H
	DW	018H
	DW	05H
	DW	019H
	DW	05H
	DW	038H
	DW	06H
	DW	078H
	DW	07H
	DW	01f4H
	DW	09H
	DW	03f6H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0bH
	DW	04H
	DW	039H
	DW	06H
	DW	0f6H
	DW	08H
	DW	01f5H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff5H
	DW	0cH
	DW	0ff88H
	DW	010H
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01aH
	DW	05H
	DW	0f7H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff6H
	DW	0cH
	DW	07fc2H
	DW	0fH
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01bH
	DW	05H
	DW	0f8H
	DW	08H
	DW	03f8H
	DW	0aH
	DW	0ff7H
	DW	0cH
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	0ff96H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f6H
	DW	09H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	0ff9eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f9H
	DW	0aH
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	0ffa6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	079H
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	0ffaeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f8H
	DW	0bH
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	0ffb6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0f9H
	DW	08H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f7H
	DW	09H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03fe0H
	DW	0eH
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	0fff5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	07fc3H
	DW	0fH
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 0aH ; `stbi_write_jpg_core'::`2'::YAC_HT
	DW	04H
	DW	00H
	DW	02H
	DW	01H
	DW	02H
	DW	04H
	DW	03H
	DW	0bH
	DW	04H
	DW	01aH
	DW	05H
	DW	078H
	DW	07H
	DW	0f8H
	DW	08H
	DW	03f6H
	DW	0aH
	DW	0ff82H
	DW	010H
	DW	0ff83H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0cH
	DW	04H
	DW	01bH
	DW	05H
	DW	079H
	DW	07H
	DW	01f6H
	DW	09H
	DW	07f6H
	DW	0bH
	DW	0ff84H
	DW	010H
	DW	0ff85H
	DW	010H
	DW	0ff86H
	DW	010H
	DW	0ff87H
	DW	010H
	DW	0ff88H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01cH
	DW	05H
	DW	0f9H
	DW	08H
	DW	03f7H
	DW	0aH
	DW	0ff4H
	DW	0cH
	DW	0ff89H
	DW	010H
	DW	0ff8aH
	DW	010H
	DW	0ff8bH
	DW	010H
	DW	0ff8cH
	DW	010H
	DW	0ff8dH
	DW	010H
	DW	0ff8eH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03aH
	DW	06H
	DW	01f7H
	DW	09H
	DW	0ff5H
	DW	0cH
	DW	0ff8fH
	DW	010H
	DW	0ff90H
	DW	010H
	DW	0ff91H
	DW	010H
	DW	0ff92H
	DW	010H
	DW	0ff93H
	DW	010H
	DW	0ff94H
	DW	010H
	DW	0ff95H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03bH
	DW	06H
	DW	03f8H
	DW	0aH
	DW	0ff96H
	DW	010H
	DW	0ff97H
	DW	010H
	DW	0ff98H
	DW	010H
	DW	0ff99H
	DW	010H
	DW	0ff9aH
	DW	010H
	DW	0ff9bH
	DW	010H
	DW	0ff9cH
	DW	010H
	DW	0ff9dH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07aH
	DW	07H
	DW	07f7H
	DW	0bH
	DW	0ff9eH
	DW	010H
	DW	0ff9fH
	DW	010H
	DW	0ffa0H
	DW	010H
	DW	0ffa1H
	DW	010H
	DW	0ffa2H
	DW	010H
	DW	0ffa3H
	DW	010H
	DW	0ffa4H
	DW	010H
	DW	0ffa5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07bH
	DW	07H
	DW	0ff6H
	DW	0cH
	DW	0ffa6H
	DW	010H
	DW	0ffa7H
	DW	010H
	DW	0ffa8H
	DW	010H
	DW	0ffa9H
	DW	010H
	DW	0ffaaH
	DW	010H
	DW	0ffabH
	DW	010H
	DW	0ffacH
	DW	010H
	DW	0ffadH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0faH
	DW	08H
	DW	0ff7H
	DW	0cH
	DW	0ffaeH
	DW	010H
	DW	0ffafH
	DW	010H
	DW	0ffb0H
	DW	010H
	DW	0ffb1H
	DW	010H
	DW	0ffb2H
	DW	010H
	DW	0ffb3H
	DW	010H
	DW	0ffb4H
	DW	010H
	DW	0ffb5H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f8H
	DW	09H
	DW	07fc0H
	DW	0fH
	DW	0ffb6H
	DW	010H
	DW	0ffb7H
	DW	010H
	DW	0ffb8H
	DW	010H
	DW	0ffb9H
	DW	010H
	DW	0ffbaH
	DW	010H
	DW	0ffbbH
	DW	010H
	DW	0ffbcH
	DW	010H
	DW	0ffbdH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01f9H
	DW	09H
	DW	0ffbeH
	DW	010H
	DW	0ffbfH
	DW	010H
	DW	0ffc0H
	DW	010H
	DW	0ffc1H
	DW	010H
	DW	0ffc2H
	DW	010H
	DW	0ffc3H
	DW	010H
	DW	0ffc4H
	DW	010H
	DW	0ffc5H
	DW	010H
	DW	0ffc6H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	01faH
	DW	09H
	DW	0ffc7H
	DW	010H
	DW	0ffc8H
	DW	010H
	DW	0ffc9H
	DW	010H
	DW	0ffcaH
	DW	010H
	DW	0ffcbH
	DW	010H
	DW	0ffccH
	DW	010H
	DW	0ffcdH
	DW	010H
	DW	0ffceH
	DW	010H
	DW	0ffcfH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03f9H
	DW	0aH
	DW	0ffd0H
	DW	010H
	DW	0ffd1H
	DW	010H
	DW	0ffd2H
	DW	010H
	DW	0ffd3H
	DW	010H
	DW	0ffd4H
	DW	010H
	DW	0ffd5H
	DW	010H
	DW	0ffd6H
	DW	010H
	DW	0ffd7H
	DW	010H
	DW	0ffd8H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	03faH
	DW	0aH
	DW	0ffd9H
	DW	010H
	DW	0ffdaH
	DW	010H
	DW	0ffdbH
	DW	010H
	DW	0ffdcH
	DW	010H
	DW	0ffddH
	DW	010H
	DW	0ffdeH
	DW	010H
	DW	0ffdfH
	DW	010H
	DW	0ffe0H
	DW	010H
	DW	0ffe1H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f8H
	DW	0bH
	DW	0ffe2H
	DW	010H
	DW	0ffe3H
	DW	010H
	DW	0ffe4H
	DW	010H
	DW	0ffe5H
	DW	010H
	DW	0ffe6H
	DW	010H
	DW	0ffe7H
	DW	010H
	DW	0ffe8H
	DW	010H
	DW	0ffe9H
	DW	010H
	DW	0ffeaH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	0ffebH
	DW	010H
	DW	0ffecH
	DW	010H
	DW	0ffedH
	DW	010H
	DW	0ffeeH
	DW	010H
	DW	0ffefH
	DW	010H
	DW	0fff0H
	DW	010H
	DW	0fff1H
	DW	010H
	DW	0fff2H
	DW	010H
	DW	0fff3H
	DW	010H
	DW	0fff4H
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	07f9H
	DW	0bH
	DW	0fff5H
	DW	010H
	DW	0fff6H
	DW	010H
	DW	0fff7H
	DW	010H
	DW	0fff8H
	DW	010H
	DW	0fff9H
	DW	010H
	DW	0fffaH
	DW	010H
	DW	0fffbH
	DW	010H
	DW	0fffcH
	DW	010H
	DW	0fffdH
	DW	010H
	DW	0fffeH
	DW	010H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
	DW	00H
CONST	ENDS
;	COMDAT ?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::UVDC_HT
	DW	02H
	DW	01H
	DW	02H
	DW	02H
	DW	02H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	DW	03feH
	DW	0aH
	DW	07feH
	DW	0bH
	ORG $+976
CONST	ENDS
;	COMDAT ?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
CONST	SEGMENT
?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA DW 00H ; `stbi_write_jpg_core'::`2'::YDC_HT
	DW	02H
	DW	02H
	DW	03H
	DW	03H
	DW	03H
	DW	04H
	DW	03H
	DW	05H
	DW	03H
	DW	06H
	DW	03H
	DW	0eH
	DW	04H
	DW	01eH
	DW	05H
	DW	03eH
	DW	06H
	DW	07eH
	DW	07H
	DW	0feH
	DW	08H
	DW	01feH
	DW	09H
	ORG $+976
CONST	ENDS
;	COMDAT ?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	011H
	DB	04H
	DB	05H
	DB	021H
	DB	031H
	DB	06H
	DB	012H
	DB	041H
	DB	051H
	DB	07H
	DB	061H
	DB	071H
	DB	013H
	DB	022H
	DB	032H
	DB	081H
	DB	08H
	DB	014H
	DB	042H
	DB	091H
	DB	0a1H
	DB	0b1H
	DB	0c1H
	DB	09H
	DB	023H
	DB	033H
	DB	052H
	DB	0f0H
	DB	015H
	DB	062H
	DB	072H
	DB	0d1H
	DB	0aH
	DB	016H
	DB	024H
	DB	034H
	DB	0e1H
	DB	025H
	DB	0f1H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	082H
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
CONST	ENDS
;	COMDAT ?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_chrominance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	02H
	DB	04H
	DB	04H
	DB	03H
	DB	04H
	DB	07H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	01H
	DB	02H
	DB	077H
CONST	ENDS
;	COMDAT ?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
CONST	ENDS
;	COMDAT ?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_chrominance_nrcodes
	DB	00H
	DB	03H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 01H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_values
	DB	02H
	DB	03H
	DB	00H
	DB	04H
	DB	011H
	DB	05H
	DB	012H
	DB	021H
	DB	031H
	DB	041H
	DB	06H
	DB	013H
	DB	051H
	DB	061H
	DB	07H
	DB	022H
	DB	071H
	DB	014H
	DB	032H
	DB	081H
	DB	091H
	DB	0a1H
	DB	08H
	DB	023H
	DB	042H
	DB	0b1H
	DB	0c1H
	DB	015H
	DB	052H
	DB	0d1H
	DB	0f0H
	DB	024H
	DB	033H
	DB	062H
	DB	072H
	DB	082H
	DB	09H
	DB	0aH
	DB	016H
	DB	017H
	DB	018H
	DB	019H
	DB	01aH
	DB	025H
	DB	026H
	DB	027H
	DB	028H
	DB	029H
	DB	02aH
	DB	034H
	DB	035H
	DB	036H
	DB	037H
	DB	038H
	DB	039H
	DB	03aH
	DB	043H
	DB	044H
	DB	045H
	DB	046H
	DB	047H
	DB	048H
	DB	049H
	DB	04aH
	DB	053H
	DB	054H
	DB	055H
	DB	056H
	DB	057H
	DB	058H
	DB	059H
	DB	05aH
	DB	063H
	DB	064H
	DB	065H
	DB	066H
	DB	067H
	DB	068H
	DB	069H
	DB	06aH
	DB	073H
	DB	074H
	DB	075H
	DB	076H
	DB	077H
	DB	078H
	DB	079H
	DB	07aH
	DB	083H
	DB	084H
	DB	085H
	DB	086H
	DB	087H
	DB	088H
	DB	089H
	DB	08aH
	DB	092H
	DB	093H
	DB	094H
	DB	095H
	DB	096H
	DB	097H
	DB	098H
	DB	099H
	DB	09aH
	DB	0a2H
	DB	0a3H
	DB	0a4H
	DB	0a5H
	DB	0a6H
	DB	0a7H
	DB	0a8H
	DB	0a9H
	DB	0aaH
	DB	0b2H
	DB	0b3H
	DB	0b4H
	DB	0b5H
	DB	0b6H
	DB	0b7H
	DB	0b8H
	DB	0b9H
	DB	0baH
	DB	0c2H
	DB	0c3H
	DB	0c4H
	DB	0c5H
	DB	0c6H
	DB	0c7H
	DB	0c8H
	DB	0c9H
	DB	0caH
	DB	0d2H
	DB	0d3H
	DB	0d4H
	DB	0d5H
	DB	0d6H
	DB	0d7H
	DB	0d8H
	DB	0d9H
	DB	0daH
	DB	0e1H
	DB	0e2H
	DB	0e3H
	DB	0e4H
	DB	0e5H
	DB	0e6H
	DB	0e7H
	DB	0e8H
	DB	0e9H
	DB	0eaH
	DB	0f1H
	DB	0f2H
	DB	0f3H
	DB	0f4H
	DB	0f5H
	DB	0f6H
	DB	0f7H
	DB	0f8H
	DB	0f9H
	DB	0faH
CONST	ENDS
;	COMDAT ?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_ac_luminance_nrcodes
	DB	00H
	DB	02H
	DB	01H
	DB	03H
	DB	03H
	DB	02H
	DB	04H
	DB	03H
	DB	05H
	DB	05H
	DB	04H
	DB	04H
	DB	00H
	DB	00H
	DB	01H
	DB	07dH
CONST	ENDS
;	COMDAT ?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_values
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	08H
	DB	09H
	DB	0aH
	DB	0bH
CONST	ENDS
;	COMDAT ?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
CONST	SEGMENT
?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB DB 00H ; `stbi_write_jpg_core'::`2'::std_dc_luminance_nrcodes
	DB	00H
	DB	01H
	DB	05H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
_DATA	SEGMENT
?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA DD 00H ; `stbiw__encode_png_line'::`2'::firstmap
	DD	01H
	DD	00H
	DD	05H
	DD	06H
_DATA	ENDS
;	COMDAT ?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
_DATA	SEGMENT
?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA DD 00H ; `stbiw__encode_png_line'::`2'::mapping
	DD	01H
	DD	02H
	DD	03H
	DD	04H
_DATA	ENDS
;	COMDAT ?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA
_DATA	SEGMENT
?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA DD 00H	; `stbiw__crc32'::`2'::crc_table
	DD	077073096H
	DD	0ee0e612cH
	DD	0990951baH
	DD	076dc419H
	DD	0706af48fH
	DD	0e963a535H
	DD	09e6495a3H
	DD	0edb8832H
	DD	079dcb8a4H
	DD	0e0d5e91eH
	DD	097d2d988H
	DD	09b64c2bH
	DD	07eb17cbdH
	DD	0e7b82d07H
	DD	090bf1d91H
	DD	01db71064H
	DD	06ab020f2H
	DD	0f3b97148H
	DD	084be41deH
	DD	01adad47dH
	DD	06ddde4ebH
	DD	0f4d4b551H
	DD	083d385c7H
	DD	0136c9856H
	DD	0646ba8c0H
	DD	0fd62f97aH
	DD	08a65c9ecH
	DD	014015c4fH
	DD	063066cd9H
	DD	0fa0f3d63H
	DD	08d080df5H
	DD	03b6e20c8H
	DD	04c69105eH
	DD	0d56041e4H
	DD	0a2677172H
	DD	03c03e4d1H
	DD	04b04d447H
	DD	0d20d85fdH
	DD	0a50ab56bH
	DD	035b5a8faH
	DD	042b2986cH
	DD	0dbbbc9d6H
	DD	0acbcf940H
	DD	032d86ce3H
	DD	045df5c75H
	DD	0dcd60dcfH
	DD	0abd13d59H
	DD	026d930acH
	DD	051de003aH
	DD	0c8d75180H
	DD	0bfd06116H
	DD	021b4f4b5H
	DD	056b3c423H
	DD	0cfba9599H
	DD	0b8bda50fH
	DD	02802b89eH
	DD	05f058808H
	DD	0c60cd9b2H
	DD	0b10be924H
	DD	02f6f7c87H
	DD	058684c11H
	DD	0c1611dabH
	DD	0b6662d3dH
	DD	076dc4190H
	DD	01db7106H
	DD	098d220bcH
	DD	0efd5102aH
	DD	071b18589H
	DD	06b6b51fH
	DD	09fbfe4a5H
	DD	0e8b8d433H
	DD	07807c9a2H
	DD	0f00f934H
	DD	09609a88eH
	DD	0e10e9818H
	DD	07f6a0dbbH
	DD	086d3d2dH
	DD	091646c97H
	DD	0e6635c01H
	DD	06b6b51f4H
	DD	01c6c6162H
	DD	0856530d8H
	DD	0f262004eH
	DD	06c0695edH
	DD	01b01a57bH
	DD	08208f4c1H
	DD	0f50fc457H
	DD	065b0d9c6H
	DD	012b7e950H
	DD	08bbeb8eaH
	DD	0fcb9887cH
	DD	062dd1ddfH
	DD	015da2d49H
	DD	08cd37cf3H
	DD	0fbd44c65H
	DD	04db26158H
	DD	03ab551ceH
	DD	0a3bc0074H
	DD	0d4bb30e2H
	DD	04adfa541H
	DD	03dd895d7H
	DD	0a4d1c46dH
	DD	0d3d6f4fbH
	DD	04369e96aH
	DD	0346ed9fcH
	DD	0ad678846H
	DD	0da60b8d0H
	DD	044042d73H
	DD	033031de5H
	DD	0aa0a4c5fH
	DD	0dd0d7cc9H
	DD	05005713cH
	DD	0270241aaH
	DD	0be0b1010H
	DD	0c90c2086H
	DD	05768b525H
	DD	0206f85b3H
	DD	0b966d409H
	DD	0ce61e49fH
	DD	05edef90eH
	DD	029d9c998H
	DD	0b0d09822H
	DD	0c7d7a8b4H
	DD	059b33d17H
	DD	02eb40d81H
	DD	0b7bd5c3bH
	DD	0c0ba6cadH
	DD	0edb88320H
	DD	09abfb3b6H
	DD	03b6e20cH
	DD	074b1d29aH
	DD	0ead54739H
	DD	09dd277afH
	DD	04db2615H
	DD	073dc1683H
	DD	0e3630b12H
	DD	094643b84H
	DD	0d6d6a3eH
	DD	07a6a5aa8H
	DD	0e40ecf0bH
	DD	09309ff9dH
	DD	0a00ae27H
	DD	07d079eb1H
	DD	0f00f9344H
	DD	08708a3d2H
	DD	01e01f268H
	DD	06906c2feH
	DD	0f762575dH
	DD	0806567cbH
	DD	0196c3671H
	DD	06e6b06e7H
	DD	0fed41b76H
	DD	089d32be0H
	DD	010da7a5aH
	DD	067dd4accH
	DD	0f9b9df6fH
	DD	08ebeeff9H
	DD	017b7be43H
	DD	060b08ed5H
	DD	0d6d6a3e8H
	DD	0a1d1937eH
	DD	038d8c2c4H
	DD	04fdff252H
	DD	0d1bb67f1H
	DD	0a6bc5767H
	DD	03fb506ddH
	DD	048b2364bH
	DD	0d80d2bdaH
	DD	0af0a1b4cH
	DD	036034af6H
	DD	041047a60H
	DD	0df60efc3H
	DD	0a867df55H
	DD	0316e8eefH
	DD	04669be79H
	DD	0cb61b38cH
	DD	0bc66831aH
	DD	0256fd2a0H
	DD	05268e236H
	DD	0cc0c7795H
	DD	0bb0b4703H
	DD	0220216b9H
	DD	05505262fH
	DD	0c5ba3bbeH
	DD	0b2bd0b28H
	DD	02bb45a92H
	DD	05cb36a04H
	DD	0c2d7ffa7H
	DD	0b5d0cf31H
	DD	02cd99e8bH
	DD	05bdeae1dH
	DD	09b64c2b0H
	DD	0ec63f226H
	DD	0756aa39cH
	DD	026d930aH
	DD	09c0906a9H
	DD	0eb0e363fH
	DD	072076785H
	DD	05005713H
	DD	095bf4a82H
	DD	0e2b87a14H
	DD	07bb12baeH
	DD	0cb61b38H
	DD	092d28e9bH
	DD	0e5d5be0dH
	DD	07cdcefb7H
	DD	0bdbdf21H
	DD	086d3d2d4H
	DD	0f1d4e242H
	DD	068ddb3f8H
	DD	01fda836eH
	DD	081be16cdH
	DD	0f6b9265bH
	DD	06fb077e1H
	DD	018b74777H
	DD	088085ae6H
	DD	0ff0f6a70H
	DD	066063bcaH
	DD	011010b5cH
	DD	08f659effH
	DD	0f862ae69H
	DD	0616bffd3H
	DD	0166ccf45H
	DD	0a00ae278H
	DD	0d70dd2eeH
	DD	04e048354H
	DD	03903b3c2H
	DD	0a7672661H
	DD	0d06016f7H
	DD	04969474dH
	DD	03e6e77dbH
	DD	0aed16a4aH
	DD	0d9d65adcH
	DD	040df0b66H
	DD	037d83bf0H
	DD	0a9bcae53H
	DD	0debb9ec5H
	DD	047b2cf7fH
	DD	030b5ffe9H
	DD	0bdbdf21cH
	DD	0cabac28aH
	DD	053b39330H
	DD	024b4a3a6H
	DD	0bad03605H
	DD	0cdd70693H
	DD	054de5729H
	DD	023d967bfH
	DD	0b3667a2eH
	DD	0c4614ab8H
	DD	05d681b02H
	DD	02a6f2b94H
	DD	0b40bbe37H
	DD	0c30c8ea1H
	DD	05a05df1bH
	DD	02d02ef8dH
_DATA	ENDS
;	COMDAT ?disteb@?1??stbi_zlib_compress@@9@4PAEA
_DATA	SEGMENT
?disteb@?1??stbi_zlib_compress@@9@4PAEA DB 00H		; `stbi_zlib_compress'::`2'::disteb
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	06H
	DB	06H
	DB	07H
	DB	07H
	DB	08H
	DB	08H
	DB	09H
	DB	09H
	DB	0aH
	DB	0aH
	DB	0bH
	DB	0bH
	DB	0cH
	DB	0cH
	DB	0dH
	DB	0dH
_DATA	ENDS
;	COMDAT ?distc@?1??stbi_zlib_compress@@9@4PAGA
_DATA	SEGMENT
?distc@?1??stbi_zlib_compress@@9@4PAGA DW 01H		; `stbi_zlib_compress'::`2'::distc
	DW	02H
	DW	03H
	DW	04H
	DW	05H
	DW	07H
	DW	09H
	DW	0dH
	DW	011H
	DW	019H
	DW	021H
	DW	031H
	DW	041H
	DW	061H
	DW	081H
	DW	0c1H
	DW	0101H
	DW	0181H
	DW	0201H
	DW	0301H
	DW	0401H
	DW	0601H
	DW	0801H
	DW	0c01H
	DW	01001H
	DW	01801H
	DW	02001H
	DW	03001H
	DW	04001H
	DW	06001H
	DW	08000H
_DATA	ENDS
;	COMDAT ?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
_DATA	SEGMENT
?lengtheb@?1??stbi_zlib_compress@@9@4PAEA DB 00H	; `stbi_zlib_compress'::`2'::lengtheb
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	00H
_DATA	ENDS
;	COMDAT ?lengthc@?1??stbi_zlib_compress@@9@4PAGA
_DATA	SEGMENT
?lengthc@?1??stbi_zlib_compress@@9@4PAGA DW 03H		; `stbi_zlib_compress'::`2'::lengthc
	DW	04H
	DW	05H
	DW	06H
	DW	07H
	DW	08H
	DW	09H
	DW	0aH
	DW	0bH
	DW	0dH
	DW	0fH
	DW	011H
	DW	013H
	DW	017H
	DW	01bH
	DW	01fH
	DW	023H
	DW	02bH
	DW	033H
	DW	03bH
	DW	043H
	DW	053H
	DW	063H
	DW	073H
	DW	083H
	DW	0a3H
	DW	0c3H
	DW	0e3H
	DW	0102H
	DW	0103H
_DATA	ENDS
;	COMDAT ?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
_DATA	SEGMENT
?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA DD 00H ; `stbi__shiftsigned'::`2'::shift_table
	DD	00H
	DD	00H
	DD	01H
	DD	00H
	DD	02H
	DD	04H
	DD	06H
	DD	00H
_DATA	ENDS
;	COMDAT ?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
_DATA	SEGMENT
?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA DD 00H	; `stbi__shiftsigned'::`2'::mul_table
	DD	0ffH
	DD	055H
	DD	049H
	DD	011H
	DD	021H
	DD	041H
	DD	081H
	DD	01H
_DATA	ENDS
;	COMDAT ?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
_DATA	SEGMENT
?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA DB 'X'
	DB	'XXX PNG chunk not known', 00H		; `stbi__parse_png_file'::`151'::invalid_chunk
_DATA	ENDS
;	COMDAT ?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB
CONST	SEGMENT
?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB DB 089H ; `stbi__check_png_header'::`2'::png_sig
	DB	050H
	DB	04eH
	DB	047H
	DB	0dH
	DB	0aH
	DB	01aH
	DB	0aH
CONST	ENDS
;	COMDAT ?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB
CONST	SEGMENT
?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB DB 010H ; `stbi__compute_huffman_codes'::`2'::length_dezigzag
	DB	011H
	DB	012H
	DB	00H
	DB	08H
	DB	07H
	DB	09H
	DB	06H
	DB	0aH
	DB	05H
	DB	0bH
	DB	04H
	DB	0cH
	DB	03H
	DB	0dH
	DB	02H
	DB	0eH
	DB	01H
	DB	0fH
CONST	ENDS
;	COMDAT ?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 052H ; `stbi__process_frame_header'::`22'::rgb
	DB	047H
	DB	042H
CONST	ENDS
;	COMDAT ?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 041H ; `stbi__process_marker'::`52'::tag
	DB	064H
	DB	06fH
	DB	062H
	DB	065H
	DB	00H
CONST	ENDS
;	COMDAT ?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
CONST	SEGMENT
?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB DB 04aH ; `stbi__process_marker'::`43'::tag
	DB	046H
	DB	049H
	DB	046H
	DB	00H
CONST	ENDS
_DATA	SEGMENT
?stbi__l2h_gamma@@3MA DD 0400ccccdr		; 2.2	; stbi__l2h_gamma
?stbi__stdio_callbacks@@3Ustbi_io_callbacks@@A DQ FLAT:?stbi__stdio_read@@YAHPEAXPEADH@Z ; stbi__stdio_callbacks
	DQ	FLAT:?stbi__stdio_skip@@YAXPEAXH@Z
	DQ	FLAT:?stbi__stdio_eof@@YAHPEAX@Z
?stbi__l2h_scale@@3MA DD 03f800000r		; 1	; stbi__l2h_scale
?stbi__h2l_gamma_i@@3MA DD 03ee8ba2er		; 0.454545 ; stbi__h2l_gamma_i
?stbi__h2l_scale_i@@3MA DD 03f800000r		; 1	; stbi__h2l_scale_i
?first_row_filter@@3PAEA DB 00H				; first_row_filter
	DB	01H
	DB	00H
	DB	05H
	DB	06H
_DATA	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ESTANDARD_BASIS_COLOR@@YAXXZ DD 020301H
	DD	060027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??__ESTANDARD_BASIS@@YAXXZ DD 020301H
	DD	060027003H
xdata	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z
	DD	02aH
	DD	01301H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z
	DD	027H
	DD	06d1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_png_to_mem
	DD	024H
	DD	09e6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z
	DD	026H
	DD	01aeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z
	DD	024H
	DD	0610H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg_to_func
	DD	026H
	DD	092H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp_to_func
	DD	026H
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_jpg
	DD	025H
	DD	0a5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_hdr
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_tga
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_write_bmp
	DD	025H
	DD	09aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z
	DD	024H
	DD	0631H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z
	DD	020H
	DD	0d3cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z
	DD	025H
	DD	04eeH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z
	DD	016H
	DD	02fbH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z
	DD	020H
	DD	0368H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z
	DD	025H
	DD	011e6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z
	DD	01aH
	DD	069cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z
	DD	016H
	DD	0c5cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__idct_block@@YAXPEAEHQEAF@Z
	DD	01fH
	DD	0a83H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z
	DD	022H
	DD	0150H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z
	DD	025H
	DD	01b7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z
	DD	025H
	DD	01b1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__vertical_flip@@YAXPEAXHHH@Z
	DD	024H
	DD	0182H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z
	DD	02bH
	DD	03daH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	02bH
	DD	0127H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	022H
	DD	027aH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	025H
	DD	0207H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	025H
	DD	0908H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z
	DD	022H
	DD	0e7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z
	DD	025H
	DD	011b1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbi__cpuid3@@YAHXZ
	DD	010H
	DD	03dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_noheader_malloc
	DD	025H
	DD	0d5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_buffer
	DD	02aH
	DD	09cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize_headerflag
	DD	02aH
	DD	0e5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_zlib_decode_malloc_guesssize
	DD	02aH
	DD	0e2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_file
	DD	016H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_file
	DD	025H
	DD	090H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_16_bit_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_callbacks
	DD	025H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_info_from_memory
	DD	024H
	DD	068H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_file
	DD	016H
	DD	069H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_memory
	DD	01aH
	DD	046H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_is_hdr_from_callbacks
	DD	01bH
	DD	047H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_file
	DD	025H
	DD	06cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_loadf_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file_16
	DD	025H
	DD	0acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_16_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_gif_from_memory
	DD	024H
	DD	0123H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_file
	DD	025H
	DD	0acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_callbacks
	DD	025H
	DD	074H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbi_load_from_memory
	DD	024H
	DD	073H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z
	DD	027H
	DD	090dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__v_prefilter@@YAXPEAEHHHI@Z
	DD	021H
	DD	04acH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__h_prefilter@@YAXPEAEHHHI@Z
	DD	021H
	DD	0431H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z
	DD	01cH
	DD	0445H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z
	DD	019H
	DD	0141H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z
	DD	025H
	DD	04f5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z
	DD	021H
	DD	013aaH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z
	DD	01fH
	DD	0138bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:stbtt_GetGlyphSDF
	DD	026H
	DD	01964H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z
	DD	026H
	DD	01f3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z
	DD	026H
	DD	0655H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z
	DD	027H
	DD	0965H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11_WINDOW_MessageFiberRoutine@@YAXPEAX@Z
	DD	018H
	DD	0320H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z
	DD	024H
	DD	01fdH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z
	DD	026H
	DD	02aaH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z
	DD	018H
	DD	0c5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z
	DD	018H
	DD	065H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z
	DD	01dH
	DD	086H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z
	DD	021H
	DD	0afH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z
	DD	027H
	DD	01fcH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z
	DD	023H
	DD	06fH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z
	DD	01dH
	DD	0aacH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z
	DD	01dH
	DD	0c7H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z
	DD	021H
	DD	0ecH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z
	DD	01dH
	DD	0b5H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	018H
	DD	061H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	018H
	DD	0daH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z
	DD	018H
	DD	047cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z
	DD	01aH
	DD	021bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z
	DD	018H
	DD	030cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z
	DD	023H
	DD	0e3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?SetConsoleWindowDimensions@@YAKKKKK@Z
	DD	020H
	DD	0108H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z
	DD	02aH
	DD	0281H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixRY@@YA?AUrx_f32_4x4@@M@Z
	DD	01eH
	DD	0139H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixRX@@YA?AUrx_f32_4x4@@M@Z
	DD	01eH
	DD	015dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z
	DD	01dH
	DD	0daH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixI@@YA?AUrx_f32_4x4@@XZ
	DD	015H
	DD	0e1H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z
	DD	022H
	DD	0a3H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z
	DD	01fH
	DD	01c2H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z
	DD	01fH
	DD	0278H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:??G@YA?AUf32x3@@U0@0@Z
	DD	01fH
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:??H@YA?AUf32x3@@U0@0@Z
	DD	01fH
	DD	087H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:??G@YA?AUf32x3@@U0@@Z
	DD	01aH
	DD	07dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:?MAIN@@YAXXZ
	DD	01aH
	DD	041eH
voltbl	ENDS
xdata	SEGMENT
$unwind$?rx7__stoi@@YAHHPEA_JPEBD1@Z DD 011701H
	DD	06217H
$unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD 031501H
	DD	070114215H
	DD	06010H
$unwind$??1_TRACE_BLOCK@@QEAA@XZ DD 030b01H
	DD	07007e20bH
	DD	06006H
$unwind$?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z DD 031a01H
	DD	07016421aH
	DD	06015H
$unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 041c01H
	DD	019011cH
	DD	060147015H
$unwind$?StaticAlloc@@YAPEAXH_K@Z DD 010d01H
	DD	0820dH
$unwind$?HeapAlloc@@YAPEAXH_K@Z DD 010d01H
	DD	0820dH
$unwind$?HeapFree@@YAXPEAX@Z DD 010901H
	DD	06209H
$unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 041c01H
	DD	01f011cH
	DD	060147015H
$unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 011701H
	DD	08217H
$unwind$??Bstr32@@QEAA_JXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAA_KXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAANXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAMXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAIXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??Bstr32@@QEAAHXZ DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$??7str32@@QEAAHXZ DD 010901H
	DD	02209H
$unwind$?strtoi@@YA_JUstr32@@@Z DD 010901H
	DD	06209H
$unwind$?MAIN@@YAXXZ DD 042219H
	DD	03c270110H
	DD	060027003H
	DD	imagerel __GSHandlerCheck
	DD	01e120H
$unwind$?GetThreadID@@YAHXZ DD 010401H
	DD	04204H
$unwind$?GetPerformanceFrequency@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?GetPerformanceCounter@@YA_KXZ DD 010401H
	DD	06204H
$unwind$?Widen@@YAPEA_WHPEBD@Z DD 010d01H
	DD	0820dH
$unwind$?OutputW@@YAXPEB_W@Z DD 010901H
	DD	08209H
$unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD 041301H
	DD	01f0113H
	DD	0600b700cH
$unwind$?UnloadFileData@@YAXPEAX@Z DD 010901H
	DD	04209H
$unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 041301H
	DD	0290113H
	DD	0600b700cH
$unwind$?GetErrorCode@@YAHH@Z DD 040d01H
	DD	013010dH
	DD	060057006H
$unwind$?GetErrorStringA@@YAPEBDHH@Z DD 041101H
	DD	0210111H
	DD	06009700aH
$unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 041d01H
	DD	015011dH
	DD	060157016H
$unwind$??D@YA?AUf32x3@@U0@M@Z DD 031601H
	DD	070122216H
	DD	06011H
$unwind$??D@YA?AUf32x3@@U0@0@Z DD 031501H
	DD	070112215H
	DD	06010H
$unwind$??G@YA?AUf32x3@@U0@@Z DD 031f19H
	DD	0700c4210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$??H@YA?AUf32x3@@U0@0@Z DD 032419H
	DD	070114215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$??G@YA?AUf32x3@@U0@0@Z DD 032419H
	DD	070114215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$??X@YAAEAUf32x3@@AEAU0@M@Z DD 010f01H
	DD	0220fH
$unwind$??Y@YAAEAUf32x3@@AEAU0@U0@@Z DD 010e01H
	DD	0220eH
$unwind$??Z@YAAEAUf32x3@@AEAU0@U0@@Z DD 010e01H
	DD	0220eH
$unwind$?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z DD 032419H
	DD	070116215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	020H
$unwind$?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z DD 032419H
	DD	07011c215H
	DD	06010H
	DD	imagerel __GSHandlerCheck
	DD	050H
$unwind$?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z DD 042a19H
	DD	0150118H
	DD	060107011H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?MatrixI@@YA?AUrx_f32_4x4@@XZ DD 031a19H
	DD	07007a20bH
	DD	06006H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z DD 042519H
	DD	0170113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?MatrixRX@@YA?AUrx_f32_4x4@@M@Z DD 042619H
	DD	0170114H
	DD	0600c700dH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?MatrixRY@@YA?AUrx_f32_4x4@@M@Z DD 042619H
	DD	0170114H
	DD	0600c700dH
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z DD 043219H
	DD	0250120H
	DD	060187019H
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD 011701H
	DD	06217H
$unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD 011701H
	DD	06217H
$unwind$?FormatA@@YAPEADPEBDZZ DD 011801H
	DD	08218H
$unwind$?FormatW@@YAPEA_WPEB_WZZ DD 011801H
	DD	08218H
$unwind$?RuneIsEOL@@YAHH@Z DD 010801H
	DD	02208H
$unwind$WinMain DD 041d01H
	DD	011011dH
	DD	060157016H
$unwind$?SetConsoleWindowDimensions@@YAKKKKK@Z DD 012519H
	DD	0c216H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z DD 022819H
	DD	07015d219H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$?PlatformInitialize@@YAXXZ DD 010401H
	DD	08204H
$unwind$?PlatformDeinitialize@@YAXXZ DD 010401H
	DD	04204H
$unwind$?CStrW@@YAPEB_WPEBD@Z DD 010901H
	DD	04209H
$unwind$?TraceMessageKindToString@@YAPEB_WH@Z DD 010801H
	DD	02208H
$unwind$?PIXEL_FORMAT_SIZE@@YAHH@Z DD 010801H
	DD	02208H
$unwind$?ID3D11Window_Update@@YAHPEAUID3D11_WINDOW@@@Z DD 010901H
	DD	08209H
$unwind$?ID3D11Window_Present@@YAXPEAUID3D11_WINDOW@@@Z DD 040e01H
	DD	01f010eH
	DD	060067007H
$unwind$?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z DD 042019H
	DD	02d010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0150H
$unwind$?ID3D11Driver_CreateWindow@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z DD 011801H
	DD	08218H
$unwind$?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z DD 031f19H
	DD	0700ce210H
	DD	0600bH
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z DD 041d01H
	DD	087011dH
	DD	060157016H
$unwind$?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z DD 020c01H
	DD	01b010cH
$unwind$?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Urx_f32x4@@@Z DD 010e01H
	DD	0a20eH
$unwind$?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAXHHHHPEB_W@Z DD 041d01H
	DD	0ff011dH
	DD	060157016H
$unwind$?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z DD 042019H
	DD	0eb010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0740H
$unwind$?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z DD 042019H
	DD	029010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z DD 042019H
	DD	017010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z DD 042519H
	DD	0270113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$?ID3D11Graphics_SetCameraMode@@YA?AW4DET_CAMERA_MODE@@PEAUID3D11_GRAPHICS@@W41@@Z DD 010d01H
	DD	0220dH
$unwind$?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z DD 031a01H
	DD	07016421aH
	DD	06015H
$unwind$?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ DD 031a01H
	DD	07016621aH
	DD	06015H
$unwind$?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z DD 042919H
	DD	0150117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	098H
$unwind$?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z DD 022219H
	DD	0700fd213H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z DD 042519H
	DD	0e10113H
	DD	0600b700cH
	DD	imagerel __GSHandlerCheck
	DD	06f0H
$unwind$?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z DD 010901H
	DD	04209H
$unwind$?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z DD 010801H
	DD	02208H
$unwind$?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z DD 032819H
	DD	070154219H
	DD	06014H
	DD	imagerel __GSHandlerCheck
	DD	018H
$unwind$?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z DD 042f19H
	DD	021011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0f0H
$unwind$?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z DD 012619H
	DD	0c217H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?ID3D11DeviceContext_UpdateDynamicVertexBuffer@@YAHPEAUID3D11DeviceContext@@PEAUID3D11Buffer@@IIPEAX@Z DD 011801H
	DD	0a218H
$unwind$?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z DD 012219H
	DD	0c213H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z DD 011d19H
	DD	0c20eH
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?ID3D11View_ReleaseResouce@@YAXPEAUID3D11View@@@Z DD 010901H
	DD	08209H
$unwind$?ID3D11View_ReleaseAll@@YAXPEAUID3D11View@@@Z DD 010901H
	DD	06209H
$unwind$?ID3D11ShaderResourceView_ReleaseAll@@YAXPEAUID3D11ShaderResourceView@@@Z DD 010901H
	DD	04209H
$unwind$?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z DD 042019H
	DD	02f010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0160H
$unwind$?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z DD 042e19H
	DD	025011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0118H
$unwind$?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z DD 022c19H
	DD	019011aH
	DD	imagerel __GSHandlerCheck
	DD	0b8H
$unwind$?ID3D11Device_CreateRenderTargetViewFromTexture2D@@YAPEAUID3D11RenderTargetView@@PEAUID3D11Device@@PEAUID3D11Texture2D@@@Z DD 041301H
	DD	01f0113H
	DD	0600b700cH
$unwind$?ID3D11_WINDOW_MessageFiberRoutine@@YAXPEAX@Z DD 042019H
	DD	017010eH
	DD	060067007H
	DD	imagerel __GSHandlerCheck
	DD	0a8H
$unwind$?D3D11_WINDOW_WndProc@@YA_JPEAUHWND__@@I_K_J@Z DD 011701H
	DD	06217H
$unwind$?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z DD 042f19H
	DD	07f011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	03e8H
$unwind$?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4D3D11_SHADER_KIND@@PEAHPEAPEBD3@Z DD 041c01H
	DD	01f011cH
	DD	060147015H
$unwind$?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z DD 042e19H
	DD	039011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?ID3D11Graphics_AcquireGlyphFont@@YAPEAUID3D11_FONT_ENTRY@@PEAUID3D11_GRAPHICS@@H@Z DD 041201H
	DD	0150112H
	DD	0600a700bH
$unwind$?ID3D11Graphics_CreateGlyphFont@@YAHPEAUID3D11_GRAPHICS@@PEAUGLYPH_FONT@@@Z DD 041301H
	DD	01b0113H
	DD	0600b700cH
$unwind$?ID3D11Graphics_DrawGlyphFontVertices@@YAXPEAUID3D11_GRAPHICS@@PEAUID3D11_FONT_ENTRY@@MHPEAUGLYPH_VERTEX@@@Z DD 021c01H
	DD	029011cH
$unwind$?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z DD 032b19H
	DD	07018e21cH
	DD	06017H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z DD 011801H
	DD	0c218H
$unwind$stbtt_BakeFontBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_GetBakedQuad DD 011701H
	DD	08217H
$unwind$stbtt_GetScaledFontVMetrics DD 021b01H
	DD	01d011bH
$unwind$stbtt_PackBegin DD 011801H
	DD	0a218H
$unwind$stbtt_PackEnd DD 010901H
	DD	04209H
$unwind$stbtt_PackFontRange DD 011901H
	DD	0c219H
$unwind$stbtt_PackFontRanges DD 021b01H
	DD	01f011bH
$unwind$stbtt_PackSetOversampling DD 011201H
	DD	04212H
$unwind$stbtt_GetPackedQuad DD 011701H
	DD	08217H
$unwind$stbtt_PackFontRangesGatherRects DD 021b01H
	DD	013011bH
$unwind$stbtt_PackFontRangesPackRects DD 011301H
	DD	04213H
$unwind$stbtt_PackFontRangesRenderIntoRects DD 041d01H
	DD	01b011dH
	DD	060157016H
$unwind$stbtt_GetNumberOfFonts DD 010901H
	DD	04209H
$unwind$stbtt_GetFontOffsetForIndex DD 010d01H
	DD	0420dH
$unwind$stbtt_InitFont DD 011301H
	DD	04213H
$unwind$stbtt_FindGlyphIndex DD 021001H
	DD	0130110H
$unwind$stbtt_ScaleForPixelHeight DD 010f01H
	DD	0620fH
$unwind$stbtt_ScaleForMappingEmToPixels DD 010f01H
	DD	0620fH
$unwind$stbtt_GetFontVMetrics DD 011801H
	DD	04218H
$unwind$stbtt_GetFontVMetricsOS2 DD 011801H
	DD	06218H
$unwind$stbtt_GetFontBoundingBox DD 011801H
	DD	04218H
$unwind$stbtt_GetCodepointHMetrics DD 011701H
	DD	04217H
$unwind$stbtt_GetCodepointKernAdvance DD 011201H
	DD	06212H
$unwind$stbtt_GetCodepointBox DD 011701H
	DD	06217H
$unwind$stbtt_GetGlyphHMetrics DD 011701H
	DD	06217H
$unwind$stbtt_GetGlyphKernAdvance DD 011201H
	DD	06212H
$unwind$stbtt_GetGlyphBox DD 011701H
	DD	08217H
$unwind$stbtt_GetKerningTableLength DD 010901H
	DD	06209H
$unwind$stbtt_GetKerningTable DD 011301H
	DD	06213H
$unwind$stbtt_IsGlyphEmpty DD 010d01H
	DD	0820dH
$unwind$stbtt_GetCodepointShape DD 011201H
	DD	04212H
$unwind$stbtt_GetGlyphShape DD 011201H
	DD	04212H
$unwind$stbtt_FreeShape DD 010e01H
	DD	0420eH
$unwind$stbtt_FindSVGDoc DD 010d01H
	DD	0a20dH
$unwind$stbtt_GetCodepointSVG DD 011201H
	DD	04212H
$unwind$stbtt_GetGlyphSVG DD 011201H
	DD	08212H
$unwind$stbtt_FreeBitmap DD 010e01H
	DD	0420eH
$unwind$stbtt_GetCodepointBitmap DD 011a01H
	DD	0a21aH
$unwind$stbtt_GetCodepointBitmapSubpixel DD 011b01H
	DD	0a21bH
$unwind$stbtt_MakeCodepointBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_MakeCodepointBitmapSubpixel DD 011801H
	DD	0a218H
$unwind$stbtt_MakeCodepointBitmapSubpixelPrefilter DD 011801H
	DD	0e218H
$unwind$stbtt_GetCodepointBitmapBox DD 011901H
	DD	0a219H
$unwind$stbtt_GetCodepointBitmapBoxSubpixel DD 011901H
	DD	0a219H
$unwind$stbtt_GetGlyphBitmap DD 011a01H
	DD	0a21aH
$unwind$stbtt_GetGlyphBitmapSubpixel DD 021e01H
	DD	015011eH
$unwind$stbtt_MakeGlyphBitmap DD 011801H
	DD	0a218H
$unwind$stbtt_MakeGlyphBitmapSubpixel DD 021b01H
	DD	013011bH
$unwind$stbtt_MakeGlyphBitmapSubpixelPrefilter DD 011801H
	DD	0a218H
$unwind$stbtt_GetGlyphBitmapBox DD 011901H
	DD	0a219H
$unwind$stbtt_GetGlyphBitmapBoxSubpixel DD 011901H
	DD	08219H
$unwind$stbtt_Rasterize DD 021c01H
	DD	011011cH
$unwind$stbtt_FreeSDF DD 010e01H
	DD	0420eH
$unwind$stbtt_GetGlyphSDF DD 022e19H
	DD	03f011cH
	DD	imagerel __GSHandlerCheck
	DD	01e0H
$unwind$stbtt_GetCodepointSDF DD 011901H
	DD	0a219H
$unwind$stbtt_FindMatchingFont DD 011301H
	DD	04213H
$unwind$stbtt_CompareUTF8toUTF16_bigendian DD 011701H
	DD	04217H
$unwind$stbtt_GetFontNameString DD 011801H
	DD	0a218H
$unwind$?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z DD 010901H
	DD	02209H
$unwind$?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0420dH
$unwind$?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z DD 031a01H
	DD	07016821aH
	DD	06015H
$unwind$?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z DD 031001H
	DD	0700ca210H
	DD	0600bH
$unwind$?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z DD 031501H
	DD	07011e215H
	DD	06010H
$unwind$?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z DD 031901H
	DD	07015a219H
	DD	06014H
$unwind$?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z DD 010901H
	DD	04209H
$unwind$?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z DD 031501H
	DD	07011a215H
	DD	06010H
$unwind$?stbtt__find_table@@YAIPEAEIPEBD@Z DD 011201H
	DD	06212H
$unwind$?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z DD 010901H
	DD	04209H
$unwind$?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z DD 010901H
	DD	06209H
$unwind$?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z DD 041801H
	DD	04b0118H
	DD	060107011H
$unwind$?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z DD 011701H
	DD	0e217H
$unwind$?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 022719H
	DD	0310115H
	DD	imagerel __GSHandlerCheck
	DD	0178H
$unwind$?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z DD 011701H
	DD	06217H
$unwind$?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z DD 010901H
	DD	08209H
$unwind$?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z DD 011501H
	DD	0a215H
$unwind$?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z DD 011501H
	DD	08215H
$unwind$?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z DD 011b01H
	DD	0a21bH
$unwind$?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z DD 041801H
	DD	0110118H
	DD	060107011H
$unwind$?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z DD 041801H
	DD	01d0118H
	DD	060107011H
$unwind$?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z DD 042919H
	DD	05d0117H
	DD	0600f7010H
	DD	imagerel __GSHandlerCheck
	DD	02d0H
$unwind$?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z DD 021501H
	DD	0130115H
$unwind$?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD 011201H
	DD	08212H
$unwind$?stbtt__GetCoverageIndex@@YAHPEAEH@Z DD 021001H
	DD	0110110H
$unwind$?stbtt__GetGlyphClass@@YAHPEAEH@Z DD 010d01H
	DD	0e20dH
$unwind$?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z DD 021501H
	DD	0210115H
$unwind$?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z DD 011301H
	DD	08213H
$unwind$?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z DD 010e01H
	DD	0620eH
$unwind$?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z DD 011901H
	DD	08219H
$unwind$?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z DD 011801H
	DD	04218H
$unwind$?stbtt__sized_trapezoid_area@@YAMMMM@Z DD 011601H
	DD	04216H
$unwind$?stbtt__position_trapezoid_area@@YAMMMMMM@Z DD 011c01H
	DD	0421cH
$unwind$?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z DD 021b01H
	DD	01d011bH
$unwind$?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z DD 022d19H
	DD	05b011bH
	DD	imagerel __GSHandlerCheck
	DD	02c0H
$unwind$?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z DD 031e19H
	DD	0700ba20fH
	DD	0600aH
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z DD 042419H
	DD	0130112H
	DD	0600a700bH
	DD	imagerel __GSHandlerCheck
	DD	080H
$unwind$?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z DD 010d01H
	DD	0420dH
$unwind$?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z DD 021b01H
	DD	013011bH
$unwind$?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z DD 011a01H
	DD	0c21aH
$unwind$?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z DD 021d01H
	DD	01b011dH
$unwind$?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z DD 042401H
	DD	0a6824H
	DD	017011bH
$unwind$?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z DD 021b01H
	DD	025011bH
$unwind$?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z DD 011301H
	DD	02213H
$unwind$?stbtt__h_prefilter@@YAXPEAEHHHI@Z DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__v_prefilter@@YAXPEAEHHHI@Z DD 012619H
	DD	0a217H
	DD	imagerel __GSHandlerCheck
	DD	040H
$unwind$?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z DD 021b01H
	DD	011011bH
$unwind$?equal@@YAHPEAM0@Z DD 010e01H
	DD	0220eH
$unwind$?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z DD 022f19H
	DD	023011dH
	DD	imagerel __GSHandlerCheck
	DD	0108H
$unwind$?stbtt__cuberoot@@YAMM@Z DD 010a01H
	DD	0420aH
$unwind$?stbtt__solve_cubic@@YAHMMMPEAM@Z DD 011b01H
	DD	0a21bH
$unwind$?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z DD 011701H
	DD	0c217H
$unwind$?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z DD 011701H
	DD	06217H
$unwind$?stbtt__matchpair@@YAHPEAEI0HHH@Z DD 011701H
	DD	0c217H
$unwind$?stbtt__matches@@YAHPEAEI0H@Z DD 011701H
	DD	08217H
$unwind$?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z DD 011301H
	DD	06213H
$unwind$stbi_load_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_load_gif_from_memory DD 022c19H
	DD	029011aH
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$stbi_load_16_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_load_16 DD 011801H
	DD	0a218H
$unwind$stbi_load_from_file_16 DD 022d19H
	DD	027011bH
	DD	imagerel __GSHandlerCheck
	DD	0120H
$unwind$stbi_loadf_from_memory DD 022c19H
	DD	025011aH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf_from_callbacks DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_loadf DD 011801H
	DD	0a218H
$unwind$stbi_loadf_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_hdr_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_hdr DD 010901H
	DD	06209H
$unwind$stbi_is_hdr_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_image_free DD 010901H
	DD	04209H
$unwind$stbi_info_from_memory DD 022c19H
	DD	023011aH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info_from_callbacks DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_memory DD 022219H
	DD	0230110H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_is_16_bit_from_callbacks DD 022319H
	DD	0230111H
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$stbi_info DD 011801H
	DD	06218H
$unwind$stbi_info_from_file DD 022d19H
	DD	025011bH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_is_16_bit DD 010901H
	DD	06209H
$unwind$stbi_is_16_bit_from_file DD 021e19H
	DD	025010cH
	DD	imagerel __GSHandlerCheck
	DD	0110H
$unwind$stbi_zlib_decode_malloc_guesssize DD 023219H
	DD	020b0120H
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_malloc_guesssize_headerflag DD 023219H
	DD	020b0120H
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_malloc DD 011201H
	DD	04212H
$unwind$stbi_zlib_decode_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$stbi_zlib_decode_noheader_malloc DD 022d19H
	DD	020b011bH
	DD	imagerel __GSHandlerCheck
	DD	01040H
$unwind$stbi_zlib_decode_noheader_buffer DD 023219H
	DD	02090120H
	DD	imagerel __GSHandlerCheck
	DD	01030H
$unwind$?stbi__cpuid3@@YAHXZ DD 021519H
	DD	030023206H
	DD	imagerel __GSHandlerCheck
	DD	010H
$unwind$?stbi__sse2_available@@YAHXZ DD 010401H
	DD	06204H
$unwind$?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z DD 011301H
	DD	02213H
$unwind$?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?stbi__stdio_read@@YAHPEAXPEADH@Z DD 011301H
	DD	04213H
$unwind$?stbi__stdio_skip@@YAXPEAXH@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__stdio_eof@@YAHPEAX@Z DD 010901H
	DD	06209H
$unwind$?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z DD 010e01H
	DD	0420eH
$unwind$?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0a218H
$unwind$?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__png_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0c218H
$unwind$?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	0a218H
$unwind$?stbi__png_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__bmp_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 022d19H
	DD	0ab011bH
	DD	imagerel __GSHandlerCheck
	DD	0540H
$unwind$?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?stbi__tga_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 031c01H
	DD	020011cH
	DD	07015H
$unwind$?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	0a218H
$unwind$?stbi__psd_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD 021b01H
	DD	01f011bH
$unwind$?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__psd_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__hdr_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 022d19H
	DD	09d011bH
	DD	imagerel __GSHandlerCheck
	DD	04d0H
$unwind$?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z DD 022d19H
	DD	089011bH
	DD	imagerel __GSHandlerCheck
	DD	0430H
$unwind$?stbi__pic_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0c218H
$unwind$?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$?stbi__gif_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 023319H
	DD	011190121H
	DD	imagerel __GSHandlerCheck
	DD	088b0H
$unwind$?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z DD 023319H
	DD	0111f0121H
	DD	imagerel __GSHandlerCheck
	DD	088e0H
$unwind$?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__pnm_test@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	0a218H
$unwind$?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__malloc@@YAPEAX_K@Z DD 010901H
	DD	04209H
$unwind$?stbi__addsizes_valid@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbi__mul2sizes_valid@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbi__mad2sizes_valid@@YAHHHH@Z DD 011101H
	DD	06211H
$unwind$?stbi__mad3sizes_valid@@YAHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__mad4sizes_valid@@YAHHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__malloc_mad2@@YAPEAXHHH@Z DD 011101H
	DD	04211H
$unwind$?stbi__malloc_mad3@@YAPEAXHHHH@Z DD 011601H
	DD	04216H
$unwind$?stbi__malloc_mad4@@YAPEAXHHHHH@Z DD 011601H
	DD	06216H
$unwind$?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z DD 011801H
	DD	0a218H
$unwind$?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z DD 011701H
	DD	08217H
$unwind$?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z DD 011701H
	DD	08217H
$unwind$?stbi__vertical_flip@@YAXPEAXHHH@Z DD 022c19H
	DD	010f011aH
	DD	imagerel __GSHandlerCheck
	DD	0860H
$unwind$?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z DD 011701H
	DD	06217H
$unwind$?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z DD 022a19H
	DD	011011bH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi__float_postprocess@@YAXPEAMPEAH11H@Z DD 011801H
	DD	06218H
$unwind$?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z DD 012719H
	DD	0c218H
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$?stbi__get8@@YAEPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__at_eof@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__skip@@YAXPEAUstbi__context@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z DD 011301H
	DD	08213H
$unwind$?stbi__get16be@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get32be@@YAIPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get16le@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__get32le@@YAIPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__convert_format@@YAPEAEPEAEHHII@Z DD 011701H
	DD	0c217H
$unwind$?stbi__convert_format16@@YAPEAGPEAGHHII@Z DD 011701H
	DD	0c217H
$unwind$?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z DD 010e01H
	DD	0a20eH
$unwind$?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z DD 010e01H
	DD	0a20eH
$unwind$?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z DD 011801H
	DD	0c218H
$unwind$?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z DD 011801H
	DD	08218H
$unwind$?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z DD 021b01H
	DD	015011bH
$unwind$?stbi__idct_block@@YAXPEAEHQEAF@Z DD 022719H
	DD	0390115H
	DD	imagerel __GSHandlerCheck
	DD	01b0H
$unwind$?stbi__idct_simd@@YAXPEAEHQEAF@Z DD 021b01H
	DD	036b011bH
$unwind$?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	02209H
$unwind$?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z DD 021e19H
	DD	041010cH
	DD	imagerel __GSHandlerCheck
	DD	01f0H
$unwind$?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z DD 010e01H
	DD	0220eH
$unwind$?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z DD 022219H
	DD	01b0110H
	DD	imagerel __GSHandlerCheck
	DD	0c0H
$unwind$?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z DD 011201H
	DD	06212H
$unwind$?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0c20dH
$unwind$?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z DD 021b01H
	DD	063011bH
$unwind$?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z DD 011801H
	DD	02218H
$unwind$?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z DD 011801H
	DD	04218H
$unwind$?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z DD 021b01H
	DD	08d011bH
$unwind$?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z DD 010901H
	DD	04209H
$unwind$?stbi__blinn_8x8@@YAEEE@Z DD 010c01H
	DD	0220cH
$unwind$?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z DD 022d19H
	DD	041011bH
	DD	imagerel __GSHandlerCheck
	DD	01f0H
$unwind$?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__bit_reverse@@YAHHH@Z DD 010c01H
	DD	0420cH
$unwind$?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z DD 022819H
	DD	01d0116H
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	02209H
$unwind$?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z DD 011301H
	DD	08213H
$unwind$?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	08209H
$unwind$?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z DD 021e19H
	DD	0149010cH
	DD	imagerel __GSHandlerCheck
	DD	0a30H
$unwind$?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z DD 010d01H
	DD	0620dH
$unwind$?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z DD 011801H
	DD	04218H
$unwind$?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__check_png_header@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__paeth@@YAHHHH@Z DD 011101H
	DD	06211H
$unwind$?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z DD 021b01H
	DD	01b011bH
$unwind$?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z DD 022d19H
	DD	023011bH
	DD	imagerel __GSHandlerCheck
	DD	0100H
$unwind$?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z DD 011301H
	DD	08213H
$unwind$?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z DD 011301H
	DD	08213H
$unwind$?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z DD 011801H
	DD	0a218H
$unwind$?stbi__de_iphone@@YAXPEAUstbi__png@@@Z DD 010901H
	DD	0a209H
$unwind$?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z DD 032819H
	DD	09c0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	04d0H
$unwind$?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z DD 011801H
	DD	08218H
$unwind$?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__high_bit@@YAHI@Z DD 010801H
	DD	02208H
$unwind$?stbi__shiftsigned@@YAHIHH@Z DD 011101H
	DD	04211H
$unwind$?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z DD 010e01H
	DD	0c20eH
$unwind$?stbi__tga_get_comp@@YAHHHPEAH@Z DD 011101H
	DD	02211H
$unwind$?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z DD 011301H
	DD	06213H
$unwind$?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z DD 011201H
	DD	06212H
$unwind$?stbi__copyval@@YAXHPEAEPEBE@Z DD 011201H
	DD	02212H
$unwind$?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z DD 022c19H
	DD	01d011aH
	DD	imagerel __GSHandlerCheck
	DD	0d0H
$unwind$?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	06209H
$unwind$?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z DD 011801H
	DD	06218H
$unwind$?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z DD 011801H
	DD	06218H
$unwind$?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	06218H
$unwind$?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z DD 010e01H
	DD	0820eH
$unwind$?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z DD 021101H
	DD	0110111H
$unwind$?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z DD 021b01H
	DD	011011bH
$unwind$?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z DD 011301H
	DD	06213H
$unwind$?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__hdr_convert@@YAXPEAMPEAEH@Z DD 011301H
	DD	06213H
$unwind$?stbi__pnm_isspace@@YAHD@Z DD 010801H
	DD	02208H
$unwind$?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0420eH
$unwind$?stbi__pnm_isdigit@@YAHD@Z DD 010801H
	DD	02208H
$unwind$?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z DD 011801H
	DD	04218H
$unwind$?stbi__is_16_main@@YAHPEAUstbi__context@@@Z DD 010901H
	DD	04209H
$unwind$stbi_write_png DD 011701H
	DD	0a217H
$unwind$stbi_write_bmp DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_tga DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_hdr DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_jpg DD 032d19H
	DD	016011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0a0H
$unwind$stbi_write_png_to_func DD 011801H
	DD	0a218H
$unwind$stbi_write_bmp_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_tga_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_hdr_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$stbi_write_jpg_to_func DD 032e19H
	DD	014011cH
	DD	07015H
	DD	imagerel __GSHandlerCheck
	DD	090H
$unwind$?stbi__stdio_write@@YAXPEAX0H@Z DD 011301H
	DD	04213H
$unwind$?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z DD 010e01H
	DD	0620eH
$unwind$?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z DD 010901H
	DD	04209H
$unwind$?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z DD 011301H
	DD	0c213H
$unwind$?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ DD 011801H
	DD	06218H
$unwind$?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z DD 010901H
	DD	06209H
$unwind$?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z DD 010d01H
	DD	0620dH
$unwind$?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z DD 010d01H
	DD	0420dH
$unwind$?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z DD 011701H
	DD	06217H
$unwind$?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z DD 011701H
	DD	08217H
$unwind$?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z DD 011701H
	DD	0a217H
$unwind$?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ DD 011701H
	DD	0c217H
$unwind$?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z DD 021a01H
	DD	031011aH
$unwind$?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z DD 021a01H
	DD	023011aH
$unwind$?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z DD 010e01H
	DD	0820eH
$unwind$?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z DD 011201H
	DD	08212H
$unwind$?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z DD 011201H
	DD	08212H
$unwind$?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z DD 022919H
	DD	011011aH
	DD	imagerel __GSHandlerCheck
	DD	070H
$unwind$?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z DD 042e19H
	DD	029011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	0130H
$unwind$?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z DD 011201H
	DD	08212H
$unwind$?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z DD 011301H
	DD	06213H
$unwind$?stbiw__zlib_bitrev@@YAHHH@Z DD 010c01H
	DD	0220cH
$unwind$?stbiw__zlib_countm@@YAIPEAE0H@Z DD 011301H
	DD	02213H
$unwind$?stbiw__zhash@@YAIPEAE@Z DD 010901H
	DD	02209H
$unwind$stbi_zlib_compress DD 021a01H
	DD	049011aH
$unwind$?stbiw__crc32@@YAIPEAEH@Z DD 010d01H
	DD	0220dH
$unwind$?stbiw__wpcrc@@YAXPEAPEAEH@Z DD 010d01H
	DD	0620dH
$unwind$?stbiw__paeth@@YAEHHH@Z DD 011101H
	DD	06211H
$unwind$?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z DD 011701H
	DD	0e217H
$unwind$stbi_write_png_to_mem DD 022c19H
	DD	019011aH
	DD	imagerel __GSHandlerCheck
	DD	0b0H
$unwind$?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z DD 011801H
	DD	06218H
$unwind$?stbiw__jpg_DCT@@YAXPEAM0000000@Z DD 011801H
	DD	0e218H
$unwind$?stbiw__jpg_calcBits@@YAXHQEAG@Z DD 010d01H
	DD	0220dH
$unwind$?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z DD 042f19H
	DD	035011dH
	DD	030157016H
	DD	imagerel __GSHandlerCheck
	DD	0190H
$unwind$?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z DD 023219H
	DD	02ab0120H
	DD	imagerel __GSHandlerCheck
	DD	01540H
$unwind$?ImageGetStride@@YAHU_PIXEL_BUFFER@@@Z DD 010901H
	DD	04209H
$unwind$?ImageGetMemoryAtOffset@@YAPEAEU_PIXEL_BUFFER@@MM@Z DD 041a01H
	DD	013011aH
	DD	060127013H
$unwind$?ImageCheck@@YAHPEAU_PIXEL_BUFFER@@@Z DD 010901H
	DD	02209H
$unwind$?ImageFillWithColor@@YAXU_PIXEL_BUFFER@@Urx_f32x4@@@Z DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z DD 031901H
	DD	070158219H
	DD	06014H
$unwind$?ImageCreateFilled@@YA?AU_PIXEL_BUFFER@@HUrx_f32x4@@HH@Z DD 041c01H
	DD	013011cH
	DD	060147015H
$unwind$?ImageWriteOut@@YAHU_PIXEL_BUFFER@@PEBD@Z DD 041301H
	DD	0190113H
	DD	0600b700cH
$unwind$?GetCharSet@@YAPEAHPEBD@Z DD 010901H
	DD	08209H
$unwind$?GenerateGlyphFontFromFileData@@YA?AUGLYPH_FONT@@HPEAHMPEAX@Z DD 041d01H
	DD	065011dH
	DD	060157016H
$unwind$?LoadGlyphFont@@YA?AUGLYPH_FONT@@HPEAHMPEBD@Z DD 041d01H
	DD	021011dH
	DD	060157016H
$unwind$?DetroitApp_DrawText@@YAXPEAUDETROIT_APP@@MPEBDZZ DD 011901H
	DD	08219H
$unwind$?DetroitApp_LoadModule@@YAXPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z DD 041301H
	DD	0270113H
	DD	0600b700cH
$unwind$?DetroitApp_PullTime@@YAXPEAUDETROIT_APP@@@Z DD 010901H
	DD	08209H
$unwind$?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z DD 030b01H
	DD	07007620bH
	DD	06006H
$unwind$?DetroitApp_Push@@YAXPEAUDETROIT_APP@@@Z DD 010901H
	DD	06209H
$unwind$?DetroitApp_Tick@@YAXPEAUDETROIT_APP@@@Z DD 010901H
	DD	04209H
$unwind$?DetroitApp_Init@@YAXPEAUDETROIT_APP@@PEB_W@Z DD 041301H
	DD	02f0113H
	DD	0600b700cH
$unwind$?rand_f@@YAMMM@Z DD 011001H
	DD	04210H
$unwind$?mat_row_vec@@YA?AUai_vec@@Uai_mat@@H@Z DD 031501H
	DD	070116215H
	DD	06010H
$unwind$?mat_col_vec@@YA?AUai_vec@@Uai_mat@@H@Z DD 031501H
	DD	070116215H
	DD	06010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsprintf_s DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf_l DD 011801H
	DD	08218H
xdata	ENDS
CRT$XCU	SEGMENT
?STANDARD_BASIS_COLOR$initializer$@@3P6AXXZEA DQ FLAT:??__ESTANDARD_BASIS_COLOR@@YAXXZ ; STANDARD_BASIS_COLOR$initializer$
CRT$XCU	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 8
?int_flip@@YAII@Z PROC					; int_flip
; File W:\cpp\void\dr-ai\num-ai.h
; Line 183
	mov	DWORD PTR [rsp+8], ecx
	mov	eax, DWORD PTR i$[rsp]
	and	eax, -16777216				; ff000000H
	shr	eax, 24
	mov	ecx, DWORD PTR i$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 24
	or	eax, ecx
	mov	ecx, DWORD PTR i$[rsp]
	and	ecx, 16711680				; 00ff0000H
	shr	ecx, 8
	or	eax, ecx
	mov	ecx, DWORD PTR i$[rsp]
	and	ecx, 65280				; 0000ff00H
	shl	ecx, 8
	or	eax, ecx
; Line 187
	ret	0
?int_flip@@YAII@Z ENDP					; int_flip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
__$ReturnAddress$ = 80
mat$ = 88
index$ = 96
?mat_col_vec@@YA?AUai_vec@@Uai_mat@@H@Z PROC		; mat_col_vec
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 192
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 193
	mov	ecx, DWORD PTR index$[rsp]
	call	?mem_len@@YAHH@Z			; mem_len
	mov	rcx, QWORD PTR mat$[rsp]
	mov	ecx, DWORD PTR [rcx]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR mat$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR v$[rsp+8], rax
; Line 194
	mov	rax, QWORD PTR mat$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR v$[rsp], eax
; Line 195
	lea	rax, QWORD PTR v$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 196
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?mat_col_vec@@YA?AUai_vec@@Uai_mat@@H@Z ENDP		; mat_col_vec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
__$ReturnAddress$ = 80
mat$ = 88
index$ = 96
?mat_row_vec@@YA?AUai_vec@@Uai_mat@@H@Z PROC		; mat_row_vec
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 185
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 186
	mov	ecx, DWORD PTR index$[rsp]
	call	?mem_len@@YAHH@Z			; mem_len
	mov	rcx, QWORD PTR mat$[rsp]
	mov	ecx, DWORD PTR [rcx]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR mat$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR v$[rsp+8], rax
; Line 187
	mov	rax, QWORD PTR mat$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR v$[rsp], eax
; Line 188
	lea	rax, QWORD PTR v$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 189
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?mat_row_vec@@YA?AUai_vec@@Uai_mat@@H@Z ENDP		; mat_row_vec
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
min$ = 48
max$ = 56
?rand_f@@YAMMM@Z PROC					; rand_f
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 64
$LN4:
	vmovss	DWORD PTR [rsp+16], xmm1
	vmovss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
	mov	eax, OFFSET FLAT:_Init_thread_epoch
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	cmp	DWORD PTR ?$TSS0@?1??rand_f@@YAMMM@Z@4HA, eax
	jle	SHORT $LN2@rand_f
	lea	rcx, OFFSET FLAT:?$TSS0@?1??rand_f@@YAMMM@Z@4HA
	call	_Init_thread_header
	cmp	DWORD PTR ?$TSS0@?1??rand_f@@YAMMM@Z@4HA, -1
	jne	SHORT $LN2@rand_f
	mov	ecx, 7
	call	?xorshift32@@YAII@Z			; xorshift32
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, eax
	lea	rcx, OFFSET FLAT:?$TSS0@?1??rand_f@@YAMMM@Z@4HA
	call	_Init_thread_footer
$LN2@rand_f:
; Line 65
	mov	eax, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
	vcvtsi2ss xmm0, xmm0, rax
	vdivss	xmm0, xmm0, DWORD PTR __real@4f800000
	vmovss	xmm1, DWORD PTR max$[rsp]
	vsubss	xmm1, xmm1, DWORD PTR min$[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR min$[rsp]
	vaddss	xmm0, xmm1, xmm0
; Line 66
	add	rsp, 40					; 00000028H
	ret	0
?rand_f@@YAMMM@Z ENDP					; rand_f
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
?xorshift32@@YAII@Z PROC				; xorshift32
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 57
	mov	DWORD PTR [rsp+8], ecx
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 13
	mov	ecx, DWORD PTR x$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 58
	mov	eax, DWORD PTR x$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR x$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 59
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 5
	mov	ecx, DWORD PTR x$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 60
	mov	eax, DWORD PTR x$[rsp]
; Line 61
	ret	0
?xorshift32@@YAII@Z ENDP				; xorshift32
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 8
?mem_len@@YAHH@Z PROC					; mem_len
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 29
	mov	DWORD PTR [rsp+8], ecx
; Line 34
	mov	eax, DWORD PTR len$[rsp]
; Line 36
	ret	0
?mem_len@@YAHH@Z ENDP					; mem_len
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 64
I$ = 72
User32$ = 80
XXX$2 = 88
YYY$3 = 96
Backend$ = 104
tv79 = 112
tv170 = 120
$T4 = 128
$T5 = 152
$T6 = 176
$T7 = 208
Font$ = 240
$T8 = 304
App$ = 400
WindowName$ = 408
?DetroitApp_Init@@YAXPEAUDETROIT_APP@@PEB_W@Z PROC	; DetroitApp_Init
; File W:\cpp\void\detroit\detroit-app.c
; Line 114
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
; Line 117
	lea	rcx, QWORD PTR I$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 118
	mov	rax, QWORD PTR App$[rsp]
	mov	rcx, QWORD PTR I$[rsp]
	mov	QWORD PTR [rax+24560], rcx
; Line 120
	lea	rcx, QWORD PTR I$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 121
	mov	rax, QWORD PTR App$[rsp]
	mov	rcx, QWORD PTR I$[rsp]
	mov	QWORD PTR [rax+24568], rcx
; Line 127
	lea	rcx, OFFSET FLAT:$SG155425
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR User32$[rsp], rax
; Line 129
	lea	rdx, OFFSET FLAT:$SG155428
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR XXX$2[rsp], rax
	cmp	QWORD PTR XXX$2[rsp], 0
	je	SHORT $LN5@DetroitApp
; Line 130
	mov	rax, QWORD PTR XXX$2[rsp]
	mov	QWORD PTR tv79[rsp], rax
	mov	rcx, -3
	call	QWORD PTR tv79[rsp]
; Line 131
	jmp	SHORT $LN6@DetroitApp
$LN5@DetroitApp:
; Line 132
	lea	rdx, OFFSET FLAT:$SG155430
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR YYY$3[rsp], rax
	cmp	QWORD PTR YYY$3[rsp], 0
	je	SHORT $LN7@DetroitApp
; Line 133
	call	QWORD PTR YYY$3[rsp]
$LN7@DetroitApp:
$LN6@DetroitApp:
; Line 136
	mov	rcx, QWORD PTR User32$[rsp]
	call	QWORD PTR __imp_FreeLibrary
; Line 140
	mov	rax, QWORD PTR App$[rsp]
	cmp	DWORD PTR [rax+7632], 0
	jg	SHORT $LN8@DetroitApp
	mov	rax, QWORD PTR App$[rsp]
	mov	DWORD PTR [rax+7632], 1440		; 000005a0H
$LN8@DetroitApp:
; Line 141
	mov	rax, QWORD PTR App$[rsp]
	cmp	DWORD PTR [rax+7636], 0
	jg	SHORT $LN9@DetroitApp
	mov	rax, QWORD PTR App$[rsp]
	mov	DWORD PTR [rax+7636], 720		; 000002d0H
$LN9@DetroitApp:
; Line 143
	mov	rax, QWORD PTR App$[rsp]
	cmp	DWORD PTR [rax+8160], 0
	jg	SHORT $LN10@DetroitApp
	mov	rax, QWORD PTR App$[rsp]
	mov	DWORD PTR [rax+8160], 720		; 000002d0H
$LN10@DetroitApp:
; Line 144
	mov	rax, QWORD PTR App$[rsp]
	cmp	DWORD PTR [rax+8164], 0
	jg	SHORT $LN11@DetroitApp
	mov	rax, QWORD PTR App$[rsp]
	mov	DWORD PTR [rax+8164], 512		; 00000200H
$LN11@DetroitApp:
; Line 153
	mov	rcx, QWORD PTR App$[rsp]
	call	QWORD PTR __imp_ConvertThreadToFiber
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+120664], rax
; Line 154
	mov	rax, QWORD PTR App$[rsp]
	cmp	QWORD PTR [rax+120664], 0
	jne	$LN12@DetroitApp
; Line 155
	mov	DWORD PTR [rsp+32], 115			; 00000073H
	mov	r9d, 155				; 0000009bH
	lea	r8, OFFSET FLAT:$SG155437
	lea	rdx, OFFSET FLAT:$SG155438
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	edx, -1
	mov	ecx, 1
	call	?GetErrorStringA@@YAPEBDHH@Z		; GetErrorStringA
	mov	rdx, rax
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv170[rsp], rax
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv170[rsp]
	lea	r8, OFFSET FLAT:$SG155436
	mov	edx, 6
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN12@DetroitApp:
; Line 158
	mov	rax, QWORD PTR App$[rsp]
	add	rax, 8
	mov	QWORD PTR Backend$[rsp], rax
; Line 159
	mov	rax, QWORD PTR WindowName$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR App$[rsp]
	mov	eax, DWORD PTR [rax+7636]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR App$[rsp]
	mov	eax, DWORD PTR [rax+7632]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR App$[rsp]
	mov	r9d, DWORD PTR [rax+7628]
	mov	rax, QWORD PTR App$[rsp]
	mov	r8d, DWORD PTR [rax+7624]
	mov	rax, QWORD PTR App$[rsp]
	mov	rdx, QWORD PTR [rax+120664]
	mov	rcx, QWORD PTR Backend$[rsp]
	call	?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAXHHHHPEB_W@Z ; ID3D11Graphics_Initialize
	test	eax, eax
	je	$LN13@DetroitApp
; Line 165
	call	QWORD PTR __imp_AllocConsole
; Line 167
	mov	rax, QWORD PTR App$[rsp]
	mov	r9d, DWORD PTR [rax+8164]
	mov	rax, QWORD PTR App$[rsp]
	mov	r8d, DWORD PTR [rax+8160]
	mov	rax, QWORD PTR App$[rsp]
	mov	edx, DWORD PTR [rax+8156]
	mov	rax, QWORD PTR App$[rsp]
	mov	ecx, DWORD PTR [rax+8152]
	call	?SetConsoleWindowDimensions@@YAKKKKK@Z	; SetConsoleWindowDimensions
; Line 170
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+120672], rax
; Line 171
	mov	ecx, -12				; fffffff4H
	call	QWORD PTR __imp_GetStdHandle
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+120680], rax
; Line 172
	mov	ecx, -10				; fffffff6H
	call	QWORD PTR __imp_GetStdHandle
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+120688], rax
$LN13@DetroitApp:
; Line 177
	lea	rcx, OFFSET FLAT:$SG155441
	call	?GetCharSet@@YAPEAHPEBD@Z		; GetCharSet
	lea	rcx, OFFSET FLAT:$SG155440
	mov	QWORD PTR [rsp+32], rcx
	vmovss	xmm3, DWORD PTR __real@42000000
	mov	r8, rax
	xor	edx, edx
	lea	rcx, QWORD PTR $T8[rsp]
	call	?LoadGlyphFont@@YA?AUGLYPH_FONT@@HPEAHMPEBD@Z ; LoadGlyphFont
	lea	rcx, QWORD PTR Font$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 178
	lea	rdx, QWORD PTR Font$[rsp]
	mov	rcx, QWORD PTR Backend$[rsp]
	call	?ID3D11Graphics_CreateGlyphFont@@YAHPEAUID3D11_GRAPHICS@@PEAUGLYPH_FONT@@@Z ; ID3D11Graphics_CreateGlyphFont
	mov	rcx, QWORD PTR App$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 180
	mov	DWORD PTR I$1[rsp], 1
	jmp	SHORT $LN4@DetroitApp
$LN2@DetroitApp:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@DetroitApp:
	movsxd	rax, DWORD PTR I$1[rsp]
	cmp	rax, 8
	jae	SHORT $LN3@DetroitApp
; Line 181
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 264				; 00000108H
	mov	rcx, QWORD PTR App$[rsp]
	lea	rax, QWORD PTR [rcx+rax+120696]
	mov	rdx, rax
	mov	rcx, QWORD PTR App$[rsp]
	call	?DetroitApp_LoadModule@@YAXPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z ; DetroitApp_LoadModule
; Line 182
	jmp	SHORT $LN2@DetroitApp
$LN3@DetroitApp:
; Line 183
	mov	rcx, QWORD PTR App$[rsp]
	call	?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z ; DetroitApp_Pull
; Line 184
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
?DetroitApp_Init@@YAXPEAUDETROIT_APP@@PEB_W@Z ENDP	; DetroitApp_Init
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
App$ = 48
?DetroitApp_Tick@@YAXPEAUDETROIT_APP@@@Z PROC		; DetroitApp_Tick
; File W:\cpp\void\detroit\detroit-app.c
; Line 108
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 109
	mov	rcx, QWORD PTR App$[rsp]
	call	?DetroitApp_Push@@YAXPEAUDETROIT_APP@@@Z ; DetroitApp_Push
; Line 110
	mov	rcx, QWORD PTR App$[rsp]
	call	?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z ; DetroitApp_Pull
; Line 111
	add	rsp, 40					; 00000028H
	ret	0
?DetroitApp_Tick@@YAXPEAUDETROIT_APP@@@Z ENDP		; DetroitApp_Tick
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 32
tv84 = 40
App$ = 64
?DetroitApp_Push@@YAXPEAUDETROIT_APP@@@Z PROC		; DetroitApp_Push
; File W:\cpp\void\detroit\detroit-app.c
; Line 101
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 102
	mov	rax, QWORD PTR App$[rsp]
	mov	rax, QWORD PTR [rax+120960]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR App$[rsp]
	add	rax, 120960				; 0001d880H
	mov	rdx, rax
	mov	rcx, QWORD PTR App$[rsp]
	call	QWORD PTR tv74[rsp]
; Line 103
	mov	rax, QWORD PTR App$[rsp]
	mov	rax, QWORD PTR [rax+121224]
	mov	QWORD PTR tv84[rsp], rax
	mov	rax, QWORD PTR App$[rsp]
	add	rax, 121224				; 0001d988H
	mov	rdx, rax
	mov	rcx, QWORD PTR App$[rsp]
	call	QWORD PTR tv84[rsp]
; Line 104
	mov	rax, QWORD PTR App$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_PushWindow
; Line 105
	add	rsp, 56					; 00000038H
	ret	0
?DetroitApp_Push@@YAXPEAUDETROIT_APP@@@Z ENDP		; DetroitApp_Push
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
App$ = 80
?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z PROC		; DetroitApp_Pull
; File W:\cpp\void\detroit\detroit-app.c
; Line 96
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR App$[rsp]
	call	?DetroitApp_PullTime@@YAXPEAUDETROIT_APP@@@Z ; DetroitApp_PullTime
; Line 97
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, OFFSET FLAT:?COLOR_GRAY@@3Urx_f32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR App$[rsp]
	add	rax, 8
	lea	rdx, QWORD PTR $T1[rsp]
	mov	rcx, rax
	call	?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z ; ID3D11Graphics_PullWindow
	mov	rcx, QWORD PTR App$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 98
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?DetroitApp_Pull@@YAXPEAUDETROIT_APP@@@Z ENDP		; DetroitApp_Pull
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
TicksCurrent$ = 32
TicksElapsed$ = 40
I$ = 48
App$ = 80
?DetroitApp_PullTime@@YAXPEAUDETROIT_APP@@@Z PROC	; DetroitApp_PullTime
; File W:\cpp\void\detroit\detroit-app.c
; Line 74
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 76
	lea	rcx, QWORD PTR I$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 77
	mov	rax, QWORD PTR I$[rsp]
	mov	QWORD PTR TicksCurrent$[rsp], rax
; Line 79
	mov	rax, QWORD PTR App$[rsp]
	mov	rax, QWORD PTR [rax+24568]
	mov	rcx, QWORD PTR TicksCurrent$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR TicksElapsed$[rsp], rax
; Line 81
	mov	rax, QWORD PTR App$[rsp]
	mov	rcx, QWORD PTR TicksElapsed$[rsp]
	mov	QWORD PTR [rax+24608], rcx
; Line 82
	imul	rax, QWORD PTR TicksElapsed$[rsp], 1000000000 ; 3b9aca00H
	xor	edx, edx
	mov	rcx, QWORD PTR App$[rsp]
	div	QWORD PTR [rcx+24560]
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+24616], rax
; Line 83
	imul	rax, QWORD PTR TicksElapsed$[rsp], 1000000 ; 000f4240H
	xor	edx, edx
	mov	rcx, QWORD PTR App$[rsp]
	div	QWORD PTR [rcx+24560]
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+24624], rax
; Line 84
	imul	rax, QWORD PTR TicksElapsed$[rsp], 1000	; 000003e8H
	xor	edx, edx
	mov	rcx, QWORD PTR App$[rsp]
	div	QWORD PTR [rcx+24560]
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+24632], rax
; Line 85
	mov	rax, QWORD PTR TicksElapsed$[rsp]
	test	rax, rax
	jl	SHORT $LN9@DetroitApp
	vcvtsi2sd xmm0, xmm0, rax
	jmp	SHORT $LN10@DetroitApp
$LN9@DetroitApp:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	vcvtsi2sd xmm1, xmm1, rcx
	vaddsd	xmm1, xmm1, xmm1
	vmovupd	xmm0, xmm1
$LN10@DetroitApp:
	vmovsd	xmm1, QWORD PTR __real@3ff0000000000000
	vmulsd	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR App$[rsp]
	mov	rax, QWORD PTR [rax+24560]
	test	rax, rax
	jl	SHORT $LN7@DetroitApp
	vcvtsi2sd xmm1, xmm1, rax
	jmp	SHORT $LN8@DetroitApp
$LN7@DetroitApp:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	vcvtsi2sd xmm2, xmm2, rcx
	vaddsd	xmm2, xmm2, xmm2
	vmovupd	xmm1, xmm2
$LN8@DetroitApp:
	vdivsd	xmm0, xmm0, xmm1
	vcvtsd2ss xmm0, xmm0, xmm0
	mov	rax, QWORD PTR App$[rsp]
	vmovss	DWORD PTR [rax+24640], xmm0
; Line 87
	mov	rax, QWORD PTR App$[rsp]
	mov	rcx, QWORD PTR TicksCurrent$[rsp]
	mov	QWORD PTR [rax+24568], rcx
; Line 88
	imul	rax, QWORD PTR TicksCurrent$[rsp], 1000000000 ; 3b9aca00H
	xor	edx, edx
	mov	rcx, QWORD PTR App$[rsp]
	div	QWORD PTR [rcx+24560]
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+24576], rax
; Line 89
	imul	rax, QWORD PTR TicksCurrent$[rsp], 1000000 ; 000f4240H
	xor	edx, edx
	mov	rcx, QWORD PTR App$[rsp]
	div	QWORD PTR [rcx+24560]
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+24584], rax
; Line 90
	imul	rax, QWORD PTR TicksCurrent$[rsp], 1000	; 000003e8H
	xor	edx, edx
	mov	rcx, QWORD PTR App$[rsp]
	div	QWORD PTR [rcx+24560]
	mov	rcx, QWORD PTR App$[rsp]
	mov	QWORD PTR [rcx+24592], rax
; Line 91
	mov	rax, QWORD PTR TicksCurrent$[rsp]
	test	rax, rax
	jl	SHORT $LN5@DetroitApp
	vcvtsi2sd xmm0, xmm0, rax
	jmp	SHORT $LN6@DetroitApp
$LN5@DetroitApp:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	vcvtsi2sd xmm1, xmm1, rcx
	vaddsd	xmm1, xmm1, xmm1
	vmovupd	xmm0, xmm1
$LN6@DetroitApp:
	vmovsd	xmm1, QWORD PTR __real@3ff0000000000000
	vmulsd	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR App$[rsp]
	mov	rax, QWORD PTR [rax+24560]
	test	rax, rax
	jl	SHORT $LN3@DetroitApp
	vcvtsi2sd xmm1, xmm1, rax
	jmp	SHORT $LN4@DetroitApp
$LN3@DetroitApp:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	vcvtsi2sd xmm2, xmm2, rcx
	vaddsd	xmm2, xmm2, xmm2
	vmovupd	xmm1, xmm2
$LN4@DetroitApp:
	vdivsd	xmm0, xmm0, xmm1
	mov	rax, QWORD PTR App$[rsp]
	vmovsd	QWORD PTR [rax+24600], xmm0
; Line 92
	add	rsp, 72					; 00000048H
	ret	0
?DetroitApp_PullTime@@YAXPEAUDETROIT_APP@@@Z ENDP	; DetroitApp_PullTime
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
tv81 = 56
Function$1 = 64
tv140 = 72
tv167 = 80
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 200
$T7 = 224
$T8 = 256
$T9 = 280
App$ = 336
Module$ = 344
?DetroitApp_LoadModule@@YAXPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z PROC ; DetroitApp_LoadModule
; File W:\cpp\void\detroit\detroit-app.c
; Line 50
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
; Line 51
	mov	rax, QWORD PTR Module$[rsp]
	cmp	DWORD PTR [rax+40], 0
	je	SHORT $LN2@DetroitApp
	jmp	$LN1@DetroitApp
$LN2@DetroitApp:
; Line 53
	mov	rax, QWORD PTR Module$[rsp]
	lea	rcx, OFFSET FLAT:?DetroitApp__ModuleUpdateStub@@YAHPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z ; DetroitApp__ModuleUpdateStub
	mov	QWORD PTR [rax], rcx
; Line 55
	mov	rax, QWORD PTR Module$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR Module$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, OFFSET FLAT:$SG155360
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	rcx, rax
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR tv70[rsp], rax
	mov	rax, QWORD PTR Module$[rsp]
	mov	rcx, QWORD PTR tv70[rsp]
	mov	QWORD PTR [rax+24], rcx
	cmp	QWORD PTR tv70[rsp], 0
	je	SHORT $LN3@DetroitApp
; Line 57
	jmp	$LN4@DetroitApp
$LN3@DetroitApp:
; Line 58
	mov	rax, QWORD PTR Module$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR Module$[rsp]
	mov	rdx, QWORD PTR [rax+32]
	lea	rcx, OFFSET FLAT:$SG155363
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	rcx, rax
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR tv81[rsp], rax
	mov	rax, QWORD PTR Module$[rsp]
	mov	rcx, QWORD PTR tv81[rsp]
	mov	QWORD PTR [rax+24], rcx
	cmp	QWORD PTR tv81[rsp], 0
	je	SHORT $LN5@DetroitApp
; Line 60
	jmp	$LN6@DetroitApp
$LN5@DetroitApp:
; Line 62
	mov	DWORD PTR [rsp+32], 113			; 00000071H
	mov	r9d, 62					; 0000003eH
	lea	r8, OFFSET FLAT:$SG155365
	lea	rdx, OFFSET FLAT:$SG155366
	lea	rcx, QWORD PTR $T8[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Module$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv140[rsp], rax
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv140[rsp]
	lea	r8, OFFSET FLAT:$SG155364
	mov	edx, 4
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN6@DetroitApp:
$LN4@DetroitApp:
; Line 64
	mov	rax, QWORD PTR Module$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	$LN7@DetroitApp
; Line 66
	lea	rdx, OFFSET FLAT:$SG155370
	mov	rax, QWORD PTR Module$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR Function$1[rsp], rax
	cmp	QWORD PTR Function$1[rsp], 0
	je	SHORT $LN8@DetroitApp
; Line 67
	mov	rax, QWORD PTR Module$[rsp]
	mov	rcx, QWORD PTR Function$1[rsp]
	mov	QWORD PTR [rax], rcx
	jmp	$LN9@DetroitApp
$LN8@DetroitApp:
; Line 68
	mov	DWORD PTR [rsp+32], 114			; 00000072H
	mov	r9d, 68					; 00000044H
	lea	r8, OFFSET FLAT:$SG155372
	lea	rdx, OFFSET FLAT:$SG155373
	lea	rcx, QWORD PTR $T9[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR Module$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv167[rsp], rax
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv167[rsp]
	lea	r8, OFFSET FLAT:$SG155371
	mov	edx, 4
	lea	rcx, QWORD PTR $T7[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN9@DetroitApp:
$LN7@DetroitApp:
$LN1@DetroitApp:
; Line 70
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
?DetroitApp_LoadModule@@YAXPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z ENDP ; DetroitApp_LoadModule
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
App$ = 8
Mod$ = 16
?DetroitApp__ModuleUpdateStub@@YAHPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z PROC ; DetroitApp__ModuleUpdateStub
; File W:\cpp\void\detroit\detroit-app.c
; Line 44
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 45
	xor	eax, eax
; Line 46
	ret	0
?DetroitApp__ModuleUpdateStub@@YAHPEAUDETROIT_APP@@PEAUDETROIT_MODULE@@@Z ENDP ; DetroitApp__ModuleUpdateStub
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
Args$ = 40
tv78 = 48
FormattedString$ = 56
App$ = 80
HeightInPixels$ = 88
Format$ = 96
?DetroitApp_DrawText@@YAXPEAUDETROIT_APP@@MPEBDZZ PROC	; DetroitApp_DrawText
; File W:\cpp\void\detroit\detroit-app.c
; Line 32
	mov	QWORD PTR [rsp+24], r8
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 34
	lea	rax, QWORD PTR Format$[rsp+8]
	mov	QWORD PTR Args$[rsp], rax
; Line 35
	mov	rax, QWORD PTR Args$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR Format$[rsp]
	call	strlen
	mov	DWORD PTR tv76[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv78[rsp]
	mov	rdx, QWORD PTR Format$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	call	?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z	; FormatExtendedA
	mov	QWORD PTR FormattedString$[rsp], rax
; Line 36
	mov	QWORD PTR Args$[rsp], 0
; Line 37
	mov	rax, QWORD PTR App$[rsp]
	add	rax, 8
	mov	r9, QWORD PTR FormattedString$[rsp]
	vmovss	xmm2, DWORD PTR HeightInPixels$[rsp]
	mov	rcx, QWORD PTR App$[rsp]
	mov	edx, DWORD PTR [rcx+4]
	mov	rcx, rax
	call	?ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z ; ID3D11Graphics_DrawText
; Line 38
	add	rsp, 72					; 00000048H
	ret	0
?DetroitApp_DrawText@@YAXPEAUDETROIT_APP@@MPEBDZZ ENDP	; DetroitApp_DrawText
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileData$ = 48
GlyphFont$ = 64
$T1 = 128
$T2 = 192
__$ReturnAddress$ = 288
Kind$ = 296
CharSet$ = 304
FontSize$ = 312
FileName$ = 320
?LoadGlyphFont@@YA?AUGLYPH_FONT@@HPEAHMPEBD@Z PROC	; LoadGlyphFont
; File W:\cpp\void\detroit\detroit-asset.c
; Line 663
	vmovss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
; Line 666
	mov	DWORD PTR GlyphFont$[rsp], 0
	lea	rax, QWORD PTR GlyphFont$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 60					; 0000003cH
	rep stosb
; Line 668
	mov	rdx, QWORD PTR FileName$[rsp]
	xor	ecx, ecx
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$[rsp], rax
; Line 670
	cmp	QWORD PTR FileData$[rsp], 0
	je	SHORT $LN2@LoadGlyphF
; Line 672
	mov	rax, QWORD PTR FileData$[rsp]
	mov	QWORD PTR [rsp+32], rax
	vmovss	xmm3, DWORD PTR FontSize$[rsp]
	mov	r8, QWORD PTR CharSet$[rsp]
	mov	edx, DWORD PTR Kind$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?GenerateGlyphFontFromFileData@@YA?AUGLYPH_FONT@@HPEAHMPEAX@Z ; GenerateGlyphFontFromFileData
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR GlyphFont$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
$LN2@LoadGlyphF:
; Line 675
	mov	rcx, QWORD PTR FileData$[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 677
	lea	rax, QWORD PTR GlyphFont$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 678
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?LoadGlyphFont@@YA?AUGLYPH_FONT@@HPEAHMPEBD@Z ENDP	; LoadGlyphFont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
GlyphScale$ = 80
FontPadd$ = 84
PointsToPixels$ = 88
I$1 = 92
Glyph$2 = 96
CurX$ = 104
I$3 = 108
MaxGlyphSizeY$ = 112
MaxGlyphSizeX$ = 116
GlyphCount$ = 120
CurY$ = 124
Glyph$4 = 128
AdvanceX$5 = 136
MinPackX$ = 140
AdvX$ = 144
GlyphY0$6 = 148
GlyphY1$7 = 152
ShapeX0$8 = 156
ShapeY0$9 = 160
Ascent$ = 164
Descent$ = 168
LineGap$ = 172
tv288 = 176
tv286 = 180
MinPackY$ = 184
MaxPackX$ = 188
AdvY$ = 192
tv360 = 196
tv358 = 200
ClipY$10 = 204
ClipX$11 = 208
GlyphX0$12 = 212
GlyphX1$13 = 216
GlyphFont$ = 224
GlyphArray$ = 288
ShapeY1$14 = 296
ShapeX1$15 = 300
MaxPackY$ = 304
FieldRadius$ = 308
BearingL$16 = 312
Memory$17 = 320
AtlasArea$ = 328
$T18 = 336
$T19 = 352
$T20 = 384
$T21 = 416
$T22 = 448
$T23 = 480
$T24 = 512
FontInfo$ = 544
$T25 = 704
$T26 = 728
$T27 = 752
GlyphBuffer$ = 776
__$ReturnAddress$ = 832
Kind$ = 840
CharSet$ = 848
FontSize$ = 856
FileData$ = 864
?GenerateGlyphFontFromFileData@@YA?AUGLYPH_FONT@@HPEAHMPEAX@Z PROC ; GenerateGlyphFontFromFileData
; File W:\cpp\void\detroit\detroit-asset.c
; Line 691
	vmovss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 808				; 00000328H
; Line 693
	vmovss	xmm0, DWORD PTR __real@42800000
	vmovss	DWORD PTR FontSize$[rsp], xmm0
; Line 695
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR FontPadd$[rsp], xmm0
; Line 696
	vmovss	xmm0, DWORD PTR __real@42000000
	vmovss	DWORD PTR FieldRadius$[rsp], xmm0
; Line 697
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR GlyphScale$[rsp], xmm0
; Line 699
	mov	DWORD PTR GlyphFont$[rsp], 0
	lea	rax, QWORD PTR GlyphFont$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 60					; 0000003cH
	rep stosb
; Line 702
	xor	edx, edx
	mov	rcx, QWORD PTR FileData$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR FileData$[rsp]
	lea	rcx, QWORD PTR FontInfo$[rsp]
	call	stbtt_InitFont
	test	eax, eax
	jne	$LN8@GenerateGl
; Line 705
	mov	DWORD PTR [rsp+32], 90			; 0000005aH
	mov	r9d, 705				; 000002c1H
	lea	r8, OFFSET FLAT:$SG154713
	lea	rdx, OFFSET FLAT:$SG154714
	lea	rcx, QWORD PTR $T25[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG154712
	mov	edx, 7
	lea	rcx, QWORD PTR $T20[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 706
	lea	rax, QWORD PTR GlyphFont$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@GenerateGl
$LN8@GenerateGl:
; Line 709
	mov	DWORD PTR GlyphFont$[rsp], 2
; Line 715
	vmovss	xmm1, DWORD PTR FontSize$[rsp]
	lea	rcx, QWORD PTR FontInfo$[rsp]
	call	stbtt_ScaleForPixelHeight
	vmovss	DWORD PTR PointsToPixels$[rsp], xmm0
; Line 717
	cmp	QWORD PTR CharSet$[rsp], 0
	jne	SHORT $LN9@GenerateGl
; Line 718
	lea	rcx, OFFSET FLAT:$SG154716
	call	?GetCharSet@@YAPEAHPEBD@Z		; GetCharSet
	mov	QWORD PTR CharSet$[rsp], rax
$LN9@GenerateGl:
; Line 720
	mov	rax, QWORD PTR CharSet$[rsp]
	mov	eax, DWORD PTR [rax-4]
	mov	DWORD PTR GlyphCount$[rsp], eax
; Line 730
	movsxd	rax, DWORD PTR GlyphCount$[rsp]
	imul	rax, rax, 24
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR GlyphArray$[rsp], rax
; Line 732
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR MaxGlyphSizeX$[rsp], xmm0
; Line 733
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR MaxGlyphSizeY$[rsp], xmm0
; Line 735
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@40800000
	xor	eax, eax
	vcomiss	xmm0, DWORD PTR __real@5f000000
	jb	SHORT $LN15@GenerateGl
	vsubss	xmm0, xmm0, DWORD PTR __real@5f000000
	vcomiss	xmm0, DWORD PTR __real@5f000000
	jae	SHORT $LN15@GenerateGl
	mov	rcx, -9223372036854775808		; 8000000000000000H
	add	rax, rcx
$LN15@GenerateGl:
	vcvttss2si rcx, xmm0
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR AtlasArea$[rsp], rax
; Line 737
	mov	DWORD PTR I$3[rsp], 0
	jmp	SHORT $LN4@GenerateGl
$LN2@GenerateGl:
	mov	eax, DWORD PTR I$3[rsp]
	inc	eax
	mov	DWORD PTR I$3[rsp], eax
$LN4@GenerateGl:
	mov	eax, DWORD PTR GlyphCount$[rsp]
	cmp	DWORD PTR I$3[rsp], eax
	jge	$LN3@GenerateGl
; Line 739
	movsxd	rax, DWORD PTR I$3[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR GlyphArray$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Glyph$2[rsp], rax
; Line 740
	movsxd	rax, DWORD PTR I$3[rsp]
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, QWORD PTR FontInfo$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR Glyph$2[rsp]
	mov	DWORD PTR [rcx], eax
; Line 743
	lea	r9, QWORD PTR BearingL$16[rsp]
	lea	r8, QWORD PTR AdvanceX$5[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR FontInfo$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 745
	vcvtsi2ss xmm0, xmm0, DWORD PTR AdvanceX$5[rsp]
	vmulss	xmm0, xmm0, DWORD PTR PointsToPixels$[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 746
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@40000000
	vaddss	xmm0, xmm0, DWORD PTR __real@3f800000
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 747
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@40000000
	vcvtsi2ss xmm1, xmm1, DWORD PTR AdvanceX$5[rsp]
	vmulss	xmm1, xmm1, DWORD PTR PointsToPixels$[rsp]
	vaddss	xmm0, xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+12], xmm0
; Line 748
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@40000000
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 749
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
; Line 753
	lea	rax, QWORD PTR ShapeY1$14[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR ShapeX1$15[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR ShapeY0$9[rsp]
	lea	r8, QWORD PTR ShapeX0$8[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR FontInfo$[rsp]
	call	stbtt_GetGlyphBox
	test	eax, eax
	je	$LN10@GenerateGl
; Line 759
	lea	rax, QWORD PTR GlyphY1$7[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR GlyphX1$13[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR GlyphY0$6[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR GlyphX0$12[rsp]
	mov	QWORD PTR [rsp+48], rax
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+40], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR PointsToPixels$[rsp]
	vmovss	xmm2, DWORD PTR PointsToPixels$[rsp]
	mov	rax, QWORD PTR Glyph$2[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, QWORD PTR FontInfo$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 765
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR GlyphX0$12[rsp]
	mov	ecx, DWORD PTR GlyphX1$13[rsp]
	sub	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm1, xmm1, eax
	vaddss	xmm0, xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 766
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@40000000
	mov	eax, DWORD PTR GlyphY0$6[rsp]
	mov	ecx, DWORD PTR GlyphY1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm1, xmm1, eax
	vaddss	xmm0, xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 767
	vcvtsi2ss xmm0, xmm0, DWORD PTR ShapeX0$8[rsp]
	vmulss	xmm0, xmm0, DWORD PTR PointsToPixels$[rsp]
	vmovss	xmm1, DWORD PTR FontPadd$[rsp]
	vaddss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 768
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vcvtsi2ss xmm1, xmm1, DWORD PTR ShapeY0$9[rsp]
	vmulss	xmm1, xmm1, DWORD PTR PointsToPixels$[rsp]
	vaddss	xmm0, xmm0, xmm1
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
$LN10@GenerateGl:
; Line 771
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vcomiss	xmm0, DWORD PTR MaxGlyphSizeX$[rsp]
	jbe	SHORT $LN11@GenerateGl
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vmovss	DWORD PTR MaxGlyphSizeX$[rsp], xmm0
$LN11@GenerateGl:
; Line 772
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vcomiss	xmm0, DWORD PTR MaxGlyphSizeY$[rsp]
	jbe	SHORT $LN12@GenerateGl
	mov	rax, QWORD PTR Glyph$2[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vmovss	DWORD PTR MaxGlyphSizeY$[rsp], xmm0
$LN12@GenerateGl:
; Line 773
	jmp	$LN2@GenerateGl
$LN3@GenerateGl:
; Line 776
	lea	r9, QWORD PTR LineGap$[rsp]
	lea	r8, QWORD PTR Descent$[rsp]
	lea	rdx, QWORD PTR Ascent$[rsp]
	lea	rcx, QWORD PTR FontInfo$[rsp]
	call	stbtt_GetFontVMetrics
; Line 778
	vmovss	xmm0, DWORD PTR FontSize$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	vmovss	DWORD PTR GlyphFont$[rsp+4], xmm0
; Line 779
	vmovss	xmm0, DWORD PTR GlyphScale$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR PointsToPixels$[rsp]
	vcvtsi2ss xmm1, xmm1, DWORD PTR Ascent$[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR GlyphFont$[rsp+8], xmm0
; Line 780
	vmovss	xmm0, DWORD PTR GlyphScale$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR PointsToPixels$[rsp]
	vcvtsi2ss xmm1, xmm1, DWORD PTR Descent$[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR GlyphFont$[rsp+12], xmm0
; Line 781
	vmovss	xmm0, DWORD PTR GlyphScale$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR PointsToPixels$[rsp]
	vcvtsi2ss xmm1, xmm1, DWORD PTR LineGap$[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR GlyphFont$[rsp+16], xmm0
; Line 782
	vmovss	xmm0, DWORD PTR MaxGlyphSizeX$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	vmovss	DWORD PTR GlyphFont$[rsp+20], xmm0
; Line 783
	vmovss	xmm0, DWORD PTR MaxGlyphSizeY$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	vmovss	DWORD PTR GlyphFont$[rsp+24], xmm0
; Line 784
	mov	eax, DWORD PTR GlyphCount$[rsp]
	mov	DWORD PTR GlyphFont$[rsp+28], eax
; Line 785
	movsxd	rax, DWORD PTR GlyphCount$[rsp]
	imul	rax, rax, 28
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR GlyphFont$[rsp+32], rax
; Line 787
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, OFFSET FLAT:?COLOR_VOID@@3Urx_f32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	DWORD PTR [rsp+32], 1024		; 00000400H
	mov	r9d, 1024				; 00000400H
	lea	r8, QWORD PTR $T18[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR $T26[rsp]
	call	?ImageCreateFilled@@YA?AU_PIXEL_BUFFER@@HUrx_f32x4@@HH@Z ; ImageCreateFilled
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR GlyphFont$[rsp+40]
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 789
	vcvtss2sd xmm0, xmm0, DWORD PTR MaxGlyphSizeY$[rsp]
	call	QWORD PTR __imp_ceil
	vcvttsd2si eax, xmm0
	mov	DWORD PTR tv288[rsp], eax
	vcvtss2sd xmm0, xmm0, DWORD PTR MaxGlyphSizeX$[rsp]
	call	QWORD PTR __imp_ceil
	vcvttsd2si eax, xmm0
	mov	DWORD PTR tv286[rsp], eax
	mov	r9d, DWORD PTR tv288[rsp]
	mov	r8d, DWORD PTR tv286[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR $T27[rsp]
	call	?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z	; ImageCreate
	lea	rcx, QWORD PTR GlyphBuffer$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 791
	mov	eax, DWORD PTR GlyphFont$[rsp+44]
	mov	DWORD PTR MaxPackX$[rsp], eax
; Line 792
	mov	eax, DWORD PTR GlyphFont$[rsp+48]
	mov	DWORD PTR MaxPackY$[rsp], eax
; Line 793
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	vmovss	DWORD PTR MinPackX$[rsp], xmm0
; Line 794
	vmovss	xmm0, DWORD PTR FontPadd$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	vmovss	DWORD PTR MinPackY$[rsp], xmm0
; Line 795
	vmovss	xmm0, DWORD PTR MaxGlyphSizeY$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	vmovss	DWORD PTR AdvY$[rsp], xmm0
; Line 796
	vmovss	xmm0, DWORD PTR MaxGlyphSizeX$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	vmovss	DWORD PTR AdvX$[rsp], xmm0
; Line 797
	vmovss	xmm0, DWORD PTR MinPackX$[rsp]
	vmovss	DWORD PTR CurX$[rsp], xmm0
; Line 798
	vmovss	xmm0, DWORD PTR MinPackY$[rsp]
	vmovss	DWORD PTR CurY$[rsp], xmm0
; Line 800
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN7@GenerateGl
$LN5@GenerateGl:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN7@GenerateGl:
	mov	eax, DWORD PTR GlyphCount$[rsp]
	cmp	DWORD PTR I$1[rsp], eax
	jge	$LN6@GenerateGl
; Line 802
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR GlyphArray$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR Glyph$4[rsp], rax
; Line 805
	vmovss	xmm0, DWORD PTR CurX$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR AdvX$[rsp]
	vcvtsi2ss xmm1, xmm1, DWORD PTR MaxPackX$[rsp]
	vcomiss	xmm0, xmm1
	jbe	SHORT $LN13@GenerateGl
; Line 806
	vmovss	xmm0, DWORD PTR MinPackX$[rsp]
	vmovss	DWORD PTR CurX$[rsp], xmm0
; Line 807
	vmovss	xmm0, DWORD PTR CurY$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR AdvY$[rsp]
	vmovss	DWORD PTR CurY$[rsp], xmm0
$LN13@GenerateGl:
; Line 811
	lea	rax, QWORD PTR $T22[rsp]
	lea	rcx, QWORD PTR GlyphFont$[rsp+40]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	vmovss	xmm2, DWORD PTR CurY$[rsp]
	vmovss	xmm1, DWORD PTR CurX$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	?ImageGetMemoryAtOffset@@YAPEAEU_PIXEL_BUFFER@@MM@Z ; ImageGetMemoryAtOffset
	mov	QWORD PTR Memory$17[rsp], rax
; Line 812
	mov	rax, QWORD PTR Glyph$4[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vsubss	xmm0, xmm0, DWORD PTR FontPadd$[rsp]
	vcvttss2si eax, xmm0
	mov	DWORD PTR ClipX$11[rsp], eax
; Line 813
	mov	rax, QWORD PTR Glyph$4[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vsubss	xmm0, xmm0, DWORD PTR FontPadd$[rsp]
	vcvttss2si eax, xmm0
	mov	DWORD PTR ClipY$10[rsp], eax
; Line 814
	mov	rax, QWORD PTR Glyph$4[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv360[rsp], eax
	lea	rax, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR GlyphFont$[rsp+40]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rcx, QWORD PTR $T23[rsp]
	call	?ImageGetStride@@YAHU_PIXEL_BUFFER@@@Z	; ImageGetStride
	mov	DWORD PTR tv358[rsp], eax
	mov	eax, DWORD PTR tv360[rsp]
	mov	DWORD PTR [rsp+56], eax
	vmovss	xmm0, DWORD PTR PointsToPixels$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR PointsToPixels$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR tv358[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ClipY$10[rsp]
	mov	r8d, DWORD PTR ClipX$11[rsp]
	mov	rdx, QWORD PTR Memory$17[rsp]
	lea	rcx, QWORD PTR FontInfo$[rsp]
	call	stbtt_MakeGlyphBitmap
; Line 837
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR GlyphFont$[rsp+32]
	vmovss	xmm0, DWORD PTR CurX$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 838
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR GlyphFont$[rsp+32]
	vmovss	xmm0, DWORD PTR CurY$[rsp]
	vmovss	DWORD PTR [rcx+rax+4], xmm0
; Line 839
	mov	rax, QWORD PTR Glyph$4[rsp]
	vmovss	xmm0, DWORD PTR GlyphScale$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR [rax+4]
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR GlyphFont$[rsp+32]
	vmovss	DWORD PTR [rcx+rax+8], xmm0
; Line 840
	mov	rax, QWORD PTR Glyph$4[rsp]
	vmovss	xmm0, DWORD PTR GlyphScale$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR [rax+8]
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR GlyphFont$[rsp+32]
	vmovss	DWORD PTR [rcx+rax+12], xmm0
; Line 841
	mov	rax, QWORD PTR Glyph$4[rsp]
	vmovss	xmm0, DWORD PTR [rax+12]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR GlyphFont$[rsp+32]
	vmovss	DWORD PTR [rcx+rax+24], xmm0
; Line 842
	mov	rax, QWORD PTR Glyph$4[rsp]
	vmovss	xmm0, DWORD PTR [rax+16]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR GlyphFont$[rsp+32]
	vmovss	DWORD PTR [rcx+rax+16], xmm0
; Line 843
	mov	rax, QWORD PTR Glyph$4[rsp]
	vmovss	xmm0, DWORD PTR [rax+20]
	vmulss	xmm0, xmm0, DWORD PTR GlyphScale$[rsp]
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR GlyphFont$[rsp+32]
	vmovss	DWORD PTR [rcx+rax+20], xmm0
; Line 844
	vmovss	xmm0, DWORD PTR CurX$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR AdvX$[rsp]
	vmovss	DWORD PTR CurX$[rsp], xmm0
; Line 845
	jmp	$LN5@GenerateGl
$LN6@GenerateGl:
; Line 847
	lea	rax, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR GlyphFont$[rsp+40]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, OFFSET FLAT:$SG154721
	lea	rcx, QWORD PTR $T24[rsp]
	call	?ImageWriteOut@@YAHU_PIXEL_BUFFER@@PEBD@Z ; ImageWriteOut
; Line 850
	lea	rax, QWORD PTR GlyphFont$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@GenerateGl:
; Line 851
	add	rsp, 808				; 00000328H
	pop	rdi
	pop	rsi
	ret	0
?GenerateGlyphFontFromFileData@@YA?AUGLYPH_FONT@@HPEAHMPEAX@Z ENDP ; GenerateGlyphFontFromFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
CharSetSize$ = 32
I$1 = 36
I$2 = 40
I$3 = 44
Extended$ = 48
CharSet$ = 56
FromString$ = 80
?GetCharSet@@YAPEAHPEBD@Z PROC				; GetCharSet
; File W:\cpp\void\detroit\detroit-asset.c
; Line 602
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 606
	mov	DWORD PTR CharSetSize$[rsp], 0
; Line 608
	mov	DWORD PTR Extended$[rsp], 0
; Line 610
	cmp	QWORD PTR FromString$[rsp], 0
	jne	SHORT $LN11@GetCharSet
; Line 611
	mov	DWORD PTR CharSetSize$[rsp], 95		; 0000005fH
; Line 612
	jmp	SHORT $LN12@GetCharSet
$LN11@GetCharSet:
; Line 613
	lea	rdx, OFFSET FLAT:$SG154603
	mov	rcx, QWORD PTR FromString$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN13@GetCharSet
; Line 614
	mov	DWORD PTR CharSetSize$[rsp], 95		; 0000005fH
; Line 615
	jmp	SHORT $LN14@GetCharSet
$LN13@GetCharSet:
; Line 616
	lea	rdx, OFFSET FLAT:$SG154606
	mov	rcx, QWORD PTR FromString$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN15@GetCharSet
; Line 617
	mov	DWORD PTR CharSetSize$[rsp], 222	; 000000deH
; Line 618
	mov	DWORD PTR Extended$[rsp], 1
; Line 619
	jmp	SHORT $LN16@GetCharSet
$LN15@GetCharSet:
; Line 620
	mov	rcx, QWORD PTR FromString$[rsp]
	call	strlen
	mov	DWORD PTR CharSetSize$[rsp], eax
; Line 621
	mov	DWORD PTR Extended$[rsp], -1
$LN16@GetCharSet:
$LN14@GetCharSet:
$LN12@GetCharSet:
; Line 624
	movsxd	rax, DWORD PTR CharSetSize$[rsp]
	add	rax, 4
	mov	rdx, rax
	xor	ecx, ecx
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR CharSet$[rsp], rax
; Line 625
	mov	rax, QWORD PTR CharSet$[rsp]
	mov	ecx, DWORD PTR CharSetSize$[rsp]
	mov	DWORD PTR [rax], ecx
	mov	rax, QWORD PTR CharSet$[rsp]
	add	rax, 4
	mov	QWORD PTR CharSet$[rsp], rax
; Line 627
	cmp	DWORD PTR Extended$[rsp], -1
	jne	SHORT $LN17@GetCharSet
; Line 629
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@GetCharSet
$LN2@GetCharSet:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@GetCharSet:
	mov	eax, DWORD PTR CharSetSize$[rsp]
	cmp	DWORD PTR I$1[rsp], eax
	jge	SHORT $LN3@GetCharSet
; Line 630
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	rcx, QWORD PTR FromString$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR I$1[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 631
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rcx+rax*4], 0
; Line 632
	jmp	SHORT $LN2@GetCharSet
$LN3@GetCharSet:
; Line 633
	jmp	$LN18@GetCharSet
$LN17@GetCharSet:
; Line 635
	mov	DWORD PTR I$2[rsp], 0
	jmp	SHORT $LN7@GetCharSet
$LN5@GetCharSet:
	mov	eax, DWORD PTR I$2[rsp]
	inc	eax
	mov	DWORD PTR I$2[rsp], eax
$LN7@GetCharSet:
	cmp	DWORD PTR I$2[rsp], 95			; 0000005fH
	jge	SHORT $LN6@GetCharSet
; Line 636
	mov	eax, DWORD PTR I$2[rsp]
	add	eax, 32					; 00000020H
	mov	ecx, DWORD PTR I$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 637
	mov	eax, DWORD PTR I$2[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rcx+rax*4], 0
; Line 638
	jmp	SHORT $LN5@GetCharSet
$LN6@GetCharSet:
; Line 640
	cmp	DWORD PTR Extended$[rsp], 0
	je	SHORT $LN19@GetCharSet
; Line 641
	mov	DWORD PTR I$3[rsp], 0
	jmp	SHORT $LN10@GetCharSet
$LN8@GetCharSet:
	mov	eax, DWORD PTR I$3[rsp]
	inc	eax
	mov	DWORD PTR I$3[rsp], eax
$LN10@GetCharSet:
	cmp	DWORD PTR I$3[rsp], 127			; 0000007fH
	jge	SHORT $LN9@GetCharSet
; Line 642
	mov	eax, DWORD PTR I$3[rsp]
	add	eax, 128				; 00000080H
	mov	ecx, DWORD PTR I$3[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 643
	mov	eax, DWORD PTR I$3[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR CharSet$[rsp]
	mov	DWORD PTR [rcx+rax*4], 0
; Line 644
	jmp	SHORT $LN8@GetCharSet
$LN9@GetCharSet:
$LN19@GetCharSet:
$LN18@GetCharSet:
; Line 647
	mov	rax, QWORD PTR CharSet$[rsp]
; Line 648
	add	rsp, 72					; 00000048H
	ret	0
?GetCharSet@@YAPEAHPEBD@Z ENDP				; GetCharSet
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv87 = 48
tv85 = 52
tv89 = 56
tv83 = 60
tv91 = 64
tv140 = 72
$T1 = 80
$T2 = 104
$T3 = 128
$T4 = 160
I$ = 224
FileName$ = 232
?ImageWriteOut@@YAHU_PIXEL_BUFFER@@PEBD@Z PROC		; ImageWriteOut
; File W:\cpp\void\detroit\detroit-asset.c
; Line 455
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 459
	mov	rax, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	rcx, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv87[rsp], eax
	mov	rax, QWORD PTR I$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv91[rsp], rax
	mov	rax, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	DWORD PTR tv85[rsp], eax
	mov	rax, QWORD PTR I$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv89[rsp], eax
	mov	rax, QWORD PTR I$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv83[rsp], eax
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR tv91[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR tv85[rsp]
	mov	r8d, DWORD PTR tv89[rsp]
	mov	edx, DWORD PTR tv83[rsp]
	mov	rcx, QWORD PTR FileName$[rsp]
	call	stbi_write_png
	test	eax, eax
	jne	$LN2@ImageWrite
; Line 461
	mov	DWORD PTR [rsp+32], 86			; 00000056H
	mov	r9d, 461				; 000001cdH
	lea	r8, OFFSET FLAT:$SG154477
	lea	rdx, OFFSET FLAT:$SG154478
	lea	rcx, QWORD PTR $T4[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR FileName$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv140[rsp], rax
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv140[rsp]
	lea	r8, OFFSET FLAT:$SG154476
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 462
	xor	eax, eax
	jmp	SHORT $LN1@ImageWrite
$LN2@ImageWrite:
; Line 465
	mov	eax, 1
$LN1@ImageWrite:
; Line 466
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?ImageWriteOut@@YAHU_PIXEL_BUFFER@@PEBD@Z ENDP		; ImageWriteOut
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
R$ = 48
$T2 = 80
$T3 = 112
__$ReturnAddress$ = 176
F$ = 184
Color$ = 192
W$ = 200
H$ = 208
?ImageCreateFilled@@YA?AU_PIXEL_BUFFER@@HUrx_f32x4@@HH@Z PROC ; ImageCreateFilled
; File W:\cpp\void\detroit\detroit-asset.c
; Line 277
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	r9d, DWORD PTR H$[rsp]
	mov	r8d, DWORD PTR W$[rsp]
	mov	edx, DWORD PTR F$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z	; ImageCreate
	lea	rcx, QWORD PTR R$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 278
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR R$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ImageFillWithColor@@YAXU_PIXEL_BUFFER@@Urx_f32x4@@@Z ; ImageFillWithColor
; Line 279
	lea	rax, QWORD PTR R$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 280
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ImageCreateFilled@@YA?AU_PIXEL_BUFFER@@HUrx_f32x4@@HH@Z ENDP ; ImageCreateFilled
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 32
R$ = 40
__$ReturnAddress$ = 96
F$ = 104
W$ = 112
H$ = 120
?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z PROC		; ImageCreate
; File W:\cpp\void\detroit\detroit-asset.c
; Line 267
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 268
	mov	eax, DWORD PTR F$[rsp]
	mov	DWORD PTR R$[rsp], eax
; Line 269
	mov	eax, DWORD PTR W$[rsp]
	mov	DWORD PTR R$[rsp+4], eax
; Line 270
	mov	eax, DWORD PTR H$[rsp]
	mov	DWORD PTR R$[rsp+8], eax
; Line 271
	mov	eax, DWORD PTR W$[rsp]
	imul	eax, DWORD PTR H$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	mov	ecx, DWORD PTR F$[rsp]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	ecx, DWORD PTR tv65[rsp]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rdx, rax
	xor	ecx, ecx
	call	?HeapAlloc@@YAPEAXH_K@Z			; HeapAlloc
	mov	QWORD PTR R$[rsp+16], rax
; Line 272
	lea	rax, QWORD PTR R$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 273
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?ImageCreate@@YA?AU_PIXEL_BUFFER@@HHH@Z ENDP		; ImageCreate
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
P$1 = 48
Z$ = 52
tv89 = 56
tv76 = 60
$T2 = 64
$T3 = 80
$T4 = 112
$T5 = 144
I$ = 208
Color$ = 216
?ImageFillWithColor@@YAXU_PIXEL_BUFFER@@Urx_f32x4@@@Z PROC ; ImageFillWithColor
; File W:\cpp\void\detroit\detroit-asset.c
; Line 105
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
; Line 106
	mov	rcx, QWORD PTR I$[rsp]
	call	?ImageCheck@@YAHPEAU_PIXEL_BUFFER@@@Z	; ImageCheck
	test	eax, eax
	jne	SHORT $LN7@ImageFillW
; Line 108
	jmp	$LN1@ImageFillW
$LN7@ImageFillW:
; Line 111
	mov	rax, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	DWORD PTR Z$[rsp], eax
; Line 112
	mov	DWORD PTR P$1[rsp], 0
	jmp	SHORT $LN4@ImageFillW
$LN2@ImageFillW:
	mov	eax, DWORD PTR P$1[rsp]
	inc	eax
	mov	DWORD PTR P$1[rsp], eax
$LN4@ImageFillW:
	mov	rax, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR I$[rsp]
	mov	eax, DWORD PTR [rax+4]
	imul	eax, DWORD PTR [rcx+8]
	cmp	DWORD PTR P$1[rsp], eax
	jae	$LN3@ImageFillW
; Line 113
	mov	rax, QWORD PTR I$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv76[rsp], eax
	cmp	DWORD PTR tv76[rsp], 1
	je	SHORT $LN8@ImageFillW
	cmp	DWORD PTR tv76[rsp], 3
	je	SHORT $LN9@ImageFillW
	cmp	DWORD PTR tv76[rsp], 4
	je	$LN10@ImageFillW
	jmp	$LN11@ImageFillW
$LN8@ImageFillW:
; Line 115
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Color$[rsp]
	mov	ecx, 16
	rep movsb
	lea	rcx, QWORD PTR $T2[rsp]
	call	?ColorAverage@@YAMUrx_f32x4@@@Z		; ColorAverage
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	BYTE PTR tv89[rsp], al
	mov	eax, DWORD PTR P$1[rsp]
	imul	eax, DWORD PTR Z$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	edx, BYTE PTR tv89[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 116
	jmp	$LN5@ImageFillW
$LN9@ImageFillW:
; Line 118
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	ecx, DWORD PTR P$1[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	mov	ecx, ecx
	mov	rdx, QWORD PTR I$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	BYTE PTR [rdx+rcx], al
; Line 119
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	ecx, DWORD PTR P$1[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	inc	ecx
	mov	ecx, ecx
	mov	rdx, QWORD PTR I$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	BYTE PTR [rdx+rcx], al
; Line 120
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	ecx, DWORD PTR P$1[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	add	ecx, 2
	mov	ecx, ecx
	mov	rdx, QWORD PTR I$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	BYTE PTR [rdx+rcx], al
; Line 121
	jmp	$LN5@ImageFillW
$LN10@ImageFillW:
; Line 123
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	ecx, DWORD PTR P$1[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	mov	ecx, ecx
	mov	rdx, QWORD PTR I$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	BYTE PTR [rdx+rcx], al
; Line 124
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	ecx, DWORD PTR P$1[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	inc	ecx
	mov	ecx, ecx
	mov	rdx, QWORD PTR I$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	BYTE PTR [rdx+rcx], al
; Line 125
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	ecx, DWORD PTR P$1[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	add	ecx, 2
	mov	ecx, ecx
	mov	rdx, QWORD PTR I$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	BYTE PTR [rdx+rcx], al
; Line 126
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm0, DWORD PTR [rax+12]
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vcvttss2si eax, xmm0
	mov	ecx, DWORD PTR P$1[rsp]
	imul	ecx, DWORD PTR Z$[rsp]
	add	ecx, 3
	mov	ecx, ecx
	mov	rdx, QWORD PTR I$[rsp]
	mov	rdx, QWORD PTR [rdx+16]
	mov	BYTE PTR [rdx+rcx], al
; Line 127
	jmp	SHORT $LN5@ImageFillW
$LN11@ImageFillW:
; Line 129
	mov	DWORD PTR [rsp+32], 76			; 0000004cH
	mov	r9d, 129				; 00000081H
	lea	r8, OFFSET FLAT:$SG154147
	lea	rdx, OFFSET FLAT:$SG154148
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG154146
	mov	edx, 7
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@ImageFillW:
; Line 132
	jmp	$LN2@ImageFillW
$LN3@ImageFillW:
$LN1@ImageFillW:
; Line 133
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?ImageFillWithColor@@YAXU_PIXEL_BUFFER@@Urx_f32x4@@@Z ENDP ; ImageFillWithColor
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 0
I$ = 32
?ImageCheck@@YAHPEAU_PIXEL_BUFFER@@@Z PROC		; ImageCheck
; File W:\cpp\void\detroit\detroit-asset.c
; Line 100
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR I$[rsp]
	cmp	DWORD PTR [rax], 0
	jle	SHORT $LN3@ImageCheck
	mov	rax, QWORD PTR I$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jle	SHORT $LN3@ImageCheck
	mov	rax, QWORD PTR I$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jle	SHORT $LN3@ImageCheck
	mov	rax, QWORD PTR I$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN3@ImageCheck
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN4@ImageCheck
$LN3@ImageCheck:
	mov	DWORD PTR tv72[rsp], 0
$LN4@ImageCheck:
	mov	eax, DWORD PTR tv72[rsp]
; Line 101
	add	rsp, 24
	ret	0
?ImageCheck@@YAHPEAU_PIXEL_BUFFER@@@Z ENDP		; ImageCheck
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 48
$T1 = 56
$T2 = 80
$T3 = 112
I$ = 176
X$ = 184
Y$ = 192
?ImageGetMemoryAtOffset@@YAPEAEU_PIXEL_BUFFER@@MM@Z PROC ; ImageGetMemoryAtOffset
; File W:\cpp\void\detroit\detroit-asset.c
; Line 80
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	DWORD PTR [rsp+32], 75			; 0000004bH
	mov	r9d, 80					; 00000050H
	lea	r8, OFFSET FLAT:$SG154085
	lea	rdx, OFFSET FLAT:$SG154086
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR I$[rsp]
	cmp	DWORD PTR [rax], 1
	jne	SHORT $LN3@ImageGetMe
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@ImageGetMe
$LN3@ImageGetMe:
	mov	DWORD PTR tv68[rsp], 0
$LN4@ImageGetMe:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG154083
	mov	r8d, DWORD PTR tv68[rsp]
	lea	rdx, OFFSET FLAT:$SG154084
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 82
	vcvttss2si eax, DWORD PTR Y$[rsp]
	mov	rcx, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	add	rcx, rax
	mov	rax, rcx
	vcvttss2si ecx, DWORD PTR X$[rsp]
	movsxd	rcx, ecx
	add	rax, rcx
; Line 83
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?ImageGetMemoryAtOffset@@YAPEAEU_PIXEL_BUFFER@@MM@Z ENDP ; ImageGetMemoryAtOffset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$ = 48
?ImageGetStride@@YAHU_PIXEL_BUFFER@@@Z PROC		; ImageGetStride
; File W:\cpp\void\detroit\detroit-asset.c
; Line 75
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	rcx, QWORD PTR I$[rsp]
	imul	eax, DWORD PTR [rcx+4]
; Line 76
	add	rsp, 40					; 00000028H
	ret	0
?ImageGetStride@@YAHU_PIXEL_BUFFER@@@Z ENDP		; ImageGetStride
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Color$ = 8
?ColorAverage@@YAMUrx_f32x4@@@Z PROC			; ColorAverage
; File W:\cpp\void\detroit\detroit-asset.c
; Line 61
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmulss	xmm0, xmm0, DWORD PTR __real@3eaa7efa
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm1, DWORD PTR [rax+4]
	vmulss	xmm1, xmm1, DWORD PTR __real@3eaa7efa
	vaddss	xmm0, xmm0, xmm1
	mov	rax, QWORD PTR Color$[rsp]
	vmovss	xmm1, DWORD PTR [rax+8]
	vmulss	xmm1, xmm1, DWORD PTR __real@3eaa7efa
	vaddss	xmm0, xmm0, xmm1
; Line 64
	ret	0
?ColorAverage@@YAMUrx_f32x4@@@Z ENDP			; ColorAverage
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 80
col$ = 84
pos$1 = 88
y$2 = 92
x$3 = 96
DCY$4 = 100
bitCnt$5 = 104
bitBuf$6 = 108
j$7 = 112
i$ = 116
k$ = 120
yy$8 = 124
xx$9 = 128
DCU$10 = 132
DCV$11 = 136
yti$12 = 140
uvti$13 = 144
p$14 = 148
r$15 = 152
g$16 = 156
b$17 = 160
p$18 = 164
r$19 = 168
g$20 = 172
b$21 = 176
tv70 = 180
tv72 = 184
tv75 = 188
tv76 = 192
tv81 = 196
tv130 = 200
tv131 = 204
tv147 = 208
tv148 = 212
tv204 = 216
tv374 = 220
tv376 = 224
subsample$ = 228
tv391 = 232
clamped_row$22 = 236
tv395 = 240
tv404 = 244
tv573 = 248
clamped_row$23 = 252
tv577 = 256
tv586 = 260
dataR$24 = 264
ofsG$25 = 272
ofsB$26 = 276
base_p$27 = 280
base_p$28 = 284
dataG$29 = 288
dataB$30 = 296
tv212 = 304
tv219 = 312
tv292 = 320
tv299 = 328
tv307 = 336
tv314 = 344
tv324 = 352
tv331 = 360
tv341 = 368
tv348 = 376
tv358 = 384
tv365 = 392
tv372 = 400
fdtbl_Y$ = 416
fdtbl_UV$ = 672
subU$31 = 928
subV$32 = 1184
Y$33 = 1440
U$34 = 1696
V$35 = 1952
Y$36 = 2208
U$37 = 3232
V$38 = 4256
head1$39 = 5280
YTable$ = 5312
UVTable$ = 5376
__$ArrayPad$ = 5440
s$ = 5472
width$ = 5480
height$ = 5488
comp$ = 5496
data$ = 5504
quality$ = 5512
?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z PROC ; stbi_write_jpg_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1398
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 5464				; 00001558H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1474
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR width$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR height$[rsp], 0
	je	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	jg	SHORT $LN42@stbi_write
	cmp	DWORD PTR comp$[rsp], 1
	jge	SHORT $LN41@stbi_write
$LN42@stbi_write:
; Line 1475
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN41@stbi_write:
; Line 1478
	cmp	DWORD PTR quality$[rsp], 0
	je	SHORT $LN46@stbi_write
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN47@stbi_write
$LN46@stbi_write:
	mov	DWORD PTR tv70[rsp], 90			; 0000005aH
$LN47@stbi_write:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1479
	cmp	DWORD PTR quality$[rsp], 90		; 0000005aH
	jg	SHORT $LN48@stbi_write
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN49@stbi_write
$LN48@stbi_write:
	mov	DWORD PTR tv72[rsp], 0
$LN49@stbi_write:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR subsample$[rsp], eax
; Line 1480
	cmp	DWORD PTR quality$[rsp], 1
	jge	SHORT $LN52@stbi_write
	mov	DWORD PTR tv76[rsp], 1
	jmp	SHORT $LN53@stbi_write
$LN52@stbi_write:
	cmp	DWORD PTR quality$[rsp], 100		; 00000064H
	jle	SHORT $LN50@stbi_write
	mov	DWORD PTR tv75[rsp], 100		; 00000064H
	jmp	SHORT $LN51@stbi_write
$LN50@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR tv75[rsp], eax
$LN51@stbi_write:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR tv76[rsp], eax
$LN53@stbi_write:
	mov	eax, DWORD PTR tv76[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1481
	cmp	DWORD PTR quality$[rsp], 50		; 00000032H
	jge	SHORT $LN54@stbi_write
	mov	eax, 5000				; 00001388H
	cdq
	idiv	DWORD PTR quality$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN55@stbi_write
$LN54@stbi_write:
	mov	eax, DWORD PTR quality$[rsp]
	shl	eax, 1
	mov	ecx, 200				; 000000c8H
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv81[rsp], eax
$LN55@stbi_write:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR quality$[rsp], eax
; Line 1483
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_write:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	$LN3@stbi_write
; Line 1484
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?YQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR yti$12[rsp], eax
; Line 1485
	cmp	DWORD PTR yti$12[rsp], 1
	jge	SHORT $LN58@stbi_write
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN59@stbi_write
$LN58@stbi_write:
	cmp	DWORD PTR yti$12[rsp], 255		; 000000ffH
	jle	SHORT $LN56@stbi_write
	mov	DWORD PTR tv130[rsp], 255		; 000000ffH
	jmp	SHORT $LN57@stbi_write
$LN56@stbi_write:
	mov	eax, DWORD PTR yti$12[rsp]
	mov	DWORD PTR tv130[rsp], eax
$LN57@stbi_write:
	mov	eax, DWORD PTR tv130[rsp]
	mov	DWORD PTR tv131[rsp], eax
$LN59@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv131[rsp]
	mov	BYTE PTR YTable$[rsp+rax], cl
; Line 1486
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?UVQT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	imul	eax, DWORD PTR quality$[rsp]
	add	eax, 50					; 00000032H
	cdq
	mov	ecx, 100				; 00000064H
	idiv	ecx
	mov	DWORD PTR uvti$13[rsp], eax
; Line 1487
	cmp	DWORD PTR uvti$13[rsp], 1
	jge	SHORT $LN62@stbi_write
	mov	DWORD PTR tv148[rsp], 1
	jmp	SHORT $LN63@stbi_write
$LN62@stbi_write:
	cmp	DWORD PTR uvti$13[rsp], 255		; 000000ffH
	jle	SHORT $LN60@stbi_write
	mov	DWORD PTR tv147[rsp], 255		; 000000ffH
	jmp	SHORT $LN61@stbi_write
$LN60@stbi_write:
	mov	eax, DWORD PTR uvti$13[rsp]
	mov	DWORD PTR tv147[rsp], eax
$LN61@stbi_write:
	mov	eax, DWORD PTR tv147[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN63@stbi_write:
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR tv148[rsp]
	mov	BYTE PTR UVTable$[rsp+rax], cl
; Line 1488
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1490
	mov	DWORD PTR row$[rsp], 0
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR row$[rsp], 8
	jge	$LN6@stbi_write
; Line 1491
	mov	DWORD PTR col$[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi_write:
	cmp	DWORD PTR col$[rsp], 8
	jge	$LN9@stbi_write
; Line 1492
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR YTable$[rsp+rax]
	vcvtsi2ss xmm0, xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	vmulss	xmm0, xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	vmulss	xmm0, xmm0, DWORD PTR [rcx+rax*4]
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR k$[rsp]
	vmovss	DWORD PTR fdtbl_Y$[rsp+rax*4], xmm0
; Line 1493
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	eax, BYTE PTR UVTable$[rsp+rax]
	vcvtsi2ss xmm0, xmm0, eax
	movsxd	rax, DWORD PTR row$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	vmulss	xmm0, xmm0, DWORD PTR [rcx+rax*4]
	movsxd	rax, DWORD PTR col$[rsp]
	lea	rcx, OFFSET FLAT:?aasf@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBMB
	vmulss	xmm0, xmm0, DWORD PTR [rcx+rax*4]
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR k$[rsp]
	vmovss	DWORD PTR fdtbl_UV$[rsp+rax*4], xmm0
; Line 1494
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 1495
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1501
	mov	BYTE PTR head1$39[rsp], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+1], 192		; 000000c0H
	mov	BYTE PTR head1$39[rsp+2], 0
	mov	BYTE PTR head1$39[rsp+3], 17
	mov	BYTE PTR head1$39[rsp+4], 8
	mov	eax, DWORD PTR height$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+5], al
	mov	eax, DWORD PTR height$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+6], al
	mov	eax, DWORD PTR width$[rsp]
	sar	eax, 8
	mov	BYTE PTR head1$39[rsp+7], al
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR head1$39[rsp+8], al
; Line 1502
	mov	BYTE PTR head1$39[rsp+9], 3
	mov	BYTE PTR head1$39[rsp+10], 1
	cmp	DWORD PTR subsample$[rsp], 0
	je	SHORT $LN64@stbi_write
	mov	DWORD PTR tv204[rsp], 34		; 00000022H
	jmp	SHORT $LN65@stbi_write
$LN64@stbi_write:
	mov	DWORD PTR tv204[rsp], 17
$LN65@stbi_write:
	movzx	eax, BYTE PTR tv204[rsp]
	mov	BYTE PTR head1$39[rsp+11], al
	mov	BYTE PTR head1$39[rsp+12], 0
	mov	BYTE PTR head1$39[rsp+13], 2
	mov	BYTE PTR head1$39[rsp+14], 17
	mov	BYTE PTR head1$39[rsp+15], 1
	mov	BYTE PTR head1$39[rsp+16], 3
	mov	BYTE PTR head1$39[rsp+17], 17
	mov	BYTE PTR head1$39[rsp+18], 1
	mov	BYTE PTR head1$39[rsp+19], 255		; 000000ffH
	mov	BYTE PTR head1$39[rsp+20], 196		; 000000c4H
	mov	BYTE PTR head1$39[rsp+21], 1
	mov	BYTE PTR head1$39[rsp+22], 162		; 000000a2H
	mov	BYTE PTR head1$39[rsp+23], 0
; Line 1503
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv212[rsp], rax
	mov	r8d, 25
	lea	rdx, OFFSET FLAT:?head0@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv212[rsp]
; Line 1504
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv219[rsp], rax
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR YTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv219[rsp]
; Line 1505
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1506
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv292[rsp], rax
	mov	r8d, 64					; 00000040H
	lea	rdx, QWORD PTR UVTable$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv292[rsp]
; Line 1507
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv299[rsp], rax
	mov	r8d, 24
	lea	rdx, QWORD PTR head1$39[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv299[rsp]
; Line 1508
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv307[rsp], rax
	lea	rax, OFFSET FLAT:?std_dc_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv307[rsp]
; Line 1509
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv314[rsp], rax
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv314[rsp]
; Line 1510
	mov	dl, 16
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1511
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv324[rsp], rax
	lea	rax, OFFSET FLAT:?std_ac_luminance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv324[rsp]
; Line 1512
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv331[rsp], rax
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_luminance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv331[rsp]
; Line 1513
	mov	dl, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1514
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv341[rsp], rax
	lea	rax, OFFSET FLAT:?std_dc_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv341[rsp]
; Line 1515
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv348[rsp], rax
	mov	r8d, 12
	lea	rdx, OFFSET FLAT:?std_dc_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv348[rsp]
; Line 1516
	mov	dl, 17
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1517
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv358[rsp], rax
	lea	rax, OFFSET FLAT:?std_ac_chrominance_nrcodes@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	inc	rax
	mov	r8d, 16
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv358[rsp]
; Line 1518
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv365[rsp], rax
	mov	r8d, 162				; 000000a2H
	lea	rdx, OFFSET FLAT:?std_ac_chrominance_values@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv365[rsp]
; Line 1519
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv372[rsp], rax
	mov	r8d, 14
	lea	rdx, OFFSET FLAT:?head2@?M@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBEB
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv372[rsp]
; Line 1525
	mov	DWORD PTR DCY$4[rsp], 0
	mov	DWORD PTR DCU$10[rsp], 0
	mov	DWORD PTR DCV$11[rsp], 0
; Line 1526
	mov	DWORD PTR bitBuf$6[rsp], 0
	mov	DWORD PTR bitCnt$5[rsp], 0
; Line 1528
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN66@stbi_write
	mov	DWORD PTR tv374[rsp], 1
	jmp	SHORT $LN67@stbi_write
$LN66@stbi_write:
	mov	DWORD PTR tv374[rsp], 0
$LN67@stbi_write:
	mov	eax, DWORD PTR tv374[rsp]
	mov	DWORD PTR ofsG$25[rsp], eax
	cmp	DWORD PTR comp$[rsp], 2
	jle	SHORT $LN68@stbi_write
	mov	DWORD PTR tv376[rsp], 2
	jmp	SHORT $LN69@stbi_write
$LN68@stbi_write:
	mov	DWORD PTR tv376[rsp], 0
$LN69@stbi_write:
	mov	eax, DWORD PTR tv376[rsp]
	mov	DWORD PTR ofsB$26[rsp], eax
; Line 1529
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR dataR$24[rsp], rax
; Line 1530
	movsxd	rax, DWORD PTR ofsG$25[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataG$29[rsp], rax
; Line 1531
	movsxd	rax, DWORD PTR ofsB$26[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dataB$30[rsp], rax
; Line 1533
	cmp	DWORD PTR subsample$[rsp], 0
	je	$LN43@stbi_write
; Line 1534
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	mov	DWORD PTR y$2[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN12@stbi_write
; Line 1535
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	mov	DWORD PTR x$3[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN15@stbi_write
; Line 1537
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN19@stbi_write
$LN17@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN19@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 16
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN18@stbi_write
; Line 1539
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN70@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv391[rsp], eax
	jmp	SHORT $LN71@stbi_write
$LN70@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv391[rsp], eax
$LN71@stbi_write:
	mov	eax, DWORD PTR tv391[rsp]
	mov	DWORD PTR clamped_row$22[rsp], eax
; Line 1540
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN72@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv395[rsp], eax
	jmp	SHORT $LN73@stbi_write
$LN72@stbi_write:
	mov	eax, DWORD PTR clamped_row$22[rsp]
	mov	DWORD PTR tv395[rsp], eax
$LN73@stbi_write:
	mov	eax, DWORD PTR tv395[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$27[rsp], eax
; Line 1541
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN22@stbi_write
$LN20@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN22@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 16
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN21@stbi_write
; Line 1543
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN74@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv404[rsp], eax
	jmp	SHORT $LN75@stbi_write
$LN74@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv404[rsp], eax
$LN75@stbi_write:
	mov	eax, DWORD PTR tv404[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$14[rsp], eax
; Line 1544
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR r$15[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR g$16[rsp], xmm0
	movsxd	rax, DWORD PTR p$14[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR b$17[rsp], xmm0
; Line 1545
	vmovss	xmm0, DWORD PTR __real@3e991687
	vmulss	xmm0, xmm0, DWORD PTR r$15[rsp]
	vmovss	xmm1, DWORD PTR __real@3f1645a2
	vmulss	xmm1, xmm1, DWORD PTR g$16[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@3de978d5
	vmulss	xmm1, xmm1, DWORD PTR b$17[rsp]
	vaddss	xmm0, xmm0, xmm1
	vsubss	xmm0, xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	vmovss	DWORD PTR Y$36[rsp+rax*4], xmm0
; Line 1546
	vmovss	xmm0, DWORD PTR __real@be2cca2e
	vmulss	xmm0, xmm0, DWORD PTR r$15[rsp]
	vmovss	xmm1, DWORD PTR __real@3ea99ae9
	vmulss	xmm1, xmm1, DWORD PTR g$16[rsp]
	vsubss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@3f000000
	vmulss	xmm1, xmm1, DWORD PTR b$17[rsp]
	vaddss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	vmovss	DWORD PTR U$37[rsp+rax*4], xmm0
; Line 1547
	vmovss	xmm0, DWORD PTR __real@3f000000
	vmulss	xmm0, xmm0, DWORD PTR r$15[rsp]
	vmovss	xmm1, DWORD PTR __real@3ed65e89
	vmulss	xmm1, xmm1, DWORD PTR g$16[rsp]
	vsubss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@3da685db
	vmulss	xmm1, xmm1, DWORD PTR b$17[rsp]
	vsubss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	vmovss	DWORD PTR V$38[rsp+rax*4], xmm0
; Line 1548
	jmp	$LN20@stbi_write
$LN21@stbi_write:
; Line 1549
	jmp	$LN17@stbi_write
$LN18@stbi_write:
; Line 1550
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 16
	lea	r9, QWORD PTR Y$36[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1551
	lea	rax, QWORD PTR Y$36[rsp+32]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1552
	lea	rax, QWORD PTR Y$36[rsp+512]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1553
	lea	rax, QWORD PTR Y$36[rsp+544]
	lea	rcx, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rcx
	mov	ecx, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], ecx
	lea	rcx, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 16
	mov	r9, rax
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1559
	mov	DWORD PTR yy$8[rsp], 0
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN25@stbi_write
$LN23@stbi_write:
	mov	eax, DWORD PTR yy$8[rsp]
	inc	eax
	mov	DWORD PTR yy$8[rsp], eax
$LN25@stbi_write:
	cmp	DWORD PTR yy$8[rsp], 8
	jge	$LN24@stbi_write
; Line 1560
	mov	DWORD PTR xx$9[rsp], 0
	jmp	SHORT $LN28@stbi_write
$LN26@stbi_write:
	mov	eax, DWORD PTR xx$9[rsp]
	inc	eax
	mov	DWORD PTR xx$9[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN28@stbi_write:
	cmp	DWORD PTR xx$9[rsp], 8
	jge	$LN27@stbi_write
; Line 1561
	imul	eax, DWORD PTR yy$8[rsp], 32		; 00000020H
	mov	ecx, DWORD PTR xx$9[rsp]
	lea	eax, DWORD PTR [rax+rcx*2]
	mov	DWORD PTR j$7[rsp], eax
; Line 1562
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	vmovss	xmm0, DWORD PTR U$37[rsp+rax*4]
	vaddss	xmm0, xmm0, DWORD PTR U$37[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	vaddss	xmm0, xmm0, DWORD PTR U$37[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	vaddss	xmm0, xmm0, DWORD PTR U$37[rsp+rax*4]
	vmulss	xmm0, xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	vmovss	DWORD PTR subU$31[rsp+rax*4], xmm0
; Line 1563
	mov	eax, DWORD PTR j$7[rsp]
	cdqe
	mov	ecx, DWORD PTR j$7[rsp]
	inc	ecx
	movsxd	rcx, ecx
	vmovss	xmm0, DWORD PTR V$38[rsp+rax*4]
	vaddss	xmm0, xmm0, DWORD PTR V$38[rsp+rcx*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 16
	cdqe
	vaddss	xmm0, xmm0, DWORD PTR V$38[rsp+rax*4]
	mov	eax, DWORD PTR j$7[rsp]
	add	eax, 17
	cdqe
	vaddss	xmm0, xmm0, DWORD PTR V$38[rsp+rax*4]
	vmulss	xmm0, xmm0, DWORD PTR __real@3e800000
	movsxd	rax, DWORD PTR pos$1[rsp]
	vmovss	DWORD PTR subV$32[rsp+rax*4], xmm0
; Line 1564
	jmp	$LN26@stbi_write
$LN27@stbi_write:
; Line 1565
	jmp	$LN23@stbi_write
$LN24@stbi_write:
; Line 1566
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subU$31[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1567
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR subV$32[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1569
	jmp	$LN14@stbi_write
$LN15@stbi_write:
; Line 1570
	jmp	$LN11@stbi_write
$LN12@stbi_write:
; Line 1571
	jmp	$LN44@stbi_write
$LN43@stbi_write:
; Line 1572
	mov	DWORD PTR y$2[rsp], 0
	jmp	SHORT $LN31@stbi_write
$LN29@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	mov	DWORD PTR y$2[rsp], eax
$LN31@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$2[rsp], eax
	jge	$LN30@stbi_write
; Line 1573
	mov	DWORD PTR x$3[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN32@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	mov	DWORD PTR x$3[rsp], eax
$LN34@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$3[rsp], eax
	jge	$LN33@stbi_write
; Line 1575
	mov	eax, DWORD PTR y$2[rsp]
	mov	DWORD PTR row$[rsp], eax
	mov	DWORD PTR pos$1[rsp], 0
	jmp	SHORT $LN37@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN37@stbi_write:
	mov	eax, DWORD PTR y$2[rsp]
	add	eax, 8
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN36@stbi_write
; Line 1577
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR row$[rsp], eax
	jge	SHORT $LN76@stbi_write
	mov	eax, DWORD PTR row$[rsp]
	mov	DWORD PTR tv573[rsp], eax
	jmp	SHORT $LN77@stbi_write
$LN76@stbi_write:
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	mov	DWORD PTR tv573[rsp], eax
$LN77@stbi_write:
	mov	eax, DWORD PTR tv573[rsp]
	mov	DWORD PTR clamped_row$23[rsp], eax
; Line 1578
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN78@stbi_write
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv577[rsp], eax
	jmp	SHORT $LN79@stbi_write
$LN78@stbi_write:
	mov	eax, DWORD PTR clamped_row$23[rsp]
	mov	DWORD PTR tv577[rsp], eax
$LN79@stbi_write:
	mov	eax, DWORD PTR tv577[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR base_p$28[rsp], eax
; Line 1579
	mov	eax, DWORD PTR x$3[rsp]
	mov	DWORD PTR col$[rsp], eax
	jmp	SHORT $LN40@stbi_write
$LN38@stbi_write:
	mov	eax, DWORD PTR col$[rsp]
	inc	eax
	mov	DWORD PTR col$[rsp], eax
	mov	eax, DWORD PTR pos$1[rsp]
	inc	eax
	mov	DWORD PTR pos$1[rsp], eax
$LN40@stbi_write:
	mov	eax, DWORD PTR x$3[rsp]
	add	eax, 8
	cmp	DWORD PTR col$[rsp], eax
	jge	$LN39@stbi_write
; Line 1581
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR col$[rsp], eax
	jge	SHORT $LN80@stbi_write
	mov	eax, DWORD PTR col$[rsp]
	mov	DWORD PTR tv586[rsp], eax
	jmp	SHORT $LN81@stbi_write
$LN80@stbi_write:
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	mov	DWORD PTR tv586[rsp], eax
$LN81@stbi_write:
	mov	eax, DWORD PTR tv586[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR base_p$28[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p$18[rsp], eax
; Line 1582
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataR$24[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR r$19[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataG$29[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR g$20[rsp], xmm0
	movsxd	rax, DWORD PTR p$18[rsp]
	mov	rcx, QWORD PTR dataB$30[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR b$21[rsp], xmm0
; Line 1583
	vmovss	xmm0, DWORD PTR __real@3e991687
	vmulss	xmm0, xmm0, DWORD PTR r$19[rsp]
	vmovss	xmm1, DWORD PTR __real@3f1645a2
	vmulss	xmm1, xmm1, DWORD PTR g$20[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@3de978d5
	vmulss	xmm1, xmm1, DWORD PTR b$21[rsp]
	vaddss	xmm0, xmm0, xmm1
	vsubss	xmm0, xmm0, DWORD PTR __real@43000000
	movsxd	rax, DWORD PTR pos$1[rsp]
	vmovss	DWORD PTR Y$33[rsp+rax*4], xmm0
; Line 1584
	vmovss	xmm0, DWORD PTR __real@be2cca2e
	vmulss	xmm0, xmm0, DWORD PTR r$19[rsp]
	vmovss	xmm1, DWORD PTR __real@3ea99ae9
	vmulss	xmm1, xmm1, DWORD PTR g$20[rsp]
	vsubss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@3f000000
	vmulss	xmm1, xmm1, DWORD PTR b$21[rsp]
	vaddss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	vmovss	DWORD PTR U$34[rsp+rax*4], xmm0
; Line 1585
	vmovss	xmm0, DWORD PTR __real@3f000000
	vmulss	xmm0, xmm0, DWORD PTR r$19[rsp]
	vmovss	xmm1, DWORD PTR __real@3ed65e89
	vmulss	xmm1, xmm1, DWORD PTR g$20[rsp]
	vsubss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@3da685db
	vmulss	xmm1, xmm1, DWORD PTR b$21[rsp]
	vsubss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR pos$1[rsp]
	vmovss	DWORD PTR V$35[rsp+rax*4], xmm0
; Line 1586
	jmp	$LN38@stbi_write
$LN39@stbi_write:
; Line 1587
	jmp	$LN35@stbi_write
$LN36@stbi_write:
; Line 1589
	lea	rax, OFFSET FLAT:?YAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?YDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCY$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_Y$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR Y$33[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCY$4[rsp], eax
; Line 1590
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCU$10[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR U$34[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCU$10[rsp], eax
; Line 1591
	lea	rax, OFFSET FLAT:?UVAC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+64], rax
	lea	rax, OFFSET FLAT:?UVDC_HT@?1??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QAY01$$CBGA
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR DCV$11[rsp]
	mov	DWORD PTR [rsp+48], eax
	lea	rax, QWORD PTR fdtbl_UV$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 8
	lea	r9, QWORD PTR V$35[rsp]
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ; stbiw__jpg_processDU
	mov	DWORD PTR DCV$11[rsp], eax
; Line 1592
	jmp	$LN32@stbi_write
$LN33@stbi_write:
; Line 1593
	jmp	$LN29@stbi_write
$LN30@stbi_write:
$LN44@stbi_write:
; Line 1597
	lea	r9, OFFSET FLAT:?fillBits@?N@??stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z@4QBGB
	lea	r8, QWORD PTR bitCnt$5[rsp]
	lea	rdx, QWORD PTR bitBuf$6[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1601
	mov	dl, 255					; 000000ffH
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1602
	mov	dl, 217					; 000000d9H
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1604
	mov	eax, 1
$LN1@stbi_write:
; Line 1605
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 5464				; 00001558H
	ret	0
?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ENDP ; stbi_write_jpg_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dataOff$ = 64
i$ = 68
end0pos$ = 72
nrzeroes$1 = 76
y$ = 80
x$ = 84
j$ = 88
v$2 = 92
nrmarker$3 = 96
EOB$ = 100
tv224 = 104
diff$ = 108
bits$4 = 112
M16zeroes$ = 116
bits$5 = 120
n$ = 124
startpos$6 = 128
lng$7 = 132
tv195 = 136
DU$ = 144
__$ArrayPad$ = 400
s$ = 448
bitBuf$ = 456
bitCnt$ = 464
CDU$ = 472
du_stride$ = 480
fdtbl$ = 488
DC$ = 496
HTDC$ = 504
HTAC$ = 512
?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z PROC ; stbiw__jpg_processDU
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1328
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	sub	rsp, 424				; 000001a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1329
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR EOB$[rsp+2], ax
; Line 1330
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 0
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp], ax
	mov	eax, 4
	imul	rax, rax, 240				; 000000f0H
	mov	rcx, QWORD PTR HTAC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	eax, WORD PTR [rax+rcx]
	mov	WORD PTR M16zeroes$[rsp+2], ax
; Line 1335
	mov	DWORD PTR dataOff$[rsp], 0
	mov	eax, DWORD PTR du_stride$[rsp]
	shl	eax, 3
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN4@stbiw__jpg
$LN2@stbiw__jpg:
	mov	eax, DWORD PTR du_stride$[rsp]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dataOff$[rsp], eax
$LN4@stbiw__jpg:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR dataOff$[rsp], eax
	jge	$LN3@stbiw__jpg
; Line 1336
	mov	eax, DWORD PTR dataOff$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, 6
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, 5
	movsxd	rdx, edx
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [r8+rdx*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, 4
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR dataOff$[rsp]
	add	r9d, 3
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, 2
	movsxd	r10, r10d
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	r11d, DWORD PTR dataOff$[rsp]
	inc	r11d
	movsxd	r11, r11d
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rbx+r11*4]
	movsxd	r11, DWORD PTR dataOff$[rsp]
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [rdi+r11*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], r8
	mov	r8, r10
	mov	rdx, rbx
	mov	rcx, rdi
	call	?stbiw__jpg_DCT@@YAXPEAM0000000@Z	; stbiw__jpg_DCT
; Line 1337
	jmp	$LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1339
	mov	DWORD PTR dataOff$[rsp], 0
	jmp	SHORT $LN7@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR dataOff$[rsp]
	inc	eax
	mov	DWORD PTR dataOff$[rsp], eax
$LN7@stbiw__jpg:
	cmp	DWORD PTR dataOff$[rsp], 8
	jge	$LN6@stbiw__jpg
; Line 1340
	imul	eax, DWORD PTR du_stride$[rsp], 7
	mov	ecx, DWORD PTR dataOff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR CDU$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	imul	ecx, DWORD PTR du_stride$[rsp], 6
	mov	edx, DWORD PTR dataOff$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR CDU$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	imul	edx, DWORD PTR du_stride$[rsp], 5
	mov	ebx, DWORD PTR dataOff$[rsp]
	add	ebx, edx
	mov	edx, ebx
	movsxd	rdx, edx
	mov	rbx, QWORD PTR CDU$[rsp]
	lea	rdx, QWORD PTR [rbx+rdx*4]
	mov	ebx, DWORD PTR dataOff$[rsp]
	mov	edi, DWORD PTR du_stride$[rsp]
	lea	ebx, DWORD PTR [rbx+rdi*4]
	movsxd	rbx, ebx
	mov	rdi, QWORD PTR CDU$[rsp]
	lea	rbx, QWORD PTR [rdi+rbx*4]
	imul	edi, DWORD PTR du_stride$[rsp], 3
	mov	r8d, DWORD PTR dataOff$[rsp]
	add	r8d, edi
	mov	edi, r8d
	movsxd	rdi, edi
	mov	r8, QWORD PTR CDU$[rsp]
	lea	rdi, QWORD PTR [r8+rdi*4]
	mov	r8d, DWORD PTR dataOff$[rsp]
	mov	r9d, DWORD PTR du_stride$[rsp]
	lea	r8d, DWORD PTR [r8+r9*2]
	movsxd	r8, r8d
	mov	r9, QWORD PTR CDU$[rsp]
	lea	r8, QWORD PTR [r9+r8*4]
	mov	r9d, DWORD PTR du_stride$[rsp]
	mov	r10d, DWORD PTR dataOff$[rsp]
	add	r10d, r9d
	mov	r9d, r10d
	movsxd	r9, r9d
	mov	r10, QWORD PTR CDU$[rsp]
	lea	r9, QWORD PTR [r10+r9*4]
	mov	QWORD PTR tv195[rsp], r9
	movsxd	r10, DWORD PTR dataOff$[rsp]
	mov	r11, QWORD PTR CDU$[rsp]
	lea	r10, QWORD PTR [r11+r10*4]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], rcx
	mov	QWORD PTR [rsp+40], rdx
	mov	QWORD PTR [rsp+32], rbx
	mov	r9, rdi
	mov	rax, QWORD PTR tv195[rsp]
	mov	rdx, rax
	mov	rcx, r10
	call	?stbiw__jpg_DCT@@YAXPEAM0000000@Z	; stbiw__jpg_DCT
; Line 1342
	jmp	$LN5@stbiw__jpg
$LN6@stbiw__jpg:
; Line 1344
	mov	DWORD PTR y$[rsp], 0
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN10@stbiw__jpg
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN10@stbiw__jpg:
	cmp	DWORD PTR y$[rsp], 8
	jge	$LN9@stbiw__jpg
; Line 1345
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN13@stbiw__jpg
$LN11@stbiw__jpg:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbiw__jpg:
	cmp	DWORD PTR x$[rsp], 8
	jge	$LN12@stbiw__jpg
; Line 1347
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR du_stride$[rsp]
	add	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR i$[rsp], eax
; Line 1348
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR CDU$[rsp]
	mov	rbx, QWORD PTR fdtbl$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmulss	xmm0, xmm0, DWORD PTR [rbx+rcx*4]
	vmovss	DWORD PTR v$2[rsp], xmm0
; Line 1351
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR v$2[rsp]
	jbe	SHORT $LN32@stbiw__jpg
	vmovss	xmm0, DWORD PTR v$2[rsp]
	vsubss	xmm0, xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR tv224[rsp], xmm0
	jmp	SHORT $LN33@stbiw__jpg
$LN32@stbiw__jpg:
	vmovss	xmm0, DWORD PTR v$2[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR tv224[rsp], xmm0
$LN33@stbiw__jpg:
	vcvttss2si eax, DWORD PTR tv224[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	lea	rdx, OFFSET FLAT:?stbiw__jpg_ZigZag@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR DU$[rsp+rcx*4], eax
; Line 1352
	jmp	$LN11@stbiw__jpg
$LN12@stbiw__jpg:
; Line 1353
	jmp	$LN8@stbiw__jpg
$LN9@stbiw__jpg:
; Line 1356
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, DWORD PTR DC$[rsp]
	mov	eax, DWORD PTR DU$[rsp+rax]
	sub	eax, ecx
	mov	DWORD PTR diff$[rsp], eax
; Line 1357
	cmp	DWORD PTR diff$[rsp], 0
	jne	SHORT $LN26@stbiw__jpg
; Line 1358
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR HTDC$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1359
	jmp	SHORT $LN27@stbiw__jpg
$LN26@stbiw__jpg:
; Line 1361
	lea	rdx, QWORD PTR bits$4[rsp]
	mov	ecx, DWORD PTR diff$[rsp]
	call	?stbiw__jpg_calcBits@@YAXHQEAG@Z	; stbiw__jpg_calcBits
; Line 1362
	mov	eax, 2
	imul	rax, rax, 1
	movzx	eax, WORD PTR bits$4[rsp+rax]
	mov	rcx, QWORD PTR HTDC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1363
	lea	r9, QWORD PTR bits$4[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
$LN27@stbiw__jpg:
; Line 1366
	mov	DWORD PTR end0pos$[rsp], 63		; 0000003fH
; Line 1367
	jmp	SHORT $LN16@stbiw__jpg
$LN14@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	dec	eax
	mov	DWORD PTR end0pos$[rsp], eax
$LN16@stbiw__jpg:
	cmp	DWORD PTR end0pos$[rsp], 0
	jle	SHORT $LN15@stbiw__jpg
	movsxd	rax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN15@stbiw__jpg
; Line 1368
	jmp	SHORT $LN14@stbiw__jpg
$LN15@stbiw__jpg:
; Line 1370
	cmp	DWORD PTR end0pos$[rsp], 0
	jne	SHORT $LN28@stbiw__jpg
; Line 1371
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1372
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
	jmp	$LN1@stbiw__jpg
$LN28@stbiw__jpg:
; Line 1374
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN19@stbiw__jpg
$LN17@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@stbiw__jpg:
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	$LN18@stbiw__jpg
; Line 1375
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR startpos$6[rsp], eax
; Line 1378
	jmp	SHORT $LN22@stbiw__jpg
$LN20@stbiw__jpg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbiw__jpg:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR DU$[rsp+rax*4], 0
	jne	SHORT $LN21@stbiw__jpg
	mov	eax, DWORD PTR end0pos$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jg	SHORT $LN21@stbiw__jpg
; Line 1379
	jmp	SHORT $LN20@stbiw__jpg
$LN21@stbiw__jpg:
; Line 1380
	mov	eax, DWORD PTR startpos$6[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nrzeroes$1[rsp], eax
; Line 1381
	cmp	DWORD PTR nrzeroes$1[rsp], 16
	jl	SHORT $LN29@stbiw__jpg
; Line 1382
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	sar	eax, 4
	mov	DWORD PTR lng$7[rsp], eax
; Line 1384
	mov	DWORD PTR nrmarker$3[rsp], 1
	jmp	SHORT $LN25@stbiw__jpg
$LN23@stbiw__jpg:
	mov	eax, DWORD PTR nrmarker$3[rsp]
	inc	eax
	mov	DWORD PTR nrmarker$3[rsp], eax
$LN25@stbiw__jpg:
	mov	eax, DWORD PTR lng$7[rsp]
	cmp	DWORD PTR nrmarker$3[rsp], eax
	jg	SHORT $LN24@stbiw__jpg
; Line 1385
	lea	r9, QWORD PTR M16zeroes$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
	jmp	SHORT $LN23@stbiw__jpg
$LN24@stbiw__jpg:
; Line 1386
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	and	eax, 15
	mov	DWORD PTR nrzeroes$1[rsp], eax
$LN29@stbiw__jpg:
; Line 1388
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rdx, QWORD PTR bits$5[rsp]
	mov	ecx, DWORD PTR DU$[rsp+rax*4]
	call	?stbiw__jpg_calcBits@@YAXHQEAG@Z	; stbiw__jpg_calcBits
; Line 1389
	mov	eax, DWORD PTR nrzeroes$1[rsp]
	shl	eax, 4
	mov	ecx, 2
	imul	rcx, rcx, 1
	movzx	ecx, WORD PTR bits$5[rsp+rcx]
	add	eax, ecx
	cdqe
	mov	rcx, QWORD PTR HTAC$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	r9, rax
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1390
	lea	r9, QWORD PTR bits$5[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
; Line 1391
	jmp	$LN17@stbiw__jpg
$LN18@stbiw__jpg:
; Line 1392
	cmp	DWORD PTR end0pos$[rsp], 63		; 0000003fH
	je	SHORT $LN30@stbiw__jpg
; Line 1393
	lea	r9, QWORD PTR EOB$[rsp]
	mov	r8, QWORD PTR bitCnt$[rsp]
	mov	rdx, QWORD PTR bitBuf$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ; stbiw__jpg_writeBits
$LN30@stbiw__jpg:
; Line 1395
	mov	eax, 4
	imul	rax, rax, 0
	mov	eax, DWORD PTR DU$[rsp+rax]
$LN1@stbiw__jpg:
; Line 1396
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rbx
	ret	0
?stbiw__jpg_processDU@@YAHPEAUstbi__write_context@@PEAH1PEAMH2HQEAY01$$CBG3@Z ENDP ; stbiw__jpg_processDU
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp1$ = 0
tv66 = 4
tv69 = 8
tv140 = 12
val$ = 32
bits$ = 40
?stbiw__jpg_calcBits@@YAXHQEAG@Z PROC			; stbiw__jpg_calcBits
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1319
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN5@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	neg	eax
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN6@stbiw__jpg
$LN5@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv66[rsp], eax
$LN6@stbiw__jpg:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR tmp1$[rsp], eax
; Line 1320
	cmp	DWORD PTR val$[rsp], 0
	jge	SHORT $LN7@stbiw__jpg
	mov	eax, DWORD PTR val$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN8@stbiw__jpg
$LN7@stbiw__jpg:
	mov	eax, DWORD PTR val$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN8@stbiw__jpg:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR val$[rsp], eax
; Line 1321
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN2@stbiw__jpg:
; Line 1322
	mov	eax, DWORD PTR tmp1$[rsp]
	sar	eax, 1
	mov	DWORD PTR tmp1$[rsp], eax
	cmp	DWORD PTR tmp1$[rsp], 0
	je	SHORT $LN3@stbiw__jpg
; Line 1323
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	inc	ax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1324
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1325
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bits$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 1
	mov	DWORD PTR tv140[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv140[rsp]
	shl	eax, cl
	dec	eax
	mov	ecx, DWORD PTR val$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR bits$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 1326
	add	rsp, 24
	ret	0
?stbiw__jpg_calcBits@@YAXHQEAG@Z ENDP			; stbiw__jpg_calcBits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp10$ = 0
tmp12$ = 4
tmp11$ = 8
d0$ = 12
d2$ = 16
d4$ = 20
d6$ = 24
tmp13$ = 28
tmp7$ = 32
d7$ = 36
d1$ = 40
d5$ = 44
d3$ = 48
tmp0$ = 52
tmp3$ = 56
tmp1$ = 60
tmp2$ = 64
z1$ = 68
tmp5$ = 72
tmp6$ = 76
z5$ = 80
z3$ = 84
z13$ = 88
z2$ = 92
z11$ = 96
z4$ = 100
tmp4$ = 104
d0p$ = 128
d1p$ = 136
d2p$ = 144
d3p$ = 152
d4p$ = 160
d5p$ = 168
d6p$ = 176
d7p$ = 184
?stbiw__jpg_DCT@@YAXPEAM0000000@Z PROC			; stbiw__jpg_DCT
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1270
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1271
	mov	rax, QWORD PTR d0p$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR d0$[rsp], xmm0
	mov	rax, QWORD PTR d1p$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR d1$[rsp], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR d2$[rsp], xmm0
	mov	rax, QWORD PTR d3p$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR d3$[rsp], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR d4$[rsp], xmm0
	mov	rax, QWORD PTR d5p$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR d5$[rsp], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR d6$[rsp], xmm0
	mov	rax, QWORD PTR d7p$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR d7$[rsp], xmm0
; Line 1274
	vmovss	xmm0, DWORD PTR d0$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR d7$[rsp]
	vmovss	DWORD PTR tmp0$[rsp], xmm0
; Line 1275
	vmovss	xmm0, DWORD PTR d0$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR d7$[rsp]
	vmovss	DWORD PTR tmp7$[rsp], xmm0
; Line 1276
	vmovss	xmm0, DWORD PTR d1$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR d6$[rsp]
	vmovss	DWORD PTR tmp1$[rsp], xmm0
; Line 1277
	vmovss	xmm0, DWORD PTR d1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR d6$[rsp]
	vmovss	DWORD PTR tmp6$[rsp], xmm0
; Line 1278
	vmovss	xmm0, DWORD PTR d2$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR d5$[rsp]
	vmovss	DWORD PTR tmp2$[rsp], xmm0
; Line 1279
	vmovss	xmm0, DWORD PTR d2$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR d5$[rsp]
	vmovss	DWORD PTR tmp5$[rsp], xmm0
; Line 1280
	vmovss	xmm0, DWORD PTR d3$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR d4$[rsp]
	vmovss	DWORD PTR tmp3$[rsp], xmm0
; Line 1281
	vmovss	xmm0, DWORD PTR d3$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR d4$[rsp]
	vmovss	DWORD PTR tmp4$[rsp], xmm0
; Line 1284
	vmovss	xmm0, DWORD PTR tmp0$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tmp3$[rsp]
	vmovss	DWORD PTR tmp10$[rsp], xmm0
; Line 1285
	vmovss	xmm0, DWORD PTR tmp0$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR tmp3$[rsp]
	vmovss	DWORD PTR tmp13$[rsp], xmm0
; Line 1286
	vmovss	xmm0, DWORD PTR tmp1$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tmp2$[rsp]
	vmovss	DWORD PTR tmp11$[rsp], xmm0
; Line 1287
	vmovss	xmm0, DWORD PTR tmp1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR tmp2$[rsp]
	vmovss	DWORD PTR tmp12$[rsp], xmm0
; Line 1289
	vmovss	xmm0, DWORD PTR tmp10$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tmp11$[rsp]
	vmovss	DWORD PTR d0$[rsp], xmm0
; Line 1290
	vmovss	xmm0, DWORD PTR tmp10$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR tmp11$[rsp]
	vmovss	DWORD PTR d4$[rsp], xmm0
; Line 1292
	vmovss	xmm0, DWORD PTR tmp12$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tmp13$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@3f3504f3
	vmovss	DWORD PTR z1$[rsp], xmm0
; Line 1293
	vmovss	xmm0, DWORD PTR tmp13$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR z1$[rsp]
	vmovss	DWORD PTR d2$[rsp], xmm0
; Line 1294
	vmovss	xmm0, DWORD PTR tmp13$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR z1$[rsp]
	vmovss	DWORD PTR d6$[rsp], xmm0
; Line 1297
	vmovss	xmm0, DWORD PTR tmp4$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tmp5$[rsp]
	vmovss	DWORD PTR tmp10$[rsp], xmm0
; Line 1298
	vmovss	xmm0, DWORD PTR tmp5$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tmp6$[rsp]
	vmovss	DWORD PTR tmp11$[rsp], xmm0
; Line 1299
	vmovss	xmm0, DWORD PTR tmp6$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tmp7$[rsp]
	vmovss	DWORD PTR tmp12$[rsp], xmm0
; Line 1302
	vmovss	xmm0, DWORD PTR tmp10$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR tmp12$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@3ec3ef15
	vmovss	DWORD PTR z5$[rsp], xmm0
; Line 1303
	vmovss	xmm0, DWORD PTR tmp10$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@3f0a8bd4
	vaddss	xmm0, xmm0, DWORD PTR z5$[rsp]
	vmovss	DWORD PTR z2$[rsp], xmm0
; Line 1304
	vmovss	xmm0, DWORD PTR tmp12$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@3fa73d75
	vaddss	xmm0, xmm0, DWORD PTR z5$[rsp]
	vmovss	DWORD PTR z4$[rsp], xmm0
; Line 1305
	vmovss	xmm0, DWORD PTR tmp11$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@3f3504f3
	vmovss	DWORD PTR z3$[rsp], xmm0
; Line 1307
	vmovss	xmm0, DWORD PTR tmp7$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR z3$[rsp]
	vmovss	DWORD PTR z11$[rsp], xmm0
; Line 1308
	vmovss	xmm0, DWORD PTR tmp7$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR z3$[rsp]
	vmovss	DWORD PTR z13$[rsp], xmm0
; Line 1310
	vmovss	xmm0, DWORD PTR z13$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d5p$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 1311
	vmovss	xmm0, DWORD PTR z13$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR z2$[rsp]
	mov	rax, QWORD PTR d3p$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 1312
	vmovss	xmm0, DWORD PTR z11$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d1p$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 1313
	vmovss	xmm0, DWORD PTR z11$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR z4$[rsp]
	mov	rax, QWORD PTR d7p$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 1315
	mov	rax, QWORD PTR d0p$[rsp]
	vmovss	xmm0, DWORD PTR d0$[rsp]
	vmovss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d2p$[rsp]
	vmovss	xmm0, DWORD PTR d2$[rsp]
	vmovss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d4p$[rsp]
	vmovss	xmm0, DWORD PTR d4$[rsp]
	vmovss	DWORD PTR [rax], xmm0
	mov	rax, QWORD PTR d6p$[rsp]
	vmovss	xmm0, DWORD PTR d6$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 1316
	add	rsp, 120				; 00000078H
	ret	0
?stbiw__jpg_DCT@@YAXPEAM0000000@Z ENDP			; stbiw__jpg_DCT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
bitCnt$ = 36
bitBuf$ = 40
s$ = 64
bitBufP$ = 72
bitCntP$ = 80
bs$ = 88
?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z PROC ; stbiw__jpg_writeBits
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1253
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1254
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitBuf$[rsp], eax
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1255
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1256
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR bs$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 24
	sub	ecx, DWORD PTR bitCnt$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitBuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitBuf$[rsp], eax
$LN2@stbiw__jpg:
; Line 1257
	cmp	DWORD PTR bitCnt$[rsp], 8
	jl	SHORT $LN3@stbiw__jpg
; Line 1258
	mov	eax, DWORD PTR bitBuf$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	BYTE PTR c$1[rsp], al
; Line 1259
	movzx	edx, BYTE PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
; Line 1260
	movzx	eax, BYTE PTR c$1[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN4@stbiw__jpg
; Line 1261
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ; stbiw__putc
$LN4@stbiw__jpg:
; Line 1263
	mov	eax, DWORD PTR bitBuf$[rsp]
	shl	eax, 8
	mov	DWORD PTR bitBuf$[rsp], eax
; Line 1264
	mov	eax, DWORD PTR bitCnt$[rsp]
	sub	eax, 8
	mov	DWORD PTR bitCnt$[rsp], eax
; Line 1265
	jmp	SHORT $LN2@stbiw__jpg
$LN3@stbiw__jpg:
; Line 1266
	mov	rax, QWORD PTR bitBufP$[rsp]
	mov	ecx, DWORD PTR bitBuf$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1267
	mov	rax, QWORD PTR bitCntP$[rsp]
	mov	ecx, DWORD PTR bitCnt$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1268
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__jpg_writeBits@@YAXPEAUstbi__write_context@@PEAH1PEBG@Z ENDP ; stbiw__jpg_writeBits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
o$ = 64
filter_type$1 = 72
zlen$ = 76
j$ = 80
force_filter$ = 84
i$2 = 88
est$3 = 92
best_filter$4 = 96
line_buffer$ = 104
filt$ = 112
best_filter_val$5 = 120
out$ = 128
zlib$ = 136
ctype$ = 144
sig$ = 168
__$ArrayPad$ = 176
pixels$ = 208
stride_bytes$ = 216
x$ = 224
y$ = 232
n$ = 240
out_len$ = 248
stbi_write_png_to_mem PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1129
$LN23:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1130
	mov	eax, DWORD PTR stbi_write_force_png_filter
	mov	DWORD PTR force_filter$[rsp], eax
; Line 1131
	mov	DWORD PTR ctype$[rsp], -1
	mov	DWORD PTR ctype$[rsp+4], 0
	mov	DWORD PTR ctype$[rsp+8], 4
	mov	DWORD PTR ctype$[rsp+12], 2
	mov	DWORD PTR ctype$[rsp+16], 6
; Line 1132
	mov	BYTE PTR sig$[rsp], 137			; 00000089H
	mov	BYTE PTR sig$[rsp+1], 80		; 00000050H
	mov	BYTE PTR sig$[rsp+2], 78		; 0000004eH
	mov	BYTE PTR sig$[rsp+3], 71		; 00000047H
	mov	BYTE PTR sig$[rsp+4], 13
	mov	BYTE PTR sig$[rsp+5], 10
	mov	BYTE PTR sig$[rsp+6], 26
	mov	BYTE PTR sig$[rsp+7], 10
; Line 1137
	cmp	DWORD PTR stride_bytes$[rsp], 0
	jne	SHORT $LN11@stbi_write
; Line 1138
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR stride_bytes$[rsp], eax
$LN11@stbi_write:
; Line 1140
	cmp	DWORD PTR force_filter$[rsp], 5
	jl	SHORT $LN12@stbi_write
; Line 1141
	mov	DWORD PTR force_filter$[rsp], -1
$LN12@stbi_write:
; Line 1144
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR filt$[rsp], rax
	cmp	QWORD PTR filt$[rsp], 0
	jne	SHORT $LN13@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN13@stbi_write:
; Line 1145
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR line_buffer$[rsp], rax
	cmp	QWORD PTR line_buffer$[rsp], 0
	jne	SHORT $LN14@stbi_write
	mov	rcx, QWORD PTR filt$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN14@stbi_write:
; Line 1146
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi_write
; Line 1148
	cmp	DWORD PTR force_filter$[rsp], -1
	jle	SHORT $LN15@stbi_write
; Line 1149
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
; Line 1150
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR force_filter$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1151
	jmp	$LN16@stbi_write
$LN15@stbi_write:
; Line 1152
	mov	DWORD PTR best_filter$4[rsp], 0
	mov	DWORD PTR best_filter_val$5[rsp], 2147483647 ; 7fffffffH
; Line 1153
	mov	DWORD PTR filter_type$1[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR filter_type$1[rsp]
	inc	eax
	mov	DWORD PTR filter_type$1[rsp], eax
$LN7@stbi_write:
	cmp	DWORD PTR filter_type$1[rsp], 5
	jge	$LN6@stbi_write
; Line 1154
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1157
	mov	DWORD PTR est$3[rsp], 0
; Line 1158
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	SHORT $LN9@stbi_write
; Line 1159
	movsxd	rax, DWORD PTR i$2[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	abs
	mov	ecx, DWORD PTR est$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR est$3[rsp], eax
; Line 1160
	jmp	SHORT $LN8@stbi_write
$LN9@stbi_write:
; Line 1161
	mov	eax, DWORD PTR best_filter_val$5[rsp]
	cmp	DWORD PTR est$3[rsp], eax
	jge	SHORT $LN17@stbi_write
; Line 1162
	mov	eax, DWORD PTR est$3[rsp]
	mov	DWORD PTR best_filter_val$5[rsp], eax
; Line 1163
	mov	eax, DWORD PTR filter_type$1[rsp]
	mov	DWORD PTR best_filter$4[rsp], eax
$LN17@stbi_write:
; Line 1165
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 1166
	mov	eax, DWORD PTR best_filter$4[rsp]
	cmp	DWORD PTR filter_type$1[rsp], eax
	je	SHORT $LN18@stbi_write
; Line 1167
	mov	rax, QWORD PTR line_buffer$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	call	?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ; stbiw__encode_png_line
; Line 1168
	mov	eax, DWORD PTR best_filter$4[rsp]
	mov	DWORD PTR filter_type$1[rsp], eax
$LN18@stbi_write:
$LN16@stbi_write:
; Line 1172
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR filt$[rsp]
	movzx	edx, BYTE PTR filter_type$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 1173
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR n$[rsp]
	inc	ecx
	mov	edx, DWORD PTR j$[rsp]
	imul	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR filt$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	mov	r8, rax
	mov	rdx, QWORD PTR line_buffer$[rsp]
	call	memmove
; Line 1174
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 1175
	mov	rcx, QWORD PTR line_buffer$[rsp]
	call	QWORD PTR __imp_free
; Line 1176
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r9d, DWORD PTR stbi_write_png_compression_level
	lea	r8, QWORD PTR zlen$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR filt$[rsp]
	call	stbi_zlib_compress
	mov	QWORD PTR zlib$[rsp], rax
; Line 1177
	mov	rcx, QWORD PTR filt$[rsp]
	call	QWORD PTR __imp_free
; Line 1178
	cmp	QWORD PTR zlib$[rsp], 0
	jne	SHORT $LN19@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN19@stbi_write:
; Line 1181
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR out$[rsp], rax
; Line 1182
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN20@stbi_write
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN20@stbi_write:
; Line 1183
	mov	eax, DWORD PTR zlen$[rsp]
	add	eax, 57					; 00000039H
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 1185
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
; Line 1186
	mov	r8d, 8
	lea	rdx, QWORD PTR sig$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 8
	mov	QWORD PTR o$[rsp], rax
; Line 1187
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 13
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1188
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG152731
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG152732
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG152733
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG152734
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1189
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR x$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1190
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR y$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1191
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 8
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1192
	movsxd	rax, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR ctype$[rsp+rax*4]
	and	eax, 255				; 000000ffH
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1193
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1194
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1195
	mov	rax, QWORD PTR o$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR o$[rsp]
	inc	rax
	mov	QWORD PTR o$[rsp], rax
; Line 1196
	mov	edx, 13
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1198
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR zlen$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1199
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG152735
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG152736
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG152737
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG152738
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1200
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR zlib$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	call	memmove
; Line 1201
	movsxd	rax, DWORD PTR zlen$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
; Line 1202
	mov	rcx, QWORD PTR zlib$[rsp]
	call	QWORD PTR __imp_free
; Line 1203
	mov	edx, DWORD PTR zlen$[rsp]
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1205
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1206
	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:$SG152739
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:$SG152740
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:$SG152741
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:$SG152742
	movsx	eax, BYTE PTR [rcx+rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	rax, QWORD PTR o$[rsp]
	add	rax, 4
	mov	QWORD PTR o$[rsp], rax
; Line 1207
	xor	edx, edx
	lea	rcx, QWORD PTR o$[rsp]
	call	?stbiw__wpcrc@@YAXPEAPEAEH@Z		; stbiw__wpcrc
; Line 1209
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	cmp	QWORD PTR o$[rsp], rax
	je	SHORT $LN22@stbi_write
	mov	r8d, 1209				; 000004b9H
	lea	rdx, OFFSET FLAT:$SG152743
	lea	rcx, OFFSET FLAT:$SG152744
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN22@stbi_write:
; Line 1211
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi_write:
; Line 1212
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
stbi_write_png_to_mem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
z$ = 40
signed_stride$ = 48
tv87 = 52
tv188 = 56
type$ = 60
tv72 = 64
tv78 = 68
tv161 = 72
tv275 = 76
tv256 = 80
tv307 = 84
tv65 = 88
mymap$ = 96
pixels$ = 128
stride_bytes$ = 136
width$ = 144
height$ = 152
y$ = 160
n$ = 168
filter_type$ = 176
line_buffer$ = 184
?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z PROC	; stbiw__encode_png_line
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1093
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 1096
	cmp	DWORD PTR y$[rsp], 0
	je	SHORT $LN41@stbiw__enc
	lea	rax, OFFSET FLAT:?mapping@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
	mov	QWORD PTR tv65[rsp], rax
	jmp	SHORT $LN42@stbiw__enc
$LN41@stbiw__enc:
	lea	rax, OFFSET FLAT:?firstmap@?1??stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z@4PAHA
	mov	QWORD PTR tv65[rsp], rax
$LN42@stbiw__enc:
	mov	rax, QWORD PTR tv65[rsp]
	mov	QWORD PTR mymap$[rsp], rax
; Line 1098
	movsxd	rax, DWORD PTR filter_type$[rsp]
	mov	rcx, QWORD PTR mymap$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR type$[rsp], eax
; Line 1099
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN43@stbiw__enc
	mov	eax, DWORD PTR height$[rsp]
	dec	eax
	sub	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
	jmp	SHORT $LN44@stbiw__enc
$LN43@stbiw__enc:
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR tv72[rsp], eax
$LN44@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	imul	eax, DWORD PTR tv72[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR z$[rsp], rax
; Line 1100
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN45@stbiw__enc
	mov	eax, DWORD PTR stride_bytes$[rsp]
	neg	eax
	mov	DWORD PTR tv78[rsp], eax
	jmp	SHORT $LN46@stbiw__enc
$LN45@stbiw__enc:
	mov	eax, DWORD PTR stride_bytes$[rsp]
	mov	DWORD PTR tv78[rsp], eax
$LN46@stbiw__enc:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR signed_stride$[rsp], eax
; Line 1102
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN27@stbiw__enc
; Line 1103
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cdqe
	mov	r8, rax
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR line_buffer$[rsp]
	call	memcpy
; Line 1104
	jmp	$LN1@stbiw__enc
$LN27@stbiw__enc:
; Line 1108
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__enc
$LN2@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__enc:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbiw__enc
; Line 1109
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv87[rsp], eax
	mov	eax, DWORD PTR tv87[rsp]
	dec	eax
	mov	DWORD PTR tv87[rsp], eax
	cmp	DWORD PTR tv87[rsp], 5
	ja	$LN5@stbiw__enc
	movsxd	rax, DWORD PTR tv87[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN48@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN28@stbiw__enc:
; Line 1110
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN29@stbiw__enc:
; Line 1111
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN30@stbiw__enc:
; Line 1112
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN5@stbiw__enc
$LN31@stbiw__enc:
; Line 1113
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv161[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv161[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN32@stbiw__enc:
; Line 1114
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbiw__enc
$LN33@stbiw__enc:
; Line 1115
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	r8, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbiw__enc:
; Line 1117
	jmp	$LN2@stbiw__enc
$LN3@stbiw__enc:
; Line 1118
	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv188[rsp], eax
	mov	eax, DWORD PTR tv188[rsp]
	dec	eax
	mov	DWORD PTR tv188[rsp], eax
	cmp	DWORD PTR tv188[rsp], 5
	ja	$LN7@stbiw__enc
	movsxd	rax, DWORD PTR tv188[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN47@stbiw__enc[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN34@stbiw__enc:
; Line 1119
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN11@stbiw__enc
$LN9@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN11@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN10@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN9@stbiw__enc
$LN10@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN35@stbiw__enc:
; Line 1120
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN14@stbiw__enc
$LN12@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN14@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN13@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbiw__enc
$LN13@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN36@stbiw__enc:
; Line 1121
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN17@stbiw__enc
$LN15@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN17@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN16@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbiw__enc
$LN16@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN37@stbiw__enc:
; Line 1122
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN20@stbiw__enc
$LN18@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN20@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN19@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv256[rsp], eax
	mov	ecx, DWORD PTR signed_stride$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	sub	ecx, DWORD PTR n$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR signed_stride$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR n$[rsp]
	mov	r9d, DWORD PTR i$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR z$[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv275[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv275[rsp]
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv256[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN18@stbiw__enc
$LN19@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN38@stbiw__enc:
; Line 1123
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN23@stbiw__enc
$LN21@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN23@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN22@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	sub	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN21@stbiw__enc
$LN22@stbiw__enc:
	jmp	$LN7@stbiw__enc
$LN39@stbiw__enc:
; Line 1124
	mov	eax, DWORD PTR n$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN26@stbiw__enc
$LN24@stbiw__enc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbiw__enc:
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN25@stbiw__enc
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv307[rsp], eax
	mov	ecx, DWORD PTR n$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbiw__paeth@@YAEHHH@Z			; stbiw__paeth
	movzx	eax, al
	mov	ecx, DWORD PTR tv307[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR line_buffer$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbiw__enc
$LN25@stbiw__enc:
$LN7@stbiw__enc:
$LN1@stbiw__enc:
; Line 1126
	add	rsp, 120				; 00000078H
	ret	0
	npad	1
$LN48@stbiw__enc:
	DD	$LN28@stbiw__enc
	DD	$LN29@stbiw__enc
	DD	$LN30@stbiw__enc
	DD	$LN31@stbiw__enc
	DD	$LN32@stbiw__enc
	DD	$LN33@stbiw__enc
$LN47@stbiw__enc:
	DD	$LN34@stbiw__enc
	DD	$LN35@stbiw__enc
	DD	$LN36@stbiw__enc
	DD	$LN37@stbiw__enc
	DD	$LN38@stbiw__enc
	DD	$LN39@stbiw__enc
?stbiw__encode_png_line@@YAXPEAEHHHHHHPEAC@Z ENDP	; stbiw__encode_png_line
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
?stbiw__paeth@@YAEHHH@Z PROC				; stbiw__paeth
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1084
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1085
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 1086
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbiw__pae
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN2@stbiw__pae:
; Line 1087
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbiw__pae
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 255				; 000000ffH
	jmp	SHORT $LN1@stbiw__pae
$LN3@stbiw__pae:
; Line 1088
	mov	eax, DWORD PTR c$[rsp]
	and	eax, 255				; 000000ffH
$LN1@stbiw__pae:
; Line 1089
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__paeth@@YAEHHH@Z ENDP				; stbiw__paeth
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
crc$ = 32
data$ = 64
len$ = 72
?stbiw__wpcrc@@YAXPEAPEAEH@Z PROC			; stbiw__wpcrc
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1078
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1079
	mov	eax, DWORD PTR len$[rsp]
	add	eax, 4
	movsxd	rcx, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	sub	rdx, rcx
	mov	rcx, rdx
	sub	rcx, 4
	mov	edx, eax
	call	?stbiw__crc32@@YAIPEAEH@Z		; stbiw__crc32
	mov	DWORD PTR crc$[rsp], eax
; Line 1080
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	eax, DWORD PTR crc$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR data$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	mov	rax, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 4
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 1081
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__wpcrc@@YAXPEAPEAEH@Z ENDP			; stbiw__wpcrc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
crc$ = 4
buffer$ = 32
len$ = 40
?stbiw__crc32@@YAIPEAEH@Z PROC				; stbiw__crc32
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1025
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1065
	mov	DWORD PTR crc$[rsp], -1			; ffffffffH
; Line 1067
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__crc
$LN2@stbiw__crc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__crc:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__crc
; Line 1068
	mov	eax, DWORD PTR crc$[rsp]
	shr	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR crc$[rsp]
	and	edx, 255				; 000000ffH
	xor	ecx, edx
	mov	ecx, ecx
	lea	rdx, OFFSET FLAT:?crc_table@?1??stbiw__crc32@@YAIPEAEH@Z@4PAIA
	xor	eax, DWORD PTR [rdx+rcx*4]
	mov	DWORD PTR crc$[rsp], eax
	jmp	SHORT $LN2@stbiw__crc
$LN3@stbiw__crc:
; Line 1069
	mov	eax, DWORD PTR crc$[rsp]
	not	eax
; Line 1071
	add	rsp, 24
	ret	0
?stbiw__crc32@@YAIPEAEH@Z ENDP				; stbiw__crc32
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitcount$ = 32
out$ = 40
bitbuf$ = 48
j$ = 52
i$ = 56
h$1 = 60
tv768 = 64
blocklen$2 = 68
hash_table$ = 72
best$3 = 80
s1$4 = 84
s2$5 = 88
hlist$6 = 96
n$7 = 104
d$8 = 108
blocklen$9 = 112
tv190 = 116
d$10 = 120
tv313 = 124
bestloc$11 = 128
tv365 = 136
tv370 = 140
tv368 = 144
tv386 = 148
tv388 = 152
tv393 = 156
tv391 = 160
tv409 = 164
tv411 = 168
tv416 = 172
tv414 = 176
tv430 = 180
tv432 = 184
tv437 = 188
tv435 = 192
tv480 = 196
tv482 = 200
tv487 = 204
tv485 = 208
tv530 = 212
tv532 = 216
tv537 = 220
tv535 = 224
tv554 = 228
tv556 = 232
tv561 = 236
tv559 = 240
tv586 = 244
tv588 = 248
tv593 = 252
tv591 = 256
tv610 = 260
tv612 = 264
tv617 = 268
tv615 = 272
tv629 = 276
tv631 = 280
tv636 = 284
tv634 = 288
tv647 = 292
tv649 = 296
tv654 = 300
tv652 = 304
tv665 = 308
tv667 = 312
tv672 = 316
tv670 = 320
tv683 = 324
tv685 = 328
tv690 = 332
tv688 = 336
tv1461 = 340
tv722 = 344
tv1229 = 348
tv1234 = 352
e$12 = 356
tv363 = 360
tv444 = 368
tv445 = 376
tv698 = 384
tv700 = 392
tv84 = 400
tv143 = 408
tv206 = 416
tv237 = 424
tv271 = 432
tv331 = 440
tv446 = 448
tv568 = 456
tv624 = 464
tv702 = 472
tv725 = 480
tv752 = 488
tv782 = 496
tv811 = 504
tv841 = 512
tv871 = 520
tv899 = 528
tv935 = 536
tv965 = 544
tv994 = 552
tv1024 = 560
data$ = 592
data_len$ = 600
out_len$ = 608
quality$ = 616
stbi_zlib_compress PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 896
$LN100:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 584				; 00000248H
; Line 905
	mov	DWORD PTR bitbuf$[rsp], 0
; Line 906
	mov	DWORD PTR bitcount$[rsp], 0
; Line 907
	mov	QWORD PTR out$[rsp], 0
; Line 908
	mov	ecx, 131072				; 00020000H
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR hash_table$[rsp], rax
; Line 909
	cmp	QWORD PTR hash_table$[rsp], 0
	jne	SHORT $LN35@stbi_zlib_
; Line 910
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN35@stbi_zlib_:
; Line 911
	cmp	DWORD PTR quality$[rsp], 5
	jge	SHORT $LN36@stbi_zlib_
	mov	DWORD PTR quality$[rsp], 5
$LN36@stbi_zlib_:
; Line 913
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN50@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN50@stbi_zlib_
	mov	QWORD PTR tv84[rsp], 0
	jmp	SHORT $LN51@stbi_zlib_
$LN50@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv84[rsp], rax
$LN51@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 120			; 00000078H
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 914
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN52@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN52@stbi_zlib_
	mov	QWORD PTR tv143[rsp], 0
	jmp	SHORT $LN53@stbi_zlib_
$LN52@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv143[rsp], rax
$LN53@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 94			; 0000005eH
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 915
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1229[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1229[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 916
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1234[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1234[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 2
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 918
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi_zlib_
$LN2@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	SHORT $LN3@stbi_zlib_
; Line 919
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	QWORD PTR [rcx+rax*8], 0
	jmp	SHORT $LN2@stbi_zlib_
$LN3@stbi_zlib_:
; Line 921
	mov	DWORD PTR i$[rsp], 0
$LN5@stbi_zlib_:
; Line 922
	mov	eax, DWORD PTR data_len$[rsp]
	sub	eax, 3
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi_zlib_
; Line 924
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?stbiw__zhash@@YAIPEAE@Z		; stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
	mov	DWORD PTR best$3[rsp], 3
; Line 925
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 926
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 927
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN54@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv190[rsp], eax
	jmp	SHORT $LN55@stbi_zlib_
$LN54@stbi_zlib_:
	mov	DWORD PTR tv190[rsp], 0
$LN55@stbi_zlib_:
	mov	eax, DWORD PTR tv190[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 928
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi_zlib_
$LN7@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi_zlib_
; Line 929
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32768				; 00008000H
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	SHORT $LN37@stbi_zlib_
; Line 930
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv206[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv206[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?stbiw__zlib_countm@@YAIPEAE0H@Z	; stbiw__zlib_countm
	mov	DWORD PTR d$10[rsp], eax
; Line 931
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR d$10[rsp], eax
	jl	SHORT $LN38@stbi_zlib_
	mov	eax, DWORD PTR d$10[rsp]
	mov	DWORD PTR best$3[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR bestloc$11[rsp], rax
$LN38@stbi_zlib_:
$LN37@stbi_zlib_:
; Line 933
	jmp	$LN7@stbi_zlib_
$LN8@stbi_zlib_:
; Line 935
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	$LN39@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	shl	edx, 1
	cmp	DWORD PTR [rax+rcx-8], edx
	jne	SHORT $LN39@stbi_zlib_
; Line 936
	movsxd	rax, DWORD PTR quality$[rsp]
	shl	rax, 3
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR quality$[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [r8+rcx*8]
	lea	rcx, QWORD PTR [rcx+rdx*8]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	QWORD PTR tv237[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR tv237[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	memmove
; Line 937
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN39@stbi_zlib_:
; Line 939
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN56@stbi_zlib_
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	eax, DWORD PTR [rax+rcx-8]
	inc	eax
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, 4
	imul	rdx, rdx, 0
	cmp	eax, DWORD PTR [rcx+rdx-8]
	jge	SHORT $LN56@stbi_zlib_
	mov	QWORD PTR tv271[rsp], 0
	jmp	SHORT $LN57@stbi_zlib_
$LN56@stbi_zlib_:
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	r8d, 8
	mov	edx, 1
	mov	rcx, rax
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv271[rsp], rax
$LN57@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR h$1[rsp]
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	r8d, 4
	imul	r8, r8, 1
	movsxd	rdx, DWORD PTR [rdx+r8-8]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [r8+rcx*8]
	mov	QWORD PTR [rcx+rdx*8], rax
	mov	eax, 4
	imul	rax, rax, 1
	movsxd	rcx, DWORD PTR h$1[rsp]
	mov	rdx, QWORD PTR hash_table$[rsp]
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR h$1[rsp]
	mov	r8, QWORD PTR hash_table$[rsp]
	mov	rdx, QWORD PTR [r8+rdx*8]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 941
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN40@stbi_zlib_
; Line 943
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1]
	mov	rcx, rax
	call	?stbiw__zhash@@YAIPEAE@Z		; stbiw__zhash
	and	eax, 16383				; 00003fffH
	mov	DWORD PTR h$1[rsp], eax
; Line 944
	movsxd	rax, DWORD PTR h$1[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR hlist$6[rsp], rax
; Line 945
	cmp	QWORD PTR hlist$6[rsp], 0
	je	SHORT $LN58@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	mov	DWORD PTR tv313[rsp], eax
	jmp	SHORT $LN59@stbi_zlib_
$LN58@stbi_zlib_:
	mov	DWORD PTR tv313[rsp], 0
$LN59@stbi_zlib_:
	mov	eax, DWORD PTR tv313[rsp]
	mov	DWORD PTR n$7[rsp], eax
; Line 946
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN12@stbi_zlib_
$LN10@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN12@stbi_zlib_:
	mov	eax, DWORD PTR n$7[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN11@stbi_zlib_
; Line 947
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR hlist$6[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, rdx
	mov	ecx, DWORD PTR i$[rsp]
	sub	ecx, 32767				; 00007fffH
	movsxd	rcx, ecx
	cmp	rax, rcx
	jle	SHORT $LN41@stbi_zlib_
; Line 948
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+1]
	movsxd	rdx, DWORD PTR j$[rsp]
	mov	QWORD PTR tv331[rsp], rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR hlist$6[rsp]
	mov	rcx, QWORD PTR tv331[rsp]
	mov	rcx, QWORD PTR [rax+rcx*8]
	call	?stbiw__zlib_countm@@YAIPEAE0H@Z	; stbiw__zlib_countm
	mov	DWORD PTR e$12[rsp], eax
; Line 949
	mov	eax, DWORD PTR best$3[rsp]
	cmp	DWORD PTR e$12[rsp], eax
	jle	SHORT $LN42@stbi_zlib_
; Line 950
	mov	QWORD PTR bestloc$11[rsp], 0
; Line 951
	jmp	SHORT $LN11@stbi_zlib_
$LN42@stbi_zlib_:
$LN41@stbi_zlib_:
; Line 954
	jmp	$LN10@stbi_zlib_
$LN11@stbi_zlib_:
$LN40@stbi_zlib_:
; Line 957
	cmp	QWORD PTR bestloc$11[rsp], 0
	je	$LN43@stbi_zlib_
; Line 958
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	sub	rax, QWORD PTR bestloc$11[rsp]
	mov	DWORD PTR d$8[rsp], eax
; Line 959
	cmp	DWORD PTR d$8[rsp], 32767		; 00007fffH
	jg	SHORT $LN60@stbi_zlib_
	cmp	DWORD PTR best$3[rsp], 258		; 00000102H
	jle	SHORT $LN61@stbi_zlib_
$LN60@stbi_zlib_:
	mov	r8d, 959				; 000003bfH
	lea	rdx, OFFSET FLAT:$SG152548
	lea	rcx, OFFSET FLAT:$SG152549
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN61@stbi_zlib_:
; Line 960
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi_zlib_
$LN13@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR best$3[rsp], eax
	jle	SHORT $LN14@stbi_zlib_
	jmp	SHORT $LN13@stbi_zlib_
$LN14@stbi_zlib_:
; Line 961
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 143				; 0000008fH
	jg	$LN66@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 305				; 00000131H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv365[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv363[rsp], eax
	mov	eax, DWORD PTR tv363[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv365[rsp]
	shl	eax, cl
	mov	DWORD PTR tv370[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv368[rsp], eax
	mov	eax, DWORD PTR tv370[rsp]
	mov	ecx, DWORD PTR tv368[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv446[rsp], rax
	jmp	$LN67@stbi_zlib_
$LN66@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 255				; 000000ffH
	jg	$LN64@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 513				; 00000201H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv388[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv386[rsp], eax
	mov	eax, DWORD PTR tv386[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv388[rsp]
	shl	eax, cl
	mov	DWORD PTR tv393[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv391[rsp], eax
	mov	eax, DWORD PTR tv393[rsp]
	mov	ecx, DWORD PTR tv391[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv445[rsp], rax
	jmp	$LN65@stbi_zlib_
$LN64@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 257				; 00000101H
	cmp	eax, 279				; 00000117H
	jg	$LN62@stbi_zlib_
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	edx, 7
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv411[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv409[rsp], eax
	mov	eax, DWORD PTR tv409[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv411[rsp]
	shl	eax, cl
	mov	DWORD PTR tv416[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv414[rsp], eax
	mov	eax, DWORD PTR tv416[rsp]
	mov	ecx, DWORD PTR tv414[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv444[rsp], rax
	jmp	$LN63@stbi_zlib_
$LN62@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 169				; 000000a9H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv432[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv430[rsp], eax
	mov	eax, DWORD PTR tv430[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv432[rsp]
	shl	eax, cl
	mov	DWORD PTR tv437[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv435[rsp], eax
	mov	eax, DWORD PTR tv437[rsp]
	mov	ecx, DWORD PTR tv435[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv444[rsp], rax
$LN63@stbi_zlib_:
	mov	rax, QWORD PTR tv444[rsp]
	mov	QWORD PTR tv445[rsp], rax
$LN65@stbi_zlib_:
	mov	rax, QWORD PTR tv445[rsp]
	mov	QWORD PTR tv446[rsp], rax
$LN67@stbi_zlib_:
; Line 962
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN45@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengthc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR best$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?lengtheb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN45@stbi_zlib_:
; Line 963
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi_zlib_
$LN16@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	dec	eax
	cmp	DWORD PTR d$8[rsp], eax
	jle	SHORT $LN17@stbi_zlib_
	jmp	SHORT $LN16@stbi_zlib_
$LN17@stbi_zlib_:
; Line 964
	mov	edx, 5
	mov	ecx, DWORD PTR j$[rsp]
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv482[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv480[rsp], eax
	mov	eax, DWORD PTR tv480[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv482[rsp]
	shl	eax, cl
	mov	DWORD PTR tv487[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv485[rsp], eax
	mov	eax, DWORD PTR tv487[rsp]
	mov	ecx, DWORD PTR tv485[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 5
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
; Line 965
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN46@stbi_zlib_
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?distc@?1??stbi_zlib_compress@@9@4PAGA
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	ecx, DWORD PTR d$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR bitcount$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	movsxd	rax, DWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?disteb@?1??stbi_zlib_compress@@9@4PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR bitcount$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
$LN46@stbi_zlib_:
; Line 966
	mov	eax, DWORD PTR best$3[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$[rsp], eax
; Line 967
	jmp	$LN44@stbi_zlib_
$LN43@stbi_zlib_:
; Line 968
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	$LN68@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv532[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv530[rsp], eax
	mov	eax, DWORD PTR tv530[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv532[rsp]
	shl	eax, cl
	mov	DWORD PTR tv537[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv535[rsp], eax
	mov	eax, DWORD PTR tv537[rsp]
	mov	ecx, DWORD PTR tv535[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv568[rsp], rax
	jmp	$LN69@stbi_zlib_
$LN68@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv556[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv554[rsp], eax
	mov	eax, DWORD PTR tv554[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv556[rsp]
	shl	eax, cl
	mov	DWORD PTR tv561[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv559[rsp], eax
	mov	eax, DWORD PTR tv561[rsp]
	mov	ecx, DWORD PTR tv559[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv568[rsp], rax
$LN69@stbi_zlib_:
; Line 969
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN44@stbi_zlib_:
; Line 971
	jmp	$LN5@stbi_zlib_
$LN6@stbi_zlib_:
; Line 973
	jmp	SHORT $LN21@stbi_zlib_
$LN19@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN21@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN20@stbi_zlib_
; Line 974
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 143				; 0000008fH
	jg	$LN70@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 48					; 00000030H
	mov	edx, 8
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv588[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv586[rsp], eax
	mov	eax, DWORD PTR tv586[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv588[rsp]
	shl	eax, cl
	mov	DWORD PTR tv593[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv591[rsp], eax
	mov	eax, DWORD PTR tv593[rsp]
	mov	ecx, DWORD PTR tv591[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv624[rsp], rax
	jmp	$LN71@stbi_zlib_
$LN70@stbi_zlib_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	add	eax, 256				; 00000100H
	mov	edx, 9
	mov	ecx, eax
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv612[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv610[rsp], eax
	mov	eax, DWORD PTR tv610[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv612[rsp]
	shl	eax, cl
	mov	DWORD PTR tv617[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv615[rsp], eax
	mov	eax, DWORD PTR tv617[rsp]
	mov	ecx, DWORD PTR tv615[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv624[rsp], rax
$LN71@stbi_zlib_:
	jmp	$LN19@stbi_zlib_
$LN20@stbi_zlib_:
; Line 975
	xor	eax, eax
	test	eax, eax
	je	$LN76@stbi_zlib_
	mov	edx, 8
	mov	ecx, 304				; 00000130H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv631[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv629[rsp], eax
	mov	eax, DWORD PTR tv629[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv631[rsp]
	shl	eax, cl
	mov	DWORD PTR tv636[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv634[rsp], eax
	mov	eax, DWORD PTR tv636[rsp]
	mov	ecx, DWORD PTR tv634[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv702[rsp], rax
	jmp	$LN77@stbi_zlib_
$LN76@stbi_zlib_:
	xor	eax, eax
	test	eax, eax
	je	$LN74@stbi_zlib_
	mov	edx, 9
	mov	ecx, 512				; 00000200H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv649[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv647[rsp], eax
	mov	eax, DWORD PTR tv647[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv649[rsp]
	shl	eax, cl
	mov	DWORD PTR tv654[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv652[rsp], eax
	mov	eax, DWORD PTR tv654[rsp]
	mov	ecx, DWORD PTR tv652[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 9
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv700[rsp], rax
	jmp	$LN75@stbi_zlib_
$LN74@stbi_zlib_:
	xor	eax, eax
	cmp	eax, 1
	je	$LN72@stbi_zlib_
	mov	edx, 7
	xor	ecx, ecx
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv667[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv665[rsp], eax
	mov	eax, DWORD PTR tv665[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv667[rsp]
	shl	eax, cl
	mov	DWORD PTR tv672[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv670[rsp], eax
	mov	eax, DWORD PTR tv672[rsp]
	mov	ecx, DWORD PTR tv670[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 7
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv698[rsp], rax
	jmp	$LN73@stbi_zlib_
$LN72@stbi_zlib_:
	mov	edx, 8
	mov	ecx, 168				; 000000a8H
	call	?stbiw__zlib_bitrev@@YAHHH@Z		; stbiw__zlib_bitrev
	mov	DWORD PTR tv685[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	mov	DWORD PTR tv683[rsp], eax
	mov	eax, DWORD PTR tv683[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv685[rsp]
	shl	eax, cl
	mov	DWORD PTR tv690[rsp], eax
	mov	eax, DWORD PTR bitbuf$[rsp]
	mov	DWORD PTR tv688[rsp], eax
	mov	eax, DWORD PTR tv690[rsp]
	mov	ecx, DWORD PTR tv688[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	add	eax, 8
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR tv698[rsp], rax
$LN73@stbi_zlib_:
	mov	rax, QWORD PTR tv698[rsp]
	mov	QWORD PTR tv700[rsp], rax
$LN75@stbi_zlib_:
	mov	rax, QWORD PTR tv700[rsp]
	mov	QWORD PTR tv702[rsp], rax
$LN77@stbi_zlib_:
$LN22@stbi_zlib_:
; Line 977
	cmp	DWORD PTR bitcount$[rsp], 0
	je	SHORT $LN23@stbi_zlib_
; Line 978
	mov	eax, DWORD PTR bitcount$[rsp]
	xor	ecx, ecx
	mov	DWORD PTR tv1461[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1461[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bitbuf$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bitbuf$[rsp], eax
	mov	eax, DWORD PTR bitcount$[rsp]
	inc	eax
	mov	DWORD PTR bitcount$[rsp], eax
	lea	r8, QWORD PTR bitcount$[rsp]
	lea	rdx, QWORD PTR bitbuf$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ; stbiw__zlib_flushf
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN22@stbi_zlib_
$LN23@stbi_zlib_:
; Line 980
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN26@stbi_zlib_
$LN24@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN26@stbi_zlib_:
	cmp	DWORD PTR i$[rsp], 16384		; 00004000H
	jge	SHORT $LN25@stbi_zlib_
; Line 981
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN78@stbi_zlib_
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR hash_table$[rsp]
	mov	rax, QWORD PTR [rcx+rax*8]
	sub	rax, 8
	mov	rcx, rax
	call	QWORD PTR __imp_free
	mov	DWORD PTR tv722[rsp], 0
	jmp	SHORT $LN79@stbi_zlib_
$LN78@stbi_zlib_:
	mov	DWORD PTR tv722[rsp], 0
$LN79@stbi_zlib_:
	jmp	SHORT $LN24@stbi_zlib_
$LN25@stbi_zlib_:
; Line 982
	mov	rcx, QWORD PTR hash_table$[rsp]
	call	QWORD PTR __imp_free
; Line 985
	mov	eax, 4
	imul	rax, rax, 1
	mov	QWORD PTR tv725[rsp], rax
	mov	ecx, DWORD PTR data_len$[rsp]
	add	ecx, 32766				; 00007ffeH
	mov	eax, ecx
	cdq
	mov	ecx, 32767				; 00007fffH
	idiv	ecx
	imul	eax, eax, 5
	mov	ecx, DWORD PTR data_len$[rsp]
	lea	eax, DWORD PTR [rcx+rax+2]
	mov	rcx, QWORD PTR out$[rsp]
	mov	rdx, QWORD PTR tv725[rsp]
	cmp	DWORD PTR [rcx+rdx-8], eax
	jle	$LN47@stbi_zlib_
; Line 986
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rcx+rax-8], 2
; Line 987
	mov	DWORD PTR j$[rsp], 0
$LN27@stbi_zlib_:
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN28@stbi_zlib_
; Line 988
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR blocklen$2[rsp], eax
; Line 989
	cmp	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
	jle	SHORT $LN48@stbi_zlib_
	mov	DWORD PTR blocklen$2[rsp], 32767	; 00007fffH
$LN48@stbi_zlib_:
; Line 990
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN80@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN80@stbi_zlib_
	mov	QWORD PTR tv752[rsp], 0
	jmp	SHORT $LN81@stbi_zlib_
$LN80@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv752[rsp], rax
$LN81@stbi_zlib_:
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR blocklen$2[rsp]
	jne	SHORT $LN82@stbi_zlib_
	mov	BYTE PTR tv768[rsp], 1
	jmp	SHORT $LN83@stbi_zlib_
$LN82@stbi_zlib_:
	mov	BYTE PTR tv768[rsp], 0
$LN83@stbi_zlib_:
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax-8]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv768[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 991
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN84@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN84@stbi_zlib_
	mov	QWORD PTR tv782[rsp], 0
	jmp	SHORT $LN85@stbi_zlib_
$LN84@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv782[rsp], rax
$LN85@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 992
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN86@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN86@stbi_zlib_
	mov	QWORD PTR tv811[rsp], 0
	jmp	SHORT $LN87@stbi_zlib_
$LN86@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv811[rsp], rax
$LN87@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 993
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN88@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN88@stbi_zlib_
	mov	QWORD PTR tv841[rsp], 0
	jmp	SHORT $LN89@stbi_zlib_
$LN88@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv841[rsp], rax
$LN89@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 994
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN90@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN90@stbi_zlib_
	mov	QWORD PTR tv871[rsp], 0
	jmp	SHORT $LN91@stbi_zlib_
$LN90@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv871[rsp], rax
$LN91@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$2[rsp]
	not	eax
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 995
	movsxd	rax, DWORD PTR blocklen$2[rsp]
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, 4
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR out$[rsp]
	movsxd	rdx, DWORD PTR [r8+rdx-8]
	mov	r8, QWORD PTR out$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv899[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv899[rsp]
	mov	rcx, rax
	call	memcpy
; Line 996
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	add	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 997
	mov	eax, DWORD PTR blocklen$2[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 998
	jmp	$LN27@stbi_zlib_
$LN28@stbi_zlib_:
$LN47@stbi_zlib_:
; Line 1003
	mov	DWORD PTR s1$4[rsp], 1
	mov	DWORD PTR s2$5[rsp], 0
; Line 1004
	mov	eax, DWORD PTR data_len$[rsp]
	cdq
	mov	ecx, 5552				; 000015b0H
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR blocklen$9[rsp], eax
; Line 1005
	mov	DWORD PTR j$[rsp], 0
$LN30@stbi_zlib_:
; Line 1006
	mov	eax, DWORD PTR data_len$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN31@stbi_zlib_
; Line 1007
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi_zlib_
$LN32@stbi_zlib_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi_zlib_:
	mov	eax, DWORD PTR blocklen$9[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi_zlib_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR s1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s1$4[rsp], eax
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, DWORD PTR s2$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR s2$5[rsp], eax
	jmp	SHORT $LN32@stbi_zlib_
$LN33@stbi_zlib_:
; Line 1008
	xor	edx, edx
	mov	eax, DWORD PTR s1$4[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s1$4[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR s2$5[rsp]
	mov	ecx, 65521				; 0000fff1H
	div	ecx
	mov	eax, edx
	mov	DWORD PTR s2$5[rsp], eax
; Line 1009
	mov	eax, DWORD PTR blocklen$9[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
; Line 1010
	mov	DWORD PTR blocklen$9[rsp], 5552		; 000015b0H
; Line 1011
	jmp	$LN30@stbi_zlib_
$LN31@stbi_zlib_:
; Line 1012
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN92@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN92@stbi_zlib_
	mov	QWORD PTR tv935[rsp], 0
	jmp	SHORT $LN93@stbi_zlib_
$LN92@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv935[rsp], rax
$LN93@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1013
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN94@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN94@stbi_zlib_
	mov	QWORD PTR tv965[rsp], 0
	jmp	SHORT $LN95@stbi_zlib_
$LN94@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv965[rsp], rax
$LN95@stbi_zlib_:
	mov	eax, DWORD PTR s2$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1014
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN96@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN96@stbi_zlib_
	mov	QWORD PTR tv994[rsp], 0
	jmp	SHORT $LN97@stbi_zlib_
$LN96@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv994[rsp], rax
$LN97@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1015
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN98@stbi_zlib_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN98@stbi_zlib_
	mov	QWORD PTR tv1024[rsp], 0
	jmp	SHORT $LN99@stbi_zlib_
$LN98@stbi_zlib_:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR out$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv1024[rsp], rax
$LN99@stbi_zlib_:
	mov	eax, DWORD PTR s1$4[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 1017
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out_len$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	eax, DWORD PTR [rdx+rax-8]
	mov	DWORD PTR [rcx], eax
; Line 1019
	mov	rax, QWORD PTR out_len$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR out$[rsp]
	sub	rcx, 8
	mov	r8, rax
	mov	rdx, QWORD PTR out$[rsp]
	call	memmove
; Line 1020
	mov	rax, QWORD PTR out$[rsp]
	sub	rax, 8
$LN1@stbi_zlib_:
; Line 1022
	add	rsp, 584				; 00000248H
	ret	0
stbi_zlib_compress ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hash$ = 0
data$ = 32
?stbiw__zhash@@YAIPEAE@Z PROC				; stbiw__zhash
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 868
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 869
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR data$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 870
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 871
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 5
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 872
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 4
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 873
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 17
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 874
	mov	eax, DWORD PTR hash$[rsp]
	shl	eax, 25
	mov	ecx, DWORD PTR hash$[rsp]
	xor	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 875
	mov	eax, DWORD PTR hash$[rsp]
	shr	eax, 6
	mov	ecx, DWORD PTR hash$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR hash$[rsp], eax
; Line 876
	mov	eax, DWORD PTR hash$[rsp]
; Line 877
	add	rsp, 24
	ret	0
?stbiw__zhash@@YAIPEAE@Z ENDP				; stbiw__zhash
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
a$ = 32
b$ = 40
limit$ = 48
?stbiw__zlib_countm@@YAIPEAE0H@Z PROC			; stbiw__zlib_countm
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 860
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbiw__zli
$LN2@stbiw__zli:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbiw__zli:
	mov	eax, DWORD PTR limit$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbiw__zli
	cmp	DWORD PTR i$[rsp], 258			; 00000102H
	jge	SHORT $LN3@stbiw__zli
; Line 863
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbiw__zli
	jmp	SHORT $LN3@stbiw__zli
$LN5@stbiw__zli:
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 864
	mov	eax, DWORD PTR i$[rsp]
; Line 865
	add	rsp, 24
	ret	0
?stbiw__zlib_countm@@YAIPEAE0H@Z ENDP			; stbiw__zlib_countm
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
res$ = 0
tv66 = 4
code$ = 32
codebits$ = 40
?stbiw__zlib_bitrev@@YAHHH@Z PROC			; stbiw__zlib_bitrev
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 850
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 851
	mov	DWORD PTR res$[rsp], 0
$LN2@stbiw__zli:
; Line 852
	mov	eax, DWORD PTR codebits$[rsp]
	mov	DWORD PTR tv66[rsp], eax
	mov	eax, DWORD PTR codebits$[rsp]
	dec	eax
	mov	DWORD PTR codebits$[rsp], eax
	cmp	DWORD PTR tv66[rsp], 0
	je	SHORT $LN3@stbiw__zli
; Line 853
	mov	eax, DWORD PTR res$[rsp]
	shl	eax, 1
	mov	ecx, DWORD PTR code$[rsp]
	and	ecx, 1
	or	eax, ecx
	mov	DWORD PTR res$[rsp], eax
; Line 854
	mov	eax, DWORD PTR code$[rsp]
	sar	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 855
	jmp	SHORT $LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 856
	mov	eax, DWORD PTR res$[rsp]
; Line 857
	add	rsp, 24
	ret	0
?stbiw__zlib_bitrev@@YAHHH@Z ENDP			; stbiw__zlib_bitrev
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
data$ = 64
bitbuffer$ = 72
bitcount$ = 80
?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z PROC		; stbiw__zlib_flushf
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 840
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN2@stbiw__zli:
; Line 841
	mov	rax, QWORD PTR bitcount$[rsp]
	cmp	DWORD PTR [rax], 8
	jl	$LN3@stbiw__zli
; Line 842
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN5@stbiw__zli
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	cmp	eax, DWORD PTR [rdx+rcx-8]
	jge	SHORT $LN5@stbiw__zli
	mov	QWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@stbiw__zli
$LN5@stbiw__zli:
	mov	r8d, 1
	mov	edx, 1
	lea	rcx, QWORD PTR data$[rsp]
	call	?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z	; stbiw__sbgrowf
	mov	QWORD PTR tv78[rsp], rax
$LN6@stbiw__zli:
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	and	eax, 255				; 000000ffH
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	movsxd	rcx, DWORD PTR [rdx+rcx-8]
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR data$[rsp]
	mov	eax, DWORD PTR [rcx+rax-8]
	inc	eax
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR data$[rsp]
	mov	DWORD PTR [rdx+rcx-8], eax
; Line 843
	mov	rax, QWORD PTR bitbuffer$[rsp]
	mov	eax, DWORD PTR [rax]
	shr	eax, 8
	mov	rcx, QWORD PTR bitbuffer$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 844
	mov	rax, QWORD PTR bitcount$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, 8
	mov	rcx, QWORD PTR bitcount$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 845
	jmp	$LN2@stbiw__zli
$LN3@stbiw__zli:
; Line 846
	mov	rax, QWORD PTR data$[rsp]
; Line 847
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__zlib_flushf@@YAPEAEPEAEPEAIPEAH@Z ENDP		; stbiw__zlib_flushf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
m$ = 36
p$ = 40
tv81 = 48
tv84 = 56
Array$ = 80
increment$ = 88
itemsize$ = 96
?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z PROC			; stbiw__sbgrowf
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 827
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 828
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@stbiw__sbg
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	eax, DWORD PTR [rax+rcx-8]
	mov	ecx, DWORD PTR increment$[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR tv71[rsp], eax
	jmp	SHORT $LN6@stbiw__sbg
$LN5@stbiw__sbg:
	mov	eax, DWORD PTR increment$[rsp]
	inc	eax
	mov	DWORD PTR tv71[rsp], eax
$LN6@stbiw__sbg:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR m$[rsp], eax
; Line 829
	mov	eax, DWORD PTR itemsize$[rsp]
	imul	eax, DWORD PTR m$[rsp]
	cdqe
	add	rax, 8
	mov	QWORD PTR tv84[rsp], rax
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN7@stbiw__sbg
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	sub	rax, 8
	mov	QWORD PTR tv81[rsp], rax
	jmp	SHORT $LN8@stbiw__sbg
$LN7@stbiw__sbg:
	mov	QWORD PTR tv81[rsp], 0
$LN8@stbiw__sbg:
	mov	rdx, QWORD PTR tv84[rsp]
	mov	rcx, QWORD PTR tv81[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR p$[rsp], rax
; Line 830
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN9@stbiw__sbg
	mov	r8d, 830				; 0000033eH
	lea	rdx, OFFSET FLAT:$SG152303
	lea	rcx, OFFSET FLAT:$SG152304
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@stbiw__sbg:
; Line 831
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN2@stbiw__sbg
; Line 832
	mov	rax, QWORD PTR Array$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN3@stbiw__sbg
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	mov	DWORD PTR [rcx+rax], 0
$LN3@stbiw__sbg:
; Line 833
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR Array$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 834
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, DWORD PTR m$[rsp]
	mov	DWORD PTR [rax+rcx-8], edx
$LN2@stbiw__sbg:
; Line 836
	mov	rax, QWORD PTR Array$[rsp]
	mov	rax, QWORD PTR [rax]
; Line 837
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__sbgrowf@@YAPEAXPEAPEAXHH@Z ENDP			; stbiw__sbgrowf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
tv138 = 52
len$2 = 56
scratch$3 = 64
tv87 = 72
tv131 = 80
header$4 = 96
buffer$5 = 176
__$ArrayPad$ = 304
s$ = 352
x$ = 360
y$ = 368
comp$ = 376
data$ = 384
?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z PROC ; stbi_write_hdr_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 762
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 763
	cmp	DWORD PTR y$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jle	SHORT $LN7@stbi_write
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN5@stbi_write
$LN7@stbi_write:
; Line 764
	xor	eax, eax
	jmp	$LN1@stbi_write
	jmp	$LN6@stbi_write
$LN5@stbi_write:
; Line 767
	mov	eax, DWORD PTR x$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR scratch$3[rsp], rax
; Line 770
	lea	rax, QWORD PTR header$4[rsp]
	lea	rcx, OFFSET FLAT:$SG152260
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 66					; 00000042H
	rep movsb
; Line 771
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv87[rsp], rax
	mov	r8d, 65					; 00000041H
	lea	rdx, QWORD PTR header$4[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv87[rsp]
; Line 776
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	lea	rdx, OFFSET FLAT:$SG152261
	lea	rcx, QWORD PTR buffer$5[rsp]
	call	sprintf
	mov	DWORD PTR len$2[rsp], eax
; Line 778
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv131[rsp], rax
	mov	r8d, DWORD PTR len$2[rsp]
	lea	rdx, QWORD PTR buffer$5[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv131[rsp]
; Line 780
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN3@stbi_write
; Line 781
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN9@stbi_write
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	sub	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv138[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN9@stbi_write:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv138[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR tv138[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR scratch$3[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z ; stbiw__write_hdr_scanline
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 782
	mov	rcx, QWORD PTR scratch$3[rsp]
	call	QWORD PTR __imp_free
; Line 783
	mov	eax, 1
$LN6@stbi_write:
$LN1@stbi_write:
; Line 785
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ENDP ; stbi_write_hdr_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
r$1 = 36
rgbe$ = 40
scanlineheader$ = 44
c$2 = 48
len$3 = 52
len$4 = 56
comp$5 = 64
tv77 = 72
tv159 = 76
tv156 = 80
tv234 = 88
linear$ = 96
__$ArrayPad$ = 112
s$ = 144
width$ = 152
ncomp$ = 160
scratch$ = 168
scanline$ = 176
?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z PROC ; stbiw__write_hdr_scanline
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 673
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 674
	mov	BYTE PTR scanlineheader$[rsp], 2
	mov	BYTE PTR scanlineheader$[rsp+1], 2
	mov	BYTE PTR scanlineheader$[rsp+2], 0
	mov	BYTE PTR scanlineheader$[rsp+3], 0
; Line 679
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 680
	mov	eax, DWORD PTR width$[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR scanlineheader$[rsp+rcx], al
; Line 683
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN27@stbiw__wri
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN25@stbiw__wri
$LN27@stbiw__wri:
; Line 684
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN3@stbiw__wri
; Line 685
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv77[rsp], eax
	cmp	DWORD PTR tv77[rsp], 3
	je	SHORT $LN29@stbiw__wri
	cmp	DWORD PTR tv77[rsp], 4
	je	SHORT $LN28@stbiw__wri
	jmp	$LN30@stbiw__wri
$LN28@stbiw__wri:
$LN29@stbiw__wri:
; Line 687
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 688
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 689
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 690
	jmp	SHORT $LN5@stbiw__wri
$LN30@stbiw__wri:
; Line 692
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	xmm0, DWORD PTR linear$[rsp+rax]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	xmm0, DWORD PTR linear$[rsp+rax]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
$LN5@stbiw__wri:
; Line 695
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z	; stbiw__linear_to_rgbe
; Line 696
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv156[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv156[rsp]
; Line 697
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
; Line 698
	jmp	$LN26@stbiw__wri
$LN25@stbiw__wri:
; Line 701
	mov	DWORD PTR x$[rsp], 0
	jmp	SHORT $LN9@stbiw__wri
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	mov	DWORD PTR x$[rsp], eax
$LN9@stbiw__wri:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN8@stbiw__wri
; Line 702
	mov	eax, DWORD PTR ncomp$[rsp]
	mov	DWORD PTR tv159[rsp], eax
	cmp	DWORD PTR tv159[rsp], 3
	je	SHORT $LN32@stbiw__wri
	cmp	DWORD PTR tv159[rsp], 4
	je	SHORT $LN31@stbiw__wri
	jmp	$LN33@stbiw__wri
$LN31@stbiw__wri:
$LN32@stbiw__wri:
; Line 704
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 705
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	inc	eax
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 706
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
; Line 707
	jmp	SHORT $LN10@stbiw__wri
$LN33@stbiw__wri:
; Line 709
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR ncomp$[rsp]
	cdqe
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*4]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	xmm0, DWORD PTR linear$[rsp+rax]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	xmm0, DWORD PTR linear$[rsp+rax]
	vmovss	DWORD PTR linear$[rsp+rcx], xmm0
$LN10@stbiw__wri:
; Line 712
	lea	rdx, QWORD PTR linear$[rsp]
	lea	rcx, QWORD PTR rgbe$[rsp]
	call	?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z	; stbiw__linear_to_rgbe
; Line 713
	mov	eax, 1
	imul	rax, rax, 0
	imul	ecx, DWORD PTR width$[rsp], 0
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 714
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, DWORD PTR width$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 715
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR width$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 716
	mov	eax, 1
	imul	rax, rax, 3
	imul	ecx, DWORD PTR width$[rsp], 3
	mov	edx, DWORD PTR x$[rsp]
	add	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scratch$[rsp]
	movzx	eax, BYTE PTR rgbe$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 717
	jmp	$LN7@stbiw__wri
$LN8@stbiw__wri:
; Line 719
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv234[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR scanlineheader$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv234[rsp]
; Line 722
	mov	DWORD PTR c$2[rsp], 0
	jmp	SHORT $LN14@stbiw__wri
$LN12@stbiw__wri:
	mov	eax, DWORD PTR c$2[rsp]
	inc	eax
	mov	DWORD PTR c$2[rsp], eax
$LN14@stbiw__wri:
	cmp	DWORD PTR c$2[rsp], 4
	jge	$LN13@stbiw__wri
; Line 723
	mov	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR c$2[rsp]
	cdqe
	mov	rcx, QWORD PTR scratch$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR comp$5[rsp], rax
; Line 725
	mov	DWORD PTR x$[rsp], 0
$LN15@stbiw__wri:
; Line 726
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	$LN16@stbiw__wri
; Line 728
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN17@stbiw__wri:
; Line 729
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	SHORT $LN18@stbiw__wri
; Line 730
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR r$1[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN34@stbiw__wri
; Line 731
	jmp	SHORT $LN18@stbiw__wri
$LN34@stbiw__wri:
; Line 732
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
; Line 733
	jmp	SHORT $LN17@stbiw__wri
$LN18@stbiw__wri:
; Line 734
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jl	SHORT $LN35@stbiw__wri
; Line 735
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR r$1[rsp], eax
$LN35@stbiw__wri:
$LN19@stbiw__wri:
; Line 737
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN20@stbiw__wri
; Line 738
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
; Line 739
	cmp	DWORD PTR len$3[rsp], 128		; 00000080H
	jle	SHORT $LN36@stbiw__wri
	mov	DWORD PTR len$3[rsp], 128		; 00000080H
$LN36@stbiw__wri:
; Line 740
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	edx, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z ; stbiw__write_dump_data
; Line 741
	mov	eax, DWORD PTR len$3[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 742
	jmp	SHORT $LN19@stbiw__wri
$LN20@stbiw__wri:
; Line 744
	mov	eax, DWORD PTR r$1[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR width$[rsp]
	jge	$LN37@stbiw__wri
$LN21@stbiw__wri:
; Line 746
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR r$1[rsp], eax
	jge	SHORT $LN22@stbiw__wri
	movsxd	rax, DWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR x$[rsp]
	mov	rdx, QWORD PTR comp$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN22@stbiw__wri
; Line 747
	mov	eax, DWORD PTR r$1[rsp]
	inc	eax
	mov	DWORD PTR r$1[rsp], eax
	jmp	SHORT $LN21@stbiw__wri
$LN22@stbiw__wri:
$LN23@stbiw__wri:
; Line 749
	mov	eax, DWORD PTR r$1[rsp]
	cmp	DWORD PTR x$[rsp], eax
	jge	SHORT $LN24@stbiw__wri
; Line 750
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR r$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$4[rsp], eax
; Line 751
	cmp	DWORD PTR len$4[rsp], 127		; 0000007fH
	jle	SHORT $LN38@stbiw__wri
	mov	DWORD PTR len$4[rsp], 127		; 0000007fH
$LN38@stbiw__wri:
; Line 752
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR comp$5[rsp]
	movzx	r8d, BYTE PTR [rcx+rax]
	mov	edx, DWORD PTR len$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z ; stbiw__write_run_data
; Line 753
	mov	eax, DWORD PTR len$4[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$[rsp], eax
; Line 754
	jmp	SHORT $LN23@stbiw__wri
$LN24@stbiw__wri:
$LN37@stbiw__wri:
; Line 756
	jmp	$LN15@stbiw__wri
$LN16@stbiw__wri:
; Line 757
	jmp	$LN12@stbiw__wri
$LN13@stbiw__wri:
$LN26@stbiw__wri:
; Line 759
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbiw__write_hdr_scanline@@YAXPEAUstbi__write_context@@HHPEAEPEAM@Z ENDP ; stbiw__write_hdr_scanline
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
tv77 = 40
tv84 = 48
s$ = 80
length$ = 88
data$ = 96
?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z PROC ; stbiw__write_dump_data
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 665
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 666
	mov	eax, DWORD PTR length$[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 667
	cmp	DWORD PTR length$[rsp], 128		; 00000080H
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 667				; 0000029bH
	lea	rdx, OFFSET FLAT:$SG152186
	lea	rcx, OFFSET FLAT:$SG152187
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 668
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv77[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv77[rsp]
; Line 669
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv84[rsp], rax
	mov	r8d, DWORD PTR length$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv84[rsp]
; Line 670
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_dump_data@@YAXPEAUstbi__write_context@@HPEAE@Z ENDP ; stbiw__write_dump_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lengthbyte$ = 32
tv79 = 40
tv86 = 48
s$ = 80
length$ = 88
databyte$ = 96
?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z PROC ; stbiw__write_run_data
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 657
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 658
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR lengthbyte$[rsp], al
; Line 659
	mov	eax, DWORD PTR length$[rsp]
	add	eax, 128				; 00000080H
	cmp	eax, 255				; 000000ffH
	jle	SHORT $LN3@stbiw__wri
	mov	r8d, 659				; 00000293H
	lea	rdx, OFFSET FLAT:$SG152175
	lea	rcx, OFFSET FLAT:$SG152176
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbiw__wri:
; Line 660
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv79[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR lengthbyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv79[rsp]
; Line 661
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv86[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR databyte$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv86[rsp]
; Line 662
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_run_data@@YAXPEAUstbi__write_context@@HE@Z ENDP ; stbiw__write_run_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
maxcomp$ = 32
normalize$1 = 36
tv77 = 40
tv93 = 44
tv94 = 48
exponent$ = 52
rgbe$ = 80
linear$ = 88
?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z PROC		; stbiw__linear_to_rgbe
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 640
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 642
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR linear$[rsp]
	mov	r8, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vcomiss	xmm0, DWORD PTR [r8+rcx]
	jbe	SHORT $LN5@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmovss	DWORD PTR tv77[rsp], xmm0
	jmp	SHORT $LN6@stbiw__lin
$LN5@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmovss	DWORD PTR tv77[rsp], xmm0
$LN6@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vcomiss	xmm0, DWORD PTR tv77[rsp]
	jbe	SHORT $LN9@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmovss	DWORD PTR tv94[rsp], xmm0
	jmp	SHORT $LN10@stbiw__lin
$LN9@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR linear$[rsp]
	mov	r8, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vcomiss	xmm0, DWORD PTR [r8+rcx]
	jbe	SHORT $LN7@stbiw__lin
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmovss	DWORD PTR tv93[rsp], xmm0
	jmp	SHORT $LN8@stbiw__lin
$LN7@stbiw__lin:
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmovss	DWORD PTR tv93[rsp], xmm0
$LN8@stbiw__lin:
	vmovss	xmm0, DWORD PTR tv93[rsp]
	vmovss	DWORD PTR tv94[rsp], xmm0
$LN10@stbiw__lin:
	vmovss	xmm0, DWORD PTR tv94[rsp]
	vmovss	DWORD PTR maxcomp$[rsp], xmm0
; Line 644
	vmovss	xmm0, DWORD PTR __real@0a4fb11f
	vcomiss	xmm0, DWORD PTR maxcomp$[rsp]
	jbe	SHORT $LN2@stbiw__lin
; Line 645
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 646
	jmp	$LN3@stbiw__lin
$LN2@stbiw__lin:
; Line 647
	vcvtss2sd xmm0, xmm0, DWORD PTR maxcomp$[rsp]
	lea	rdx, QWORD PTR exponent$[rsp]
	call	QWORD PTR __imp_frexp
	vcvtsd2ss xmm0, xmm0, xmm0
	vmulss	xmm0, xmm0, DWORD PTR __real@43800000
	vdivss	xmm0, xmm0, DWORD PTR maxcomp$[rsp]
	vmovss	DWORD PTR normalize$1[rsp], xmm0
; Line 649
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR normalize$1[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 650
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR normalize$1[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 651
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR linear$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR normalize$1[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 652
	mov	eax, DWORD PTR exponent$[rsp]
	add	eax, 128				; 00000080H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR rgbe$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN3@stbiw__lin:
; Line 654
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__linear_to_rgbe@@YAXPEAEPEAM@Z ENDP		; stbiw__linear_to_rgbe
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$1 = 192
len$2 = 196
i$3 = 200
has_alpha$ = 204
header$4 = 208
header$5 = 209
j$6 = 212
colorbytes$ = 216
diff$7 = 220
tv66 = 224
tv69 = 228
tv71 = 232
format$ = 236
jdir$8 = 240
jend$9 = 244
begin$10 = 248
row$11 = 256
prev$12 = 264
s$ = 288
x$ = 296
y$ = 304
comp$ = 312
data$ = 320
?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z PROC ; stbi_write_tga_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 533
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
; Line 534
	cmp	DWORD PTR comp$[rsp], 2
	je	SHORT $LN33@stbi_write
	cmp	DWORD PTR comp$[rsp], 4
	je	SHORT $LN33@stbi_write
	mov	DWORD PTR tv66[rsp], 0
	jmp	SHORT $LN34@stbi_write
$LN33@stbi_write:
	mov	DWORD PTR tv66[rsp], 1
$LN34@stbi_write:
	mov	eax, DWORD PTR tv66[rsp]
	mov	DWORD PTR has_alpha$[rsp], eax
; Line 535
	cmp	DWORD PTR has_alpha$[rsp], 0
	je	SHORT $LN35@stbi_write
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN36@stbi_write
$LN35@stbi_write:
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv69[rsp], eax
$LN36@stbi_write:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR colorbytes$[rsp], eax
; Line 536
	cmp	DWORD PTR colorbytes$[rsp], 2
	jge	SHORT $LN37@stbi_write
	mov	DWORD PTR tv71[rsp], 3
	jmp	SHORT $LN38@stbi_write
$LN37@stbi_write:
	mov	DWORD PTR tv71[rsp], 2
$LN38@stbi_write:
	mov	eax, DWORD PTR tv71[rsp]
	mov	DWORD PTR format$[rsp], eax
; Line 538
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN18@stbi_write
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN17@stbi_write
$LN18@stbi_write:
; Line 539
	xor	eax, eax
	jmp	$LN1@stbi_write
$LN17@stbi_write:
; Line 541
	cmp	DWORD PTR stbi_write_tga_with_rle, 0
	jne	$LN19@stbi_write
; Line 542
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	DWORD PTR [rsp+176], eax
	mov	DWORD PTR [rsp+168], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+160], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+152], eax
	mov	QWORD PTR [rsp+144], 0
	mov	QWORD PTR [rsp+136], 0
	mov	QWORD PTR [rsp+128], 0
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	eax, DWORD PTR format$[rsp]
	mov	DWORD PTR [rsp+104], eax
	mov	QWORD PTR [rsp+96], 0
	mov	QWORD PTR [rsp+88], 0
	lea	rax, OFFSET FLAT:$SG152116
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	eax, DWORD PTR has_alpha$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	QWORD PTR [rsp+48], 0
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
	jmp	$LN1@stbi_write
; Line 544
	jmp	$LN20@stbi_write
$LN19@stbi_write:
; Line 548
	mov	eax, DWORD PTR has_alpha$[rsp]
	shl	eax, 3
	mov	ecx, DWORD PTR has_alpha$[rsp]
	mov	edx, DWORD PTR colorbytes$[rsp]
	add	edx, ecx
	mov	ecx, edx
	shl	ecx, 3
	mov	edx, DWORD PTR format$[rsp]
	add	edx, 8
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], ecx
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+88], eax
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	QWORD PTR [rsp+56], 0
	mov	QWORD PTR [rsp+48], 0
	mov	QWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], edx
	xor	r9d, r9d
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG152117
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ ; stbiw__writef
; Line 550
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN21@stbi_write
; Line 551
	mov	DWORD PTR j$6[rsp], 0
; Line 552
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR jend$9[rsp], eax
; Line 553
	mov	DWORD PTR jdir$8[rsp], 1
; Line 554
	jmp	SHORT $LN22@stbi_write
$LN21@stbi_write:
; Line 555
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$6[rsp], eax
; Line 556
	mov	DWORD PTR jend$9[rsp], -1
; Line 557
	mov	DWORD PTR jdir$8[rsp], -1
$LN22@stbi_write:
; Line 559
	jmp	SHORT $LN4@stbi_write
$LN2@stbi_write:
	mov	eax, DWORD PTR jdir$8[rsp]
	mov	ecx, DWORD PTR j$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$6[rsp], eax
$LN4@stbi_write:
	mov	eax, DWORD PTR jend$9[rsp]
	cmp	DWORD PTR j$6[rsp], eax
	je	$LN3@stbi_write
; Line 560
	mov	eax, DWORD PTR j$6[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row$11[rsp], rax
; Line 563
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN7@stbi_write
$LN5@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR i$3[rsp], eax
$LN7@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN6@stbi_write
; Line 564
	mov	eax, DWORD PTR i$3[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR row$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR begin$10[rsp], rax
; Line 565
	mov	DWORD PTR diff$7[rsp], 1
; Line 566
	mov	DWORD PTR len$2[rsp], 1
; Line 568
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN23@stbi_write
; Line 569
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 570
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	inc	ecx
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	mov	DWORD PTR diff$7[rsp], eax
; Line 571
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN24@stbi_write
; Line 572
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR prev$12[rsp], rax
; Line 573
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN10@stbi_write
$LN8@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN10@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	$LN9@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	$LN9@stbi_write
; Line 574
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR prev$12[rsp]
	call	memcmp
	test	eax, eax
	je	SHORT $LN26@stbi_write
; Line 575
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR prev$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prev$12[rsp], rax
; Line 576
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 577
	jmp	SHORT $LN27@stbi_write
$LN26@stbi_write:
; Line 578
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 579
	jmp	SHORT $LN9@stbi_write
$LN27@stbi_write:
; Line 581
	jmp	$LN8@stbi_write
$LN9@stbi_write:
; Line 582
	jmp	$LN25@stbi_write
$LN24@stbi_write:
; Line 583
	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 2
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN13@stbi_write
$LN11@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN13@stbi_write:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN12@stbi_write
	cmp	DWORD PTR len$2[rsp], 128		; 00000080H
	jge	SHORT $LN12@stbi_write
; Line 584
	movsxd	rax, DWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR k$1[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR row$11[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR begin$10[rsp]
	call	memcmp
	test	eax, eax
	jne	SHORT $LN28@stbi_write
; Line 585
	mov	eax, DWORD PTR len$2[rsp]
	inc	eax
	mov	DWORD PTR len$2[rsp], eax
; Line 586
	jmp	SHORT $LN29@stbi_write
$LN28@stbi_write:
; Line 587
	jmp	SHORT $LN12@stbi_write
$LN29@stbi_write:
; Line 589
	jmp	$LN11@stbi_write
$LN12@stbi_write:
$LN25@stbi_write:
$LN23@stbi_write:
; Line 593
	cmp	DWORD PTR diff$7[rsp], 0
	je	$LN30@stbi_write
; Line 594
	mov	eax, DWORD PTR len$2[rsp]
	dec	eax
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$4[rsp], al
; Line 595
	movzx	edx, BYTE PTR header$4[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
; Line 596
	mov	DWORD PTR k$1[rsp], 0
	jmp	SHORT $LN16@stbi_write
$LN14@stbi_write:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN16@stbi_write:
	mov	eax, DWORD PTR len$2[rsp]
	cmp	DWORD PTR k$1[rsp], eax
	jge	SHORT $LN15@stbi_write
; Line 597
	mov	eax, DWORD PTR k$1[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR begin$10[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
; Line 598
	jmp	SHORT $LN14@stbi_write
$LN15@stbi_write:
; Line 599
	jmp	SHORT $LN31@stbi_write
$LN30@stbi_write:
; Line 600
	mov	eax, DWORD PTR len$2[rsp]
	sub	eax, 129				; 00000081H
	and	eax, 255				; 000000ffH
	mov	BYTE PTR header$5[rsp], al
; Line 601
	movzx	edx, BYTE PTR header$5[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
; Line 602
	mov	rax, QWORD PTR begin$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR has_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
$LN31@stbi_write:
; Line 604
	jmp	$LN5@stbi_write
$LN6@stbi_write:
; Line 605
	jmp	$LN2@stbi_write
$LN3@stbi_write:
; Line 606
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN20@stbi_write:
; Line 608
	mov	eax, 1
$LN1@stbi_write:
; Line 609
	add	rsp, 280				; 00000118H
	ret	0
?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ENDP ; stbi_write_tga_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pad$1 = 368
s$ = 400
x$ = 408
y$ = 416
comp$ = 424
data$ = 432
?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z PROC ; stbi_write_bmp_core
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 493
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
; Line 494
	cmp	DWORD PTR comp$[rsp], 4
	je	$LN2@stbi_write
; Line 496
	mov	eax, DWORD PTR x$[rsp]
	neg	eax
	imul	eax, eax, 3
	and	eax, 3
	mov	DWORD PTR pad$1[rsp], eax
; Line 497
	imul	eax, DWORD PTR x$[rsp], 3
	add	eax, DWORD PTR pad$1[rsp]
	imul	eax, DWORD PTR y$[rsp]
	add	eax, 54					; 00000036H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	QWORD PTR [rsp+176], 0
	mov	DWORD PTR [rsp+168], 24
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 40			; 00000028H
	mov	DWORD PTR [rsp+128], 54			; 00000036H
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG152049
	mov	QWORD PTR [rsp+80], rax
	mov	eax, DWORD PTR pad$1[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	QWORD PTR [rsp+64], 0
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
	jmp	$LN1@stbi_write
; Line 501
	jmp	$LN3@stbi_write
$LN2@stbi_write:
; Line 505
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	lea	eax, DWORD PTR [rax*4+122]
	mov	QWORD PTR [rsp+352], 0
	mov	QWORD PTR [rsp+344], 0
	mov	QWORD PTR [rsp+336], 0
	mov	QWORD PTR [rsp+328], 0
	mov	QWORD PTR [rsp+320], 0
	mov	QWORD PTR [rsp+312], 0
	mov	QWORD PTR [rsp+304], 0
	mov	QWORD PTR [rsp+296], 0
	mov	QWORD PTR [rsp+288], 0
	mov	QWORD PTR [rsp+280], 0
	mov	QWORD PTR [rsp+272], 0
	mov	QWORD PTR [rsp+264], 0
	mov	QWORD PTR [rsp+256], 0
	mov	DWORD PTR [rsp+248], -16777216		; ff000000H
	mov	DWORD PTR [rsp+240], 255		; 000000ffH
	mov	DWORD PTR [rsp+232], 65280		; 0000ff00H
	mov	DWORD PTR [rsp+224], 16711680		; 00ff0000H
	mov	QWORD PTR [rsp+216], 0
	mov	QWORD PTR [rsp+208], 0
	mov	QWORD PTR [rsp+200], 0
	mov	QWORD PTR [rsp+192], 0
	mov	QWORD PTR [rsp+184], 0
	mov	DWORD PTR [rsp+176], 3
	mov	DWORD PTR [rsp+168], 32			; 00000020H
	mov	DWORD PTR [rsp+160], 1
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+152], ecx
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rsp+144], ecx
	mov	DWORD PTR [rsp+136], 108		; 0000006cH
	mov	DWORD PTR [rsp+128], 122		; 0000007aH
	mov	QWORD PTR [rsp+120], 0
	mov	QWORD PTR [rsp+112], 0
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], 77			; 0000004dH
	mov	DWORD PTR [rsp+88], 66			; 00000042H
	lea	rax, OFFSET FLAT:$SG152050
	mov	QWORD PTR [rsp+80], rax
	mov	QWORD PTR [rsp+72], 0
	mov	DWORD PTR [rsp+64], 1
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], 1
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, -1
	mov	edx, -1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ; stbiw__outfile
$LN3@stbi_write:
$LN1@stbi_write:
; Line 510
	add	rsp, 392				; 00000188H
	ret	0
?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ENDP ; stbi_write_bmp_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 80
s$ = 112
rgb_dir$ = 120
vdir$ = 128
x$ = 136
y$ = 144
comp$ = 152
expand_mono$ = 160
data$ = 168
alpha$ = 176
pad$ = 184
fmt$ = 192
?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ PROC ; stbiw__outfile
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 479
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 480
	cmp	DWORD PTR y$[rsp], 0
	jl	SHORT $LN4@stbiw__out
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN2@stbiw__out
$LN4@stbiw__out:
; Line 481
	xor	eax, eax
	jmp	$LN1@stbiw__out
; Line 482
	jmp	$LN3@stbiw__out
$LN2@stbiw__out:
; Line 484
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$1[rsp], rax
; Line 485
	mov	r8, QWORD PTR v$1[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ; stbiw__writefv
; Line 486
	mov	QWORD PTR v$1[rsp], 0
; Line 487
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR pad$[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR alpha$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR vdir$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z ; stbiw__write_pixels
; Line 488
	mov	eax, 1
$LN3@stbiw__out:
$LN1@stbiw__out:
; Line 490
	add	rsp, 104				; 00000068H
	ret	0
?stbiw__outfile@@YAHPEAUstbi__write_context@@HHHHHHPEAXHHPEBDZZ ENDP ; stbiw__outfile
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
i$ = 52
j_end$ = 56
zero$ = 60
d$1 = 64
tv91 = 72
s$ = 96
rgb_dir$ = 104
vdir$ = 112
x$ = 120
y$ = 128
comp$ = 136
data$ = 144
write_alpha$ = 152
scanline_pad$ = 160
expand_mono$ = 168
?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z PROC ; stbiw__write_pixels
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 452
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 453
	mov	DWORD PTR zero$[rsp], 0
; Line 456
	cmp	DWORD PTR y$[rsp], 0
	jg	SHORT $LN8@stbiw__wri
; Line 457
	jmp	$LN1@stbiw__wri
$LN8@stbiw__wri:
; Line 459
	cmp	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, 0
	je	SHORT $LN9@stbiw__wri
; Line 460
	imul	eax, DWORD PTR vdir$[rsp], -1
	mov	DWORD PTR vdir$[rsp], eax
$LN9@stbiw__wri:
; Line 462
	cmp	DWORD PTR vdir$[rsp], 0
	jge	SHORT $LN10@stbiw__wri
; Line 463
	mov	DWORD PTR j_end$[rsp], -1
	mov	eax, DWORD PTR y$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 464
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 465
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR j_end$[rsp], eax
	mov	DWORD PTR j$[rsp], 0
$LN11@stbiw__wri:
; Line 468
	jmp	SHORT $LN4@stbiw__wri
$LN2@stbiw__wri:
	mov	eax, DWORD PTR vdir$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$[rsp], eax
$LN4@stbiw__wri:
	mov	eax, DWORD PTR j_end$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	je	$LN3@stbiw__wri
; Line 469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbiw__wri
$LN5@stbiw__wri:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbiw__wri:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbiw__wri
; Line 470
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	add	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR d$1[rsp], rax
; Line 471
	mov	rax, QWORD PTR d$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR expand_mono$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR write_alpha$[rsp]
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR rgb_dir$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ; stbiw__write_pixel
; Line 472
	jmp	SHORT $LN5@stbiw__wri
$LN6@stbiw__wri:
; Line 473
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
; Line 474
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv91[rsp], rax
	mov	r8d, DWORD PTR scanline_pad$[rsp]
	lea	rdx, QWORD PTR zero$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv91[rsp]
; Line 475
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 476
	add	rsp, 88					; 00000058H
	ret	0
?stbiw__write_pixels@@YAXPEAUstbi__write_context@@HHHHHPEAXHHH@Z ENDP ; stbiw__write_pixels
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bg$ = 32
px$ = 36
k$ = 40
tv71 = 44
tv128 = 48
s$ = 80
rgb_dir$ = 88
comp$ = 96
write_alpha$ = 104
expand_mono$ = 112
d$ = 120
?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z PROC ; stbiw__write_pixel
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 419
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 420
	mov	BYTE PTR bg$[rsp], 255			; 000000ffH
	mov	BYTE PTR bg$[rsp+1], 0
	mov	BYTE PTR bg$[rsp+2], 255		; 000000ffH
; Line 423
	cmp	DWORD PTR write_alpha$[rsp], 0
	jge	SHORT $LN7@stbiw__wri
; Line 424
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN7@stbiw__wri:
; Line 426
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR tv71[rsp], eax
	cmp	DWORD PTR tv71[rsp], 1
	je	SHORT $LN9@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 2
	je	SHORT $LN8@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 3
	je	$LN14@stbiw__wri
	cmp	DWORD PTR tv71[rsp], 4
	je	SHORT $LN12@stbiw__wri
	jmp	$LN2@stbiw__wri
$LN8@stbiw__wri:
$LN9@stbiw__wri:
; Line 429
	cmp	DWORD PTR expand_mono$[rsp], 0
	je	SHORT $LN10@stbiw__wri
; Line 430
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
	jmp	SHORT $LN11@stbiw__wri
$LN10@stbiw__wri:
; Line 432
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN11@stbiw__wri:
; Line 433
	jmp	$LN2@stbiw__wri
$LN12@stbiw__wri:
; Line 435
	cmp	DWORD PTR write_alpha$[rsp], 0
	jne	$LN13@stbiw__wri
; Line 437
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN6@stbiw__wri
$LN4@stbiw__wri:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN6@stbiw__wri:
	cmp	DWORD PTR k$[rsp], 3
	jge	SHORT $LN5@stbiw__wri
; Line 438
	movsxd	rax, DWORD PTR k$[rsp]
	movzx	eax, BYTE PTR bg$[rsp+rax]
	mov	DWORD PTR tv128[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR d$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	movzx	edx, BYTE PTR bg$[rsp+rdx]
	sub	ecx, edx
	mov	edx, 1
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	imul	ecx, edx
	mov	eax, ecx
	cdq
	mov	ecx, 255				; 000000ffH
	idiv	ecx
	mov	ecx, DWORD PTR tv128[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR px$[rsp+rcx], al
	jmp	SHORT $LN4@stbiw__wri
$LN5@stbiw__wri:
; Line 439
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	movzx	r9d, BYTE PTR px$[rsp+rax]
	movzx	r8d, BYTE PTR px$[rsp+rcx]
	movzx	edx, BYTE PTR px$[rsp+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
; Line 440
	jmp	SHORT $LN2@stbiw__wri
$LN13@stbiw__wri:
$LN14@stbiw__wri:
; Line 444
	mov	eax, DWORD PTR rgb_dir$[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	edx, 1
	sub	edx, DWORD PTR rgb_dir$[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR d$[rsp]
	movzx	r9d, BYTE PTR [r8+rax]
	mov	rax, QWORD PTR d$[rsp]
	movzx	r8d, BYTE PTR [rax+rcx]
	mov	rax, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rax+rdx]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ; stbiw__write3
$LN2@stbiw__wri:
; Line 447
	cmp	DWORD PTR write_alpha$[rsp], 0
	jle	SHORT $LN15@stbiw__wri
; Line 448
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR d$[rsp]
	movzx	edx, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ; stbiw__write1
$LN15@stbiw__wri:
; Line 449
	add	rsp, 72					; 00000048H
	ret	0
?stbiw__write_pixel@@YAXPEAUstbi__write_context@@HHHHPEAE@Z ENDP ; stbiw__write_pixel
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
s$ = 64
a$ = 72
b$ = 80
c$ = 88
?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z PROC	; stbiw__write3
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 407
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 409
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	add	rax, 3
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 410
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN2@stbiw__wri:
; Line 411
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR n$[rsp], eax
; Line 412
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 3
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 413
	mov	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 414
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR b$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 415
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	cdqe
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
; Line 416
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__write3@@YAXPEAUstbi__write_context@@EEE@Z ENDP	; stbiw__write3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
a$ = 56
?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z PROC	; stbiw__write1
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 400
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 401
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	inc	rax
	cmp	rax, 64					; 00000040H
	jbe	SHORT $LN2@stbiw__wri
; Line 402
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ; stbiw__write_flush
$LN2@stbiw__wri:
; Line 403
	mov	rax, QWORD PTR s$[rsp]
	movsxd	rax, DWORD PTR [rax+80]
	mov	rcx, QWORD PTR s$[rsp]
	movzx	edx, BYTE PTR a$[rsp]
	mov	BYTE PTR [rcx+rax+16], dl
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+80]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+80], eax
; Line 404
	add	rsp, 40					; 00000028H
	ret	0
?stbiw__write1@@YAXPEAUstbi__write_context@@E@Z ENDP	; stbiw__write1
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
s$ = 64
c$ = 72
?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z PROC	; stbiw__putc
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 395
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 396
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv70[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv70[rsp]
; Line 397
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__putc@@YAXPEAUstbi__write_context@@E@Z ENDP	; stbiw__putc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 32
s$ = 64
?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z PROC ; stbiw__write_flush
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 387
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 388
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+80], 0
	je	SHORT $LN2@stbiw__wri
; Line 389
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 16
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+80]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv74[rsp]
; Line 390
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+80], 0
$LN2@stbiw__wri:
; Line 392
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__write_flush@@YAXPEAUstbi__write_context@@@Z ENDP ; stbiw__write_flush
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
s$ = 64
fmt$ = 72
?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ PROC	; stbiw__writef
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 379
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 381
	lea	rax, QWORD PTR fmt$[rsp+8]
	mov	QWORD PTR v$[rsp], rax
; Line 382
	mov	r8, QWORD PTR v$[rsp]
	mov	rdx, QWORD PTR fmt$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ; stbiw__writefv
; Line 383
	mov	QWORD PTR v$[rsp], 0
; Line 384
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__writef@@YAXPEAUstbi__write_context@@PEBDZZ ENDP	; stbiw__writef
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
b$2 = 36
tv69 = 40
x$3 = 44
b$4 = 48
tv76 = 52
tv92 = 56
x$5 = 60
tv147 = 64
tv68 = 68
tv85 = 72
tv140 = 80
tv173 = 88
s$ = 112
fmt$ = 120
v$ = 128
?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z PROC ; stbiw__writefv
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 350
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
$LN2@stbiw__wri:
; Line 351
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@stbiw__wri
; Line 352
	mov	rax, QWORD PTR fmt$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv68[rsp], eax
	mov	rax, QWORD PTR fmt$[rsp]
	inc	rax
	mov	QWORD PTR fmt$[rsp], rax
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR tv69[rsp], eax
	cmp	DWORD PTR tv69[rsp], 32			; 00000020H
	je	SHORT $LN6@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 49			; 00000031H
	je	SHORT $LN7@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 50			; 00000032H
	je	$LN8@stbiw__wri
	cmp	DWORD PTR tv69[rsp], 52			; 00000034H
	je	$LN9@stbiw__wri
	jmp	$LN10@stbiw__wri
$LN6@stbiw__wri:
; Line 353
	jmp	$LN4@stbiw__wri
$LN7@stbiw__wri:
; Line 354
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN12@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN13@stbiw__wri
$LN12@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv76[rsp], eax
$LN13@stbiw__wri:
	mov	eax, DWORD PTR tv76[rsp]
	and	eax, 255				; 000000ffH
	mov	BYTE PTR x$1[rsp], al
; Line 355
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv85[rsp], rax
	mov	r8d, 1
	lea	rdx, QWORD PTR x$1[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv85[rsp]
; Line 356
	jmp	$LN4@stbiw__wri
$LN8@stbiw__wri:
; Line 357
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN14@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv92[rsp], eax
	jmp	SHORT $LN15@stbiw__wri
$LN14@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv92[rsp], eax
$LN15@stbiw__wri:
	mov	eax, DWORD PTR tv92[rsp]
	mov	DWORD PTR x$5[rsp], eax
; Line 359
	mov	eax, DWORD PTR x$5[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 360
	mov	eax, DWORD PTR x$5[rsp]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$2[rsp+rcx], al
; Line 361
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv140[rsp], rax
	mov	r8d, 2
	lea	rdx, QWORD PTR b$2[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv140[rsp]
; Line 362
	jmp	$LN4@stbiw__wri
$LN9@stbiw__wri:
; Line 363
	xor	eax, eax
	test	eax, eax
	je	SHORT $LN16@stbiw__wri
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv147[rsp], eax
	jmp	SHORT $LN17@stbiw__wri
$LN16@stbiw__wri:
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 8
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rax-8]
	mov	DWORD PTR tv147[rsp], eax
$LN17@stbiw__wri:
	mov	eax, DWORD PTR tv147[rsp]
	mov	DWORD PTR x$3[rsp], eax
; Line 365
	mov	eax, DWORD PTR x$3[rsp]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 366
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 367
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 368
	mov	eax, DWORD PTR x$3[rsp]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR b$4[rsp+rcx], al
; Line 369
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv173[rsp], rax
	mov	r8d, 4
	lea	rdx, QWORD PTR b$4[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv173[rsp]
; Line 370
	jmp	SHORT $LN4@stbiw__wri
$LN10@stbiw__wri:
; Line 372
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN18@stbiw__wri
	mov	r8d, 372				; 00000174H
	lea	rdx, OFFSET FLAT:$SG151927
	lea	rcx, OFFSET FLAT:$SG151928
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@stbiw__wri:
; Line 373
	jmp	SHORT $LN1@stbiw__wri
$LN4@stbiw__wri:
; Line 375
	jmp	$LN2@stbiw__wri
$LN3@stbiw__wri:
$LN1@stbiw__wri:
; Line 376
	add	rsp, 104				; 00000068H
	ret	0
?stbiw__writefv@@YAXPEAUstbi__write_context@@PEBDPEAD@Z ENDP ; stbiw__writefv
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z PROC ; stbi__end_write_file
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 340
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 341
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_fclose
; Line 342
	add	rsp, 40					; 00000028H
	ret	0
?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ENDP ; stbi__end_write_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
f$ = 40
s$ = 64
filename$ = 72
?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z PROC ; stbi__start_write_file
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 333
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 334
	lea	rdx, OFFSET FLAT:$SG151862
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 335
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__stdio_write@@YAXPEAX0H@Z ; stbi__stdio_write
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 336
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN3@stbi__star
	mov	DWORD PTR tv71[rsp], 1
	jmp	SHORT $LN4@stbi__star
$LN3@stbi__star:
	mov	DWORD PTR tv71[rsp], 0
$LN4@stbi__star:
	mov	eax, DWORD PTR tv71[rsp]
; Line 337
	add	rsp, 56					; 00000038H
	ret	0
?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ENDP ; stbi__start_write_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z PROC		; stbiw__fopen
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 305
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 324
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fopen_s
	test	eax, eax
	je	SHORT $LN2@stbiw__fop
; Line 325
	mov	QWORD PTR f$[rsp], 0
$LN2@stbiw__fop:
; Line 329
	mov	rax, QWORD PTR f$[rsp]
; Line 330
	add	rsp, 56					; 00000038H
	ret	0
?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z ENDP		; stbiw__fopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
context$ = 48
data$ = 56
size$ = 64
?stbi__stdio_write@@YAXPEAX0H@Z PROC			; stbi__stdio_write
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 285
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 286
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR context$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 287
	add	rsp, 40					; 00000028H
	ret	0
?stbi__stdio_write@@YAXPEAX0H@Z ENDP			; stbi__stdio_write
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
c$ = 16
context$ = 24
?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z PROC ; stbi__start_write_callbacks
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 277
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 278
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 279
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 280
	ret	0
?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ENDP ; stbi__start_write_callbacks
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag$ = 8
stbi_flip_vertically_on_write PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 263
	mov	DWORD PTR [rsp+8], ecx
; Line 264
	mov	eax, DWORD PTR flag$[rsp]
	mov	DWORD PTR ?stbi__flip_vertically_on_write@@3HA, eax
; Line 265
	ret	0
stbi_flip_vertically_on_write ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
quality$ = 224
stbi_write_jpg_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1608
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1609
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1610
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 1611
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ; stbi_write_jpg_core
; Line 1612
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_jpg_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_hdr_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 788
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 789
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 790
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 791
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ; stbi_write_hdr_core
; Line 792
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_hdr_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_tga_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 612
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 613
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 614
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 615
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ; stbi_write_tga_core
; Line 616
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_tga_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 144
func$ = 176
context$ = 184
x$ = 192
y$ = 200
comp$ = 208
data$ = 216
stbi_write_bmp_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 513
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 160				; 000000a0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 514
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 515
	mov	r8, QWORD PTR context$[rsp]
	mov	rdx, QWORD PTR func$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_callbacks@@YAXPEAUstbi__write_context@@P6AXPEAX1H@Z1@Z ; stbi__start_write_callbacks
; Line 516
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ; stbi_write_bmp_core
; Line 517
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 160				; 000000a0H
	pop	rdi
	ret	0
stbi_write_bmp_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
png$ = 56
tv76 = 64
func$ = 96
context$ = 104
x$ = 112
y$ = 120
comp$ = 128
data$ = 136
stride_bytes$ = 144
stbi_write_png_to_func PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1232
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1234
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1235
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN2@stbi_write:
; Line 1236
	mov	rax, QWORD PTR func$[rsp]
	mov	QWORD PTR tv76[rsp], rax
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR png$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	call	QWORD PTR tv76[rsp]
; Line 1237
	mov	rcx, QWORD PTR png$[rsp]
	call	QWORD PTR __imp_free
; Line 1238
	mov	eax, 1
$LN1@stbi_write:
; Line 1239
	add	rsp, 88					; 00000058H
	ret	0
stbi_write_png_to_func ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
quality$ = 232
stbi_write_jpg PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1617
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1618
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 1619
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 1620
	mov	eax, DWORD PTR quality$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_jpg_core@@YAHPEAUstbi__write_context@@HHHPEBXH@Z ; stbi_write_jpg_core
	mov	DWORD PTR r$1[rsp], eax
; Line 1621
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 1622
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 1623
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 1624
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 1625
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_jpg ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_hdr PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 795
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 796
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 797
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 798
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_hdr_core@@YAHPEAUstbi__write_context@@HHHPEAM@Z ; stbi_write_hdr_core
	mov	DWORD PTR r$1[rsp], eax
; Line 799
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 800
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 801
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 802
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 803
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_tga PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 620
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 621
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 622
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 623
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_tga_core@@YAHPEAUstbi__write_context@@HHHPEAX@Z ; stbi_write_tga_core
	mov	DWORD PTR r$1[rsp], eax
; Line 624
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 625
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 626
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 627
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 628
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_tga ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 48
s$ = 64
__$ArrayPad$ = 160
filename$ = 192
x$ = 200
y$ = 208
comp$ = 216
data$ = 224
stbi_write_bmp PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 521
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 522
	lea	rax, QWORD PTR s$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 88					; 00000058H
	rep stosb
; Line 523
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_write_file@@YAHPEAUstbi__write_context@@PEBD@Z ; stbi__start_write_file
	test	eax, eax
	je	SHORT $LN2@stbi_write
; Line 524
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi_write_bmp_core@@YAHPEAUstbi__write_context@@HHHPEBX@Z ; stbi_write_bmp_core
	mov	DWORD PTR r$1[rsp], eax
; Line 525
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__end_write_file@@YAXPEAUstbi__write_context@@@Z ; stbi__end_write_file
; Line 526
	mov	eax, DWORD PTR r$1[rsp]
	jmp	SHORT $LN1@stbi_write
; Line 527
	jmp	SHORT $LN3@stbi_write
$LN2@stbi_write:
; Line 528
	xor	eax, eax
$LN3@stbi_write:
$LN1@stbi_write:
; Line 529
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
stbi_write_bmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
len$ = 48
png$ = 56
f$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
data$ = 128
stride_bytes$ = 136
stbi_write_png PROC
; File W:\cpp\void\vendor\stb\stb_image_write.h
; Line 1216
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1219
	lea	rax, QWORD PTR len$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	mov	edx, DWORD PTR stride_bytes$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	stbi_write_png_to_mem
	mov	QWORD PTR png$[rsp], rax
; Line 1220
	cmp	QWORD PTR png$[rsp], 0
	jne	SHORT $LN2@stbi_write
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN2@stbi_write:
; Line 1222
	lea	rdx, OFFSET FLAT:$SG152758
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbiw__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbiw__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1223
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN3@stbi_write
	mov	rcx, QWORD PTR png$[rsp]
	call	QWORD PTR __imp_free
	xor	eax, eax
	jmp	SHORT $LN1@stbi_write
$LN3@stbi_write:
; Line 1224
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r9, QWORD PTR f$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR png$[rsp]
	call	QWORD PTR __imp_fwrite
; Line 1225
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 1226
	mov	rcx, QWORD PTR png$[rsp]
	call	QWORD PTR __imp_free
; Line 1227
	mov	eax, 1
$LN1@stbi_write:
; Line 1228
	add	rsp, 88					; 00000058H
	ret	0
stbi_write_png ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__is_16_main@@YAHPEAUstbi__context@@@Z PROC	; stbi__is_16_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7584
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7586
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_is16@@YAHPEAUstbi__context@@@Z ; stbi__png_is16
	test	eax, eax
	je	SHORT $LN2@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN2@stbi__is_1:
; Line 7590
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_is16@@YAHPEAUstbi__context@@@Z ; stbi__psd_is16
	test	eax, eax
	je	SHORT $LN3@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN3@stbi__is_1:
; Line 7594
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z ; stbi__pnm_is16
	test	eax, eax
	je	SHORT $LN4@stbi__is_1
	mov	eax, 1
	jmp	SHORT $LN1@stbi__is_1
$LN4@stbi__is_1:
; Line 7596
	xor	eax, eax
$LN1@stbi__is_1:
; Line 7597
	add	rsp, 40					; 00000028H
	ret	0
?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ENDP	; stbi__is_16_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__info_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7542
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7544
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__jpeg_info
	test	eax, eax
	je	SHORT $LN2@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN2@stbi__info:
; Line 7548
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__png_info
	test	eax, eax
	je	SHORT $LN3@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN3@stbi__info:
; Line 7552
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__gif_info
	test	eax, eax
	je	SHORT $LN4@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN4@stbi__info:
; Line 7556
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__bmp_info
	test	eax, eax
	je	SHORT $LN5@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN5@stbi__info:
; Line 7560
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__psd_info
	test	eax, eax
	je	SHORT $LN6@stbi__info
	mov	eax, 1
	jmp	$LN1@stbi__info
$LN6@stbi__info:
; Line 7564
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pic_info
	test	eax, eax
	je	SHORT $LN7@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN7@stbi__info:
; Line 7568
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	test	eax, eax
	je	SHORT $LN8@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN8@stbi__info:
; Line 7572
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__hdr_info
	test	eax, eax
	je	SHORT $LN9@stbi__info
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN9@stbi__info:
; Line 7577
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__tga_info
	test	eax, eax
	je	SHORT $LN10@stbi__info
; Line 7578
	mov	eax, 1
	jmp	SHORT $LN1@stbi__info
$LN10@stbi__info:
; Line 7580
	lea	rcx, OFFSET FLAT:$SG151667
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
$LN1@stbi__info:
; Line 7581
	add	rsp, 40					; 00000028H
	ret	0
?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__info_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
value$ = 32
s$ = 64
c$ = 72
?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z PROC ; stbi__pnm_getinteger
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7483
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7484
	mov	DWORD PTR value$[rsp], 0
$LN2@stbi__pnm_:
; Line 7486
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	?stbi__pnm_isdigit@@YAHD@Z		; stbi__pnm_isdigit
	test	eax, eax
	je	SHORT $LN3@stbi__pnm_
; Line 7487
	imul	eax, DWORD PTR value$[rsp], 10
	mov	rcx, QWORD PTR c$[rsp]
	movsx	ecx, BYTE PTR [rcx]
	lea	eax, DWORD PTR [rax+rcx-48]
	mov	DWORD PTR value$[rsp], eax
; Line 7488
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
; Line 7489
	jmp	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7491
	mov	eax, DWORD PTR value$[rsp]
; Line 7492
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ENDP ; stbi__pnm_getinteger
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 0
c$ = 32
?stbi__pnm_isdigit@@YAHD@Z PROC				; stbi__pnm_isdigit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7478
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7479
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv68[rsp]
; Line 7480
	add	rsp, 24
	ret	0
?stbi__pnm_isdigit@@YAHD@Z ENDP				; stbi__pnm_isdigit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
c$ = 56
?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z PROC ; stbi__pnm_skip_whitespace
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7464
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
$LN2@stbi__pnm_:
$LN5@stbi__pnm_:
; Line 7466
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movzx	ecx, BYTE PTR [rax]
	call	?stbi__pnm_isspace@@YAHD@Z		; stbi__pnm_isspace
	test	eax, eax
	je	SHORT $LN6@stbi__pnm_
; Line 7467
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7469
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN10@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 35					; 00000023H
	je	SHORT $LN9@stbi__pnm_
$LN10@stbi__pnm_:
; Line 7470
	jmp	SHORT $LN3@stbi__pnm_
$LN9@stbi__pnm_:
$LN7@stbi__pnm_:
; Line 7472
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 10
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR c$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 13
	je	SHORT $LN8@stbi__pnm_
; Line 7473
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR c$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN7@stbi__pnm_
$LN8@stbi__pnm_:
; Line 7474
	jmp	$LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7475
	add	rsp, 40					; 00000028H
	ret	0
?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ENDP ; stbi__pnm_skip_whitespace
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 0
c$ = 32
?stbi__pnm_isspace@@YAHD@Z PROC				; stbi__pnm_isspace
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7459
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 7460
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 9
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 11
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 12
	je	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 13
	je	SHORT $LN3@stbi__pnm_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN4@stbi__pnm_
$LN3@stbi__pnm_:
	mov	DWORD PTR tv76[rsp], 1
$LN4@stbi__pnm_:
	mov	eax, DWORD PTR tv76[rsp]
; Line 7461
	add	rsp, 24
	ret	0
?stbi__pnm_isspace@@YAHD@Z ENDP				; stbi__pnm_isspace
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f1$1 = 32
tv152 = 36
output$ = 64
input$ = 72
req_comp$ = 80
?stbi__hdr_convert@@YAXPEAMPEAEH@Z PROC			; stbi__hdr_convert
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7054
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7055
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN4@stbi__hdr_
; Line 7058
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 136				; 00000088H
	mov	edx, eax
	vmovsd	xmm0, QWORD PTR __real@3ff0000000000000
	call	QWORD PTR __imp_ldexp
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR f1$1[rsp], xmm0
; Line 7059
	cmp	DWORD PTR req_comp$[rsp], 2
	jg	SHORT $LN6@stbi__hdr_
; Line 7060
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR f1$1[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40400000
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
	jmp	$LN7@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7062
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 7063
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 7064
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR f1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
$LN7@stbi__hdr_:
; Line 7066
	cmp	DWORD PTR req_comp$[rsp], 2
	jne	SHORT $LN8@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rcx+rax], xmm0
$LN8@stbi__hdr_:
; Line 7067
	cmp	DWORD PTR req_comp$[rsp], 4
	jne	SHORT $LN9@stbi__hdr_
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rcx+rax], xmm0
$LN9@stbi__hdr_:
; Line 7068
	jmp	$LN5@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7069
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv152[rsp], eax
	cmp	DWORD PTR tv152[rsp], 1
	je	$LN13@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 2
	je	SHORT $LN12@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 3
	je	SHORT $LN11@stbi__hdr_
	cmp	DWORD PTR tv152[rsp], 4
	je	SHORT $LN10@stbi__hdr_
	jmp	$LN2@stbi__hdr_
$LN10@stbi__hdr_:
; Line 7070
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rcx+rax], xmm0
$LN11@stbi__hdr_:
; Line 7071
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR output$[rsp]
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rcx+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 7072
	jmp	SHORT $LN2@stbi__hdr_
$LN12@stbi__hdr_:
; Line 7073
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rcx+rax], xmm0
$LN13@stbi__hdr_:
; Line 7074
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR output$[rsp]
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rcx+rax], xmm0
$LN2@stbi__hdr_:
$LN5@stbi__hdr_:
; Line 7078
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_convert@@YAXPEAMPEAEH@Z ENDP			; stbi__hdr_convert
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
len$ = 36
z$ = 64
buffer$ = 72
?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z PROC ; stbi__hdr_gettoken
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7032
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7033
	mov	DWORD PTR len$[rsp], 0
; Line 7034
	mov	BYTE PTR c$[rsp], 0
; Line 7036
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
$LN2@stbi__hdr_:
; Line 7038
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN3@stbi__hdr_
	movsx	eax, BYTE PTR c$[rsp]
	cmp	eax, 10
	je	SHORT $LN3@stbi__hdr_
; Line 7039
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	movzx	edx, BYTE PTR c$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 7040
	cmp	DWORD PTR len$[rsp], 1023		; 000003ffH
	jne	SHORT $LN6@stbi__hdr_
$LN4@stbi__hdr_:
; Line 7042
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN5@stbi__hdr_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 10
	je	SHORT $LN5@stbi__hdr_
; Line 7043
	jmp	SHORT $LN4@stbi__hdr_
$LN5@stbi__hdr_:
; Line 7044
	jmp	SHORT $LN3@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7046
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7047
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7049
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	BYTE PTR [rcx+rax], 0
; Line 7050
	mov	rax, QWORD PTR buffer$[rsp]
; Line 7051
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ENDP ; stbi__hdr_gettoken
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
signature$ = 72
?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z PROC	; stbi__hdr_test_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7010
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR signature$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@stbi__hdr_
; Line 7013
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR signature$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__hdr_
; Line 7014
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN5@stbi__hdr_:
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7015
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7016
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7017
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ENDP	; stbi__hdr_test_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 32
g$ = 64
out$ = 72
delays$ = 80
?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z PROC ; stbi__load_gif_main_outofmem
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6875
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6876
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
; Line 6877
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
; Line 6878
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_free
; Line 6880
	cmp	QWORD PTR out$[rsp], 0
	je	SHORT $LN2@stbi__load
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
$LN2@stbi__load:
; Line 6881
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
$LN3@stbi__load:
; Line 6882
	lea	rcx, OFFSET FLAT:$SG151193
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
	mov	DWORD PTR tv78[rsp], 0
$LN6@stbi__load:
	movsxd	rax, DWORD PTR tv78[rsp]
; Line 6883
	add	rsp, 56					; 00000038H
	ret	0
?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ENDP ; stbi__load_gif_main_outofmem
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pi$ = 32
pcount$ = 36
len$1 = 40
dispose$ = 44
tv234 = 48
w$2 = 52
tv83 = 56
tv143 = 60
tv252 = 64
x$3 = 68
y$4 = 72
h$5 = 76
tv299 = 80
tv318 = 84
first_frame$ = 88
tv413 = 92
tag$6 = 96
tv582 = 100
ext$7 = 104
o$8 = 112
s$ = 144
g$ = 152
comp$ = 160
req_comp$ = 168
two_back$ = 176
?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z PROC ; stbi__gif_load_next
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6701
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 6709
	mov	DWORD PTR first_frame$[rsp], 0
; Line 6710
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	$LN18@stbi__gif_
; Line 6711
	xor	r9d, r9d
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ; stbi__gif_header
	test	eax, eax
	jne	SHORT $LN20@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN20@stbi__gif_:
; Line 6712
	xor	r9d, r9d
	mov	rax, QWORD PTR g$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR g$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, 4
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN21@stbi__gif_
; Line 6713
	lea	rcx, OFFSET FLAT:$SG151147
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN55@stbi__gif_
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN56@stbi__gif_
$LN55@stbi__gif_:
	mov	DWORD PTR tv83[rsp], 0
$LN56@stbi__gif_:
	movsxd	rax, DWORD PTR tv83[rsp]
	jmp	$LN1@stbi__gif_
$LN21@stbi__gif_:
; Line 6714
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6715
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+8], rax
; Line 6716
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 6717
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 6718
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN23@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN22@stbi__gif_
$LN23@stbi__gif_:
; Line 6719
	lea	rcx, OFFSET FLAT:$SG151150
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN57@stbi__gif_
	mov	DWORD PTR tv143[rsp], 0
	jmp	SHORT $LN58@stbi__gif_
$LN57@stbi__gif_:
	mov	DWORD PTR tv143[rsp], 0
$LN58@stbi__gif_:
	movsxd	rax, DWORD PTR tv143[rsp]
	jmp	$LN1@stbi__gif_
$LN22@stbi__gif_:
; Line 6724
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memset
; Line 6725
	mov	eax, DWORD PTR pcount$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memset
; Line 6726
	movsxd	rax, DWORD PTR pcount$[rsp]
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
; Line 6727
	mov	DWORD PTR first_frame$[rsp], 1
; Line 6728
	jmp	$LN19@stbi__gif_
$LN18@stbi__gif_:
; Line 6730
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 28
	sar	eax, 2
	mov	DWORD PTR dispose$[rsp], eax
; Line 6731
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6733
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN24@stbi__gif_
	cmp	QWORD PTR two_back$[rsp], 0
	jne	SHORT $LN24@stbi__gif_
; Line 6734
	mov	DWORD PTR dispose$[rsp], 2
$LN24@stbi__gif_:
; Line 6737
	cmp	DWORD PTR dispose$[rsp], 3
	jne	SHORT $LN25@stbi__gif_
; Line 6738
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN3@stbi__gif_
; Line 6739
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN27@stbi__gif_
; Line 6740
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR two_back$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN27@stbi__gif_:
; Line 6742
	jmp	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6743
	jmp	$LN26@stbi__gif_
$LN25@stbi__gif_:
	cmp	DWORD PTR dispose$[rsp], 2
	jne	SHORT $LN28@stbi__gif_
; Line 6745
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN5@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN7@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	SHORT $LN6@stbi__gif_
; Line 6746
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN30@stbi__gif_
; Line 6747
	mov	eax, DWORD PTR pi$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN30@stbi__gif_:
; Line 6749
	jmp	SHORT $LN5@stbi__gif_
$LN6@stbi__gif_:
$LN28@stbi__gif_:
$LN26@stbi__gif_:
; Line 6758
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	mov	rax, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	memcpy
$LN19@stbi__gif_:
; Line 6762
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memset
$LN8@stbi__gif_:
; Line 6765
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tag$6[rsp], eax
; Line 6766
	mov	eax, DWORD PTR tag$6[rsp]
	mov	DWORD PTR tv234[rsp], eax
	cmp	DWORD PTR tv234[rsp], 33		; 00000021H
	je	$LN44@stbi__gif_
	cmp	DWORD PTR tv234[rsp], 44		; 0000002cH
	je	SHORT $LN31@stbi__gif_
	cmp	DWORD PTR tv234[rsp], 59		; 0000003bH
	je	$LN52@stbi__gif_
	jmp	$LN53@stbi__gif_
$LN31@stbi__gif_:
; Line 6772
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR x$3[rsp], eax
; Line 6773
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR y$4[rsp], eax
; Line 6774
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR w$2[rsp], eax
; Line 6775
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR h$5[rsp], eax
; Line 6776
	mov	eax, DWORD PTR w$2[rsp]
	mov	ecx, DWORD PTR x$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jg	SHORT $LN33@stbi__gif_
	mov	eax, DWORD PTR h$5[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN32@stbi__gif_
$LN33@stbi__gif_:
; Line 6777
	lea	rcx, OFFSET FLAT:$SG151161
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN59@stbi__gif_
	mov	DWORD PTR tv252[rsp], 0
	jmp	SHORT $LN60@stbi__gif_
$LN59@stbi__gif_:
	mov	DWORD PTR tv252[rsp], 0
$LN60@stbi__gif_:
	movsxd	rax, DWORD PTR tv252[rsp]
	jmp	$LN1@stbi__gif_
$LN32@stbi__gif_:
; Line 6779
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34916], eax
; Line 6780
	mov	eax, DWORD PTR x$3[rsp]
	shl	eax, 2
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34892], eax
; Line 6781
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR y$4[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34896], eax
; Line 6782
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34892]
	mov	ecx, DWORD PTR w$2[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34900], eax
; Line 6783
	mov	rax, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR h$5[rsp]
	imul	ecx, DWORD PTR [rax+34916]
	mov	eax, ecx
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34904], eax
; Line 6784
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6785
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34896]
	mov	DWORD PTR [rax+34912], ecx
; Line 6791
	cmp	DWORD PTR w$2[rsp], 0
	jne	SHORT $LN34@stbi__gif_
; Line 6792
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	mov	DWORD PTR [rax+34912], ecx
$LN34@stbi__gif_:
; Line 6794
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34888], eax
; Line 6796
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN35@stbi__gif_
; Line 6797
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34916]
	shl	eax, 3
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6798
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 3
; Line 6799
	jmp	SHORT $LN36@stbi__gif_
$LN35@stbi__gif_:
; Line 6800
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34916]
	mov	DWORD PTR [rax+34884], ecx
; Line 6801
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+34880], 0
$LN36@stbi__gif_:
; Line 6804
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN37@stbi__gif_
; Line 6805
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN61@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+44]
	mov	DWORD PTR tv299[rsp], eax
	jmp	SHORT $LN62@stbi__gif_
$LN61@stbi__gif_:
	mov	DWORD PTR tv299[rsp], -1
$LN62@stbi__gif_:
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34888]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv582[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv582[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 1076				; 00000434H
	mov	r9d, DWORD PTR tv299[rsp]
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ; stbi__gif_parse_colortable
; Line 6806
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 1076				; 00000434H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
	jmp	SHORT $LN38@stbi__gif_
$LN37@stbi__gif_:
; Line 6807
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN39@stbi__gif_
; Line 6808
	mov	rax, QWORD PTR g$[rsp]
	add	rax, 52					; 00000034H
	mov	rcx, QWORD PTR g$[rsp]
	mov	QWORD PTR [rcx+34872], rax
; Line 6809
	jmp	SHORT $LN40@stbi__gif_
$LN39@stbi__gif_:
; Line 6810
	lea	rcx, OFFSET FLAT:$SG151169
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN63@stbi__gif_
	mov	DWORD PTR tv318[rsp], 0
	jmp	SHORT $LN64@stbi__gif_
$LN63@stbi__gif_:
	mov	DWORD PTR tv318[rsp], 0
$LN64@stbi__gif_:
	movsxd	rax, DWORD PTR tv318[rsp]
	jmp	$LN1@stbi__gif_
$LN40@stbi__gif_:
$LN38@stbi__gif_:
; Line 6812
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z ; stbi__process_gif_raster
	mov	QWORD PTR o$8[rsp], rax
; Line 6813
	cmp	QWORD PTR o$8[rsp], 0
	jne	SHORT $LN41@stbi__gif_
	xor	eax, eax
	jmp	$LN1@stbi__gif_
$LN41@stbi__gif_:
; Line 6816
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pcount$[rsp], eax
; Line 6817
	cmp	DWORD PTR first_frame$[rsp], 0
	je	$LN42@stbi__gif_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+36], 0
	jle	$LN42@stbi__gif_
; Line 6819
	mov	DWORD PTR pi$[rsp], 0
	jmp	SHORT $LN15@stbi__gif_
$LN13@stbi__gif_:
	mov	eax, DWORD PTR pi$[rsp]
	inc	eax
	mov	DWORD PTR pi$[rsp], eax
$LN15@stbi__gif_:
	mov	eax, DWORD PTR pcount$[rsp]
	cmp	DWORD PTR pi$[rsp], eax
	jge	$LN14@stbi__gif_
; Line 6820
	movsxd	rax, DWORD PTR pi$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN43@stbi__gif_
; Line 6821
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 6822
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, DWORD PTR pi$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR g$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, 4
	mov	rdx, rax
	call	memcpy
$LN43@stbi__gif_:
; Line 6824
	jmp	$LN13@stbi__gif_
$LN14@stbi__gif_:
$LN42@stbi__gif_:
; Line 6827
	mov	rax, QWORD PTR o$8[rsp]
	jmp	$LN1@stbi__gif_
$LN44@stbi__gif_:
; Line 6833
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR ext$7[rsp], eax
; Line 6834
	cmp	DWORD PTR ext$7[rsp], 249		; 000000f9H
	jne	$LN45@stbi__gif_
; Line 6835
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
; Line 6836
	cmp	DWORD PTR len$1[rsp], 4
	jne	$LN46@stbi__gif_
; Line 6837
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 6838
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	imul	eax, eax, 10
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34920], eax
; Line 6841
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN48@stbi__gif_
; Line 6842
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
$LN48@stbi__gif_:
; Line 6844
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+48]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN49@stbi__gif_
; Line 6845
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 6846
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jl	SHORT $LN51@stbi__gif_
; Line 6847
	mov	rax, QWORD PTR g$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+52]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 0
$LN51@stbi__gif_:
; Line 6849
	jmp	SHORT $LN50@stbi__gif_
$LN49@stbi__gif_:
; Line 6851
	mov	edx, 1
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6852
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
$LN50@stbi__gif_:
; Line 6854
	jmp	SHORT $LN47@stbi__gif_
$LN46@stbi__gif_:
; Line 6855
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6856
	jmp	SHORT $LN11@stbi__gif_
$LN47@stbi__gif_:
$LN45@stbi__gif_:
$LN16@stbi__gif_:
; Line 6859
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$1[rsp], eax
	cmp	DWORD PTR len$1[rsp], 0
	je	SHORT $LN17@stbi__gif_
; Line 6860
	mov	edx, DWORD PTR len$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6861
	jmp	SHORT $LN16@stbi__gif_
$LN17@stbi__gif_:
; Line 6862
	jmp	SHORT $LN11@stbi__gif_
$LN52@stbi__gif_:
; Line 6866
	mov	rax, QWORD PTR s$[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN53@stbi__gif_:
; Line 6869
	lea	rcx, OFFSET FLAT:$SG151183
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN65@stbi__gif_
	mov	DWORD PTR tv413[rsp], 0
	jmp	SHORT $LN66@stbi__gif_
$LN65@stbi__gif_:
	mov	DWORD PTR tv413[rsp], 0
$LN66@stbi__gif_:
	movsxd	rax, DWORD PTR tv413[rsp]
	jmp	SHORT $LN1@stbi__gif_
$LN11@stbi__gif_:
; Line 6871
	jmp	$LN8@stbi__gif_
$LN1@stbi__gif_:
; Line 6872
	add	rsp, 136				; 00000088H
	ret	0
?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ENDP ; stbi__gif_load_next
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
lzw_cs$ = 32
tv194 = 33
avail$ = 36
len$ = 40
codesize$ = 44
init_code$ = 48
code$1 = 52
valid_bits$ = 56
bits$ = 60
clear$ = 64
oldcode$ = 68
codemask$ = 72
first$ = 76
tv163 = 80
tv177 = 84
tv199 = 88
tv212 = 92
p$ = 96
tv244 = 104
tv248 = 108
tv275 = 112
tv302 = 116
tv172 = 120
s$ = 144
g$ = 152
?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z PROC ; stbi__process_gif_raster
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6614
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 6621
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR lzw_cs$[rsp], al
; Line 6622
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	cmp	eax, 12
	jle	SHORT $LN10@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 6623
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv244[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv244[rsp]
	shl	eax, cl
	mov	DWORD PTR clear$[rsp], eax
; Line 6624
	mov	DWORD PTR first$[rsp], 1
; Line 6625
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6626
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv248[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv248[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6627
	mov	DWORD PTR bits$[rsp], 0
; Line 6628
	mov	DWORD PTR valid_bits$[rsp], 0
; Line 6629
	mov	DWORD PTR init_code$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR init_code$[rsp]
	inc	eax
	mov	DWORD PTR init_code$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR init_code$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 6630
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	ecx, -1
	mov	rdx, QWORD PTR g$[rsp]
	mov	WORD PTR [rdx+rax*4+2100], cx
; Line 6631
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2102], dl
; Line 6632
	movsxd	rax, DWORD PTR init_code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, BYTE PTR init_code$[rsp]
	mov	BYTE PTR [rcx+rax*4+2103], dl
; Line 6633
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 6636
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6637
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6639
	mov	DWORD PTR len$[rsp], 0
$LN5@stbi__proc:
; Line 6641
	mov	eax, DWORD PTR codesize$[rsp]
	cmp	DWORD PTR valid_bits$[rsp], eax
	jge	SHORT $LN11@stbi__proc
; Line 6642
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN13@stbi__proc
; Line 6643
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6644
	cmp	DWORD PTR len$[rsp], 0
	jne	SHORT $LN14@stbi__proc
; Line 6645
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
$LN13@stbi__proc:
; Line 6647
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6648
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR valid_bits$[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR bits$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR bits$[rsp], eax
; Line 6649
	mov	eax, DWORD PTR valid_bits$[rsp]
	add	eax, 8
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6650
	jmp	$LN12@stbi__proc
$LN11@stbi__proc:
; Line 6651
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR bits$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$1[rsp], eax
; Line 6652
	mov	eax, DWORD PTR codesize$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR bits$[rsp]
	sar	eax, cl
	mov	DWORD PTR bits$[rsp], eax
; Line 6653
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, DWORD PTR valid_bits$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR valid_bits$[rsp], eax
; Line 6655
	mov	eax, DWORD PTR clear$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN15@stbi__proc
; Line 6656
	movzx	eax, BYTE PTR lzw_cs$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6657
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv275[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv275[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
; Line 6658
	mov	eax, DWORD PTR clear$[rsp]
	add	eax, 2
	mov	DWORD PTR avail$[rsp], eax
; Line 6659
	mov	DWORD PTR oldcode$[rsp], -1
; Line 6660
	mov	DWORD PTR first$[rsp], 0
	jmp	$LN16@stbi__proc
$LN15@stbi__proc:
; Line 6661
	mov	eax, DWORD PTR clear$[rsp]
	inc	eax
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN17@stbi__proc
; Line 6662
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN8@stbi__proc:
; Line 6663
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
	cmp	DWORD PTR len$[rsp], 0
	jle	SHORT $LN9@stbi__proc
; Line 6664
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
	jmp	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
; Line 6665
	mov	rax, QWORD PTR g$[rsp]
	mov	rax, QWORD PTR [rax+8]
	jmp	$LN1@stbi__proc
	jmp	$LN18@stbi__proc
$LN17@stbi__proc:
; Line 6666
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jg	$LN19@stbi__proc
; Line 6667
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN21@stbi__proc
; Line 6668
	lea	rcx, OFFSET FLAT:$SG151082
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN28@stbi__proc
	mov	DWORD PTR tv163[rsp], 0
	jmp	SHORT $LN29@stbi__proc
$LN28@stbi__proc:
	mov	DWORD PTR tv163[rsp], 0
$LN29@stbi__proc:
	movsxd	rax, DWORD PTR tv163[rsp]
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 6671
	cmp	DWORD PTR oldcode$[rsp], 0
	jl	$LN22@stbi__proc
; Line 6672
	movsxd	rax, DWORD PTR avail$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4+2100]
	mov	QWORD PTR tv172[rsp], rax
	mov	eax, DWORD PTR avail$[rsp]
	inc	eax
	mov	DWORD PTR avail$[rsp], eax
	mov	rax, QWORD PTR tv172[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 6673
	cmp	DWORD PTR avail$[rsp], 8192		; 00002000H
	jle	SHORT $LN24@stbi__proc
; Line 6674
	lea	rcx, OFFSET FLAT:$SG151086
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN30@stbi__proc
	mov	DWORD PTR tv177[rsp], 0
	jmp	SHORT $LN31@stbi__proc
$LN30@stbi__proc:
	mov	DWORD PTR tv177[rsp], 0
$LN31@stbi__proc:
	movsxd	rax, DWORD PTR tv177[rsp]
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 6677
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, WORD PTR oldcode$[rsp]
	mov	WORD PTR [rax], cx
; Line 6678
	movsxd	rax, DWORD PTR oldcode$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rdx+rax*4+2102]
	mov	BYTE PTR [rcx+2], al
; Line 6679
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN32@stbi__proc
	mov	rax, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	BYTE PTR tv194[rsp], al
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
	movsxd	rax, DWORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2102]
	mov	BYTE PTR tv194[rsp], al
$LN33@stbi__proc:
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR tv194[rsp]
	mov	BYTE PTR [rax+3], cl
	jmp	SHORT $LN23@stbi__proc
$LN22@stbi__proc:
; Line 6680
	mov	eax, DWORD PTR avail$[rsp]
	cmp	DWORD PTR code$1[rsp], eax
	jne	SHORT $LN25@stbi__proc
; Line 6681
	lea	rcx, OFFSET FLAT:$SG151088
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__proc
	mov	DWORD PTR tv199[rsp], 0
	jmp	SHORT $LN35@stbi__proc
$LN34@stbi__proc:
	mov	DWORD PTR tv199[rsp], 0
$LN35@stbi__proc:
	movsxd	rax, DWORD PTR tv199[rsp]
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
$LN23@stbi__proc:
; Line 6683
	movzx	edx, WORD PTR code$1[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	call	?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ; stbi__out_gif_code
; Line 6685
	mov	eax, DWORD PTR codemask$[rsp]
	mov	ecx, DWORD PTR avail$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	jne	SHORT $LN26@stbi__proc
	cmp	DWORD PTR avail$[rsp], 4095		; 00000fffH
	jg	SHORT $LN26@stbi__proc
; Line 6686
	mov	eax, DWORD PTR codesize$[rsp]
	inc	eax
	mov	DWORD PTR codesize$[rsp], eax
; Line 6687
	mov	eax, DWORD PTR codesize$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv302[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv302[rsp]
	shl	eax, cl
	dec	eax
	mov	DWORD PTR codemask$[rsp], eax
$LN26@stbi__proc:
; Line 6690
	mov	eax, DWORD PTR code$1[rsp]
	mov	DWORD PTR oldcode$[rsp], eax
; Line 6691
	jmp	SHORT $LN20@stbi__proc
$LN19@stbi__proc:
; Line 6692
	lea	rcx, OFFSET FLAT:$SG151090
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN37@stbi__proc
$LN36@stbi__proc:
	mov	DWORD PTR tv212[rsp], 0
$LN37@stbi__proc:
	movsxd	rax, DWORD PTR tv212[rsp]
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
$LN18@stbi__proc:
$LN16@stbi__proc:
$LN12@stbi__proc:
; Line 6695
	jmp	$LN5@stbi__proc
$LN1@stbi__proc:
; Line 6696
	add	rsp, 136				; 00000088H
	ret	0
?stbi__process_gif_raster@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@@Z ENDP ; stbi__process_gif_raster
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
idx$ = 32
tv256 = 36
c$ = 40
p$ = 48
g$ = 80
code$ = 88
?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z PROC		; stbi__out_gif_code
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6577
	mov	WORD PTR [rsp+16], dx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 6583
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movsx	eax, WORD PTR [rcx+rax*4+2100]
	test	eax, eax
	jl	SHORT $LN4@stbi__out_
; Line 6584
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	edx, WORD PTR [rcx+rax*4+2100]
	mov	rcx, QWORD PTR g$[rsp]
	call	?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ; stbi__out_gif_code
$LN4@stbi__out_:
; Line 6586
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	SHORT $LN5@stbi__out_
	jmp	$LN1@stbi__out_
$LN5@stbi__out_:
; Line 6588
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34912]
	mov	DWORD PTR idx$[rsp], eax
; Line 6589
	movsxd	rax, DWORD PTR idx$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 6590
	mov	eax, DWORD PTR idx$[rsp]
	cdq
	and	edx, 3
	add	eax, edx
	sar	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	mov	BYTE PTR [rcx+rax], 1
; Line 6592
	movzx	eax, WORD PTR code$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	movzx	eax, BYTE PTR [rcx+rax*4+2103]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR [rcx+34872]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR c$[rsp], rax
; Line 6593
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 128				; 00000080H
	jle	$LN6@stbi__out_
; Line 6594
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6595
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6596
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 6597
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR c$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN6@stbi__out_:
; Line 6599
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34908]
	add	eax, 4
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34908], eax
; Line 6601
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34900]
	cmp	DWORD PTR [rax+34908], ecx
	jl	$LN7@stbi__out_
; Line 6602
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34892]
	mov	DWORD PTR [rax+34908], ecx
; Line 6603
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34912]
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34884]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
$LN2@stbi__out_:
; Line 6605
	mov	rax, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+34904]
	cmp	DWORD PTR [rax+34912], ecx
	jl	$LN3@stbi__out_
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+34880], 0
	jle	SHORT $LN3@stbi__out_
; Line 6606
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	mov	ecx, 1
	mov	DWORD PTR tv256[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv256[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	imul	eax, DWORD PTR [rcx+34916]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34884], eax
; Line 6607
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34884]
	sar	eax, 1
	mov	rcx, QWORD PTR g$[rsp]
	add	eax, DWORD PTR [rcx+34896]
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34912], eax
; Line 6608
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+34880]
	dec	eax
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+34880], eax
; Line 6609
	jmp	$LN2@stbi__out_
$LN3@stbi__out_:
$LN7@stbi__out_:
$LN1@stbi__out_:
; Line 6611
	add	rsp, 72					; 00000048H
	ret	0
?stbi__out_gif_code@@YAXPEAUstbi__gif@@G@Z ENDP		; stbi__out_gif_code
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$ = 32
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z PROC ; stbi__gif_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6562
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6563
	mov	ecx, 34928				; 00008870H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR g$[rsp], rax
; Line 6564
	cmp	QWORD PTR g$[rsp], 0
	jne	SHORT $LN2@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG151015
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6565
	mov	r9d, 1
	mov	r8, QWORD PTR comp$[rsp]
	mov	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ; stbi__gif_header
	test	eax, eax
	jne	SHORT $LN3@stbi__gif_
; Line 6566
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_free
; Line 6567
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6568
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN3@stbi__gif_:
; Line 6570
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN4@stbi__gif_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__gif_:
; Line 6571
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR g$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__gif_:
; Line 6572
	mov	rcx, QWORD PTR g$[rsp]
	call	QWORD PTR __imp_free
; Line 6573
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6574
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z ENDP ; stbi__gif_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
version$ = 32
tv224 = 36
s$ = 64
g$ = 72
comp$ = 80
is_info$ = 88
?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z PROC ; stbi__gif_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6531
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6533
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6534
	lea	rcx, OFFSET FLAT:$SG150992
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6536
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR version$[rsp], al
; Line 6537
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 55					; 00000037H
	je	SHORT $LN4@stbi__gif_
	movzx	eax, BYTE PTR version$[rsp]
	cmp	eax, 57					; 00000039H
	je	SHORT $LN4@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG150994
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6538
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG150996
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6540
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	lea	rdx, OFFSET FLAT:$SG150997
	mov	QWORD PTR [rax+rcx], rdx
; Line 6541
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 6542
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 6543
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 6544
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 6545
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR g$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 6546
	mov	rax, QWORD PTR g$[rsp]
	mov	DWORD PTR [rax+44], -1
; Line 6548
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG150999
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__gif_
$LN6@stbi__gif_:
; Line 6549
	mov	rax, QWORD PTR g$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__gif_
	lea	rcx, OFFSET FLAT:$SG151001
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__gif_
$LN7@stbi__gif_:
; Line 6551
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN8@stbi__gif_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN8@stbi__gif_:
; Line 6553
	cmp	DWORD PTR is_info$[rsp], 0
	je	SHORT $LN9@stbi__gif_
	mov	eax, 1
	jmp	SHORT $LN1@stbi__gif_
$LN9@stbi__gif_:
; Line 6555
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN10@stbi__gif_
; Line 6556
	mov	rax, QWORD PTR g$[rsp]
	mov	eax, DWORD PTR [rax+32]
	and	eax, 7
	mov	ecx, 2
	mov	DWORD PTR tv224[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv224[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR g$[rsp]
	add	rcx, 52					; 00000034H
	mov	r9d, -1
	mov	r8d, eax
	mov	rdx, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ; stbi__gif_parse_colortable
$LN10@stbi__gif_:
; Line 6558
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6559
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_header@@YAHPEAUstbi__context@@PEAUstbi__gif@@PEAHH@Z ENDP ; stbi__gif_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv93 = 36
s$ = 64
pal$ = 72
num_entries$ = 80
transp$ = 88
?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z PROC ; stbi__gif_parse_colortable
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6520
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6522
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__gif_
$LN2@stbi__gif_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__gif_:
	mov	eax, DWORD PTR num_entries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__gif_
; Line 6523
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 6524
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 6525
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR pal$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 6526
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR transp$[rsp], eax
	jne	SHORT $LN6@stbi__gif_
	mov	DWORD PTR tv93[rsp], 0
	jmp	SHORT $LN7@stbi__gif_
$LN6@stbi__gif_:
	mov	DWORD PTR tv93[rsp], 255		; 000000ffH
$LN7@stbi__gif_:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pal$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	edx, BYTE PTR tv93[rsp]
	mov	BYTE PTR [rax+rcx], dl
; Line 6527
	jmp	$LN2@stbi__gif_
$LN3@stbi__gif_:
; Line 6528
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_parse_colortable@@YAXPEAUstbi__context@@QEAY03EHH@Z ENDP ; stbi__gif_parse_colortable
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
s$ = 64
?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z PROC	; stbi__gif_test_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6503
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6505
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 71					; 00000047H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 73					; 00000049H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 70					; 00000046H
	jne	SHORT $LN3@stbi__gif_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 56					; 00000038H
	je	SHORT $LN2@stbi__gif_
$LN3@stbi__gif_:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN2@stbi__gif_:
; Line 6506
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 6507
	cmp	DWORD PTR sz$[rsp], 57			; 00000039H
	je	SHORT $LN4@stbi__gif_
	cmp	DWORD PTR sz$[rsp], 55			; 00000037H
	je	SHORT $LN4@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN4@stbi__gif_:
; Line 6508
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 97					; 00000061H
	je	SHORT $LN5@stbi__gif_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__gif_
$LN5@stbi__gif_:
; Line 6509
	mov	eax, 1
$LN1@stbi__gif_:
; Line 6510
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z ENDP	; stbi__gif_test_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$1 = 32
count$2 = 36
i$3 = 40
dest$4 = 48
num_packets$ = 56
left$5 = 60
left$6 = 64
packet_idx$7 = 68
y$ = 72
act_comp$ = 76
tv157 = 80
x$8 = 84
i$9 = 88
packet$10 = 96
tv69 = 104
tv130 = 108
tv138 = 112
tv143 = 116
tv161 = 120
tv182 = 124
tv214 = 128
tv225 = 132
tv247 = 136
packet$11 = 144
chained$ = 152
value$12 = 156
value$13 = 160
tv76 = 168
packets$ = 176
__$ArrayPad$ = 208
s$ = 240
width$ = 248
height$ = 256
comp$ = 264
result$ = 272
?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z PROC ; stbi__pic_load_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6313
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6314
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
$LN4@stbi__pic_:
; Line 6322
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN29@stbi__pic_
; Line 6323
	lea	rcx, OFFSET FLAT:$SG150837
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__pic_
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN51@stbi__pic_
$LN50@stbi__pic_:
	mov	DWORD PTR tv69[rsp], 0
$LN51@stbi__pic_:
	movsxd	rax, DWORD PTR tv69[rsp]
	jmp	$LN1@stbi__pic_
$LN29@stbi__pic_:
; Line 6325
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR tv76[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
	mov	rax, QWORD PTR tv76[rsp]
	mov	QWORD PTR packet$11[rsp], rax
; Line 6327
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 6328
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx], al
; Line 6329
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 6330
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$11[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 6332
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 6334
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN30@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150839
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN52@stbi__pic_
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN53@stbi__pic_
$LN52@stbi__pic_:
	mov	DWORD PTR tv130[rsp], 0
$LN53@stbi__pic_:
	movsxd	rax, DWORD PTR tv130[rsp]
	jmp	$LN1@stbi__pic_
$LN30@stbi__pic_:
; Line 6335
	mov	rax, QWORD PTR packet$11[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN31@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150841
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN54@stbi__pic_
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN55@stbi__pic_
$LN54@stbi__pic_:
	mov	DWORD PTR tv138[rsp], 0
$LN55@stbi__pic_:
	movsxd	rax, DWORD PTR tv138[rsp]
	jmp	$LN1@stbi__pic_
$LN31@stbi__pic_:
; Line 6336
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 6338
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN56@stbi__pic_
	mov	DWORD PTR tv143[rsp], 4
	jmp	SHORT $LN57@stbi__pic_
$LN56@stbi__pic_:
	mov	DWORD PTR tv143[rsp], 3
$LN57@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv143[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6340
	mov	DWORD PTR y$[rsp], 0
	jmp	SHORT $LN7@stbi__pic_
$LN5@stbi__pic_:
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
$LN7@stbi__pic_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR y$[rsp], eax
	jge	$LN6@stbi__pic_
; Line 6343
	mov	DWORD PTR packet_idx$7[rsp], 0
	jmp	SHORT $LN10@stbi__pic_
$LN8@stbi__pic_:
	mov	eax, DWORD PTR packet_idx$7[rsp]
	inc	eax
	mov	DWORD PTR packet_idx$7[rsp], eax
$LN10@stbi__pic_:
	mov	eax, DWORD PTR num_packets$[rsp]
	cmp	DWORD PTR packet_idx$7[rsp], eax
	jge	$LN9@stbi__pic_
; Line 6344
	movsxd	rax, DWORD PTR packet_idx$7[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR packet$10[rsp], rax
; Line 6345
	mov	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$4[rsp], rax
; Line 6347
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+1]
	mov	BYTE PTR tv157[rsp], al
	cmp	BYTE PTR tv157[rsp], 0
	je	SHORT $LN33@stbi__pic_
	cmp	BYTE PTR tv157[rsp], 1
	je	$LN35@stbi__pic_
	cmp	BYTE PTR tv157[rsp], 2
	je	$LN39@stbi__pic_
; Line 6349
	lea	rcx, OFFSET FLAT:$SG150843
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__pic_
	mov	DWORD PTR tv161[rsp], 0
	jmp	SHORT $LN59@stbi__pic_
$LN58@stbi__pic_:
	mov	DWORD PTR tv161[rsp], 0
$LN59@stbi__pic_:
	movsxd	rax, DWORD PTR tv161[rsp]
	jmp	$LN1@stbi__pic_
$LN33@stbi__pic_:
; Line 6354
	mov	DWORD PTR x$8[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN13@stbi__pic_:
	mov	eax, DWORD PTR x$8[rsp]
	inc	eax
	mov	DWORD PTR x$8[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN15@stbi__pic_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR x$8[rsp], eax
	jge	SHORT $LN14@stbi__pic_
; Line 6355
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN34@stbi__pic_
; Line 6356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN34@stbi__pic_:
	jmp	SHORT $LN13@stbi__pic_
$LN14@stbi__pic_:
; Line 6357
	jmp	$LN11@stbi__pic_
$LN35@stbi__pic_:
; Line 6362
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$5[rsp], eax
$LN16@stbi__pic_:
; Line 6364
	cmp	DWORD PTR left$5[rsp], 0
	jle	$LN17@stbi__pic_
; Line 6367
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR count$1[rsp], al
; Line 6368
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN36@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150848
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__pic_
	mov	DWORD PTR tv182[rsp], 0
	jmp	SHORT $LN61@stbi__pic_
$LN60@stbi__pic_:
	mov	DWORD PTR tv182[rsp], 0
$LN61@stbi__pic_:
	movsxd	rax, DWORD PTR tv182[rsp]
	jmp	$LN1@stbi__pic_
$LN36@stbi__pic_:
; Line 6370
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	eax, DWORD PTR left$5[rsp]
	jle	SHORT $LN37@stbi__pic_
; Line 6371
	movzx	eax, BYTE PTR left$5[rsp]
	mov	BYTE PTR count$1[rsp], al
$LN37@stbi__pic_:
; Line 6373
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN38@stbi__pic_
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN38@stbi__pic_:
; Line 6375
	mov	DWORD PTR i$9[rsp], 0
	jmp	SHORT $LN20@stbi__pic_
$LN18@stbi__pic_:
	mov	eax, DWORD PTR i$9[rsp]
	inc	eax
	mov	DWORD PTR i$9[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN20@stbi__pic_:
	movzx	eax, BYTE PTR count$1[rsp]
	cmp	DWORD PTR i$9[rsp], eax
	jge	SHORT $LN19@stbi__pic_
; Line 6376
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$12[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	?stbi__copyval@@YAXHPEAEPEBE@Z		; stbi__copyval
	jmp	SHORT $LN18@stbi__pic_
$LN19@stbi__pic_:
; Line 6377
	movzx	eax, BYTE PTR count$1[rsp]
	mov	ecx, DWORD PTR left$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$5[rsp], eax
; Line 6378
	jmp	$LN16@stbi__pic_
$LN17@stbi__pic_:
; Line 6380
	jmp	$LN11@stbi__pic_
$LN39@stbi__pic_:
; Line 6383
	mov	eax, DWORD PTR width$[rsp]
	mov	DWORD PTR left$6[rsp], eax
$LN21@stbi__pic_:
; Line 6384
	cmp	DWORD PTR left$6[rsp], 0
	jle	$LN22@stbi__pic_
; Line 6385
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR count$2[rsp], eax
; Line 6386
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN40@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150853
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__pic_
	mov	DWORD PTR tv214[rsp], 0
	jmp	SHORT $LN63@stbi__pic_
$LN62@stbi__pic_:
	mov	DWORD PTR tv214[rsp], 0
$LN63@stbi__pic_:
	movsxd	rax, DWORD PTR tv214[rsp]
	jmp	$LN1@stbi__pic_
$LN40@stbi__pic_:
; Line 6388
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jl	$LN41@stbi__pic_
; Line 6391
	cmp	DWORD PTR count$2[rsp], 128		; 00000080H
	jne	SHORT $LN43@stbi__pic_
; Line 6392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR count$2[rsp], eax
	jmp	SHORT $LN44@stbi__pic_
$LN43@stbi__pic_:
; Line 6394
	mov	eax, DWORD PTR count$2[rsp]
	sub	eax, 127				; 0000007fH
	mov	DWORD PTR count$2[rsp], eax
$LN44@stbi__pic_:
; Line 6395
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN45@stbi__pic_
; Line 6396
	lea	rcx, OFFSET FLAT:$SG150859
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__pic_
	mov	DWORD PTR tv225[rsp], 0
	jmp	SHORT $LN65@stbi__pic_
$LN64@stbi__pic_:
	mov	DWORD PTR tv225[rsp], 0
$LN65@stbi__pic_:
	movsxd	rax, DWORD PTR tv225[rsp]
	jmp	$LN1@stbi__pic_
$LN45@stbi__pic_:
; Line 6398
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN46@stbi__pic_
; Line 6399
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN46@stbi__pic_:
; Line 6401
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN25@stbi__pic_
$LN23@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN25@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN24@stbi__pic_
; Line 6402
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	lea	r8, QWORD PTR value$13[rsp]
	mov	rdx, QWORD PTR dest$4[rsp]
	mov	ecx, eax
	call	?stbi__copyval@@YAXHPEAEPEBE@Z		; stbi__copyval
	jmp	SHORT $LN23@stbi__pic_
$LN24@stbi__pic_:
; Line 6403
	jmp	$LN42@stbi__pic_
$LN41@stbi__pic_:
; Line 6404
	mov	eax, DWORD PTR count$2[rsp]
	inc	eax
	mov	DWORD PTR count$2[rsp], eax
; Line 6405
	mov	eax, DWORD PTR left$6[rsp]
	cmp	DWORD PTR count$2[rsp], eax
	jle	SHORT $LN47@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150862
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__pic_
	mov	DWORD PTR tv247[rsp], 0
	jmp	SHORT $LN67@stbi__pic_
$LN66@stbi__pic_:
	mov	DWORD PTR tv247[rsp], 0
$LN67@stbi__pic_:
	movsxd	rax, DWORD PTR tv247[rsp]
	jmp	SHORT $LN1@stbi__pic_
$LN47@stbi__pic_:
; Line 6407
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN28@stbi__pic_
$LN26@stbi__pic_:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
	mov	rax, QWORD PTR dest$4[rsp]
	add	rax, 4
	mov	QWORD PTR dest$4[rsp], rax
$LN28@stbi__pic_:
	mov	eax, DWORD PTR count$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	SHORT $LN27@stbi__pic_
; Line 6408
	mov	rax, QWORD PTR packet$10[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	r8, QWORD PTR dest$4[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ; stbi__readval
	test	rax, rax
	jne	SHORT $LN48@stbi__pic_
; Line 6409
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN48@stbi__pic_:
	jmp	SHORT $LN26@stbi__pic_
$LN27@stbi__pic_:
$LN42@stbi__pic_:
; Line 6411
	mov	eax, DWORD PTR count$2[rsp]
	mov	ecx, DWORD PTR left$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR left$6[rsp], eax
; Line 6412
	jmp	$LN21@stbi__pic_
$LN22@stbi__pic_:
$LN11@stbi__pic_:
; Line 6416
	jmp	$LN8@stbi__pic_
$LN9@stbi__pic_:
; Line 6417
	jmp	$LN5@stbi__pic_
$LN6@stbi__pic_:
; Line 6419
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6420
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z ENDP ; stbi__pic_load_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
mask$ = 4
channel$ = 32
dest$ = 40
src$ = 48
?stbi__copyval@@YAXHPEAEPEBE@Z PROC			; stbi__copyval
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6304
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 6305
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6307
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__copy
$LN2@stbi__copy:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__copy:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__copy
; Line 6308
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__copy
; Line 6309
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	r8, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__copy:
	jmp	SHORT $LN2@stbi__copy
$LN3@stbi__copy:
; Line 6310
	add	rsp, 24
	ret	0
?stbi__copyval@@YAXHPEAEPEBE@Z ENDP			; stbi__copyval
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
mask$ = 36
tv75 = 40
s$ = 64
channel$ = 72
dest$ = 80
?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z PROC	; stbi__readval
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6290
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6291
	mov	DWORD PTR mask$[rsp], 128		; 00000080H
; Line 6293
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__read
$LN2@stbi__read:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR mask$[rsp]
	sar	eax, 1
	mov	DWORD PTR mask$[rsp], eax
$LN4@stbi__read:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__read
; Line 6294
	mov	eax, DWORD PTR mask$[rsp]
	mov	ecx, DWORD PTR channel$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN5@stbi__read
; Line 6295
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN6@stbi__read
	lea	rcx, OFFSET FLAT:$SG150755
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__read
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN9@stbi__read
$LN8@stbi__read:
	mov	DWORD PTR tv75[rsp], 0
$LN9@stbi__read:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stbi__read
$LN6@stbi__read:
; Line 6296
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR dest$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN5@stbi__read:
; Line 6298
	jmp	SHORT $LN2@stbi__read
$LN3@stbi__read:
; Line 6300
	mov	rax, QWORD PTR dest$[rsp]
$LN1@stbi__read:
; Line 6301
	add	rsp, 56					; 00000038H
	ret	0
?stbi__readval@@YAPEAEPEAUstbi__context@@HPEAE@Z ENDP	; stbi__readval
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z PROC	; stbi__pic_test_core
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6269
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6272
	lea	rdx, OFFSET FLAT:$SG150723
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN5@stbi__pic_
; Line 6273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
; Line 6275
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 84			; 00000054H
	jge	SHORT $LN3@stbi__pic_
; Line 6276
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6278
	lea	rdx, OFFSET FLAT:$SG150725
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN6@stbi__pic_
; Line 6279
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6281
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6282
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z ENDP	; stbi__pic_test_core
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
str$ = 72
?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z PROC	; stbi__pic_is4
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6259
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6261
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@stbi__pic_
; Line 6262
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR str$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__pic_
; Line 6263
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN5@stbi__pic_:
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6265
	mov	eax, 1
$LN1@stbi__pic_:
; Line 6266
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ENDP	; stbi__pic_is4
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
val$1 = 32
len$ = 36
count$ = 40
nleft$ = 44
s$ = 64
p$ = 72
pixelCount$ = 80
?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z PROC ; stbi__psd_decode_rle
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6011
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6014
	mov	DWORD PTR count$[rsp], 0
$LN2@stbi__psd_:
; Line 6015
	mov	eax, DWORD PTR count$[rsp]
	mov	ecx, DWORD PTR pixelCount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$[rsp], eax
	cmp	DWORD PTR nleft$[rsp], 0
	jle	$LN3@stbi__psd_
; Line 6016
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 6017
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jne	SHORT $LN8@stbi__psd_
	jmp	$LN9@stbi__psd_
$LN8@stbi__psd_:
; Line 6019
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jge	SHORT $LN10@stbi__psd_
; Line 6021
	mov	eax, DWORD PTR len$[rsp]
	inc	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6022
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN12@stbi__psd_
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN12@stbi__psd_:
; Line 6023
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN4@stbi__psd_:
; Line 6024
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN5@stbi__psd_
; Line 6025
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx], al
; Line 6026
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6027
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6028
	jmp	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 6029
	jmp	SHORT $LN11@stbi__psd_
$LN10@stbi__psd_:
	cmp	DWORD PTR len$[rsp], 128		; 00000080H
	jle	SHORT $LN13@stbi__psd_
; Line 6033
	mov	eax, 257				; 00000101H
	sub	eax, DWORD PTR len$[rsp]
	mov	DWORD PTR len$[rsp], eax
; Line 6034
	mov	eax, DWORD PTR nleft$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	jle	SHORT $LN14@stbi__psd_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN14@stbi__psd_:
; Line 6035
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR val$1[rsp], al
; Line 6036
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR count$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR count$[rsp], eax
$LN6@stbi__psd_:
; Line 6037
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN7@stbi__psd_
; Line 6038
	mov	rax, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
; Line 6039
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 6040
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
; Line 6041
	jmp	SHORT $LN6@stbi__psd_
$LN7@stbi__psd_:
$LN13@stbi__psd_:
$LN11@stbi__psd_:
$LN9@stbi__psd_:
; Line 6043
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6045
	mov	eax, 1
$LN1@stbi__psd_:
; Line 6046
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z ENDP ; stbi__psd_decode_rle
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
px$ = 32
fiveBitMask$ = 36
r$ = 40
g$ = 44
b$ = 48
s$ = 80
out$ = 88
?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z PROC ; stbi__tga_read_rgb16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5775
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5776
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	WORD PTR px$[rsp], ax
; Line 5777
	mov	eax, 31
	mov	WORD PTR fiveBitMask$[rsp], ax
; Line 5779
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 10
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR r$[rsp], eax
; Line 5780
	movzx	eax, WORD PTR px$[rsp]
	sar	eax, 5
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR g$[rsp], eax
; Line 5781
	movzx	eax, WORD PTR px$[rsp]
	movzx	ecx, WORD PTR fiveBitMask$[rsp]
	and	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 5783
	imul	eax, DWORD PTR r$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5784
	imul	eax, DWORD PTR g$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5785
	imul	eax, DWORD PTR b$[rsp], 255		; 000000ffH
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5791
	add	rsp, 72					; 00000048H
	ret	0
?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ENDP ; stbi__tga_read_rgb16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 0
bits_per_pixel$ = 32
is_grey$ = 40
is_rgb16$ = 48
?stbi__tga_get_comp@@YAHHHPEAH@Z PROC			; stbi__tga_get_comp
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5662
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5664
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN4@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbi__tga_:
; Line 5665
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	mov	DWORD PTR tv65[rsp], eax
	cmp	DWORD PTR tv65[rsp], 8
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 15
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 24
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR tv65[rsp], 32			; 00000020H
	je	SHORT $LN11@stbi__tga_
	jmp	SHORT $LN12@stbi__tga_
$LN5@stbi__tga_:
; Line 5666
	mov	eax, 1
	jmp	SHORT $LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5667
	cmp	DWORD PTR is_grey$[rsp], 0
	je	SHORT $LN7@stbi__tga_
	mov	eax, 2
	jmp	SHORT $LN1@stbi__tga_
$LN7@stbi__tga_:
$LN8@stbi__tga_:
; Line 5669
	cmp	QWORD PTR is_rgb16$[rsp], 0
	je	SHORT $LN9@stbi__tga_
	mov	rax, QWORD PTR is_rgb16$[rsp]
	mov	DWORD PTR [rax], 1
$LN9@stbi__tga_:
; Line 5670
	mov	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN10@stbi__tga_:
$LN11@stbi__tga_:
; Line 5672
	mov	eax, DWORD PTR bits_per_pixel$[rsp]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	jmp	SHORT $LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5673
	xor	eax, eax
$LN1@stbi__tga_:
; Line 5675
	add	rsp, 24
	ret	0
?stbi__tga_get_comp@@YAHHHPEAH@Z ENDP			; stbi__tga_get_comp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hsz$ = 32
compress$1 = 36
i$2 = 40
tv75 = 44
tv128 = 48
tv138 = 52
tv159 = 56
tv172 = 60
tv178 = 64
tv188 = 68
tv231 = 72
tv236 = 76
tv243 = 80
s$ = 112
info$ = 120
?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z PROC ; stbi__bmp_parse_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5385
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5387
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	jne	SHORT $LN6@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN5@stbi__bmp_
$LN6@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG150093
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN32@stbi__bmp_
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN33@stbi__bmp_
$LN32@stbi__bmp_:
	mov	DWORD PTR tv75[rsp], 0
$LN33@stbi__bmp_:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	$LN1@stbi__bmp_
$LN5@stbi__bmp_:
; Line 5388
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5389
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5390
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5391
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR hsz$[rsp], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR hsz$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 5393
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 5394
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+32], 14
; Line 5396
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jge	SHORT $LN7@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG150095
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN34@stbi__bmp_
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN35@stbi__bmp_
$LN34@stbi__bmp_:
	mov	DWORD PTR tv128[rsp], 0
$LN35@stbi__bmp_:
	movsxd	rax, DWORD PTR tv128[rsp]
	jmp	$LN1@stbi__bmp_
$LN7@stbi__bmp_:
; Line 5398
	cmp	DWORD PTR hsz$[rsp], 12
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN8@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN8@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG150097
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN36@stbi__bmp_
	mov	DWORD PTR tv138[rsp], 0
	jmp	SHORT $LN37@stbi__bmp_
$LN36@stbi__bmp_:
	mov	DWORD PTR tv138[rsp], 0
$LN37@stbi__bmp_:
	movsxd	rax, DWORD PTR tv138[rsp]
	jmp	$LN1@stbi__bmp_
$LN8@stbi__bmp_:
; Line 5399
	cmp	DWORD PTR hsz$[rsp], 12
	jne	SHORT $LN9@stbi__bmp_
; Line 5400
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5401
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5402
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5403
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5404
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
$LN10@stbi__bmp_:
; Line 5406
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	je	SHORT $LN11@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG150101
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN38@stbi__bmp_
	mov	DWORD PTR tv159[rsp], 0
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
	mov	DWORD PTR tv159[rsp], 0
$LN39@stbi__bmp_:
	movsxd	rax, DWORD PTR tv159[rsp]
	jmp	$LN1@stbi__bmp_
$LN11@stbi__bmp_:
; Line 5407
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5408
	cmp	DWORD PTR hsz$[rsp], 12
	je	$LN12@stbi__bmp_
; Line 5409
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR compress$1[rsp], eax
; Line 5410
	cmp	DWORD PTR compress$1[rsp], 1
	je	SHORT $LN14@stbi__bmp_
	cmp	DWORD PTR compress$1[rsp], 2
	jne	SHORT $LN13@stbi__bmp_
$LN14@stbi__bmp_:
	lea	rcx, OFFSET FLAT:$SG150105
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN40@stbi__bmp_
	mov	DWORD PTR tv172[rsp], 0
	jmp	SHORT $LN41@stbi__bmp_
$LN40@stbi__bmp_:
	mov	DWORD PTR tv172[rsp], 0
$LN41@stbi__bmp_:
	movsxd	rax, DWORD PTR tv172[rsp]
	jmp	$LN1@stbi__bmp_
$LN13@stbi__bmp_:
; Line 5411
	cmp	DWORD PTR compress$1[rsp], 4
	jl	SHORT $LN15@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG150107
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN42@stbi__bmp_
	mov	DWORD PTR tv178[rsp], 0
	jmp	SHORT $LN43@stbi__bmp_
$LN42@stbi__bmp_:
	mov	DWORD PTR tv178[rsp], 0
$LN43@stbi__bmp_:
	movsxd	rax, DWORD PTR tv178[rsp]
	jmp	$LN1@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5412
	cmp	DWORD PTR compress$1[rsp], 3
	jne	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN16@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	je	SHORT $LN16@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG150109
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN44@stbi__bmp_
	mov	DWORD PTR tv188[rsp], 0
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
	mov	DWORD PTR tv188[rsp], 0
$LN45@stbi__bmp_:
	movsxd	rax, DWORD PTR tv188[rsp]
	jmp	$LN1@stbi__bmp_
$LN16@stbi__bmp_:
; Line 5413
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5414
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5415
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5416
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5417
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5418
	cmp	DWORD PTR hsz$[rsp], 40			; 00000028H
	je	SHORT $LN19@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	$LN17@stbi__bmp_
$LN19@stbi__bmp_:
; Line 5419
	cmp	DWORD PTR hsz$[rsp], 56			; 00000038H
	jne	SHORT $LN20@stbi__bmp_
; Line 5420
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5421
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5422
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5423
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
$LN20@stbi__bmp_:
; Line 5425
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	je	SHORT $LN22@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	$LN21@stbi__bmp_
$LN22@stbi__bmp_:
; Line 5426
	cmp	DWORD PTR compress$1[rsp], 0
	jne	SHORT $LN23@stbi__bmp_
; Line 5427
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ; stbi__bmp_set_mask_defaults
	jmp	$LN24@stbi__bmp_
$LN23@stbi__bmp_:
; Line 5428
	cmp	DWORD PTR compress$1[rsp], 3
	jne	$LN25@stbi__bmp_
; Line 5429
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5430
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5431
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5432
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, 12
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 5434
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	cmp	DWORD PTR [rax+12], ecx
	jne	SHORT $LN27@stbi__bmp_
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN27@stbi__bmp_
; Line 5436
	lea	rcx, OFFSET FLAT:$SG150121
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN46@stbi__bmp_
	mov	DWORD PTR tv231[rsp], 0
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
	mov	DWORD PTR tv231[rsp], 0
$LN47@stbi__bmp_:
	movsxd	rax, DWORD PTR tv231[rsp]
	jmp	$LN1@stbi__bmp_
$LN27@stbi__bmp_:
; Line 5438
	jmp	SHORT $LN26@stbi__bmp_
$LN25@stbi__bmp_:
; Line 5439
	lea	rcx, OFFSET FLAT:$SG150122
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN48@stbi__bmp_
	mov	DWORD PTR tv236[rsp], 0
	jmp	SHORT $LN49@stbi__bmp_
$LN48@stbi__bmp_:
	mov	DWORD PTR tv236[rsp], 0
$LN49@stbi__bmp_:
	movsxd	rax, DWORD PTR tv236[rsp]
	jmp	$LN1@stbi__bmp_
$LN26@stbi__bmp_:
$LN24@stbi__bmp_:
$LN21@stbi__bmp_:
; Line 5441
	jmp	$LN18@stbi__bmp_
$LN17@stbi__bmp_:
; Line 5444
	cmp	DWORD PTR hsz$[rsp], 108		; 0000006cH
	je	SHORT $LN28@stbi__bmp_
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	je	SHORT $LN28@stbi__bmp_
; Line 5445
	lea	rcx, OFFSET FLAT:$SG150124
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN50@stbi__bmp_
	mov	DWORD PTR tv243[rsp], 0
	jmp	SHORT $LN51@stbi__bmp_
$LN50@stbi__bmp_:
	mov	DWORD PTR tv243[rsp], 0
$LN51@stbi__bmp_:
	movsxd	rax, DWORD PTR tv243[rsp]
	jmp	$LN1@stbi__bmp_
$LN28@stbi__bmp_:
; Line 5446
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5447
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 5448
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 5449
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 5450
	cmp	DWORD PTR compress$1[rsp], 3
	je	SHORT $LN29@stbi__bmp_
; Line 5451
	mov	edx, DWORD PTR compress$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ; stbi__bmp_set_mask_defaults
$LN29@stbi__bmp_:
; Line 5452
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5453
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbi__bmp_:
	cmp	DWORD PTR i$2[rsp], 12
	jge	SHORT $LN3@stbi__bmp_
; Line 5454
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	jmp	SHORT $LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5455
	cmp	DWORD PTR hsz$[rsp], 124		; 0000007cH
	jne	SHORT $LN30@stbi__bmp_
; Line 5456
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5457
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5458
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5459
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
$LN30@stbi__bmp_:
$LN18@stbi__bmp_:
$LN12@stbi__bmp_:
; Line 5463
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 5464
	add	rsp, 104				; 00000068H
	ret	0
?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ENDP ; stbi__bmp_parse_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 8
compress$ = 16
?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z PROC ; stbi__bmp_set_mask_defaults
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5359
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 5361
	cmp	DWORD PTR compress$[rsp], 3
	jne	SHORT $LN2@stbi__bmp_
; Line 5362
	mov	eax, 1
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5364
	cmp	DWORD PTR compress$[rsp], 0
	jne	$LN3@stbi__bmp_
; Line 5365
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN4@stbi__bmp_
; Line 5366
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 31744		; 00007c00H
; Line 5367
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 992			; 000003e0H
; Line 5368
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 31
	jmp	SHORT $LN5@stbi__bmp_
$LN4@stbi__bmp_:
; Line 5369
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax], 32			; 00000020H
	jne	SHORT $LN6@stbi__bmp_
; Line 5370
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 16711680		; 00ff0000H
; Line 5371
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 65280		; 0000ff00H
; Line 5372
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 255			; 000000ffH
; Line 5373
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], -16777216		; ff000000H
; Line 5374
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+28], 0
; Line 5375
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+24], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+16], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+12], 0
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 5379
	mov	eax, 1
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5381
	xor	eax, eax
$LN1@stbi__bmp_:
; Line 5382
	ret	0
?stbi__bmp_set_mask_defaults@@YAHPEAUstbi__bmp_data@@H@Z ENDP ; stbi__bmp_set_mask_defaults
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
shift$ = 56
bits$ = 64
?stbi__shiftsigned@@YAHIHH@Z PROC			; stbi__shiftsigned
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5332
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 5341
	cmp	DWORD PTR shift$[rsp], 0
	jge	SHORT $LN2@stbi__shif
; Line 5342
	mov	eax, DWORD PTR shift$[rsp]
	neg	eax
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, cl
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN3@stbi__shif
$LN2@stbi__shif:
; Line 5344
	mov	eax, DWORD PTR shift$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
$LN3@stbi__shif:
; Line 5345
	cmp	DWORD PTR v$[rsp], 256			; 00000100H
	jb	SHORT $LN5@stbi__shif
	mov	r8d, 5345				; 000014e1H
	lea	rdx, OFFSET FLAT:$SG150025
	lea	rcx, OFFSET FLAT:$SG150026
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stbi__shif:
; Line 5346
	mov	eax, 8
	sub	eax, DWORD PTR bits$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$[rsp]
	shr	eax, cl
	mov	DWORD PTR v$[rsp], eax
; Line 5347
	cmp	DWORD PTR bits$[rsp], 0
	jl	SHORT $LN6@stbi__shif
	cmp	DWORD PTR bits$[rsp], 8
	jle	SHORT $LN7@stbi__shif
$LN6@stbi__shif:
	mov	r8d, 5347				; 000014e3H
	lea	rdx, OFFSET FLAT:$SG150027
	lea	rcx, OFFSET FLAT:$SG150028
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stbi__shif:
; Line 5348
	movsxd	rax, DWORD PTR bits$[rsp]
	lea	rcx, OFFSET FLAT:?mul_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
	mov	edx, DWORD PTR v$[rsp]
	imul	edx, DWORD PTR [rcx+rax*4]
	mov	eax, edx
	movsxd	rcx, DWORD PTR bits$[rsp]
	lea	rdx, OFFSET FLAT:?shift_table@?1??stbi__shiftsigned@@YAHIHH@Z@4PAIA
	mov	ecx, DWORD PTR [rdx+rcx*4]
	sar	eax, cl
; Line 5349
	add	rsp, 40					; 00000028H
	ret	0
?stbi__shiftsigned@@YAHIHH@Z ENDP			; stbi__shiftsigned
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 8
?stbi__bitcount@@YAHI@Z PROC				; stbi__bitcount
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5319
	mov	DWORD PTR [rsp+8], ecx
; Line 5320
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 1431655765				; 55555555H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 1
	and	ecx, 1431655765				; 55555555H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5321
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 858993459				; 33333333H
	mov	ecx, DWORD PTR a$[rsp]
	shr	ecx, 2
	and	ecx, 858993459				; 33333333H
	add	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5322
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 4
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 252645135				; 0f0f0f0fH
	mov	DWORD PTR a$[rsp], eax
; Line 5323
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5324
	mov	eax, DWORD PTR a$[rsp]
	shr	eax, 16
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR a$[rsp], eax
; Line 5325
	mov	eax, DWORD PTR a$[rsp]
	and	eax, 255				; 000000ffH
; Line 5326
	ret	0
?stbi__bitcount@@YAHI@Z ENDP				; stbi__bitcount
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 0
z$ = 32
?stbi__high_bit@@YAHI@Z PROC				; stbi__high_bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5307
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 5308
	mov	DWORD PTR n$[rsp], 0
; Line 5309
	cmp	DWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbi__high
	mov	eax, -1
	jmp	$LN1@stbi__high
$LN2@stbi__high:
; Line 5310
	cmp	DWORD PTR z$[rsp], 65536		; 00010000H
	jb	SHORT $LN3@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 16
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 16
	mov	DWORD PTR z$[rsp], eax
$LN3@stbi__high:
; Line 5311
	cmp	DWORD PTR z$[rsp], 256			; 00000100H
	jb	SHORT $LN4@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 8
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 8
	mov	DWORD PTR z$[rsp], eax
$LN4@stbi__high:
; Line 5312
	cmp	DWORD PTR z$[rsp], 16
	jb	SHORT $LN5@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 4
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 4
	mov	DWORD PTR z$[rsp], eax
$LN5@stbi__high:
; Line 5313
	cmp	DWORD PTR z$[rsp], 4
	jb	SHORT $LN6@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	add	eax, 2
	mov	DWORD PTR n$[rsp], eax
	mov	eax, DWORD PTR z$[rsp]
	shr	eax, 2
	mov	DWORD PTR z$[rsp], eax
$LN6@stbi__high:
; Line 5314
	cmp	DWORD PTR z$[rsp], 2
	jb	SHORT $LN7@stbi__high
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN7@stbi__high:
; Line 5315
	mov	eax, DWORD PTR n$[rsp]
$LN1@stbi__high:
; Line 5316
	add	rsp, 24
	ret	0
?stbi__high_bit@@YAHI@Z ENDP				; stbi__high_bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tv83 = 36
r$ = 40
s$ = 64
?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z PROC	; stbi__bmp_test_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5286
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 66					; 00000042H
	je	SHORT $LN2@stbi__bmp_
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 5287
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	cmp	eax, 77					; 0000004dH
	je	SHORT $LN3@stbi__bmp_
	xor	eax, eax
	jmp	SHORT $LN1@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5288
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5289
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5290
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
; Line 5291
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
; Line 5292
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR sz$[rsp], eax
; Line 5293
	cmp	DWORD PTR sz$[rsp], 12
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 40			; 00000028H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 56			; 00000038H
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 108			; 0000006cH
	je	SHORT $LN5@stbi__bmp_
	cmp	DWORD PTR sz$[rsp], 124			; 0000007cH
	je	SHORT $LN5@stbi__bmp_
	mov	DWORD PTR tv83[rsp], 0
	jmp	SHORT $LN6@stbi__bmp_
$LN5@stbi__bmp_:
	mov	DWORD PTR tv83[rsp], 1
$LN6@stbi__bmp_:
	mov	eax, DWORD PTR tv83[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 5294
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__bmp_:
; Line 5295
	add	rsp, 56					; 00000038H
	ret	0
?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z ENDP	; stbi__bmp_test_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z PROC	; stbi__png_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5247
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 5248
	xor	r8d, r8d
	mov	edx, 2
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ; stbi__parse_png_file
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5249
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5250
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5252
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__png_:
; Line 5253
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__png_:
; Line 5254
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__png_
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__png_:
; Line 5255
	mov	eax, 1
$LN1@stbi__png_:
; Line 5256
	add	rsp, 40					; 00000028H
	ret	0
?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ENDP	; stbi__png_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
tv85 = 52
result$ = 56
p$ = 80
x$ = 88
y$ = 96
n$ = 104
req_comp$ = 112
ri$ = 120
?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__do_png
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5200
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 5201
	mov	QWORD PTR result$[rsp], 0
; Line 5202
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN3@stbi__do_p
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN2@stbi__do_p
$LN3@stbi__do_p:
	lea	rcx, OFFSET FLAT:$SG149936
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__do_p
	mov	DWORD PTR tv69[rsp], 0
	jmp	SHORT $LN16@stbi__do_p
$LN15@stbi__do_p:
	mov	DWORD PTR tv69[rsp], 0
$LN16@stbi__do_p:
	movsxd	rax, DWORD PTR tv69[rsp]
	jmp	$LN1@stbi__do_p
$LN2@stbi__do_p:
; Line 5203
	mov	r8d, DWORD PTR req_comp$[rsp]
	xor	edx, edx
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ; stbi__parse_png_file
	test	eax, eax
	je	$LN4@stbi__do_p
; Line 5204
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 8
	jg	SHORT $LN5@stbi__do_p
; Line 5205
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
	jmp	SHORT $LN6@stbi__do_p
$LN5@stbi__do_p:
; Line 5206
	mov	rax, QWORD PTR p$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN7@stbi__do_p
; Line 5207
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
	jmp	SHORT $LN8@stbi__do_p
$LN7@stbi__do_p:
; Line 5209
	lea	rcx, OFFSET FLAT:$SG149942
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__do_p
	mov	DWORD PTR tv85[rsp], 0
	jmp	SHORT $LN18@stbi__do_p
$LN17@stbi__do_p:
	mov	DWORD PTR tv85[rsp], 0
$LN18@stbi__do_p:
	movsxd	rax, DWORD PTR tv85[rsp]
	jmp	$LN1@stbi__do_p
$LN8@stbi__do_p:
$LN6@stbi__do_p:
; Line 5210
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR result$[rsp], rax
; Line 5211
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5212
	cmp	DWORD PTR req_comp$[rsp], 0
	je	$LN9@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	$LN9@stbi__do_p
; Line 5213
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 8
	jne	SHORT $LN10@stbi__do_p
; Line 5214
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
	jmp	SHORT $LN11@stbi__do_p
$LN10@stbi__do_p:
; Line 5216
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format16@@YAPEAGPEAGHHII@Z ; stbi__convert_format16
	mov	QWORD PTR result$[rsp], rax
$LN11@stbi__do_p:
; Line 5217
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
; Line 5218
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN12@stbi__do_p
	mov	rax, QWORD PTR result$[rsp]
	jmp	$LN1@stbi__do_p
$LN12@stbi__do_p:
$LN9@stbi__do_p:
; Line 5220
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 5221
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 5222
	cmp	QWORD PTR n$[rsp], 0
	je	SHORT $LN13@stbi__do_p
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rcx], eax
$LN13@stbi__do_p:
$LN4@stbi__do_p:
; Line 5224
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5225
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5226
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5228
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__do_p:
; Line 5229
	add	rsp, 72					; 00000048H
	ret	0
?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__do_png
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pal_img_n$ = 64
s$ = 72
has_trans$ = 80
i$ = 84
c$1 = 88
k$ = 96
idata_limit$ = 100
ioff$ = 104
color$ = 108
tv78 = 112
pal_len$ = 116
first$ = 120
tc$ = 124
interlace$ = 128
raw_len$2 = 132
is_iphone$ = 136
tv197 = 140
tv194 = 144
tv337 = 148
tv386 = 152
tv485 = 156
comp$3 = 160
filter$4 = 164
bpl$5 = 168
p$6 = 176
idata_limit_old$7 = 184
tc16$ = 188
palette$ = 208
__$ArrayPad$ = 1232
z$ = 1264
scan$ = 1272
req_comp$ = 1280
?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z PROC	; stbi__parse_png_file
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5024
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 1248				; 000004e0H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5025
	mov	BYTE PTR pal_img_n$[rsp], 0
; Line 5026
	mov	BYTE PTR has_trans$[rsp], 0
	lea	rax, QWORD PTR tc$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 3
	rep stosb
; Line 5028
	mov	DWORD PTR ioff$[rsp], 0
	mov	DWORD PTR idata_limit$[rsp], 0
	mov	DWORD PTR pal_len$[rsp], 0
; Line 5029
	mov	DWORD PTR first$[rsp], 1
	mov	DWORD PTR interlace$[rsp], 0
	mov	DWORD PTR color$[rsp], 0
	mov	DWORD PTR is_iphone$[rsp], 0
; Line 5030
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 5032
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5033
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5034
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+24], 0
; Line 5036
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ; stbi__check_png_header
	test	eax, eax
	jne	SHORT $LN21@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN21@stbi__pars:
; Line 5038
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN22@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
$LN2@stbi__pars:
; Line 5041
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z ; stbi__get_chunk_header
	mov	QWORD PTR c$1[rsp], rax
; Line 5042
	mov	eax, DWORD PTR c$1[rsp+4]
	mov	DWORD PTR tv78[rsp], eax
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	ja	SHORT $LN105@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229472850		; 49484452H
	je	SHORT $LN24@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1130840649		; 43674249H
	je	SHORT $LN23@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229209940		; 49444154H
	je	$LN61@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1229278788		; 49454e44H
	je	$LN70@stbi__pars
	jmp	$LN91@stbi__pars
$LN105@stbi__pars:
	cmp	DWORD PTR tv78[rsp], 1347179589		; 504c5445H
	je	$LN45@stbi__pars
	cmp	DWORD PTR tv78[rsp], 1951551059		; 74524e53H
	je	$LN49@stbi__pars
	jmp	$LN91@stbi__pars
$LN23@stbi__pars:
; Line 5044
	mov	DWORD PTR is_iphone$[rsp], 1
; Line 5045
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5046
	jmp	$LN5@stbi__pars
$LN24@stbi__pars:
; Line 5049
	cmp	DWORD PTR first$[rsp], 0
	jne	SHORT $LN25@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149821
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN25@stbi__pars:
; Line 5050
	mov	DWORD PTR first$[rsp], 0
; Line 5051
	cmp	DWORD PTR c$1[rsp], 13
	je	SHORT $LN26@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149823
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN26@stbi__pars:
; Line 5052
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 5053
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5054
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN27@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149825
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN27@stbi__pars:
; Line 5055
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN28@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149827
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN28@stbi__pars:
; Line 5056
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+32], eax
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 1
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 2
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 4
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 8
	je	SHORT $LN29@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	je	SHORT $LN29@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149829
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN29@stbi__pars:
; Line 5057
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR color$[rsp], eax
	cmp	DWORD PTR color$[rsp], 6
	jle	SHORT $LN30@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149831
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN30@stbi__pars:
; Line 5058
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN31@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN31@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149833
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN31@stbi__pars:
; Line 5059
	cmp	DWORD PTR color$[rsp], 3
	jne	SHORT $LN32@stbi__pars
	mov	BYTE PTR pal_img_n$[rsp], 3
	jmp	SHORT $LN33@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN34@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149837
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN34@stbi__pars:
$LN33@stbi__pars:
; Line 5060
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR comp$3[rsp], eax
	cmp	DWORD PTR comp$3[rsp], 0
	je	SHORT $LN35@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149839
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN35@stbi__pars:
; Line 5061
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR filter$4[rsp], eax
	cmp	DWORD PTR filter$4[rsp], 0
	je	SHORT $LN36@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149841
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN36@stbi__pars:
; Line 5062
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR interlace$[rsp], eax
	cmp	DWORD PTR interlace$[rsp], 1
	jle	SHORT $LN37@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149843
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN37@stbi__pars:
; Line 5063
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN39@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN38@stbi__pars
$LN39@stbi__pars:
	lea	rcx, OFFSET FLAT:$SG149846
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN38@stbi__pars:
; Line 5064
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	jne	$LN40@stbi__pars
; Line 5065
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN95@stbi__pars
	mov	DWORD PTR tv194[rsp], 3
	jmp	SHORT $LN96@stbi__pars
$LN95@stbi__pars:
	mov	DWORD PTR tv194[rsp], 1
$LN96@stbi__pars:
	mov	eax, DWORD PTR color$[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN97@stbi__pars
	mov	DWORD PTR tv197[rsp], 1
	jmp	SHORT $LN98@stbi__pars
$LN97@stbi__pars:
	mov	DWORD PTR tv197[rsp], 0
$LN98@stbi__pars:
	mov	eax, DWORD PTR tv197[rsp]
	mov	ecx, DWORD PTR tv194[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5066
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN42@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149850
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN42@stbi__pars:
; Line 5067
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN43@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN43@stbi__pars:
; Line 5068
	jmp	SHORT $LN41@stbi__pars
$LN40@stbi__pars:
; Line 5071
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 1
; Line 5072
	xor	edx, edx
	mov	eax, 1073741824				; 40000000H
	mov	rcx, QWORD PTR s$[rsp]
	div	DWORD PTR [rcx]
	xor	edx, edx
	mov	ecx, 4
	div	ecx
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jae	SHORT $LN44@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149853
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN44@stbi__pars:
$LN41@stbi__pars:
; Line 5075
	jmp	$LN5@stbi__pars
$LN45@stbi__pars:
; Line 5079
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN46@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149856
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN46@stbi__pars:
; Line 5080
	cmp	DWORD PTR c$1[rsp], 768			; 00000300H
	jbe	SHORT $LN47@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149858
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 5081
	xor	edx, edx
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, 3
	div	ecx
	mov	DWORD PTR pal_len$[rsp], eax
; Line 5082
	imul	eax, DWORD PTR pal_len$[rsp], 3
	cmp	eax, DWORD PTR c$1[rsp]
	je	SHORT $LN48@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149860
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 5083
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN9@stbi__pars
$LN7@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@stbi__pars:
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN8@stbi__pars
; Line 5084
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 2
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5085
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5086
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
; Line 5087
	mov	eax, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	mov	eax, eax
	mov	BYTE PTR palette$[rsp+rax], 255		; 000000ffH
; Line 5088
	jmp	$LN7@stbi__pars
$LN8@stbi__pars:
; Line 5089
	jmp	$LN5@stbi__pars
$LN49@stbi__pars:
; Line 5093
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN50@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149863
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN50@stbi__pars:
; Line 5094
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN51@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149865
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 5095
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	$LN52@stbi__pars
; Line 5096
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN54@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 4
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN54@stbi__pars:
; Line 5097
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN55@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149870
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN55@stbi__pars:
; Line 5098
	mov	eax, DWORD PTR pal_len$[rsp]
	cmp	DWORD PTR c$1[rsp], eax
	jbe	SHORT $LN56@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149872
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 5099
	mov	BYTE PTR pal_img_n$[rsp], 4
; Line 5100
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__pars
$LN10@stbi__pars:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__pars:
	mov	eax, DWORD PTR c$1[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN11@stbi__pars
; Line 5101
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*4+3]
	mov	ecx, ecx
	mov	BYTE PTR palette$[rsp+rcx], al
	jmp	SHORT $LN10@stbi__pars
$LN11@stbi__pars:
; Line 5102
	jmp	$LN53@stbi__pars
$LN52@stbi__pars:
; Line 5103
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN57@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149874
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN57@stbi__pars:
; Line 5104
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	shl	eax, 1
	cmp	DWORD PTR c$1[rsp], eax
	je	SHORT $LN58@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149876
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN58@stbi__pars:
; Line 5105
	mov	BYTE PTR has_trans$[rsp], 1
; Line 5106
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN59@stbi__pars
; Line 5107
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN15@stbi__pars
$LN13@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN15@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN14@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	WORD PTR tc16$[rsp+rcx*2], ax
	jmp	SHORT $LN13@stbi__pars
$LN14@stbi__pars:
; Line 5108
	jmp	SHORT $LN60@stbi__pars
$LN59@stbi__pars:
; Line 5109
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__pars
$LN16@stbi__pars:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__pars:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN17@stbi__pars
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	and	eax, 255				; 000000ffH
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rcx, DWORD PTR [rcx+32]
	lea	rdx, OFFSET FLAT:?stbi__depth_scale_table@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	imul	eax, ecx
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR tc$[rsp+rcx], al
	jmp	SHORT $LN16@stbi__pars
$LN17@stbi__pars:
$LN60@stbi__pars:
$LN53@stbi__pars:
; Line 5112
	jmp	$LN5@stbi__pars
$LN61@stbi__pars:
; Line 5116
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN62@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149881
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 5117
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN63@stbi__pars
	cmp	DWORD PTR pal_len$[rsp], 0
	jne	SHORT $LN63@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149883
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
; Line 5118
	cmp	DWORD PTR scan$[rsp], 2
	jne	SHORT $LN64@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN64@stbi__pars:
; Line 5119
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ioff$[rsp]
	jge	SHORT $LN65@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN65@stbi__pars:
; Line 5120
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	$LN66@stbi__pars
; Line 5121
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	DWORD PTR idata_limit_old$7[rsp], eax
; Line 5123
	cmp	DWORD PTR idata_limit$[rsp], 0
	jne	SHORT $LN67@stbi__pars
	cmp	DWORD PTR c$1[rsp], 4096		; 00001000H
	jbe	SHORT $LN99@stbi__pars
	mov	eax, DWORD PTR c$1[rsp]
	mov	DWORD PTR tv337[rsp], eax
	jmp	SHORT $LN100@stbi__pars
$LN99@stbi__pars:
	mov	DWORD PTR tv337[rsp], 4096		; 00001000H
$LN100@stbi__pars:
	mov	eax, DWORD PTR tv337[rsp]
	mov	DWORD PTR idata_limit$[rsp], eax
$LN67@stbi__pars:
$LN19@stbi__pars:
; Line 5124
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR idata_limit$[rsp]
	jbe	SHORT $LN20@stbi__pars
; Line 5125
	mov	eax, DWORD PTR idata_limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR idata_limit$[rsp], eax
	jmp	SHORT $LN19@stbi__pars
$LN20@stbi__pars:
; Line 5127
	mov	eax, DWORD PTR idata_limit$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR p$6[rsp], rax
	cmp	QWORD PTR p$6[rsp], 0
	jne	SHORT $LN68@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149889
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 5128
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN66@stbi__pars:
; Line 5130
	mov	eax, DWORD PTR ioff$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	r8d, DWORD PTR c$1[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
	test	eax, eax
	jne	SHORT $LN69@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149891
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN69@stbi__pars:
; Line 5131
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR ioff$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ioff$[rsp], eax
; Line 5132
	jmp	$LN5@stbi__pars
$LN70@stbi__pars:
; Line 5137
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN71@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149894
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN71@stbi__pars:
; Line 5138
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN72@stbi__pars
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN72@stbi__pars:
; Line 5139
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN73@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149897
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN73@stbi__pars:
; Line 5141
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+32]
	add	eax, 7
	xor	edx, edx
	mov	ecx, 8
	div	ecx
	mov	DWORD PTR bpl$5[rsp], eax
; Line 5142
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR bpl$5[rsp]
	imul	ecx, DWORD PTR [rax+4]
	mov	eax, ecx
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+8]
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR raw_len$2[rsp], eax
; Line 5143
	cmp	DWORD PTR is_iphone$[rsp], 0
	jne	SHORT $LN101@stbi__pars
	mov	DWORD PTR tv386[rsp], 1
	jmp	SHORT $LN102@stbi__pars
$LN101@stbi__pars:
	mov	DWORD PTR tv386[rsp], 0
$LN102@stbi__pars:
	mov	eax, DWORD PTR tv386[rsp]
	mov	DWORD PTR [rsp+32], eax
	lea	r9, QWORD PTR raw_len$2[rsp]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	edx, DWORD PTR ioff$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	stbi_zlib_decode_malloc_guesssize_headerflag
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+16], rax
; Line 5144
	mov	rax, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN74@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN74@stbi__pars:
; Line 5145
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+8], 0
; Line 5146
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN78@stbi__pars
	cmp	DWORD PTR req_comp$[rsp], 3
	je	SHORT $LN78@stbi__pars
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN77@stbi__pars
$LN78@stbi__pars:
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN75@stbi__pars
$LN77@stbi__pars:
; Line 5147
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
	jmp	SHORT $LN76@stbi__pars
$LN75@stbi__pars:
; Line 5149
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax+12], ecx
$LN76@stbi__pars:
; Line 5150
	mov	eax, DWORD PTR interlace$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR raw_len$2[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR [rax+16]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z ; stbi__create_png_image
	test	eax, eax
	jne	SHORT $LN79@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN79@stbi__pars:
; Line 5151
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN80@stbi__pars
; Line 5152
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+32], 16
	jne	SHORT $LN81@stbi__pars
; Line 5153
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc16$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z ; stbi__compute_transparency16
	test	eax, eax
	jne	SHORT $LN83@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN83@stbi__pars:
; Line 5154
	jmp	SHORT $LN82@stbi__pars
$LN81@stbi__pars:
; Line 5155
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+12]
	lea	rdx, QWORD PTR tc$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z ; stbi__compute_transparency
	test	eax, eax
	jne	SHORT $LN84@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN84@stbi__pars:
$LN82@stbi__pars:
$LN80@stbi__pars:
; Line 5158
	cmp	DWORD PTR is_iphone$[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN103@stbi__pars
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv485[rsp], eax
	jmp	SHORT $LN104@stbi__pars
$LN103@stbi__pars:
	mov	eax, DWORD PTR ?stbi__de_iphone_flag_global@@3HA
	mov	DWORD PTR tv485[rsp], eax
$LN104@stbi__pars:
	cmp	DWORD PTR tv485[rsp], 0
	je	SHORT $LN85@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 2
	jle	SHORT $LN85@stbi__pars
; Line 5159
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__de_iphone@@YAXPEAUstbi__png@@@Z	; stbi__de_iphone
$LN85@stbi__pars:
; Line 5160
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	test	eax, eax
	je	SHORT $LN86@stbi__pars
; Line 5162
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 5163
	movzx	eax, BYTE PTR pal_img_n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 5164
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN88@stbi__pars
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rax+12], ecx
$LN88@stbi__pars:
; Line 5165
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax+12]
	mov	r8d, DWORD PTR pal_len$[rsp]
	lea	rdx, QWORD PTR palette$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z ; stbi__expand_png_palette
	test	eax, eax
	jne	SHORT $LN89@stbi__pars
; Line 5166
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN89@stbi__pars:
	jmp	SHORT $LN87@stbi__pars
$LN86@stbi__pars:
; Line 5167
	movzx	eax, BYTE PTR has_trans$[rsp]
	test	eax, eax
	je	SHORT $LN90@stbi__pars
; Line 5169
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+8], eax
$LN90@stbi__pars:
$LN87@stbi__pars:
; Line 5171
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR __imp_free
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 5173
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 5174
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN91@stbi__pars:
; Line 5179
	cmp	DWORD PTR first$[rsp], 0
	je	SHORT $LN92@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149917
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN92@stbi__pars:
; Line 5180
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 536870912				; 20000000H
	test	eax, eax
	jne	$LN93@stbi__pars
; Line 5184
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 24
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5185
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 16
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5186
	mov	eax, DWORD PTR c$1[rsp+4]
	shr	eax, 8
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5187
	mov	eax, DWORD PTR c$1[rsp+4]
	and	eax, 255				; 000000ffH
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	mov	BYTE PTR [rdx+rcx], al
; Line 5189
	lea	rcx, OFFSET FLAT:?invalid_chunk@?JH@??stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z@4PADA
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN93@stbi__pars:
; Line 5191
	mov	edx, DWORD PTR c$1[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN5@stbi__pars:
; Line 5195
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 5196
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 5197
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1248				; 000004e0H
	pop	rdi
	ret	0
?stbi__parse_png_file@@YAHPEAUstbi__png@@HH@Z ENDP	; stbi__parse_png_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$1 = 32
half$2 = 33
p$ = 40
t$3 = 48
i$ = 52
t$4 = 56
t$5 = 57
pixel_count$ = 60
tv133 = 64
s$ = 72
z$ = 96
?stbi__de_iphone@@YAXPEAUstbi__png@@@Z PROC		; stbi__de_iphone
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4979
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4980
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4981
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4982
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4984
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 3
	jne	$LN11@stbi__de_i
; Line 4985
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__de_i
$LN2@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__de_i
; Line 4986
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$4[rsp], al
; Line 4987
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4988
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$4[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4989
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4990
	jmp	SHORT $LN2@stbi__de_i
$LN3@stbi__de_i:
; Line 4991
	jmp	$LN12@stbi__de_i
$LN11@stbi__de_i:
; Line 4992
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+12], 4
	je	SHORT $LN18@stbi__de_i
	mov	r8d, 4992				; 00001380H
	lea	rdx, OFFSET FLAT:$SG149723
	lea	rcx, OFFSET FLAT:$SG149724
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN18@stbi__de_i:
; Line 4993
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN19@stbi__de_i
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv133[rsp], eax
	jmp	SHORT $LN20@stbi__de_i
$LN19@stbi__de_i:
	mov	eax, DWORD PTR ?stbi__unpremultiply_on_load_global@@3HA
	mov	DWORD PTR tv133[rsp], eax
$LN20@stbi__de_i:
	cmp	DWORD PTR tv133[rsp], 0
	je	$LN13@stbi__de_i
; Line 4995
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__de_i
$LN5@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__de_i
; Line 4996
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR a$1[rsp], al
; Line 4997
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$3[rsp], al
; Line 4998
	movzx	eax, BYTE PTR a$1[rsp]
	test	eax, eax
	je	$LN15@stbi__de_i
; Line 4999
	movzx	eax, BYTE PTR a$1[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	BYTE PTR half$2[rsp], al
; Line 5000
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5001
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5002
	movzx	eax, BYTE PTR t$3[rsp]
	imul	eax, eax, 255				; 000000ffH
	movzx	ecx, BYTE PTR half$2[rsp]
	add	eax, ecx
	movzx	ecx, BYTE PTR a$1[rsp]
	cdq
	idiv	ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5003
	jmp	SHORT $LN16@stbi__de_i
$LN15@stbi__de_i:
; Line 5004
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5005
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
$LN16@stbi__de_i:
; Line 5007
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5008
	jmp	$LN5@stbi__de_i
$LN6@stbi__de_i:
; Line 5009
	jmp	SHORT $LN14@stbi__de_i
$LN13@stbi__de_i:
; Line 5011
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__de_i
$LN8@stbi__de_i:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__de_i:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN9@stbi__de_i
; Line 5012
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
; Line 5013
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5014
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5015
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 5016
	jmp	SHORT $LN8@stbi__de_i
$LN9@stbi__de_i:
$LN14@stbi__de_i:
$LN12@stbi__de_i:
; Line 5019
	add	rsp, 88					; 00000058H
	ret	0
?stbi__de_iphone@@YAXPEAUstbi__png@@@Z ENDP		; stbi__de_iphone
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
?stbi__unpremultiply_on_load_thread@@YAXH@Z PROC	; stbi__unpremultiply_on_load_thread
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4959
	mov	DWORD PTR [rsp+8], ecx
; Line 4960
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4961
	mov	eax, OFFSET FLAT:?stbi__unpremultiply_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4962
	ret	0
?stbi__unpremultiply_on_load_thread@@YAXH@Z ENDP	; stbi__unpremultiply_on_load_thread
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
n$1 = 36
n$2 = 40
pixel_count$ = 44
p$ = 48
orig$ = 56
temp_out$ = 64
a$ = 96
palette$ = 104
len$ = 112
pal_img_n$ = 120
?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z PROC ; stbi__expand_png_palette
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4902
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4903
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4904
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR orig$[rsp], rax
; Line 4906
	xor	r8d, r8d
	mov	edx, DWORD PTR pal_img_n$[rsp]
	mov	ecx, DWORD PTR pixel_count$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR p$[rsp], rax
; Line 4907
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN8@stbi__expa
	lea	rcx, OFFSET FLAT:$SG149677
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__expa
$LN8@stbi__expa:
; Line 4910
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR temp_out$[rsp], rax
; Line 4912
	cmp	DWORD PTR pal_img_n$[rsp], 3
	jne	$LN9@stbi__expa
; Line 4913
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__expa
$LN2@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN3@stbi__expa
; Line 4914
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$2[rsp], eax
; Line 4915
	movsxd	rax, DWORD PTR n$2[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4916
	mov	eax, DWORD PTR n$2[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4917
	mov	eax, DWORD PTR n$2[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4918
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 3
	mov	QWORD PTR p$[rsp], rax
; Line 4919
	jmp	$LN2@stbi__expa
$LN3@stbi__expa:
; Line 4920
	jmp	$LN10@stbi__expa
$LN9@stbi__expa:
; Line 4921
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__expa
$LN5@stbi__expa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__expa:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__expa
; Line 4922
	mov	eax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 4923
	movsxd	rax, DWORD PTR n$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4924
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4925
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 2
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4926
	mov	eax, DWORD PTR n$1[rsp]
	add	eax, 3
	cdqe
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR palette$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4927
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4928
	jmp	$LN5@stbi__expa
$LN6@stbi__expa:
$LN10@stbi__expa:
; Line 4930
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
; Line 4931
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR temp_out$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4935
	mov	eax, 1
$LN1@stbi__expa:
; Line 4936
	add	rsp, 88					; 00000058H
	ret	0
?stbi__expand_png_palette@@YAHPEAUstbi__png@@PEAEHH@Z ENDP ; stbi__expand_png_palette
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z PROC ; stbi__compute_transparency16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4877
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4878
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4879
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4880
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4884
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4884				; 00001314H
	lea	rdx, OFFSET FLAT:$SG149650
	lea	rcx, OFFSET FLAT:$SG149651
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4886
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4887
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4888
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 65535		; 0000ffffH
$LN14@stbi__comp:
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, WORD PTR tv87[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 4889
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4890
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4891
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4893
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4894
	mov	eax, 2
	imul	rax, rax, 3
	xor	ecx, ecx
	mov	rdx, QWORD PTR p$[rsp]
	mov	WORD PTR [rdx+rax], cx
$LN10@stbi__comp:
; Line 4895
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	QWORD PTR p$[rsp], rax
; Line 4896
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4898
	mov	eax, 1
; Line 4899
	add	rsp, 72					; 00000048H
	ret	0
?stbi__compute_transparency16@@YAHPEAUstbi__png@@QEAGH@Z ENDP ; stbi__compute_transparency16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv87 = 36
pixel_count$ = 40
p$ = 48
s$ = 56
z$ = 80
tc$ = 88
out_n$ = 96
?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z PROC ; stbi__compute_transparency
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4852
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4853
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4854
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR pixel_count$[rsp], eax
; Line 4855
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR p$[rsp], rax
; Line 4859
	cmp	DWORD PTR out_n$[rsp], 2
	je	SHORT $LN12@stbi__comp
	cmp	DWORD PTR out_n$[rsp], 4
	je	SHORT $LN12@stbi__comp
	mov	r8d, 4859				; 000012fbH
	lea	rdx, OFFSET FLAT:$SG149627
	lea	rcx, OFFSET FLAT:$SG149628
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbi__comp:
; Line 4861
	cmp	DWORD PTR out_n$[rsp], 2
	jne	$LN8@stbi__comp
; Line 4862
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN3@stbi__comp
; Line 4863
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN13@stbi__comp
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__comp
$LN13@stbi__comp:
	mov	DWORD PTR tv87[rsp], 255		; 000000ffH
$LN14@stbi__comp:
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	edx, BYTE PTR tv87[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 4864
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 2
	mov	QWORD PTR p$[rsp], rax
; Line 4865
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4866
	jmp	$LN9@stbi__comp
$LN8@stbi__comp:
; Line 4867
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__comp
$LN5@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__comp:
	mov	eax, DWORD PTR pixel_count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	$LN6@stbi__comp
; Line 4868
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tc$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN10@stbi__comp
; Line 4869
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx+rax], 0
$LN10@stbi__comp:
; Line 4870
	mov	rax, QWORD PTR p$[rsp]
	add	rax, 4
	mov	QWORD PTR p$[rsp], rax
; Line 4871
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
$LN9@stbi__comp:
; Line 4873
	mov	eax, 1
; Line 4874
	add	rsp, 72					; 00000048H
	ret	0
?stbi__compute_transparency@@YAHPEAUstbi__png@@QEAEH@Z ENDP ; stbi__compute_transparency
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 64
j$1 = 68
x$2 = 72
i$3 = 76
out_bytes$ = 80
y$4 = 84
tv65 = 88
img_len$5 = 92
final$ = 96
bytes$ = 104
out_y$6 = 108
out_x$7 = 112
tv280 = 120
yspc$8 = 128
xspc$9 = 160
yorig$10 = 192
xorig$11 = 224
__$ArrayPad$ = 256
a$ = 288
image_data$ = 296
image_data_len$ = 304
out_n$ = 312
depth$ = 320
color$ = 328
interlaced$ = 336
?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z PROC ; stbi__create_png_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4807
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4808
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN16@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN17@stbi__crea
$LN16@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN17@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4809
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR out_bytes$[rsp], eax
; Line 4812
	cmp	DWORD PTR interlaced$[rsp], 0
	jne	SHORT $LN11@stbi__crea
; Line 4813
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], edx
	mov	edx, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], edx
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR [rcx]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ; stbi__create_png_image_raw
	jmp	$LN1@stbi__crea
$LN11@stbi__crea:
; Line 4816
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx]
	xor	r9d, r9d
	mov	r8d, DWORD PTR out_bytes$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR [rcx]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR final$[rsp], rax
; Line 4817
	cmp	QWORD PTR final$[rsp], 0
	jne	SHORT $LN12@stbi__crea
	lea	rcx, OFFSET FLAT:$SG149607
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN12@stbi__crea:
; Line 4818
	mov	DWORD PTR p$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR p$[rsp]
	inc	eax
	mov	DWORD PTR p$[rsp], eax
$LN4@stbi__crea:
	cmp	DWORD PTR p$[rsp], 7
	jge	$LN3@stbi__crea
; Line 4819
	mov	DWORD PTR xorig$11[rsp], 0
	mov	DWORD PTR xorig$11[rsp+4], 4
	mov	DWORD PTR xorig$11[rsp+8], 0
	mov	DWORD PTR xorig$11[rsp+12], 2
	mov	DWORD PTR xorig$11[rsp+16], 0
	mov	DWORD PTR xorig$11[rsp+20], 1
	mov	DWORD PTR xorig$11[rsp+24], 0
; Line 4820
	mov	DWORD PTR yorig$10[rsp], 0
	mov	DWORD PTR yorig$10[rsp+4], 0
	mov	DWORD PTR yorig$10[rsp+8], 4
	mov	DWORD PTR yorig$10[rsp+12], 0
	mov	DWORD PTR yorig$10[rsp+16], 2
	mov	DWORD PTR yorig$10[rsp+20], 0
	mov	DWORD PTR yorig$10[rsp+24], 1
; Line 4821
	mov	DWORD PTR xspc$9[rsp], 8
	mov	DWORD PTR xspc$9[rsp+4], 8
	mov	DWORD PTR xspc$9[rsp+8], 4
	mov	DWORD PTR xspc$9[rsp+12], 4
	mov	DWORD PTR xspc$9[rsp+16], 2
	mov	DWORD PTR xspc$9[rsp+20], 2
	mov	DWORD PTR xspc$9[rsp+24], 1
; Line 4822
	mov	DWORD PTR yspc$8[rsp], 8
	mov	DWORD PTR yspc$8[rsp+4], 8
	mov	DWORD PTR yspc$8[rsp+8], 8
	mov	DWORD PTR yspc$8[rsp+12], 4
	mov	DWORD PTR yspc$8[rsp+16], 4
	mov	DWORD PTR yspc$8[rsp+20], 2
	mov	DWORD PTR yspc$8[rsp+24], 2
; Line 4825
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xorig$11[rsp+rcx*4]
	mov	eax, DWORD PTR [rax]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR xspc$9[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR xspc$9[rsp+rcx*4]
	mov	DWORD PTR x$2[rsp], eax
; Line 4826
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yorig$10[rsp+rcx*4]
	mov	eax, DWORD PTR [rax+4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR yspc$8[rsp+rcx*4]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR p$[rsp]
	xor	edx, edx
	div	DWORD PTR yspc$8[rsp+rcx*4]
	mov	DWORD PTR y$4[rsp], eax
; Line 4827
	cmp	DWORD PTR x$2[rsp], 0
	je	$LN13@stbi__crea
	cmp	DWORD PTR y$4[rsp], 0
	je	$LN13@stbi__crea
; Line 4828
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR x$2[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	sar	eax, 3
	inc	eax
	imul	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR img_len$5[rsp], eax
; Line 4829
	mov	eax, DWORD PTR color$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR depth$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR y$4[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR x$2[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_n$[rsp]
	mov	r8d, DWORD PTR image_data_len$[rsp]
	mov	rdx, QWORD PTR image_data$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ; stbi__create_png_image_raw
	test	eax, eax
	jne	SHORT $LN14@stbi__crea
; Line 4830
	mov	rcx, QWORD PTR final$[rsp]
	call	QWORD PTR __imp_free
; Line 4831
	xor	eax, eax
	jmp	$LN1@stbi__crea
$LN14@stbi__crea:
; Line 4833
	mov	DWORD PTR j$1[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR j$1[rsp]
	inc	eax
	mov	DWORD PTR j$1[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR y$4[rsp]
	cmp	DWORD PTR j$1[rsp], eax
	jge	$LN6@stbi__crea
; Line 4834
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__crea
$LN8@stbi__crea:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__crea:
	mov	eax, DWORD PTR x$2[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__crea
; Line 4835
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR yspc$8[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR yorig$10[rsp+rcx*4]
	mov	DWORD PTR out_y$6[rsp], eax
; Line 4836
	movsxd	rax, DWORD PTR p$[rsp]
	mov	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR xspc$9[rsp+rax*4]
	mov	eax, ecx
	movsxd	rcx, DWORD PTR p$[rsp]
	add	eax, DWORD PTR xorig$11[rsp+rcx*4]
	mov	DWORD PTR out_x$7[rsp], eax
; Line 4837
	movsxd	rax, DWORD PTR out_bytes$[rsp]
	mov	ecx, DWORD PTR j$1[rsp]
	imul	ecx, DWORD PTR x$2[rsp]
	add	ecx, DWORD PTR i$3[rsp]
	imul	ecx, DWORD PTR out_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR a$[rsp]
	add	rcx, QWORD PTR [rdx+24]
	mov	rdx, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	r8d, DWORD PTR out_y$6[rsp]
	imul	r8d, DWORD PTR [rdx]
	mov	edx, r8d
	imul	edx, DWORD PTR out_bytes$[rsp]
	mov	edx, edx
	mov	r8, QWORD PTR final$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	r8d, DWORD PTR out_x$7[rsp]
	imul	r8d, DWORD PTR out_bytes$[rsp]
	movsxd	r8, r8d
	add	rdx, r8
	mov	QWORD PTR tv280[rsp], rdx
	mov	r8, rax
	mov	rdx, rcx
	mov	rax, QWORD PTR tv280[rsp]
	mov	rcx, rax
	call	memcpy
; Line 4839
	jmp	$LN8@stbi__crea
$LN9@stbi__crea:
; Line 4840
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4841
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR __imp_free
; Line 4842
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	rcx, QWORD PTR image_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR image_data$[rsp], rax
; Line 4843
	mov	eax, DWORD PTR img_len$5[rsp]
	mov	ecx, DWORD PTR image_data_len$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR image_data_len$[rsp], eax
$LN13@stbi__crea:
; Line 4845
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4846
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR final$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4848
	mov	eax, 1
$LN1@stbi__crea:
; Line 4849
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
?stbi__create_png_image@@YAHPEAUstbi__png@@PEAEIHHHH@Z ENDP ; stbi__create_png_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
scale$1 = 36
cur$2 = 40
i$ = 48
filter_bytes$ = 52
cur$3 = 56
output_bytes$ = 64
q$4 = 68
img_n$ = 72
prior$5 = 80
in$6 = 88
j$ = 96
nk$7 = 100
filter$8 = 104
stride$ = 108
img_width_bytes$ = 112
bytes$ = 116
tv415 = 120
tv668 = 124
tv65 = 128
tv170 = 132
width$ = 136
tv276 = 140
cur$9 = 144
tv393 = 152
tv565 = 156
tv548 = 160
tv620 = 164
img_len$ = 168
tv149 = 172
tv218 = 176
tv362 = 180
tv345 = 184
s$ = 192
cur16$10 = 200
a$ = 224
raw$ = 232
raw_len$ = 240
out_n$ = 248
x$ = 256
y$ = 264
depth$ = 272
color$ = 280
?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z PROC ; stbi__create_png_image_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 4596
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN159@stbi__crea
	mov	DWORD PTR tv65[rsp], 2
	jmp	SHORT $LN160@stbi__crea
$LN159@stbi__crea:
	mov	DWORD PTR tv65[rsp], 1
$LN160@stbi__crea:
	mov	eax, DWORD PTR tv65[rsp]
	mov	DWORD PTR bytes$[rsp], eax
; Line 4597
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 4598
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR stride$[rsp], eax
; Line 4601
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR img_n$[rsp], eax
; Line 4603
	mov	eax, DWORD PTR out_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR output_bytes$[rsp], eax
; Line 4604
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR bytes$[rsp]
	mov	DWORD PTR filter_bytes$[rsp], eax
; Line 4605
	mov	eax, DWORD PTR x$[rsp]
	mov	DWORD PTR width$[rsp], eax
; Line 4607
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	cmp	DWORD PTR out_n$[rsp], eax
	je	SHORT $LN161@stbi__crea
	mov	r8d, 4607				; 000011ffH
	lea	rdx, OFFSET FLAT:$SG149500
	lea	rcx, OFFSET FLAT:$SG149501
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN161@stbi__crea:
; Line 4608
	xor	r9d, r9d
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4609
	mov	rax, QWORD PTR a$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN98@stbi__crea
	lea	rcx, OFFSET FLAT:$SG149503
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN98@stbi__crea:
; Line 4611
	mov	r9d, 7
	mov	r8d, DWORD PTR depth$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN99@stbi__crea
	lea	rcx, OFFSET FLAT:$SG149505
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN99@stbi__crea:
; Line 4612
	mov	eax, DWORD PTR img_n$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR depth$[rsp]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR img_width_bytes$[rsp], eax
; Line 4613
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	inc	eax
	imul	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 4618
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR raw_len$[rsp], eax
	jae	SHORT $LN100@stbi__crea
	lea	rcx, OFFSET FLAT:$SG149507
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN100@stbi__crea:
; Line 4620
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__crea
$LN2@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN3@stbi__crea
; Line 4621
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4623
	mov	rax, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv149[rsp], eax
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
	mov	eax, DWORD PTR tv149[rsp]
	mov	DWORD PTR filter$8[rsp], eax
; Line 4625
	cmp	DWORD PTR filter$8[rsp], 4
	jle	SHORT $LN101@stbi__crea
; Line 4626
	lea	rcx, OFFSET FLAT:$SG149509
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN101@stbi__crea:
; Line 4628
	cmp	DWORD PTR depth$[rsp], 8
	jge	SHORT $LN102@stbi__crea
; Line 4629
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR img_width_bytes$[rsp], eax
	jbe	SHORT $LN103@stbi__crea
	lea	rcx, OFFSET FLAT:$SG149512
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__crea
$LN103@stbi__crea:
; Line 4630
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	sub	eax, DWORD PTR img_width_bytes$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4631
	mov	DWORD PTR filter_bytes$[rsp], 1
; Line 4632
	mov	eax, DWORD PTR img_width_bytes$[rsp]
	mov	DWORD PTR width$[rsp], eax
$LN102@stbi__crea:
; Line 4634
	mov	eax, DWORD PTR stride$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4637
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN104@stbi__crea
	movsxd	rax, DWORD PTR filter$8[rsp]
	lea	rcx, OFFSET FLAT:?first_row_filter@@3PAEA
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR filter$8[rsp], eax
$LN104@stbi__crea:
; Line 4640
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__crea
$LN5@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__crea
; Line 4641
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv170[rsp], eax
	cmp	DWORD PTR tv170[rsp], 6
	ja	$LN8@stbi__crea
	movsxd	rax, DWORD PTR tv170[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN168@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN105@stbi__crea:
; Line 4642
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN106@stbi__crea:
; Line 4643
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN107@stbi__crea:
; Line 4644
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN108@stbi__crea:
; Line 4645
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN8@stbi__crea
$LN109@stbi__crea:
; Line 4646
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv218[rsp], eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	mov	edx, ecx
	xor	ecx, ecx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv218[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN110@stbi__crea:
; Line 4647
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN8@stbi__crea
$LN111@stbi__crea:
; Line 4648
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
$LN8@stbi__crea:
; Line 4650
	jmp	$LN5@stbi__crea
$LN6@stbi__crea:
; Line 4652
	cmp	DWORD PTR depth$[rsp], 8
	jne	SHORT $LN112@stbi__crea
; Line 4653
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN114@stbi__crea
; Line 4654
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN114@stbi__crea:
; Line 4655
	movsxd	rax, DWORD PTR img_n$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4656
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4657
	movsxd	rax, DWORD PTR out_n$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
	jmp	$LN113@stbi__crea
$LN112@stbi__crea:
; Line 4658
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN115@stbi__crea
; Line 4659
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	SHORT $LN117@stbi__crea
; Line 4660
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4661
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
$LN117@stbi__crea:
; Line 4663
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4664
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
; Line 4665
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
; Line 4666
	jmp	SHORT $LN116@stbi__crea
$LN115@stbi__crea:
; Line 4667
	mov	rax, QWORD PTR raw$[rsp]
	inc	rax
	mov	QWORD PTR raw$[rsp], rax
; Line 4668
	mov	rax, QWORD PTR cur$3[rsp]
	inc	rax
	mov	QWORD PTR cur$3[rsp], rax
; Line 4669
	mov	rax, QWORD PTR prior$5[rsp]
	inc	rax
	mov	QWORD PTR prior$5[rsp], rax
$LN116@stbi__crea:
$LN113@stbi__crea:
; Line 4673
	cmp	DWORD PTR depth$[rsp], 8
	jl	SHORT $LN120@stbi__crea
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	jne	$LN118@stbi__crea
$LN120@stbi__crea:
; Line 4674
	mov	eax, DWORD PTR width$[rsp]
	dec	eax
	imul	eax, DWORD PTR filter_bytes$[rsp]
	mov	DWORD PTR nk$7[rsp], eax
; Line 4678
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv276[rsp], eax
	cmp	DWORD PTR tv276[rsp], 6
	ja	$LN10@stbi__crea
	movsxd	rax, DWORD PTR tv276[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN167@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN121@stbi__crea:
; Line 4680
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR raw$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	call	memcpy
	jmp	$LN10@stbi__crea
$LN122@stbi__crea:
; Line 4681
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN14@stbi__crea
$LN12@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN14@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN13@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN12@stbi__crea
$LN13@stbi__crea:
	jmp	$LN10@stbi__crea
$LN123@stbi__crea:
; Line 4682
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN17@stbi__crea
$LN15@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN17@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN16@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN15@stbi__crea
$LN16@stbi__crea:
	jmp	$LN10@stbi__crea
$LN124@stbi__crea:
; Line 4683
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN20@stbi__crea
$LN18@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN20@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN19@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR filter_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN18@stbi__crea
$LN19@stbi__crea:
	jmp	$LN10@stbi__crea
$LN125@stbi__crea:
; Line 4684
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN23@stbi__crea
$LN21@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN23@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN22@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv345[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR filter_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv362[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv362[rsp]
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv345[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN21@stbi__crea
$LN22@stbi__crea:
	jmp	$LN10@stbi__crea
$LN126@stbi__crea:
; Line 4685
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN26@stbi__crea
$LN24@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN26@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN25@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN24@stbi__crea
$LN25@stbi__crea:
	jmp	SHORT $LN10@stbi__crea
$LN127@stbi__crea:
; Line 4686
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN29@stbi__crea
$LN27@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN29@stbi__crea:
	mov	eax, DWORD PTR nk$7[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN28@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv393[rsp], eax
	mov	ecx, DWORD PTR filter_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv393[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN27@stbi__crea
$LN28@stbi__crea:
$LN10@stbi__crea:
; Line 4689
	movsxd	rax, DWORD PTR nk$7[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
; Line 4690
	jmp	$LN119@stbi__crea
$LN118@stbi__crea:
; Line 4691
	mov	eax, DWORD PTR img_n$[rsp]
	inc	eax
	cmp	eax, DWORD PTR out_n$[rsp]
	je	SHORT $LN162@stbi__crea
	mov	r8d, 4691				; 00001253H
	lea	rdx, OFFSET FLAT:$SG149537
	lea	rcx, OFFSET FLAT:$SG149538
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN162@stbi__crea:
; Line 4696
	mov	eax, DWORD PTR filter$8[rsp]
	mov	DWORD PTR tv415[rsp], eax
	cmp	DWORD PTR tv415[rsp], 6
	ja	$LN30@stbi__crea
	movsxd	rax, DWORD PTR tv415[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN166@stbi__crea[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN128@stbi__crea:
; Line 4697
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN34@stbi__crea
$LN32@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN34@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN33@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN37@stbi__crea
$LN35@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN37@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN36@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	r8, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@stbi__crea
$LN36@stbi__crea:
	jmp	$LN32@stbi__crea
$LN33@stbi__crea:
	jmp	$LN30@stbi__crea
$LN129@stbi__crea:
; Line 4698
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN40@stbi__crea
$LN38@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN40@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN39@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN43@stbi__crea
$LN41@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN43@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN42@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN41@stbi__crea
$LN42@stbi__crea:
	jmp	$LN38@stbi__crea
$LN39@stbi__crea:
	jmp	$LN30@stbi__crea
$LN130@stbi__crea:
; Line 4699
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN46@stbi__crea
$LN44@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN46@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN45@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN49@stbi__crea
$LN47@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN49@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN48@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN47@stbi__crea
$LN48@stbi__crea:
	jmp	$LN44@stbi__crea
$LN45@stbi__crea:
	jmp	$LN30@stbi__crea
$LN131@stbi__crea:
; Line 4700
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN52@stbi__crea
$LN50@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN52@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN51@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN55@stbi__crea
$LN53@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN55@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN54@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, DWORD PTR output_bytes$[rsp]
	mov	r8d, DWORD PTR k$[rsp]
	sub	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	mov	r8, QWORD PTR cur$3[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	add	ecx, edx
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN53@stbi__crea
$LN54@stbi__crea:
	jmp	$LN50@stbi__crea
$LN51@stbi__crea:
	jmp	$LN30@stbi__crea
$LN132@stbi__crea:
; Line 4701
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN58@stbi__crea
$LN56@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN58@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	$LN57@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN61@stbi__crea
$LN59@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN61@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN60@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv548[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR prior$5[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	movsxd	rdx, DWORD PTR k$[rsp]
	mov	r8, QWORD PTR prior$5[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	r8d, DWORD PTR output_bytes$[rsp]
	mov	r9d, DWORD PTR k$[rsp]
	sub	r9d, r8d
	mov	r8d, r9d
	movsxd	r8, r8d
	mov	r9, QWORD PTR cur$3[rsp]
	movzx	r8d, BYTE PTR [r9+r8]
	mov	DWORD PTR tv565[rsp], r8d
	mov	r8d, ecx
	mov	ecx, DWORD PTR tv565[rsp]
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv548[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN59@stbi__crea
$LN60@stbi__crea:
	jmp	$LN56@stbi__crea
$LN57@stbi__crea:
	jmp	$LN30@stbi__crea
$LN133@stbi__crea:
; Line 4702
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN64@stbi__crea
$LN62@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN64@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN63@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN67@stbi__crea
$LN65@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN67@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN66@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	sar	ecx, 1
	add	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN65@stbi__crea
$LN66@stbi__crea:
	jmp	$LN62@stbi__crea
$LN63@stbi__crea:
	jmp	$LN30@stbi__crea
$LN134@stbi__crea:
; Line 4703
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN70@stbi__crea
$LN68@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	movsxd	rax, DWORD PTR filter_bytes$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR raw$[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR prior$5[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR prior$5[rsp], rax
$LN70@stbi__crea:
	cmp	DWORD PTR i$[rsp], 1
	jb	SHORT $LN69@stbi__crea
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN73@stbi__crea
$LN71@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN73@stbi__crea:
	mov	eax, DWORD PTR filter_bytes$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN72@stbi__crea
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR raw$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv620[rsp], eax
	mov	ecx, DWORD PTR output_bytes$[rsp]
	mov	edx, DWORD PTR k$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$3[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	xor	r8d, r8d
	xor	edx, edx
	call	?stbi__paeth@@YAHHHH@Z			; stbi__paeth
	mov	ecx, DWORD PTR tv620[rsp]
	add	ecx, eax
	mov	eax, ecx
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN71@stbi__crea
$LN72@stbi__crea:
	jmp	$LN68@stbi__crea
$LN69@stbi__crea:
$LN30@stbi__crea:
; Line 4709
	cmp	DWORD PTR depth$[rsp], 16
	jne	SHORT $LN135@stbi__crea
; Line 4710
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$3[rsp], rax
; Line 4711
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN76@stbi__crea
$LN74@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	movsxd	rax, DWORD PTR output_bytes$[rsp]
	mov	rcx, QWORD PTR cur$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR cur$3[rsp], rax
$LN76@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN75@stbi__crea
; Line 4712
	mov	eax, DWORD PTR filter_bytes$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR cur$3[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4713
	jmp	SHORT $LN74@stbi__crea
$LN75@stbi__crea:
$LN135@stbi__crea:
$LN119@stbi__crea:
; Line 4716
	jmp	$LN2@stbi__crea
$LN3@stbi__crea:
; Line 4721
	cmp	DWORD PTR depth$[rsp], 8
	jge	$LN136@stbi__crea
; Line 4722
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN79@stbi__crea
$LN77@stbi__crea:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN79@stbi__crea:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jae	$LN78@stbi__crea
; Line 4723
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4724
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rcx+24]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR x$[rsp]
	imul	ecx, DWORD PTR out_n$[rsp]
	mov	ecx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR img_width_bytes$[rsp]
	sub	rax, rcx
	mov	QWORD PTR in$6[rsp], rax
; Line 4727
	cmp	DWORD PTR color$[rsp], 0
	jne	SHORT $LN163@stbi__crea
	movsxd	rax, DWORD PTR depth$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__depth_scale_table@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv668[rsp], eax
	jmp	SHORT $LN164@stbi__crea
$LN163@stbi__crea:
	mov	DWORD PTR tv668[rsp], 1
$LN164@stbi__crea:
	movzx	eax, BYTE PTR tv668[rsp]
	mov	BYTE PTR scale$1[rsp], al
; Line 4735
	cmp	DWORD PTR depth$[rsp], 4
	jne	$LN138@stbi__crea
; Line 4736
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN82@stbi__crea
$LN80@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 2
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN82@stbi__crea:
	cmp	DWORD PTR k$[rsp], 2
	jl	SHORT $LN81@stbi__crea
; Line 4737
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4738
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 15
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4739
	jmp	SHORT $LN80@stbi__crea
$LN81@stbi__crea:
; Line 4740
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN140@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN140@stbi__crea:
	jmp	$LN139@stbi__crea
$LN138@stbi__crea:
; Line 4741
	cmp	DWORD PTR depth$[rsp], 2
	jne	$LN141@stbi__crea
; Line 4742
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN85@stbi__crea
$LN83@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 4
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN85@stbi__crea:
	cmp	DWORD PTR k$[rsp], 4
	jl	$LN84@stbi__crea
; Line 4743
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4744
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4745
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4746
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4747
	jmp	$LN83@stbi__crea
$LN84@stbi__crea:
; Line 4748
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN143@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN143@stbi__crea:
; Line 4749
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN144@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN144@stbi__crea:
; Line 4750
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN145@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 3
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN145@stbi__crea:
	jmp	$LN142@stbi__crea
$LN141@stbi__crea:
; Line 4751
	cmp	DWORD PTR depth$[rsp], 1
	jne	$LN146@stbi__crea
; Line 4752
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN88@stbi__crea
$LN86@stbi__crea:
	mov	eax, DWORD PTR k$[rsp]
	sub	eax, 8
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR in$6[rsp]
	inc	rax
	mov	QWORD PTR in$6[rsp], rax
$LN88@stbi__crea:
	cmp	DWORD PTR k$[rsp], 8
	jl	$LN87@stbi__crea
; Line 4753
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4754
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4755
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4756
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4757
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4758
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4759
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4760
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
; Line 4761
	jmp	$LN86@stbi__crea
$LN87@stbi__crea:
; Line 4762
	cmp	DWORD PTR k$[rsp], 0
	jle	SHORT $LN147@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 7
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN147@stbi__crea:
; Line 4763
	cmp	DWORD PTR k$[rsp], 1
	jle	SHORT $LN148@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 6
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN148@stbi__crea:
; Line 4764
	cmp	DWORD PTR k$[rsp], 2
	jle	SHORT $LN149@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 5
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN149@stbi__crea:
; Line 4765
	cmp	DWORD PTR k$[rsp], 3
	jle	SHORT $LN150@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 4
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN150@stbi__crea:
; Line 4766
	cmp	DWORD PTR k$[rsp], 4
	jle	SHORT $LN151@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 3
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN151@stbi__crea:
; Line 4767
	cmp	DWORD PTR k$[rsp], 5
	jle	SHORT $LN152@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 2
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN152@stbi__crea:
; Line 4768
	cmp	DWORD PTR k$[rsp], 6
	jle	SHORT $LN153@stbi__crea
	movzx	eax, BYTE PTR scale$1[rsp]
	mov	rcx, QWORD PTR in$6[rsp]
	movzx	ecx, BYTE PTR [rcx]
	sar	ecx, 1
	and	ecx, 1
	imul	eax, ecx
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR cur$2[rsp]
	inc	rax
	mov	QWORD PTR cur$2[rsp], rax
$LN153@stbi__crea:
$LN146@stbi__crea:
$LN142@stbi__crea:
$LN139@stbi__crea:
; Line 4770
	mov	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR img_n$[rsp], eax
	je	$LN154@stbi__crea
; Line 4773
	mov	eax, DWORD PTR stride$[rsp]
	imul	eax, DWORD PTR j$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	QWORD PTR cur$2[rsp], rax
; Line 4774
	cmp	DWORD PTR img_n$[rsp], 1
	jne	SHORT $LN155@stbi__crea
; Line 4775
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN91@stbi__crea
$LN89@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN91@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	SHORT $LN90@stbi__crea
; Line 4776
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4777
	movsxd	rax, DWORD PTR q$4[rsp]
	mov	ecx, DWORD PTR q$4[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4778
	jmp	SHORT $LN89@stbi__crea
$LN90@stbi__crea:
; Line 4779
	jmp	$LN156@stbi__crea
$LN155@stbi__crea:
; Line 4780
	cmp	DWORD PTR img_n$[rsp], 3
	je	SHORT $LN165@stbi__crea
	mov	r8d, 4780				; 000012acH
	lea	rdx, OFFSET FLAT:$SG149568
	lea	rcx, OFFSET FLAT:$SG149569
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN165@stbi__crea:
; Line 4781
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
	jmp	SHORT $LN94@stbi__crea
$LN92@stbi__crea:
	mov	eax, DWORD PTR q$4[rsp]
	dec	eax
	mov	DWORD PTR q$4[rsp], eax
$LN94@stbi__crea:
	cmp	DWORD PTR q$4[rsp], 0
	jl	$LN93@stbi__crea
; Line 4782
	mov	eax, DWORD PTR q$4[rsp]
	lea	eax, DWORD PTR [rax*4+3]
	cdqe
	mov	rcx, QWORD PTR cur$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 4783
	imul	eax, DWORD PTR q$4[rsp], 3
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+2]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4784
	imul	eax, DWORD PTR q$4[rsp], 3
	inc	eax
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	lea	ecx, DWORD PTR [rcx*4+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4785
	imul	eax, DWORD PTR q$4[rsp], 3
	cdqe
	mov	ecx, DWORD PTR q$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR cur$2[rsp]
	mov	r8, QWORD PTR cur$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 4786
	jmp	$LN92@stbi__crea
$LN93@stbi__crea:
$LN156@stbi__crea:
$LN154@stbi__crea:
; Line 4789
	jmp	$LN77@stbi__crea
$LN78@stbi__crea:
; Line 4790
	jmp	$LN137@stbi__crea
$LN136@stbi__crea:
	cmp	DWORD PTR depth$[rsp], 16
	jne	$LN157@stbi__crea
; Line 4795
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR cur$9[rsp], rax
; Line 4796
	mov	rax, QWORD PTR cur$9[rsp]
	mov	QWORD PTR cur16$10[rsp], rax
; Line 4798
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN97@stbi__crea
$LN95@stbi__crea:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR cur16$10[rsp]
	add	rax, 2
	mov	QWORD PTR cur16$10[rsp], rax
	mov	rax, QWORD PTR cur$9[rsp]
	add	rax, 2
	mov	QWORD PTR cur$9[rsp], rax
$LN97@stbi__crea:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	imul	eax, DWORD PTR out_n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jae	SHORT $LN96@stbi__crea
; Line 4799
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR cur$9[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR cur$9[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	or	eax, ecx
	mov	rcx, QWORD PTR cur16$10[rsp]
	mov	WORD PTR [rcx], ax
; Line 4800
	jmp	$LN95@stbi__crea
$LN96@stbi__crea:
$LN157@stbi__crea:
$LN137@stbi__crea:
; Line 4803
	mov	eax, 1
$LN1@stbi__crea:
; Line 4804
	add	rsp, 216				; 000000d8H
	ret	0
	npad	1
$LN168@stbi__crea:
	DD	$LN105@stbi__crea
	DD	$LN106@stbi__crea
	DD	$LN107@stbi__crea
	DD	$LN108@stbi__crea
	DD	$LN109@stbi__crea
	DD	$LN110@stbi__crea
	DD	$LN111@stbi__crea
$LN167@stbi__crea:
	DD	$LN121@stbi__crea
	DD	$LN122@stbi__crea
	DD	$LN123@stbi__crea
	DD	$LN124@stbi__crea
	DD	$LN125@stbi__crea
	DD	$LN126@stbi__crea
	DD	$LN127@stbi__crea
$LN166@stbi__crea:
	DD	$LN128@stbi__crea
	DD	$LN129@stbi__crea
	DD	$LN130@stbi__crea
	DD	$LN131@stbi__crea
	DD	$LN132@stbi__crea
	DD	$LN133@stbi__crea
	DD	$LN134@stbi__crea
?stbi__create_png_image_raw@@YAHPEAUstbi__png@@PEAEIHIIHH@Z ENDP ; stbi__create_png_image_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
pa$ = 36
pc$ = 40
pb$ = 44
a$ = 64
b$ = 72
c$ = 80
?stbi__paeth@@YAHHHH@Z PROC				; stbi__paeth
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4581
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 4582
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR c$[rsp]
	mov	DWORD PTR p$[rsp], eax
; Line 4583
	mov	eax, DWORD PTR a$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pa$[rsp], eax
; Line 4584
	mov	eax, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pb$[rsp], eax
; Line 4585
	mov	eax, DWORD PTR c$[rsp]
	mov	ecx, DWORD PTR p$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, eax
	call	abs
	mov	DWORD PTR pc$[rsp], eax
; Line 4586
	mov	eax, DWORD PTR pb$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pa$[rsp], eax
	jg	SHORT $LN2@stbi__paet
	mov	eax, DWORD PTR a$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN2@stbi__paet:
; Line 4587
	mov	eax, DWORD PTR pc$[rsp]
	cmp	DWORD PTR pb$[rsp], eax
	jg	SHORT $LN3@stbi__paet
	mov	eax, DWORD PTR b$[rsp]
	jmp	SHORT $LN1@stbi__paet
$LN3@stbi__paet:
; Line 4588
	mov	eax, DWORD PTR c$[rsp]
$LN1@stbi__paet:
; Line 4589
	add	rsp, 56					; 00000038H
	ret	0
?stbi__paeth@@YAHHHH@Z ENDP				; stbi__paeth
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 64
?stbi__check_png_header@@YAHPEAUstbi__context@@@Z PROC	; stbi__check_png_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4544
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4547
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__chec
$LN2@stbi__chec:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__chec:
	cmp	DWORD PTR i$[rsp], 8
	jge	SHORT $LN3@stbi__chec
; Line 4548
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?png_sig@?1??stbi__check_png_header@@YAHPEAUstbi__context@@@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN5@stbi__chec
	lea	rcx, OFFSET FLAT:$SG149310
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__chec
$LN5@stbi__chec:
	jmp	SHORT $LN2@stbi__chec
$LN3@stbi__chec:
; Line 4549
	mov	eax, 1
$LN1@stbi__chec:
; Line 4550
	add	rsp, 56					; 00000038H
	ret	0
?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ENDP	; stbi__check_png_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
s$ = 64
?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z PROC ; stbi__get_chunk_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4536
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4538
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR c$[rsp], eax
; Line 4539
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR c$[rsp+4], eax
; Line 4540
	mov	rax, QWORD PTR c$[rsp]
; Line 4541
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get_chunk_header@@YA?AUstbi__pngchunk@@PEAUstbi__context@@@Z ENDP ; stbi__get_chunk_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
obuf$ = 56
olen$ = 64
exp$ = 72
parse_header$ = 80
?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z PROC	; stbi__do_zlib
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4433
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4434
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4435
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4436
	movsxd	rax, DWORD PTR olen$[rsp]
	mov	rcx, QWORD PTR obuf$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4437
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR exp$[rsp]
	mov	DWORD PTR [rax+48], ecx
; Line 4439
	mov	edx, DWORD PTR parse_header$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z ; stbi__parse_zlib
; Line 4440
	add	rsp, 40					; 00000028H
	ret	0
?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ENDP	; stbi__do_zlib
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
type$ = 32
final$ = 36
a$ = 64
parse_header$ = 72
?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z PROC		; stbi__parse_zlib
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4405
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4407
	cmp	DWORD PTR parse_header$[rsp], 0
	je	SHORT $LN5@stbi__pars
; Line 4408
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_zlib_header
	test	eax, eax
	jne	SHORT $LN6@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN6@stbi__pars:
$LN5@stbi__pars:
; Line 4409
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 4410
	mov	rax, QWORD PTR a$[rsp]
	mov	DWORD PTR [rax+20], 0
$LN4@stbi__pars:
; Line 4412
	mov	edx, 1
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR final$[rsp], eax
; Line 4413
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR type$[rsp], eax
; Line 4414
	cmp	DWORD PTR type$[rsp], 0
	jne	SHORT $LN7@stbi__pars
; Line 4415
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_uncompressed_block
	test	eax, eax
	jne	SHORT $LN9@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
	jmp	$LN8@stbi__pars
$LN7@stbi__pars:
; Line 4416
	cmp	DWORD PTR type$[rsp], 3
	jne	SHORT $LN10@stbi__pars
; Line 4417
	xor	eax, eax
	jmp	$LN1@stbi__pars
; Line 4418
	jmp	SHORT $LN11@stbi__pars
$LN10@stbi__pars:
; Line 4419
	cmp	DWORD PTR type$[rsp], 1
	jne	SHORT $LN12@stbi__pars
; Line 4421
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, 288				; 00000120H
	lea	rdx, OFFSET FLAT:?stbi__zdefault_length@@3QBEB
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN14@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN14@stbi__pars:
; Line 4422
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	r8d, 32					; 00000020H
	lea	rdx, OFFSET FLAT:?stbi__zdefault_distance@@3QBEB
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN15@stbi__pars:
; Line 4423
	jmp	SHORT $LN13@stbi__pars
$LN12@stbi__pars:
; Line 4424
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z ; stbi__compute_huffman_codes
	test	eax, eax
	jne	SHORT $LN16@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN16@stbi__pars:
$LN13@stbi__pars:
; Line 4426
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z ; stbi__parse_huffman_block
	test	eax, eax
	jne	SHORT $LN17@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN17@stbi__pars:
$LN11@stbi__pars:
$LN8@stbi__pars:
; Line 4428
	cmp	DWORD PTR final$[rsp], 0
	je	$LN4@stbi__pars
; Line 4429
	mov	eax, 1
$LN1@stbi__pars:
; Line 4430
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_zlib@@YAHPEAUstbi__zbuf@@H@Z ENDP		; stbi__parse_zlib
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmf$ = 32
flg$ = 36
cm$ = 40
a$ = 64
?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z PROC	; stbi__parse_zlib_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4362
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4363
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR cmf$[rsp], eax
; Line 4364
	mov	eax, DWORD PTR cmf$[rsp]
	and	eax, 15
	mov	DWORD PTR cm$[rsp], eax
; Line 4366
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR flg$[rsp], eax
; Line 4367
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN2@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149167
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN2@stbi__pars:
; Line 4368
	imul	eax, DWORD PTR cmf$[rsp], 256		; 00000100H
	add	eax, DWORD PTR flg$[rsp]
	cdq
	mov	ecx, 31
	idiv	ecx
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN3@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149169
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN3@stbi__pars:
; Line 4369
	mov	eax, DWORD PTR flg$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN4@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149171
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN4@stbi__pars:
; Line 4370
	cmp	DWORD PTR cm$[rsp], 8
	je	SHORT $LN5@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149173
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pars
$LN5@stbi__pars:
; Line 4372
	mov	eax, 1
$LN1@stbi__pars:
; Line 4373
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_zlib_header@@YAHPEAUstbi__zbuf@@@Z ENDP	; stbi__parse_zlib_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
len$ = 36
header$ = 40
nlen$ = 44
a$ = 64
?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z PROC ; stbi__parse_uncompressed_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4333
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4336
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	test	eax, eax
	je	SHORT $LN6@stbi__pars
; Line 4337
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	and	eax, 7
	mov	edx, eax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
$LN6@stbi__pars:
; Line 4339
	mov	DWORD PTR k$[rsp], 0
$LN2@stbi__pars:
; Line 4340
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jle	SHORT $LN3@stbi__pars
; Line 4341
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4342
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4343
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, 8
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4344
	jmp	SHORT $LN2@stbi__pars
$LN3@stbi__pars:
; Line 4345
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jge	SHORT $LN7@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149153
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN7@stbi__pars:
$LN4@stbi__pars:
; Line 4347
	cmp	DWORD PTR k$[rsp], 4
	jge	SHORT $LN5@stbi__pars
; Line 4348
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	BYTE PTR header$[rsp+rcx], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN4@stbi__pars
$LN5@stbi__pars:
; Line 4349
	mov	eax, 1
	imul	rax, rax, 1
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 4350
	mov	eax, 1
	imul	rax, rax, 3
	movzx	eax, BYTE PTR header$[rsp+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	ecx, BYTE PTR header$[rsp+rcx]
	add	eax, ecx
	mov	DWORD PTR nlen$[rsp], eax
; Line 4351
	mov	eax, DWORD PTR len$[rsp]
	xor	eax, 65535				; 0000ffffH
	cmp	DWORD PTR nlen$[rsp], eax
	je	SHORT $LN8@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149155
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN8@stbi__pars:
; Line 4352
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+8]
	jbe	SHORT $LN9@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149157
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN9@stbi__pars:
; Line 4353
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN10@stbi__pars
; Line 4354
	mov	r8d, DWORD PTR len$[rsp]
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN11@stbi__pars
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pars
$LN11@stbi__pars:
$LN10@stbi__pars:
; Line 4355
	movsxd	rax, DWORD PTR len$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR a$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	memcpy
; Line 4356
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 4357
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	add	rax, QWORD PTR [rcx+24]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4358
	mov	eax, 1
$LN1@stbi__pars:
; Line 4359
	add	rsp, 56					; 00000038H
	ret	0
?stbi__parse_uncompressed_block@@YAHPEAUstbi__zbuf@@@Z ENDP ; stbi__parse_uncompressed_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
fill$2 = 36
n$ = 40
i$ = 44
ntot$ = 48
hlit$ = 52
hdist$ = 56
hclen$ = 60
s$3 = 64
tv175 = 72
z_codelength$ = 80
codelength_sizes$ = 2112
lencodes$ = 2144
__$ArrayPad$ = 2608
a$ = 2640
?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z PROC ; stbi__compute_huffman_codes
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4283
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2632				; 00000a48H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4290
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 257				; 00000101H
	mov	DWORD PTR hlit$[rsp], eax
; Line 4291
	mov	edx, 5
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	inc	eax
	mov	DWORD PTR hdist$[rsp], eax
; Line 4292
	mov	edx, 4
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 4
	mov	DWORD PTR hclen$[rsp], eax
; Line 4293
	mov	eax, DWORD PTR hdist$[rsp]
	mov	ecx, DWORD PTR hlit$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ntot$[rsp], eax
; Line 4295
	mov	r8d, 19
	xor	edx, edx
	lea	rcx, QWORD PTR codelength_sizes$[rsp]
	call	memset
; Line 4296
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__comp
$LN2@stbi__comp:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__comp:
	mov	eax, DWORD PTR hclen$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__comp
; Line 4297
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	DWORD PTR s$3[rsp], eax
; Line 4298
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:?length_dezigzag@?1??stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z@4QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	movzx	ecx, BYTE PTR s$3[rsp]
	mov	BYTE PTR codelength_sizes$[rsp+rax], cl
; Line 4299
	jmp	SHORT $LN2@stbi__comp
$LN3@stbi__comp:
; Line 4300
	mov	r8d, 19
	lea	rdx, QWORD PTR codelength_sizes$[rsp]
	lea	rcx, QWORD PTR z_codelength$[rsp]
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN7@stbi__comp
	xor	eax, eax
	jmp	$LN1@stbi__comp
$LN7@stbi__comp:
; Line 4302
	mov	DWORD PTR n$[rsp], 0
$LN5@stbi__comp:
; Line 4303
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	$LN6@stbi__comp
; Line 4304
	lea	rdx, QWORD PTR z_codelength$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR c$1[rsp], eax
; Line 4305
	cmp	DWORD PTR c$1[rsp], 0
	jl	SHORT $LN9@stbi__comp
	cmp	DWORD PTR c$1[rsp], 19
	jl	SHORT $LN8@stbi__comp
$LN9@stbi__comp:
	lea	rcx, OFFSET FLAT:$SG149121
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN8@stbi__comp:
; Line 4306
	cmp	DWORD PTR c$1[rsp], 16
	jge	SHORT $LN10@stbi__comp
; Line 4307
	movsxd	rax, DWORD PTR n$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR lencodes$[rsp+rax], cl
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
	jmp	$LN11@stbi__comp
$LN10@stbi__comp:
; Line 4309
	mov	BYTE PTR fill$2[rsp], 0
; Line 4310
	cmp	DWORD PTR c$1[rsp], 16
	jne	SHORT $LN12@stbi__comp
; Line 4311
	mov	edx, 2
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
; Line 4312
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbi__comp
	lea	rcx, OFFSET FLAT:$SG149127
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN14@stbi__comp:
; Line 4313
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	cdqe
	movzx	eax, BYTE PTR lencodes$[rsp+rax]
	mov	BYTE PTR fill$2[rsp], al
	jmp	SHORT $LN13@stbi__comp
$LN12@stbi__comp:
; Line 4314
	cmp	DWORD PTR c$1[rsp], 17
	jne	SHORT $LN15@stbi__comp
; Line 4315
	mov	edx, 3
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 3
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN16@stbi__comp
$LN15@stbi__comp:
; Line 4316
	cmp	DWORD PTR c$1[rsp], 18
	jne	SHORT $LN17@stbi__comp
; Line 4317
	mov	edx, 7
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	add	eax, 11
	mov	DWORD PTR c$1[rsp], eax
; Line 4318
	jmp	SHORT $LN18@stbi__comp
$LN17@stbi__comp:
; Line 4319
	lea	rcx, OFFSET FLAT:$SG149132
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN18@stbi__comp:
$LN16@stbi__comp:
$LN13@stbi__comp:
; Line 4321
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR ntot$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR c$1[rsp]
	jge	SHORT $LN19@stbi__comp
	lea	rcx, OFFSET FLAT:$SG149134
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__comp
$LN19@stbi__comp:
; Line 4322
	movsxd	rax, DWORD PTR c$1[rsp]
	movzx	ecx, BYTE PTR fill$2[rsp]
	movsxd	rdx, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp+rdx]
	mov	QWORD PTR tv175[rsp], rdx
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv175[rsp]
	mov	rcx, rax
	call	memset
; Line 4323
	mov	eax, DWORD PTR c$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__comp:
; Line 4325
	jmp	$LN5@stbi__comp
$LN6@stbi__comp:
; Line 4326
	mov	eax, DWORD PTR ntot$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	je	SHORT $LN20@stbi__comp
	lea	rcx, OFFSET FLAT:$SG149136
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__comp
$LN20@stbi__comp:
; Line 4327
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	r8d, DWORD PTR hlit$[rsp]
	lea	rdx, QWORD PTR lencodes$[rsp]
	mov	rcx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN21@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN21@stbi__comp:
; Line 4328
	movsxd	rax, DWORD PTR hlit$[rsp]
	lea	rax, QWORD PTR lencodes$[rsp+rax]
	mov	rcx, QWORD PTR a$[rsp]
	add	rcx, 2072				; 00000818H
	mov	r8d, DWORD PTR hdist$[rsp]
	mov	rdx, rax
	call	?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ; stbi__zbuild_huffman
	test	eax, eax
	jne	SHORT $LN22@stbi__comp
	xor	eax, eax
	jmp	SHORT $LN1@stbi__comp
$LN22@stbi__comp:
; Line 4329
	mov	eax, 1
$LN1@stbi__comp:
; Line 4330
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2632				; 00000a48H
	ret	0
?stbi__compute_huffman_codes@@YAHPEAUstbi__zbuf@@@Z ENDP ; stbi__compute_huffman_codes
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$1 = 32
tv179 = 33
z$2 = 36
len$3 = 40
dist$4 = 44
zout$ = 48
p$5 = 56
a$ = 80
?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z PROC	; stbi__parse_huffman_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4241
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4242
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN2@stbi__pars:
; Line 4244
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 52					; 00000034H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4245
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jge	SHORT $LN11@stbi__pars
; Line 4246
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN13@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149078
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN13@stbi__pars:
; Line 4247
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+40]
	cmp	QWORD PTR zout$[rsp], rax
	jb	SHORT $LN14@stbi__pars
; Line 4248
	mov	r8d, 1
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN15@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN15@stbi__pars:
; Line 4249
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN14@stbi__pars:
; Line 4251
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR z$2[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
; Line 4252
	jmp	$LN12@stbi__pars
$LN11@stbi__pars:
; Line 4255
	cmp	DWORD PTR z$2[rsp], 256			; 00000100H
	jne	SHORT $LN16@stbi__pars
; Line 4256
	mov	rax, QWORD PTR a$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4257
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN16@stbi__pars:
; Line 4259
	mov	eax, DWORD PTR z$2[rsp]
	sub	eax, 257				; 00000101H
	mov	DWORD PTR z$2[rsp], eax
; Line 4260
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_base@@3QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR len$3[rsp], eax
; Line 4261
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_extra@@3QBHB
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN17@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zlength_extra@@3QBHB
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	ecx, DWORD PTR len$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$3[rsp], eax
$LN17@stbi__pars:
; Line 4262
	mov	rax, QWORD PTR a$[rsp]
	add	rax, 2072				; 00000818H
	mov	rdx, rax
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode
	mov	DWORD PTR z$2[rsp], eax
; Line 4263
	cmp	DWORD PTR z$2[rsp], 0
	jge	SHORT $LN18@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149084
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN18@stbi__pars:
; Line 4264
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_base@@3QBHB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR dist$4[rsp], eax
; Line 4265
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_extra@@3QBHB
	cmp	DWORD PTR [rcx+rax*4], 0
	je	SHORT $LN19@stbi__pars
	movsxd	rax, DWORD PTR z$2[rsp]
	lea	rcx, OFFSET FLAT:?stbi__zdist_extra@@3QBHB
	mov	edx, DWORD PTR [rcx+rax*4]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z	; stbi__zreceive
	mov	ecx, DWORD PTR dist$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR dist$4[rsp], eax
$LN19@stbi__pars:
; Line 4266
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR dist$4[rsp]
	cmp	rax, rcx
	jge	SHORT $LN20@stbi__pars
	lea	rcx, OFFSET FLAT:$SG149087
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__pars
$LN20@stbi__pars:
; Line 4267
	movsxd	rax, DWORD PTR len$3[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR a$[rsp]
	cmp	rax, QWORD PTR [rcx+40]
	jbe	SHORT $LN21@stbi__pars
; Line 4268
	mov	r8d, DWORD PTR len$3[rsp]
	mov	rdx, QWORD PTR zout$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ; stbi__zexpand
	test	eax, eax
	jne	SHORT $LN22@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN22@stbi__pars:
; Line 4269
	mov	rax, QWORD PTR a$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR zout$[rsp], rax
$LN21@stbi__pars:
; Line 4271
	movsxd	rax, DWORD PTR dist$4[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$5[rsp], rax
; Line 4272
	cmp	DWORD PTR dist$4[rsp], 1
	jne	SHORT $LN23@stbi__pars
; Line 4273
	mov	rax, QWORD PTR p$5[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR v$1[rsp], al
; Line 4274
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN25@stbi__pars
$LN7@stbi__pars:
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR v$1[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN7@stbi__pars
$LN25@stbi__pars:
; Line 4275
	jmp	SHORT $LN24@stbi__pars
$LN23@stbi__pars:
; Line 4276
	cmp	DWORD PTR len$3[rsp], 0
	je	SHORT $LN26@stbi__pars
$LN10@stbi__pars:
	mov	rax, QWORD PTR p$5[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv179[rsp], al
	mov	rax, QWORD PTR p$5[rsp]
	inc	rax
	mov	QWORD PTR p$5[rsp], rax
	mov	rax, QWORD PTR zout$[rsp]
	movzx	ecx, BYTE PTR tv179[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR zout$[rsp]
	inc	rax
	mov	QWORD PTR zout$[rsp], rax
	mov	eax, DWORD PTR len$3[rsp]
	dec	eax
	mov	DWORD PTR len$3[rsp], eax
	cmp	DWORD PTR len$3[rsp], 0
	jne	SHORT $LN10@stbi__pars
$LN26@stbi__pars:
$LN24@stbi__pars:
$LN12@stbi__pars:
; Line 4279
	jmp	$LN2@stbi__pars
$LN1@stbi__pars:
; Line 4280
	add	rsp, 72					; 00000048H
	ret	0
?stbi__parse_huffman_block@@YAHPEAUstbi__zbuf@@@Z ENDP	; stbi__parse_huffman_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
limit$ = 32
cur$ = 36
old_limit$ = 40
q$ = 48
z$ = 80
zout$ = 88
n$ = 96
?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z PROC		; stbi__zexpand
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4205
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4208
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR zout$[rsp]
	mov	QWORD PTR [rax+24], rcx
; Line 4209
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG149044
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zexp
$LN4@stbi__zexp:
; Line 4210
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+24]
	sub	rax, rcx
	mov	DWORD PTR cur$[rsp], eax
; Line 4211
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+32]
	mov	rax, QWORD PTR [rax+40]
	sub	rax, rcx
	mov	DWORD PTR old_limit$[rsp], eax
	mov	eax, DWORD PTR old_limit$[rsp]
	mov	DWORD PTR limit$[rsp], eax
; Line 4212
	mov	eax, -1					; ffffffffH
	sub	eax, DWORD PTR cur$[rsp]
	cmp	eax, DWORD PTR n$[rsp]
	jae	SHORT $LN5@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG149046
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zexp
$LN5@stbi__zexp:
$LN2@stbi__zexp:
; Line 4213
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, DWORD PTR cur$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR limit$[rsp]
	jbe	SHORT $LN3@stbi__zexp
; Line 4214
	cmp	DWORD PTR limit$[rsp], 2147483647	; 7fffffffH
	jbe	SHORT $LN6@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG149048
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__zexp
$LN6@stbi__zexp:
; Line 4215
	mov	eax, DWORD PTR limit$[rsp]
	shl	eax, 1
	mov	DWORD PTR limit$[rsp], eax
; Line 4216
	jmp	SHORT $LN2@stbi__zexp
$LN3@stbi__zexp:
; Line 4217
	mov	eax, DWORD PTR limit$[rsp]
	mov	edx, eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax+32]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR q$[rsp], rax
; Line 4219
	cmp	QWORD PTR q$[rsp], 0
	jne	SHORT $LN7@stbi__zexp
	lea	rcx, OFFSET FLAT:$SG149050
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__zexp
$LN7@stbi__zexp:
; Line 4220
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	mov	QWORD PTR [rax+32], rcx
; Line 4221
	mov	eax, DWORD PTR cur$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+24], rax
; Line 4222
	mov	eax, DWORD PTR limit$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+40], rax
; Line 4223
	mov	eax, 1
$LN1@stbi__zexp:
; Line 4224
	add	rsp, 72					; 00000048H
	ret	0
?stbi__zexpand@@YAHPEAUstbi__zbuf@@PEADH@Z ENDP		; stbi__zexpand
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 32
s$ = 36
tv132 = 40
a$ = 64
z$ = 72
?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z PROC ; stbi__zhuffman_decode
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4186
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4188
	mov	rax, QWORD PTR a$[rsp]
	cmp	DWORD PTR [rax+16], 16
	jge	SHORT $LN2@stbi__zhuf
; Line 4189
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zhuf
; Line 4190
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4192
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z	; stbi__fill_bits
$LN2@stbi__zhuf:
; Line 4194
	mov	rax, QWORD PTR a$[rsp]
	mov	eax, DWORD PTR [rax+20]
	and	eax, 511				; 000001ffH
	mov	eax, eax
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR b$[rsp], eax
; Line 4195
	cmp	DWORD PTR b$[rsp], 0
	je	SHORT $LN4@stbi__zhuf
; Line 4196
	mov	eax, DWORD PTR b$[rsp]
	sar	eax, 9
	mov	DWORD PTR s$[rsp], eax
; Line 4197
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv132[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv132[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4198
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4199
	mov	eax, DWORD PTR b$[rsp]
	and	eax, 511				; 000001ffH
	jmp	SHORT $LN1@stbi__zhuf
$LN4@stbi__zhuf:
; Line 4201
	mov	rdx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	call	?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ; stbi__zhuffman_decode_slowpath
$LN1@stbi__zhuf:
; Line 4202
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zhuffman_decode@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ENDP ; stbi__zhuffman_decode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
b$ = 36
k$ = 40
tv158 = 48
a$ = 80
z$ = 88
?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z PROC ; stbi__zhuffman_decode_slowpath
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4167
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4171
	mov	edx, 16
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR [rax+20]
	call	?stbi__bit_reverse@@YAHHH@Z		; stbi__bit_reverse
	mov	DWORD PTR k$[rsp], eax
; Line 4172
	mov	DWORD PTR s$[rsp], 10
	jmp	SHORT $LN4@stbi__zhuf
$LN2@stbi__zhuf:
	mov	eax, DWORD PTR s$[rsp]
	inc	eax
	mov	DWORD PTR s$[rsp], eax
$LN4@stbi__zhuf:
; Line 4173
	movsxd	rax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1056]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN5@stbi__zhuf
; Line 4174
	jmp	SHORT $LN3@stbi__zhuf
$LN5@stbi__zhuf:
	jmp	SHORT $LN2@stbi__zhuf
$LN3@stbi__zhuf:
; Line 4175
	cmp	DWORD PTR s$[rsp], 16
	jl	SHORT $LN6@stbi__zhuf
	mov	eax, -1
	jmp	$LN1@stbi__zhuf
$LN6@stbi__zhuf:
; Line 4177
	mov	eax, 16
	sub	eax, DWORD PTR s$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR k$[rsp]
	sar	eax, cl
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR b$[rsp], eax
; Line 4178
	cmp	DWORD PTR b$[rsp], 288			; 00000120H
	jl	SHORT $LN7@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN7@stbi__zhuf:
; Line 4179
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1156]
	cmp	eax, DWORD PTR s$[rsp]
	je	SHORT $LN8@stbi__zhuf
	mov	eax, -1
	jmp	SHORT $LN1@stbi__zhuf
$LN8@stbi__zhuf:
; Line 4180
	mov	eax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR a$[rsp]
	mov	QWORD PTR tv158[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv158[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4181
	mov	rax, QWORD PTR a$[rsp]
	mov	ecx, DWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR a$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4182
	movsxd	rax, DWORD PTR b$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+1444]
$LN1@stbi__zhuf:
; Line 4183
	add	rsp, 72					; 00000048H
	ret	0
?stbi__zhuffman_decode_slowpath@@YAHPEAUstbi__zbuf@@PEAUstbi__zhuffman@@@Z ENDP ; stbi__zhuffman_decode_slowpath
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
k$ = 36
tv89 = 40
z$ = 64
n$ = 72
?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z PROC		; stbi__zreceive
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4157
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4159
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jge	SHORT $LN2@stbi__zrec
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z	; stbi__fill_bits
$LN2@stbi__zrec:
; Line 4160
	mov	eax, DWORD PTR n$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv83[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv83[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+20]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4161
	mov	eax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR tv89[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv89[rsp]
	mov	eax, DWORD PTR [rax+20]
	shr	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4162
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4163
	mov	eax, DWORD PTR k$[rsp]
; Line 4164
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zreceive@@YAIPEAUstbi__zbuf@@H@Z ENDP		; stbi__zreceive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv131 = 32
tv76 = 36
tv78 = 40
tv84 = 44
tv82 = 48
z$ = 80
?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z PROC		; stbi__fill_bits
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4145
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
$LN4@stbi__fill:
; Line 4147
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, 1
	mov	DWORD PTR tv131[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv131[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+20], eax
	jb	SHORT $LN5@stbi__fill
; Line 4148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 4149
	jmp	SHORT $LN1@stbi__fill
$LN5@stbi__fill:
; Line 4151
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z	; stbi__zget8
	movzx	eax, al
	mov	DWORD PTR tv78[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv76[rsp], eax
	mov	eax, DWORD PTR tv76[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR tv78[rsp]
	shl	eax, cl
	mov	DWORD PTR tv84[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR tv82[rsp], eax
	mov	eax, DWORD PTR tv84[rsp]
	mov	ecx, DWORD PTR tv82[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+20], eax
; Line 4152
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, 8
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4153
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+16], 24
	jle	$LN4@stbi__fill
$LN1@stbi__fill:
; Line 4154
	add	rsp, 72					; 00000048H
	ret	0
?stbi__fill_bits@@YAXPEAUstbi__zbuf@@@Z ENDP		; stbi__fill_bits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
z$ = 64
?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z PROC		; stbi__zget8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4140
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4141
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z	; stbi__zeof
	test	eax, eax
	je	SHORT $LN3@stbi__zget
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN4@stbi__zget
$LN3@stbi__zget:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv73[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	inc	rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx], rax
$LN4@stbi__zget:
	movzx	eax, BYTE PTR tv73[rsp]
; Line 4142
	add	rsp, 56					; 00000038H
	ret	0
?stbi__zget8@@YAEPEAUstbi__zbuf@@@Z ENDP		; stbi__zget8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
z$ = 32
?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z PROC			; stbi__zeof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4135
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4136
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	cmp	QWORD PTR [rax], rcx
	jb	SHORT $LN3@stbi__zeof
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__zeof
$LN3@stbi__zeof:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__zeof:
	mov	eax, DWORD PTR tv67[rsp]
; Line 4137
	add	rsp, 24
	ret	0
?stbi__zeof@@YAHPEAUstbi__zbuf@@@Z ENDP			; stbi__zeof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$1 = 36
code$ = 40
j$2 = 44
fastv$3 = 48
k$ = 52
c$4 = 56
tv288 = 60
sizes$ = 64
next_code$ = 144
__$ArrayPad$ = 208
z$ = 240
sizelist$ = 248
num$ = 256
?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z PROC ; stbi__zbuild_huffman
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4068
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4069
	mov	DWORD PTR k$[rsp], 0
; Line 4073
	mov	r8d, 68					; 00000044H
	xor	edx, edx
	lea	rcx, QWORD PTR sizes$[rsp]
	call	memset
; Line 4074
	mov	rax, QWORD PTR z$[rsp]
	mov	r8d, 1024				; 00000400H
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 4075
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__zbui
$LN2@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__zbui
; Line 4076
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR sizelist$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	DWORD PTR sizes$[rsp+rcx*4], eax
	jmp	SHORT $LN2@stbi__zbui
$LN3@stbi__zbui:
; Line 4077
	mov	eax, 4
	imul	rax, rax, 0
	mov	DWORD PTR sizes$[rsp+rax], 0
; Line 4078
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN7@stbi__zbui
$LN5@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN6@stbi__zbui
; Line 4079
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	DWORD PTR sizes$[rsp+rax*4], ecx
	jle	SHORT $LN16@stbi__zbui
; Line 4080
	lea	rcx, OFFSET FLAT:$SG148956
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zbui
$LN16@stbi__zbui:
	jmp	SHORT $LN5@stbi__zbui
$LN6@stbi__zbui:
; Line 4081
	mov	DWORD PTR code$[rsp], 0
; Line 4082
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN10@stbi__zbui
$LN8@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__zbui:
	cmp	DWORD PTR i$[rsp], 16
	jge	$LN9@stbi__zbui
; Line 4083
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR code$[rsp]
	mov	DWORD PTR next_code$[rsp+rax*4], ecx
; Line 4084
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR code$[rsp]
	mov	WORD PTR [rcx+rax*2+1024], dx
; Line 4085
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR k$[rsp]
	mov	WORD PTR [rcx+rax*2+1124], dx
; Line 4086
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR code$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR code$[rsp], eax
; Line 4087
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	DWORD PTR sizes$[rsp+rax*4], 0
	je	SHORT $LN17@stbi__zbui
; Line 4088
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR i$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jl	SHORT $LN18@stbi__zbui
	lea	rcx, OFFSET FLAT:$SG148959
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__zbui
$LN18@stbi__zbui:
$LN17@stbi__zbui:
; Line 4089
	mov	eax, 16
	sub	eax, DWORD PTR i$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1056], eax
; Line 4090
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 4091
	movsxd	rax, DWORD PTR i$[rsp]
	mov	eax, DWORD PTR sizes$[rsp+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 4092
	jmp	$LN8@stbi__zbui
$LN9@stbi__zbui:
; Line 4093
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+rax+1056], 65536		; 00010000H
; Line 4094
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__zbui
$LN11@stbi__zbui:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__zbui:
	mov	eax, DWORD PTR num$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN12@stbi__zbui
; Line 4095
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sizelist$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR s$1[rsp], eax
; Line 4096
	cmp	DWORD PTR s$1[rsp], 0
	je	$LN19@stbi__zbui
; Line 4097
	movsxd	rax, DWORD PTR s$1[rsp]
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1024]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	sub	eax, ecx
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+1124]
	add	eax, ecx
	mov	DWORD PTR c$4[rsp], eax
; Line 4098
	mov	eax, DWORD PTR s$1[rsp]
	shl	eax, 9
	or	eax, DWORD PTR i$[rsp]
	mov	WORD PTR fastv$3[rsp], ax
; Line 4099
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, BYTE PTR s$1[rsp]
	mov	BYTE PTR [rcx+rax+1156], dl
; Line 4100
	movsxd	rax, DWORD PTR c$4[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR i$[rsp]
	mov	WORD PTR [rcx+rax*2+1444], dx
; Line 4101
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN20@stbi__zbui
; Line 4102
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	edx, DWORD PTR s$1[rsp]
	mov	ecx, DWORD PTR next_code$[rsp+rax*4]
	call	?stbi__bit_reverse@@YAHHH@Z		; stbi__bit_reverse
	mov	DWORD PTR j$2[rsp], eax
$LN14@stbi__zbui:
; Line 4103
	cmp	DWORD PTR j$2[rsp], 512			; 00000200H
	jge	SHORT $LN15@stbi__zbui
; Line 4104
	movsxd	rax, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	movzx	edx, WORD PTR fastv$3[rsp]
	mov	WORD PTR [rcx+rax*2], dx
; Line 4105
	mov	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv288[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv288[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR j$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR j$2[rsp], eax
; Line 4106
	jmp	SHORT $LN14@stbi__zbui
$LN15@stbi__zbui:
$LN20@stbi__zbui:
; Line 4108
	movsxd	rax, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR next_code$[rsp+rax*4]
	inc	eax
	movsxd	rcx, DWORD PTR s$1[rsp]
	mov	DWORD PTR next_code$[rsp+rcx*4], eax
$LN19@stbi__zbui:
; Line 4110
	jmp	$LN11@stbi__zbui
$LN12@stbi__zbui:
; Line 4111
	mov	eax, 1
$LN1@stbi__zbui:
; Line 4112
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 232				; 000000e8H
	ret	0
?stbi__zbuild_huffman@@YAHPEAUstbi__zhuffman@@PEBEH@Z ENDP ; stbi__zbuild_huffman
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 48
bits$ = 56
?stbi__bit_reverse@@YAHHH@Z PROC			; stbi__bit_reverse
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4060
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 4061
	cmp	DWORD PTR bits$[rsp], 16
	jle	SHORT $LN3@stbi__bit_
	mov	r8d, 4061				; 00000fddH
	lea	rdx, OFFSET FLAT:$SG148920
	lea	rcx, OFFSET FLAT:$SG148921
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbi__bit_:
; Line 4064
	mov	ecx, DWORD PTR v$[rsp]
	call	?stbi__bitreverse16@@YAHH@Z		; stbi__bitreverse16
	mov	ecx, 16
	sub	ecx, DWORD PTR bits$[rsp]
	sar	eax, cl
; Line 4065
	add	rsp, 40					; 00000028H
	ret	0
?stbi__bit_reverse@@YAHHH@Z ENDP			; stbi__bit_reverse
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 8
?stbi__bitreverse16@@YAHH@Z PROC			; stbi__bitreverse16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4051
	mov	DWORD PTR [rsp+8], ecx
; Line 4052
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 43690				; 0000aaaaH
	sar	eax, 1
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 21845				; 00005555H
	shl	ecx, 1
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4053
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 52428				; 0000ccccH
	sar	eax, 2
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 13107				; 00003333H
	shl	ecx, 2
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4054
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 61680				; 0000f0f0H
	sar	eax, 4
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 3855				; 00000f0fH
	shl	ecx, 4
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4055
	mov	eax, DWORD PTR n$[rsp]
	and	eax, 65280				; 0000ff00H
	sar	eax, 8
	mov	ecx, DWORD PTR n$[rsp]
	and	ecx, 255				; 000000ffH
	shl	ecx, 8
	or	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 4056
	mov	eax, DWORD PTR n$[rsp]
; Line 4057
	ret	0
?stbi__bitreverse16@@YAHH@Z ENDP			; stbi__bitreverse16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
j$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z PROC	; stbi__jpeg_info_raw
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4001
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4002
	mov	edx, 2
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN2@stbi__jpeg
; Line 4003
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 4004
	xor	eax, eax
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4006
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
$LN3@stbi__jpeg:
; Line 4007
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
$LN4@stbi__jpeg:
; Line 4008
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN7@stbi__jpeg
	mov	DWORD PTR tv80[rsp], 3
	jmp	SHORT $LN8@stbi__jpeg
$LN7@stbi__jpeg:
	mov	DWORD PTR tv80[rsp], 1
$LN8@stbi__jpeg:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv80[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__jpeg:
; Line 4009
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 4010
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z ENDP	; stbi__jpeg_info_raw
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 48
out$2 = 56
k$3 = 64
m$4 = 68
m$5 = 69
m$6 = 70
n$ = 72
r$7 = 80
r$8 = 88
b$9 = 96
g$10 = 97
r$11 = 98
j$12 = 100
decode_n$ = 104
is_rgb$ = 108
tv92 = 112
tv160 = 116
tv234 = 120
tv255 = 124
y_bot$13 = 128
tv289 = 132
tv297 = 136
tv709 = 140
tv71 = 144
tv80 = 148
tv82 = 152
y$14 = 160
tv641 = 168
tv671 = 172
tv284 = 176
tv282 = 180
tv531 = 184
tv560 = 188
output$15 = 192
tv268 = 200
tv273 = 208
y$16 = 216
tv166 = 224
tv174 = 232
tv286 = 240
tv361 = 248
tv426 = 256
tv482 = 264
coutput$17 = 272
res_comp$18 = 304
__$ArrayPad$ = 496
z$ = 528
out_x$ = 536
out_y$ = 544
comp$ = 552
req_comp$ = 560
?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z PROC	; load_jpeg_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3812
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 520				; 00000208H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3814
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	DWORD PTR [rax+8], 0
; Line 3817
	cmp	DWORD PTR req_comp$[rsp], 0
	jl	SHORT $LN42@load_jpeg_
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN41@load_jpeg_
$LN42@load_jpeg_:
	lea	rcx, OFFSET FLAT:$SG148803
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN83@load_jpeg_
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN84@load_jpeg_
$LN83@load_jpeg_:
	mov	DWORD PTR tv71[rsp], 0
$LN84@load_jpeg_:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	$LN1@load_jpeg_
$LN41@load_jpeg_:
; Line 3820
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z ; stbi__decode_jpeg_image
	test	eax, eax
	jne	SHORT $LN43@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN43@load_jpeg_:
; Line 3823
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN87@load_jpeg_
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN88@load_jpeg_
$LN87@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN85@load_jpeg_
	mov	DWORD PTR tv80[rsp], 3
	jmp	SHORT $LN86@load_jpeg_
$LN85@load_jpeg_:
	mov	DWORD PTR tv80[rsp], 1
$LN86@load_jpeg_:
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN88@load_jpeg_:
	mov	eax, DWORD PTR tv82[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 3825
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN91@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18512], 3
	je	SHORT $LN90@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	SHORT $LN89@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18504], 0
	jne	SHORT $LN91@load_jpeg_
$LN90@load_jpeg_:
	mov	DWORD PTR tv92[rsp], 1
	jmp	SHORT $LN92@load_jpeg_
$LN91@load_jpeg_:
$LN89@load_jpeg_:
	mov	DWORD PTR tv92[rsp], 0
$LN92@load_jpeg_:
	mov	eax, DWORD PTR tv92[rsp]
	mov	DWORD PTR is_rgb$[rsp], eax
; Line 3827
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR n$[rsp], 3
	jge	SHORT $LN44@load_jpeg_
	cmp	DWORD PTR is_rgb$[rsp], 0
	jne	SHORT $LN44@load_jpeg_
; Line 3828
	mov	DWORD PTR decode_n$[rsp], 1
	jmp	SHORT $LN45@load_jpeg_
$LN44@load_jpeg_:
; Line 3830
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR decode_n$[rsp], eax
$LN45@load_jpeg_:
; Line 3834
	cmp	DWORD PTR decode_n$[rsp], 0
	jg	SHORT $LN46@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	xor	eax, eax
	jmp	$LN1@load_jpeg_
$LN46@load_jpeg_:
; Line 3841
	mov	QWORD PTR coutput$17[rsp], 0
	mov	QWORD PTR coutput$17[rsp+8], 0
	mov	QWORD PTR coutput$17[rsp+16], 0
	mov	QWORD PTR coutput$17[rsp+24], 0
; Line 3845
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN4@load_jpeg_
$LN2@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN4@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN3@load_jpeg_
; Line 3846
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$7[rsp], rax
; Line 3850
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	add	eax, 3
	mov	eax, eax
	mov	ecx, eax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	movsxd	rcx, DWORD PTR k$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18152], rax
; Line 3851
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	jne	SHORT $LN47@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG148809
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN93@load_jpeg_
	mov	DWORD PTR tv160[rsp], 0
	jmp	SHORT $LN94@load_jpeg_
$LN93@load_jpeg_:
	mov	DWORD PTR tv160[rsp], 0
$LN94@load_jpeg_:
	movsxd	rax, DWORD PTR tv160[rsp]
	jmp	$LN1@load_jpeg_
$LN47@load_jpeg_:
; Line 3853
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv166[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18056]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv166[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 3854
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv174[rsp], rax
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+18060]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv174[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 3855
	mov	rax, QWORD PTR r$7[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 3856
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	ecx, DWORD PTR [rcx+24]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR r$7[rsp]
	div	DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 3857
	mov	rax, QWORD PTR r$7[rsp]
	mov	DWORD PTR [rax+40], 0
; Line 3858
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18128]
	mov	QWORD PTR [rcx+16], rax
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3860
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN48@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?resample_row_1@@YAPEAEPEAE00HH@Z ; resample_row_1
	mov	QWORD PTR [rax], rcx
	jmp	$LN49@load_jpeg_
$LN48@load_jpeg_:
; Line 3861
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 1
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN50@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_v_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN51@load_jpeg_
$LN50@load_jpeg_:
; Line 3862
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 1
	jne	SHORT $LN52@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_h_2
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN53@load_jpeg_
$LN52@load_jpeg_:
; Line 3863
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+24], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	cmp	DWORD PTR [rax+28], 2
	jne	SHORT $LN54@load_jpeg_
	mov	rax, QWORD PTR r$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+18560]
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN55@load_jpeg_
$LN54@load_jpeg_:
; Line 3864
	mov	rax, QWORD PTR r$7[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z ; stbi__resample_row_generic
	mov	QWORD PTR [rax], rcx
$LN55@load_jpeg_:
$LN53@load_jpeg_:
$LN51@load_jpeg_:
$LN49@load_jpeg_:
; Line 3865
	jmp	$LN2@load_jpeg_
$LN3@load_jpeg_:
; Line 3868
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	r9d, 1
	mov	r8d, DWORD PTR [rax+4]
	mov	edx, DWORD PTR [rcx]
	mov	ecx, DWORD PTR n$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR output$15[rsp], rax
; Line 3869
	cmp	QWORD PTR output$15[rsp], 0
	jne	SHORT $LN56@load_jpeg_
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
	lea	rcx, OFFSET FLAT:$SG148819
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN95@load_jpeg_
	mov	DWORD PTR tv234[rsp], 0
	jmp	SHORT $LN96@load_jpeg_
$LN95@load_jpeg_:
	mov	DWORD PTR tv234[rsp], 0
$LN96@load_jpeg_:
	movsxd	rax, DWORD PTR tv234[rsp]
	jmp	$LN1@load_jpeg_
$LN56@load_jpeg_:
; Line 3872
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN7@load_jpeg_
$LN5@load_jpeg_:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN7@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$12[rsp], eax
	jae	$LN6@load_jpeg_
; Line 3873
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, DWORD PTR n$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR j$12[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR output$15[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3874
	mov	DWORD PTR k$3[rsp], 0
	jmp	SHORT $LN10@load_jpeg_
$LN8@load_jpeg_:
	mov	eax, DWORD PTR k$3[rsp]
	inc	eax
	mov	DWORD PTR k$3[rsp], eax
$LN10@load_jpeg_:
	mov	eax, DWORD PTR decode_n$[rsp]
	cmp	DWORD PTR k$3[rsp], eax
	jge	$LN9@load_jpeg_
; Line 3875
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 48				; 00000030H
	lea	rax, QWORD PTR res_comp$18[rsp+rax]
	mov	QWORD PTR r$8[rsp], rax
; Line 3876
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	sar	eax, 1
	mov	rcx, QWORD PTR r$8[rsp]
	cmp	DWORD PTR [rcx+36], eax
	jl	SHORT $LN97@load_jpeg_
	mov	DWORD PTR tv255[rsp], 1
	jmp	SHORT $LN98@load_jpeg_
$LN97@load_jpeg_:
	mov	DWORD PTR tv255[rsp], 0
$LN98@load_jpeg_:
	mov	eax, DWORD PTR tv255[rsp]
	mov	DWORD PTR y_bot$13[rsp], eax
; Line 3877
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv286[rsp], rax
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR tv284[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR tv282[rsp], eax
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN99@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv268[rsp], rax
	jmp	SHORT $LN100@load_jpeg_
$LN99@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv268[rsp], rax
$LN100@load_jpeg_:
	cmp	DWORD PTR y_bot$13[rsp], 0
	je	SHORT $LN101@load_jpeg_
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv273[rsp], rax
	jmp	SHORT $LN102@load_jpeg_
$LN101@load_jpeg_:
	mov	rax, QWORD PTR r$8[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv273[rsp], rax
$LN102@load_jpeg_:
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	ecx, DWORD PTR tv284[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR tv282[rsp]
	mov	r8, QWORD PTR tv268[rsp]
	mov	rdx, QWORD PTR tv273[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18152]
	call	QWORD PTR tv286[rsp]
	movsxd	rcx, DWORD PTR k$3[rsp]
	mov	QWORD PTR coutput$17[rsp+rcx*8], rax
; Line 3881
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+36]
	inc	eax
	mov	DWORD PTR tv289[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv289[rsp]
	mov	DWORD PTR [rax+36], ecx
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR tv289[rsp], eax
	jl	$LN57@load_jpeg_
; Line 3882
	mov	rax, QWORD PTR r$8[rsp]
	mov	DWORD PTR [rax+36], 0
; Line 3883
	mov	rax, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR [rax+8], rcx
; Line 3884
	mov	rax, QWORD PTR r$8[rsp]
	mov	eax, DWORD PTR [rax+40]
	inc	eax
	mov	DWORD PTR tv297[rsp], eax
	mov	rax, QWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR tv297[rsp]
	mov	DWORD PTR [rax+40], ecx
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	cmp	DWORD PTR tv297[rsp], eax
	jge	SHORT $LN58@load_jpeg_
; Line 3885
	movsxd	rax, DWORD PTR k$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18116]
	mov	rcx, QWORD PTR r$8[rsp]
	add	rax, QWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$8[rsp]
	mov	QWORD PTR [rcx+16], rax
$LN58@load_jpeg_:
$LN57@load_jpeg_:
; Line 3887
	jmp	$LN8@load_jpeg_
$LN9@load_jpeg_:
; Line 3888
	cmp	DWORD PTR n$[rsp], 3
	jl	$LN59@load_jpeg_
; Line 3889
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$14[rsp], rax
; Line 3890
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jne	$LN61@load_jpeg_
; Line 3891
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN63@load_jpeg_
; Line 3892
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@load_jpeg_
$LN11@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN12@load_jpeg_
; Line 3893
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3894
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3895
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
; Line 3896
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3897
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3898
	jmp	$LN11@load_jpeg_
$LN12@load_jpeg_:
; Line 3899
	jmp	SHORT $LN64@load_jpeg_
$LN63@load_jpeg_:
; Line 3900
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv361[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv361[rsp]
$LN64@load_jpeg_:
; Line 3901
	jmp	$LN62@load_jpeg_
$LN61@load_jpeg_:
; Line 3902
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN65@load_jpeg_
; Line 3903
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN67@load_jpeg_
; Line 3904
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@load_jpeg_
$LN14@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN15@load_jpeg_
; Line 3905
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$4[rsp], al
; Line 3906
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3907
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3908
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$4[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3909
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3910
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3911
	jmp	$LN14@load_jpeg_
$LN15@load_jpeg_:
; Line 3912
	jmp	$LN68@load_jpeg_
$LN67@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN69@load_jpeg_
; Line 3913
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv426[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv426[rsp]
; Line 3914
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN19@load_jpeg_
$LN17@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN19@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN18@load_jpeg_
; Line 3915
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$5[rsp], al
; Line 3916
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3917
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3918
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 255				; 000000ffH
	sub	ecx, eax
	mov	eax, ecx
	movzx	edx, BYTE PTR m$5[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3919
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3920
	jmp	$LN17@load_jpeg_
$LN18@load_jpeg_:
; Line 3921
	jmp	SHORT $LN70@load_jpeg_
$LN69@load_jpeg_:
; Line 3922
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18552]
	mov	QWORD PTR tv482[rsp], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	ecx, 8
	imul	rcx, rcx, 2
	mov	edx, 8
	imul	rdx, rdx, 1
	mov	r8d, DWORD PTR n$[rsp]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR coutput$17[rsp+rcx]
	mov	r8, QWORD PTR coutput$17[rsp+rdx]
	mov	rdx, QWORD PTR y$14[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	call	QWORD PTR tv482[rsp]
$LN70@load_jpeg_:
$LN68@load_jpeg_:
; Line 3924
	jmp	$LN66@load_jpeg_
$LN65@load_jpeg_:
; Line 3925
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN22@load_jpeg_
$LN20@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN22@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN21@load_jpeg_
; Line 3926
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$14[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR out$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3927
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3928
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3929
	jmp	$LN20@load_jpeg_
$LN21@load_jpeg_:
$LN66@load_jpeg_:
$LN62@load_jpeg_:
; Line 3930
	jmp	$LN60@load_jpeg_
$LN59@load_jpeg_:
; Line 3931
	cmp	DWORD PTR is_rgb$[rsp], 0
	je	$LN71@load_jpeg_
; Line 3932
	cmp	DWORD PTR n$[rsp], 1
	jne	$LN73@load_jpeg_
; Line 3933
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN25@load_jpeg_
$LN23@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN25@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN24@load_jpeg_
; Line 3934
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv531[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv531[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	$LN23@load_jpeg_
$LN24@load_jpeg_:
	jmp	$LN74@load_jpeg_
$LN73@load_jpeg_:
; Line 3936
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN28@load_jpeg_
$LN26@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	rax, QWORD PTR out$2[rsp]
	add	rax, 2
	mov	QWORD PTR out$2[rsp], rax
$LN28@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN27@load_jpeg_
; Line 3937
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 8
	imul	rcx, rcx, 1
	mov	edx, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR coutput$17[rsp+rcx]
	movzx	ecx, BYTE PTR [rcx+rdx]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	DWORD PTR tv560[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv560[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3938
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3939
	jmp	$LN26@load_jpeg_
$LN27@load_jpeg_:
$LN74@load_jpeg_:
; Line 3940
	jmp	$LN72@load_jpeg_
$LN71@load_jpeg_:
; Line 3941
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN75@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 0
	jne	$LN75@load_jpeg_
; Line 3942
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN31@load_jpeg_
$LN29@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN31@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN30@load_jpeg_
; Line 3943
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR m$6[rsp], al
; Line 3944
	mov	eax, 8
	imul	rax, rax, 0
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR r$11[rsp], al
; Line 3945
	mov	eax, 8
	imul	rax, rax, 1
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR g$10[rsp], al
; Line 3946
	mov	eax, 8
	imul	rax, rax, 2
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	movzx	edx, BYTE PTR m$6[rsp]
	movzx	ecx, BYTE PTR [rax+rcx]
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	BYTE PTR b$9[rsp], al
; Line 3947
	movzx	eax, BYTE PTR b$9[rsp]
	movzx	ecx, BYTE PTR g$10[rsp]
	movzx	edx, BYTE PTR r$11[rsp]
	mov	DWORD PTR tv641[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv641[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3948
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3949
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3950
	jmp	$LN29@load_jpeg_
$LN30@load_jpeg_:
; Line 3951
	jmp	$LN76@load_jpeg_
$LN75@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 4
	jne	$LN77@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18508], 2
	jne	$LN77@load_jpeg_
; Line 3952
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN34@load_jpeg_
$LN32@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN34@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	$LN33@load_jpeg_
; Line 3953
	mov	eax, 8
	imul	rax, rax, 3
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	edx, 8
	imul	rdx, rdx, 0
	mov	r8d, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR coutput$17[rsp+rdx]
	movzx	edx, BYTE PTR [rdx+r8]
	mov	r8d, 255				; 000000ffH
	sub	r8d, edx
	mov	edx, r8d
	mov	DWORD PTR tv671[rsp], edx
	movzx	edx, BYTE PTR [rax+rcx]
	mov	eax, DWORD PTR tv671[rsp]
	movzx	ecx, al
	call	?stbi__blinn_8x8@@YAEEE@Z		; stbi__blinn_8x8
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3954
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3955
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$2[rsp], rax
; Line 3956
	jmp	$LN32@load_jpeg_
$LN33@load_jpeg_:
; Line 3957
	jmp	$LN78@load_jpeg_
$LN77@load_jpeg_:
; Line 3958
	mov	eax, 8
	imul	rax, rax, 0
	mov	rax, QWORD PTR coutput$17[rsp+rax]
	mov	QWORD PTR y$16[rsp], rax
; Line 3959
	cmp	DWORD PTR n$[rsp], 1
	jne	SHORT $LN79@load_jpeg_
; Line 3960
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN37@load_jpeg_
$LN35@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN37@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN36@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR out$2[rsp]
	mov	r8, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN35@load_jpeg_
$LN36@load_jpeg_:
	jmp	SHORT $LN80@load_jpeg_
$LN79@load_jpeg_:
; Line 3962
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN40@load_jpeg_
$LN38@load_jpeg_:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN40@load_jpeg_:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$1[rsp], eax
	jae	SHORT $LN39@load_jpeg_
	mov	eax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR out$2[rsp]
	mov	rdx, QWORD PTR y$16[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR [rcx], al
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	mov	rax, QWORD PTR out$2[rsp]
	mov	BYTE PTR [rax], 255			; 000000ffH
	mov	rax, QWORD PTR out$2[rsp]
	inc	rax
	mov	QWORD PTR out$2[rsp], rax
	jmp	SHORT $LN38@load_jpeg_
$LN39@load_jpeg_:
$LN80@load_jpeg_:
$LN78@load_jpeg_:
$LN76@load_jpeg_:
$LN72@load_jpeg_:
$LN60@load_jpeg_:
; Line 3965
	jmp	$LN5@load_jpeg_
$LN6@load_jpeg_:
; Line 3966
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__cleanup_jpeg
; Line 3967
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_x$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rcx], eax
; Line 3968
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR out_y$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rcx], eax
; Line 3969
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN81@load_jpeg_
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	cmp	DWORD PTR [rax+8], 3
	jl	SHORT $LN103@load_jpeg_
	mov	DWORD PTR tv709[rsp], 3
	jmp	SHORT $LN104@load_jpeg_
$LN103@load_jpeg_:
	mov	DWORD PTR tv709[rsp], 1
$LN104@load_jpeg_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv709[rsp]
	mov	DWORD PTR [rax], ecx
$LN81@load_jpeg_:
; Line 3970
	mov	rax, QWORD PTR output$15[rsp]
$LN1@load_jpeg_:
; Line 3972
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 520				; 00000208H
	ret	0
?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z ENDP	; load_jpeg_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 0
x$ = 32
y$ = 40
?stbi__blinn_8x8@@YAEEE@Z PROC				; stbi__blinn_8x8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3806
	mov	BYTE PTR [rsp+16], dl
	mov	BYTE PTR [rsp+8], cl
	sub	rsp, 24
; Line 3807
	movzx	eax, BYTE PTR x$[rsp]
	movzx	ecx, BYTE PTR y$[rsp]
	imul	eax, ecx
	add	eax, 128				; 00000080H
	mov	DWORD PTR t$[rsp], eax
; Line 3808
	mov	eax, DWORD PTR t$[rsp]
	shr	eax, 8
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	shr	eax, 8
; Line 3809
	add	rsp, 24
	ret	0
?stbi__blinn_8x8@@YAEEE@Z ENDP				; stbi__blinn_8x8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__cleanup_jpeg
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3790
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3791
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	xor	r8d, r8d
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
; Line 3792
	add	rsp, 40					; 00000028H
	ret	0
?stbi__cleanup_jpeg@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__cleanup_jpeg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 48
?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__setup_jpeg
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3768
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3769
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__idct_block@@YAXPEAEHQEAF@Z ; stbi__idct_block
	mov	QWORD PTR [rax+18544], rcx
; Line 3770
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z ; stbi__YCbCr_to_RGB_row
	mov	QWORD PTR [rax+18552], rcx
; Line 3771
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z ; stbi__resample_row_hv_2
	mov	QWORD PTR [rax+18560], rcx
; Line 3774
	call	?stbi__sse2_available@@YAHXZ		; stbi__sse2_available
	test	eax, eax
	je	SHORT $LN2@stbi__setu
; Line 3775
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__idct_simd@@YAXPEAEHQEAF@Z ; stbi__idct_simd
	mov	QWORD PTR [rax+18544], rcx
; Line 3776
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z ; stbi__YCbCr_to_RGB_simd
	mov	QWORD PTR [rax+18552], rcx
; Line 3777
	mov	rax, QWORD PTR j$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z ; stbi__resample_row_hv_2_simd
	mov	QWORD PTR [rax+18560], rcx
$LN2@stbi__setu:
; Line 3786
	add	rsp, 40					; 00000028H
	ret	0
?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__setup_jpeg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
r$1 = 4
g$2 = 8
b$3 = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
yws$7 = 32
signflip$8 = 48
cbw$9 = 64
crw$10 = 80
brb$11 = 96
gxb$12 = 112
t0$13 = 128
t1$14 = 144
$T15 = 160
$T16 = 176
$T17 = 192
$T18 = 208
$T19 = 224
$T20 = 240
$T21 = 256
$T22 = 272
$T23 = 288
$T24 = 304
cr_bytes$25 = 320
$T26 = 336
cb_bytes$27 = 352
$T28 = 368
y_bias$29 = 384
y_bytes$30 = 400
$T31 = 416
$T32 = 432
cr_biased$33 = 448
$T34 = 464
$T35 = 480
cb_biased$36 = 496
$T37 = 512
yw$38 = 528
$T39 = 544
cr_const0$40 = 560
$T41 = 576
cb_const0$42 = 592
$T43 = 608
cb_const1$44 = 624
$T45 = 640
cr_const1$46 = 656
$T47 = 672
cr0$48 = 688
$T49 = 704
cb0$50 = 720
$T51 = 736
cb1$52 = 752
$T53 = 768
gwt$54 = 784
cr1$55 = 800
$T56 = 816
rws$57 = 832
$T58 = 848
bws$59 = 864
$T60 = 880
gws$61 = 896
$T62 = 912
rw$63 = 928
bw$64 = 944
$T65 = 960
gw$66 = 976
xw$67 = 992
$T68 = 1008
$T69 = 1024
$T70 = 1040
$T71 = 1056
$T72 = 1072
o0$73 = 1088
o1$74 = 1104
out$ = 1136
y$ = 1144
pcb$ = 1152
pcr$ = 1160
count$ = 1168
step$ = 1176
?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z PROC	; stbi__YCbCr_to_RGB_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3633
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1128				; 00000468H
; Line 3634
	mov	DWORD PTR i$[rsp], 0
; Line 3640
	cmp	DWORD PTR step$[rsp], 4
	jne	$LN8@stbi__YCbC
; Line 3642
	vmovdqu	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	vmovdqu	XMMWORD PTR $T15[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T15[rsp]
	vmovdqu	XMMWORD PTR signflip$8[rsp], xmm0
; Line 3643
	vmovdqu	xmm0, XMMWORD PTR __xmm@166f166f166f166f166f166f166f166f
	vmovdqu	XMMWORD PTR $T16[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T16[rsp]
	vmovdqu	XMMWORD PTR cr_const0$40[rsp], xmm0
; Line 3644
	vmovdqu	xmm0, XMMWORD PTR __xmm@f493f493f493f493f493f493f493f493
	vmovdqu	XMMWORD PTR $T17[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T17[rsp]
	vmovdqu	XMMWORD PTR cr_const1$46[rsp], xmm0
; Line 3645
	vmovdqu	xmm0, XMMWORD PTR __xmm@fa7efa7efa7efa7efa7efa7efa7efa7e
	vmovdqu	XMMWORD PTR $T18[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T18[rsp]
	vmovdqu	XMMWORD PTR cb_const0$42[rsp], xmm0
; Line 3646
	vmovdqu	xmm0, XMMWORD PTR __xmm@1c5a1c5a1c5a1c5a1c5a1c5a1c5a1c5a
	vmovdqu	XMMWORD PTR $T19[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T19[rsp]
	vmovdqu	XMMWORD PTR cb_const1$44[rsp], xmm0
; Line 3647
	vmovdqu	xmm0, XMMWORD PTR __xmm@80808080808080808080808080808080
	vmovdqu	XMMWORD PTR $T20[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T20[rsp]
	vmovdqu	XMMWORD PTR y_bias$29[rsp], xmm0
; Line 3648
	vmovdqu	xmm0, XMMWORD PTR __xmm@00ff00ff00ff00ff00ff00ff00ff00ff
	vmovdqu	XMMWORD PTR $T21[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T21[rsp]
	vmovdqu	XMMWORD PTR xw$67[rsp], xmm0
; Line 3650
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN3@stbi__YCbC
; Line 3652
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	add	rcx, rax
	mov	rax, rcx
	vmovq	xmm0, QWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T22[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T22[rsp]
	vmovdqu	XMMWORD PTR y_bytes$30[rsp], xmm0
; Line 3653
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	add	rcx, rax
	mov	rax, rcx
	vmovq	xmm0, QWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T23[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T23[rsp]
	vmovdqu	XMMWORD PTR cr_bytes$25[rsp], xmm0
; Line 3654
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	add	rcx, rax
	mov	rax, rcx
	vmovq	xmm0, QWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T24[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T24[rsp]
	vmovdqu	XMMWORD PTR cb_bytes$27[rsp], xmm0
; Line 3655
	vmovdqu	xmm0, XMMWORD PTR cr_bytes$25[rsp]
	vpxor	xmm0, xmm0, XMMWORD PTR signflip$8[rsp]
	vmovdqu	XMMWORD PTR $T26[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T26[rsp]
	vmovdqu	XMMWORD PTR cr_biased$33[rsp], xmm0
; Line 3656
	vmovdqu	xmm0, XMMWORD PTR cb_bytes$27[rsp]
	vpxor	xmm0, xmm0, XMMWORD PTR signflip$8[rsp]
	vmovdqu	XMMWORD PTR $T28[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T28[rsp]
	vmovdqu	XMMWORD PTR cb_biased$36[rsp], xmm0
; Line 3659
	vmovdqu	xmm0, XMMWORD PTR y_bias$29[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR y_bytes$30[rsp]
	vmovdqu	XMMWORD PTR $T31[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T31[rsp]
	vmovdqu	XMMWORD PTR yw$38[rsp], xmm0
; Line 3660
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T32[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T32[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR cr_biased$33[rsp]
	vmovdqu	XMMWORD PTR $T34[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T34[rsp]
	vmovdqu	XMMWORD PTR crw$10[rsp], xmm0
; Line 3661
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T35[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T35[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR cb_biased$36[rsp]
	vmovdqu	XMMWORD PTR $T37[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T37[rsp]
	vmovdqu	XMMWORD PTR cbw$9[rsp], xmm0
; Line 3664
	vmovdqu	xmm0, XMMWORD PTR yw$38[rsp]
	vpsrlw	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T39[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T39[rsp]
	vmovdqu	XMMWORD PTR yws$7[rsp], xmm0
; Line 3665
	vmovdqu	xmm0, XMMWORD PTR cr_const0$40[rsp]
	vpmulhw	xmm0, xmm0, XMMWORD PTR crw$10[rsp]
	vmovdqu	XMMWORD PTR $T41[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T41[rsp]
	vmovdqu	XMMWORD PTR cr0$48[rsp], xmm0
; Line 3666
	vmovdqu	xmm0, XMMWORD PTR cb_const0$42[rsp]
	vpmulhw	xmm0, xmm0, XMMWORD PTR cbw$9[rsp]
	vmovdqu	XMMWORD PTR $T43[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T43[rsp]
	vmovdqu	XMMWORD PTR cb0$50[rsp], xmm0
; Line 3667
	vmovdqu	xmm0, XMMWORD PTR cbw$9[rsp]
	vpmulhw	xmm0, xmm0, XMMWORD PTR cb_const1$44[rsp]
	vmovdqu	XMMWORD PTR $T45[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T45[rsp]
	vmovdqu	XMMWORD PTR cb1$52[rsp], xmm0
; Line 3668
	vmovdqu	xmm0, XMMWORD PTR crw$10[rsp]
	vpmulhw	xmm0, xmm0, XMMWORD PTR cr_const1$46[rsp]
	vmovdqu	XMMWORD PTR $T47[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T47[rsp]
	vmovdqu	XMMWORD PTR cr1$55[rsp], xmm0
; Line 3669
	vmovdqu	xmm0, XMMWORD PTR cr0$48[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR yws$7[rsp]
	vmovdqu	XMMWORD PTR $T49[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T49[rsp]
	vmovdqu	XMMWORD PTR rws$57[rsp], xmm0
; Line 3670
	vmovdqu	xmm0, XMMWORD PTR cb0$50[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR yws$7[rsp]
	vmovdqu	XMMWORD PTR $T51[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T51[rsp]
	vmovdqu	XMMWORD PTR gwt$54[rsp], xmm0
; Line 3671
	vmovdqu	xmm0, XMMWORD PTR yws$7[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR cb1$52[rsp]
	vmovdqu	XMMWORD PTR $T53[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T53[rsp]
	vmovdqu	XMMWORD PTR bws$59[rsp], xmm0
; Line 3672
	vmovdqu	xmm0, XMMWORD PTR gwt$54[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR cr1$55[rsp]
	vmovdqu	XMMWORD PTR $T56[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T56[rsp]
	vmovdqu	XMMWORD PTR gws$61[rsp], xmm0
; Line 3675
	vmovdqu	xmm0, XMMWORD PTR rws$57[rsp]
	vpsraw	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T58[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T58[rsp]
	vmovdqu	XMMWORD PTR rw$63[rsp], xmm0
; Line 3676
	vmovdqu	xmm0, XMMWORD PTR bws$59[rsp]
	vpsraw	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T60[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T60[rsp]
	vmovdqu	XMMWORD PTR bw$64[rsp], xmm0
; Line 3677
	vmovdqu	xmm0, XMMWORD PTR gws$61[rsp]
	vpsraw	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T62[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T62[rsp]
	vmovdqu	XMMWORD PTR gw$66[rsp], xmm0
; Line 3680
	vmovdqu	xmm0, XMMWORD PTR rw$63[rsp]
	vpackuswb xmm0, xmm0, XMMWORD PTR bw$64[rsp]
	vmovdqu	XMMWORD PTR $T65[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T65[rsp]
	vmovdqu	XMMWORD PTR brb$11[rsp], xmm0
; Line 3681
	vmovdqu	xmm0, XMMWORD PTR gw$66[rsp]
	vpackuswb xmm0, xmm0, XMMWORD PTR xw$67[rsp]
	vmovdqu	XMMWORD PTR $T68[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T68[rsp]
	vmovdqu	XMMWORD PTR gxb$12[rsp], xmm0
; Line 3684
	vmovdqu	xmm0, XMMWORD PTR brb$11[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR gxb$12[rsp]
	vmovdqu	XMMWORD PTR $T69[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T69[rsp]
	vmovdqu	XMMWORD PTR t0$13[rsp], xmm0
; Line 3685
	vmovdqu	xmm0, XMMWORD PTR brb$11[rsp]
	vpunpckhbw xmm0, xmm0, XMMWORD PTR gxb$12[rsp]
	vmovdqu	XMMWORD PTR $T70[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T70[rsp]
	vmovdqu	XMMWORD PTR t1$14[rsp], xmm0
; Line 3686
	vmovdqu	xmm0, XMMWORD PTR t0$13[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR t1$14[rsp]
	vmovdqu	XMMWORD PTR $T71[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T71[rsp]
	vmovdqu	XMMWORD PTR o0$73[rsp], xmm0
; Line 3687
	vmovdqu	xmm0, XMMWORD PTR t0$13[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR t1$14[rsp]
	vmovdqu	XMMWORD PTR $T72[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T72[rsp]
	vmovdqu	XMMWORD PTR o1$74[rsp], xmm0
; Line 3690
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR o0$73[rsp]
	vmovdqu	XMMWORD PTR [rax], xmm0
; Line 3691
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 16
	vmovdqu	xmm0, XMMWORD PTR o1$74[rsp]
	vmovdqu	XMMWORD PTR [rax], xmm0
; Line 3692
	mov	rax, QWORD PTR out$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR out$[rsp], rax
; Line 3693
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3743
	jmp	SHORT $LN7@stbi__YCbC
$LN5@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__YCbC
; Line 3744
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3746
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3747
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3748
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3749
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3750
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3751
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3752
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3753
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3754
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN9@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN10@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN11@stbi__YCbC
$LN10@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN11@stbi__YCbC:
$LN9@stbi__YCbC:
; Line 3755
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN12@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN13@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN14@stbi__YCbC
$LN13@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN14@stbi__YCbC:
$LN12@stbi__YCbC:
; Line 3756
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN15@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN16@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN17@stbi__YCbC
$LN16@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN17@stbi__YCbC:
$LN15@stbi__YCbC:
; Line 3757
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3758
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3759
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3760
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3761
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3762
	jmp	$LN5@stbi__YCbC
$LN6@stbi__YCbC:
; Line 3763
	add	rsp, 1128				; 00000468H
	ret	0
?stbi__YCbCr_to_RGB_simd@@YAXPEAEPEBE11HH@Z ENDP	; stbi__YCbCr_to_RGB_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 0
g$2 = 4
b$3 = 8
i$ = 12
y_fixed$4 = 16
cr$5 = 20
cb$6 = 24
out$ = 48
y$ = 56
pcb$ = 64
pcr$ = 72
count$ = 80
step$ = 88
?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z PROC		; stbi__YCbCr_to_RGB_row
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3607
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3609
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__YCbC
$LN2@stbi__YCbC:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__YCbC:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__YCbC
; Line 3610
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR y$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 20
	add	eax, 524288				; 00080000H
	mov	DWORD PTR y_fixed$4[rsp], eax
; Line 3612
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcr$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cr$5[rsp], eax
; Line 3613
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR pcb$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	sub	eax, 128				; 00000080H
	mov	DWORD PTR cb$6[rsp], eax
; Line 3614
	imul	eax, DWORD PTR cr$5[rsp], 1470208	; 00166f00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR r$1[rsp], eax
; Line 3615
	imul	eax, DWORD PTR cr$5[rsp], -748800	; fffffffffff49300H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	ecx, DWORD PTR cb$6[rsp], -360960	; fffffffffffa7e00H
	and	ecx, -65536				; ffff0000H
	add	eax, ecx
	mov	DWORD PTR g$2[rsp], eax
; Line 3616
	imul	eax, DWORD PTR cb$6[rsp], 1858048	; 001c5a00H
	mov	ecx, DWORD PTR y_fixed$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR b$3[rsp], eax
; Line 3617
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 20
	mov	DWORD PTR r$1[rsp], eax
; Line 3618
	mov	eax, DWORD PTR g$2[rsp]
	sar	eax, 20
	mov	DWORD PTR g$2[rsp], eax
; Line 3619
	mov	eax, DWORD PTR b$3[rsp]
	sar	eax, 20
	mov	DWORD PTR b$3[rsp], eax
; Line 3620
	cmp	DWORD PTR r$1[rsp], 255			; 000000ffH
	jbe	SHORT $LN5@stbi__YCbC
	cmp	DWORD PTR r$1[rsp], 0
	jge	SHORT $LN6@stbi__YCbC
	mov	DWORD PTR r$1[rsp], 0
	jmp	SHORT $LN7@stbi__YCbC
$LN6@stbi__YCbC:
	mov	DWORD PTR r$1[rsp], 255			; 000000ffH
$LN7@stbi__YCbC:
$LN5@stbi__YCbC:
; Line 3621
	cmp	DWORD PTR g$2[rsp], 255			; 000000ffH
	jbe	SHORT $LN8@stbi__YCbC
	cmp	DWORD PTR g$2[rsp], 0
	jge	SHORT $LN9@stbi__YCbC
	mov	DWORD PTR g$2[rsp], 0
	jmp	SHORT $LN10@stbi__YCbC
$LN9@stbi__YCbC:
	mov	DWORD PTR g$2[rsp], 255			; 000000ffH
$LN10@stbi__YCbC:
$LN8@stbi__YCbC:
; Line 3622
	cmp	DWORD PTR b$3[rsp], 255			; 000000ffH
	jbe	SHORT $LN11@stbi__YCbC
	cmp	DWORD PTR b$3[rsp], 0
	jge	SHORT $LN12@stbi__YCbC
	mov	DWORD PTR b$3[rsp], 0
	jmp	SHORT $LN13@stbi__YCbC
$LN12@stbi__YCbC:
	mov	DWORD PTR b$3[rsp], 255			; 000000ffH
$LN13@stbi__YCbC:
$LN11@stbi__YCbC:
; Line 3623
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR r$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3624
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR g$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3625
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR b$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3626
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
; Line 3627
	movsxd	rax, DWORD PTR step$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 3628
	jmp	$LN2@stbi__YCbC
$LN3@stbi__YCbC:
; Line 3629
	add	rsp, 40					; 00000028H
	ret	0
?stbi__YCbCr_to_RGB_row@@YAXPEAEPEBE11HH@Z ENDP		; stbi__YCbCr_to_RGB_row
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
j$ = 4
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z PROC	; stbi__resample_row_generic
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3593
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3597
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3598
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR hs$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3599
	movsxd	rax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR hs$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN5@stbi__resa
$LN6@stbi__resa:
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3600
	mov	rax, QWORD PTR out$[rsp]
; Line 3601
	add	rsp, 24
	ret	0
?stbi__resample_row_generic@@YAPEAEPEAE00HH@Z ENDP	; stbi__resample_row_generic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
t0$ = 8
tv78 = 12
curr$1 = 16
zero$2 = 32
nearw$3 = 48
curb$4 = 64
even$5 = 80
odd$6 = 96
$T7 = 112
$T8 = 128
$T9 = 144
farb$10 = 160
$T11 = 176
nearb$12 = 192
$T13 = 208
farw$14 = 224
$T15 = 240
$T16 = 256
nears$17 = 272
diff$18 = 288
$T19 = 304
$T20 = 320
$T21 = 336
prv0$22 = 352
$T23 = 368
nxt0$24 = 384
$T25 = 400
$T26 = 416
$T27 = 432
prev$28 = 448
$T29 = 464
next$30 = 480
$T31 = 496
curs$32 = 512
bias$33 = 528
$T34 = 544
prvd$35 = 560
$T36 = 576
nxtd$37 = 592
$T38 = 608
$T39 = 624
$T40 = 640
int0$41 = 656
$T42 = 672
int1$43 = 688
$T44 = 704
de0$45 = 720
de1$46 = 736
$T47 = 752
outv$48 = 768
out$ = 800
in_near$ = 808
in_far$ = 816
w$ = 824
hs$ = 832
?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z PROC	; stbi__resample_row_hv_2_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3477
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 792				; 00000318H
; Line 3479
	mov	DWORD PTR i$[rsp], 0
; Line 3481
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN8@stbi__resa
; Line 3482
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3483
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN8@stbi__resa:
; Line 3486
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3490
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	and	eax, -8
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__resa
; Line 3494
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T7[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T7[rsp]
	vmovdqu	XMMWORD PTR zero$2[rsp], xmm0
; Line 3495
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_far$[rsp]
	add	rcx, rax
	mov	rax, rcx
	vmovq	xmm0, QWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T8[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T8[rsp]
	vmovdqu	XMMWORD PTR farb$10[rsp], xmm0
; Line 3496
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	add	rcx, rax
	mov	rax, rcx
	vmovq	xmm0, QWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T9[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T9[rsp]
	vmovdqu	XMMWORD PTR nearb$12[rsp], xmm0
; Line 3497
	vmovdqu	xmm0, XMMWORD PTR farb$10[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR zero$2[rsp]
	vmovdqu	XMMWORD PTR $T11[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T11[rsp]
	vmovdqu	XMMWORD PTR farw$14[rsp], xmm0
; Line 3498
	vmovdqu	xmm0, XMMWORD PTR nearb$12[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR zero$2[rsp]
	vmovdqu	XMMWORD PTR $T13[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T13[rsp]
	vmovdqu	XMMWORD PTR nearw$3[rsp], xmm0
; Line 3499
	vmovdqu	xmm0, XMMWORD PTR farw$14[rsp]
	vpsubw	xmm0, xmm0, XMMWORD PTR nearw$3[rsp]
	vmovdqu	XMMWORD PTR $T15[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T15[rsp]
	vmovdqu	XMMWORD PTR diff$18[rsp], xmm0
; Line 3500
	vmovdqu	xmm0, XMMWORD PTR nearw$3[rsp]
	vpsllw	xmm0, xmm0, 2
	vmovdqu	XMMWORD PTR $T16[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T16[rsp]
	vmovdqu	XMMWORD PTR nears$17[rsp], xmm0
; Line 3501
	vmovdqu	xmm0, XMMWORD PTR nears$17[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR diff$18[rsp]
	vmovdqu	XMMWORD PTR $T19[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T19[rsp]
	vmovdqu	XMMWORD PTR curr$1[rsp], xmm0
; Line 3508
	vmovdqu	xmm0, XMMWORD PTR curr$1[rsp]
	vpslldq	xmm0, xmm0, 2
	vmovdqu	XMMWORD PTR $T20[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T20[rsp]
	vmovdqu	XMMWORD PTR prv0$22[rsp], xmm0
; Line 3509
	vmovdqu	xmm0, XMMWORD PTR curr$1[rsp]
	vpsrldq	xmm0, xmm0, 2
	vmovdqu	XMMWORD PTR $T21[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T21[rsp]
	vmovdqu	XMMWORD PTR nxt0$24[rsp], xmm0
; Line 3510
	vmovdqu	xmm0, XMMWORD PTR prv0$22[rsp]
	vpinsrw	xmm0, xmm0, DWORD PTR t1$[rsp], 0
	vmovdqu	XMMWORD PTR $T23[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T23[rsp]
	vmovdqu	XMMWORD PTR prev$28[rsp], xmm0
; Line 3511
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 8
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 8
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	vmovdqu	xmm0, XMMWORD PTR nxt0$24[rsp]
	vpinsrw	xmm0, xmm0, eax, 7
	vmovdqu	XMMWORD PTR $T25[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T25[rsp]
	vmovdqu	XMMWORD PTR next$30[rsp], xmm0
; Line 3517
	vmovdqu	xmm0, XMMWORD PTR __xmm@00080008000800080008000800080008
	vmovdqu	XMMWORD PTR $T26[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T26[rsp]
	vmovdqu	XMMWORD PTR bias$33[rsp], xmm0
; Line 3518
	vmovdqu	xmm0, XMMWORD PTR curr$1[rsp]
	vpsllw	xmm0, xmm0, 2
	vmovdqu	XMMWORD PTR $T27[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T27[rsp]
	vmovdqu	XMMWORD PTR curs$32[rsp], xmm0
; Line 3519
	vmovdqu	xmm0, XMMWORD PTR prev$28[rsp]
	vpsubw	xmm0, xmm0, XMMWORD PTR curr$1[rsp]
	vmovdqu	XMMWORD PTR $T29[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T29[rsp]
	vmovdqu	XMMWORD PTR prvd$35[rsp], xmm0
; Line 3520
	vmovdqu	xmm0, XMMWORD PTR next$30[rsp]
	vpsubw	xmm0, xmm0, XMMWORD PTR curr$1[rsp]
	vmovdqu	XMMWORD PTR $T31[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T31[rsp]
	vmovdqu	XMMWORD PTR nxtd$37[rsp], xmm0
; Line 3521
	vmovdqu	xmm0, XMMWORD PTR curs$32[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR bias$33[rsp]
	vmovdqu	XMMWORD PTR $T34[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T34[rsp]
	vmovdqu	XMMWORD PTR curb$4[rsp], xmm0
; Line 3522
	vmovdqu	xmm0, XMMWORD PTR prvd$35[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR curb$4[rsp]
	vmovdqu	XMMWORD PTR $T36[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T36[rsp]
	vmovdqu	XMMWORD PTR even$5[rsp], xmm0
; Line 3523
	vmovdqu	xmm0, XMMWORD PTR nxtd$37[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR curb$4[rsp]
	vmovdqu	XMMWORD PTR $T38[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T38[rsp]
	vmovdqu	XMMWORD PTR odd$6[rsp], xmm0
; Line 3526
	vmovdqu	xmm0, XMMWORD PTR even$5[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR odd$6[rsp]
	vmovdqu	XMMWORD PTR $T39[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T39[rsp]
	vmovdqu	XMMWORD PTR int0$41[rsp], xmm0
; Line 3527
	vmovdqu	xmm0, XMMWORD PTR even$5[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR odd$6[rsp]
	vmovdqu	XMMWORD PTR $T40[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T40[rsp]
	vmovdqu	XMMWORD PTR int1$43[rsp], xmm0
; Line 3528
	vmovdqu	xmm0, XMMWORD PTR int0$41[rsp]
	vpsrlw	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T42[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T42[rsp]
	vmovdqu	XMMWORD PTR de0$45[rsp], xmm0
; Line 3529
	vmovdqu	xmm0, XMMWORD PTR int1$43[rsp]
	vpsrlw	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T44[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T44[rsp]
	vmovdqu	XMMWORD PTR de1$46[rsp], xmm0
; Line 3532
	vmovdqu	xmm0, XMMWORD PTR de0$45[rsp]
	vpackuswb xmm0, xmm0, XMMWORD PTR de1$46[rsp]
	vmovdqu	XMMWORD PTR $T47[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T47[rsp]
	vmovdqu	XMMWORD PTR outv$48[rsp], xmm0
; Line 3533
	mov	eax, DWORD PTR i$[rsp]
	add	eax, eax
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	vmovdqu	xmm0, XMMWORD PTR outv$48[rsp]
	vmovdqu	XMMWORD PTR [rax], xmm0
; Line 3571
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 7
	cdqe
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 7
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3572
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3574
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3575
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3576
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3578
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN7@stbi__resa
$LN5@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__resa
; Line 3579
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3580
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3581
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3582
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3583
	jmp	$LN5@stbi__resa
$LN6@stbi__resa:
; Line 3584
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3588
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3589
	add	rsp, 792				; 00000318H
	ret	0
?stbi__resample_row_hv_2_simd@@YAPEAEPEAE00HH@Z ENDP	; stbi__resample_row_hv_2_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
t1$ = 4
tv78 = 8
t0$ = 12
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_hv_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3452
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3455
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3456
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	DWORD PTR tv78[rsp], eax
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR tv78[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3457
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3460
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3461
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3462
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3463
	mov	eax, DWORD PTR t1$[rsp]
	mov	DWORD PTR t0$[rsp], eax
; Line 3464
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	DWORD PTR t1$[rsp], eax
; Line 3465
	imul	eax, DWORD PTR t0$[rsp], 3
	mov	ecx, DWORD PTR t1$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3466
	imul	eax, DWORD PTR t1$[rsp], 3
	mov	ecx, DWORD PTR t0$[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	sar	eax, 4
	mov	ecx, DWORD PTR i$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3467
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3468
	mov	eax, DWORD PTR t1$[rsp]
	add	eax, 2
	sar	eax, 2
	mov	ecx, DWORD PTR w$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx-1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3472
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3473
	add	rsp, 24
	ret	0
?stbi__resample_row_hv_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_hv_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
n$1 = 4
input$ = 8
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_h_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3422
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3425
	mov	rax, QWORD PTR in_near$[rsp]
	mov	QWORD PTR input$[rsp], rax
; Line 3427
	cmp	DWORD PTR w$[rsp], 1
	jne	SHORT $LN5@stbi__resa
; Line 3429
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3430
	mov	rax, QWORD PTR out$[rsp]
	jmp	$LN1@stbi__resa
$LN5@stbi__resa:
; Line 3433
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3434
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3435
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3436
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	add	eax, 2
	mov	DWORD PTR n$1[rsp], eax
; Line 3437
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3438
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR n$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3439
	jmp	$LN2@stbi__resa
$LN3@stbi__resa:
; Line 3440
	mov	eax, DWORD PTR w$[rsp]
	sub	eax, 2
	cdqe
	mov	rcx, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	mov	ecx, DWORD PTR w$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR input$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 3441
	mov	eax, DWORD PTR w$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rcx+1]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	r8, QWORD PTR input$[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 3446
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__resa:
; Line 3447
	add	rsp, 24
	ret	0
?stbi__resample_row_h_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_h_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
out$ = 32
in_near$ = 40
in_far$ = 48
w$ = 56
hs$ = 64
?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z PROC		; stbi__resample_row_v_2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3412
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3416
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__resa
$LN2@stbi__resa:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__resa:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__resa
; Line 3417
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR in_near$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR in_far$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	lea	eax, DWORD PTR [rax+rcx+2]
	sar	eax, 2
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__resa
$LN3@stbi__resa:
; Line 3418
	mov	rax, QWORD PTR out$[rsp]
; Line 3419
	add	rsp, 24
	ret	0
?stbi__resample_row_v_2@@YAPEAEPEAE00HH@Z ENDP		; stbi__resample_row_v_2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
out$ = 8
in_near$ = 16
in_far$ = 24
w$ = 32
hs$ = 40
?resample_row_1@@YAPEAEPEAE00HH@Z PROC			; resample_row_1
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3403
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 3408
	mov	rax, QWORD PTR in_near$[rsp]
; Line 3409
	ret	0
?resample_row_1@@YAPEAEPEAE00HH@Z ENDP			; resample_row_1
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
x$1 = 36
Ld$2 = 40
NL$3 = 44
j$ = 64
?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z PROC	; stbi__decode_jpeg_image
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3356
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3358
	mov	DWORD PTR m$[rsp], 0
	jmp	SHORT $LN4@stbi__deco
$LN2@stbi__deco:
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
	cmp	DWORD PTR m$[rsp], 4
	jge	SHORT $LN3@stbi__deco
; Line 3359
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3360
	movsxd	rax, DWORD PTR m$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3361
	jmp	SHORT $LN2@stbi__deco
$LN3@stbi__deco:
; Line 3362
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18536], 0
; Line 3363
	xor	edx, edx
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	test	eax, eax
	jne	SHORT $LN9@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN9@stbi__deco:
; Line 3364
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN5@stbi__deco:
; Line 3365
	cmp	DWORD PTR m$[rsp], 217			; 000000d9H
	je	$LN6@stbi__deco
; Line 3366
	cmp	DWORD PTR m$[rsp], 218			; 000000daH
	jne	$LN10@stbi__deco
; Line 3367
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z ; stbi__process_scan_header
	test	eax, eax
	jne	SHORT $LN12@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN12@stbi__deco:
; Line 3368
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z ; stbi__parse_entropy_coded_data
	test	eax, eax
	jne	SHORT $LN13@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN13@stbi__deco:
; Line 3369
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN14@stbi__deco
$LN7@stbi__deco:
; Line 3371
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
; Line 3372
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR x$1[rsp], eax
; Line 3373
	cmp	DWORD PTR x$1[rsp], 255			; 000000ffH
	jne	SHORT $LN15@stbi__deco
; Line 3374
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR j$[rsp]
	mov	BYTE PTR [rcx+18472], al
; Line 3375
	jmp	SHORT $LN8@stbi__deco
$LN15@stbi__deco:
; Line 3377
	jmp	SHORT $LN7@stbi__deco
$LN8@stbi__deco:
$LN14@stbi__deco:
; Line 3379
	jmp	SHORT $LN11@stbi__deco
$LN10@stbi__deco:
; Line 3380
	cmp	DWORD PTR m$[rsp], 220			; 000000dcH
	jne	SHORT $LN16@stbi__deco
; Line 3381
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Ld$2[rsp], eax
; Line 3382
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR NL$3[rsp], eax
; Line 3383
	cmp	DWORD PTR Ld$2[rsp], 4
	je	SHORT $LN18@stbi__deco
	lea	rcx, OFFSET FLAT:$SG148296
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN18@stbi__deco:
; Line 3384
	mov	rax, QWORD PTR j$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR NL$3[rsp], eax
	je	SHORT $LN19@stbi__deco
	lea	rcx, OFFSET FLAT:$SG148298
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN19@stbi__deco:
; Line 3385
	jmp	SHORT $LN17@stbi__deco
$LN16@stbi__deco:
; Line 3386
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_marker
	test	eax, eax
	jne	SHORT $LN20@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN20@stbi__deco:
$LN17@stbi__deco:
$LN11@stbi__deco:
; Line 3388
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3389
	jmp	$LN5@stbi__deco
$LN6@stbi__deco:
; Line 3390
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN21@stbi__deco
; Line 3391
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_finish
$LN21@stbi__deco:
; Line 3392
	mov	eax, 1
$LN1@stbi__deco:
; Line 3393
	add	rsp, 56					; 00000038H
	ret	0
?stbi__decode_jpeg_image@@YAHPEAUstbi__jpeg@@@Z ENDP	; stbi__decode_jpeg_image
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
tv131 = 36
z$ = 64
scan$ = 72
?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__decode_jpeg_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3331
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3333
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 0
; Line 3334
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18508], -1
; Line 3335
	mov	rax, QWORD PTR z$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 3336
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3337
	cmp	DWORD PTR m$[rsp], 216			; 000000d8H
	je	SHORT $LN6@stbi__deco
	lea	rcx, OFFSET FLAT:$SG148266
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__deco
$LN6@stbi__deco:
; Line 3338
	cmp	DWORD PTR scan$[rsp], 1
	jne	SHORT $LN7@stbi__deco
	mov	eax, 1
	jmp	$LN1@stbi__deco
$LN7@stbi__deco:
; Line 3339
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN2@stbi__deco:
; Line 3340
	cmp	DWORD PTR m$[rsp], 192			; 000000c0H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 193			; 000000c1H
	je	SHORT $LN3@stbi__deco
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	je	SHORT $LN3@stbi__deco
; Line 3341
	mov	edx, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_marker
	test	eax, eax
	jne	SHORT $LN8@stbi__deco
	xor	eax, eax
	jmp	$LN1@stbi__deco
$LN8@stbi__deco:
; Line 3342
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
$LN4@stbi__deco:
; Line 3343
	cmp	DWORD PTR m$[rsp], 255			; 000000ffH
	jne	SHORT $LN5@stbi__deco
; Line 3345
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__deco
	lea	rcx, OFFSET FLAT:$SG148270
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__deco
$LN9@stbi__deco:
; Line 3346
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ; stbi__get_marker
	movzx	eax, al
	mov	DWORD PTR m$[rsp], eax
; Line 3347
	jmp	SHORT $LN4@stbi__deco
$LN5@stbi__deco:
; Line 3348
	jmp	$LN2@stbi__deco
$LN3@stbi__deco:
; Line 3349
	cmp	DWORD PTR m$[rsp], 194			; 000000c2H
	jne	SHORT $LN12@stbi__deco
	mov	DWORD PTR tv131[rsp], 1
	jmp	SHORT $LN13@stbi__deco
$LN12@stbi__deco:
	mov	DWORD PTR tv131[rsp], 0
$LN13@stbi__deco:
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv131[rsp]
	mov	DWORD PTR [rax+18480], ecx
; Line 3350
	mov	edx, DWORD PTR scan$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__process_frame_header
	test	eax, eax
	jne	SHORT $LN10@stbi__deco
	xor	eax, eax
	jmp	SHORT $LN1@stbi__deco
$LN10@stbi__deco:
; Line 3351
	mov	eax, 1
$LN1@stbi__deco:
; Line 3352
	add	rsp, 56					; 00000038H
	ret	0
?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__decode_jpeg_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
s$ = 40
h_max$ = 48
v_max$ = 52
c$ = 56
Lf$ = 60
q$ = 64
p$ = 68
tv285 = 72
tv294 = 80
z$ = 112
scan$ = 120
?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z PROC ; stbi__process_frame_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3230
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3231
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR s$[rsp], rax
; Line 3232
	mov	DWORD PTR h_max$[rsp], 1
	mov	DWORD PTR v_max$[rsp], 1
; Line 3233
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Lf$[rsp], eax
	cmp	DWORD PTR Lf$[rsp], 11
	jge	SHORT $LN17@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148218
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN17@stbi__proc:
; Line 3234
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR p$[rsp], eax
	cmp	DWORD PTR p$[rsp], 8
	je	SHORT $LN18@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148220
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN18@stbi__proc:
; Line 3235
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148222
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN19@stbi__proc:
; Line 3236
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx], eax
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN20@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148224
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN20@stbi__proc:
; Line 3237
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN21@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148226
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN21@stbi__proc:
; Line 3238
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN22@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148228
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN22@stbi__proc:
; Line 3239
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$[rsp], eax
; Line 3240
	cmp	DWORD PTR c$[rsp], 3
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 1
	je	SHORT $LN23@stbi__proc
	cmp	DWORD PTR c$[rsp], 4
	je	SHORT $LN23@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148230
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN23@stbi__proc:
; Line 3241
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR c$[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 3242
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	eax, DWORD PTR c$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__proc
; Line 3243
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
; Line 3244
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3245
	jmp	SHORT $LN2@stbi__proc
$LN3@stbi__proc:
; Line 3247
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax+8], 3
	add	eax, 8
	cmp	DWORD PTR Lf$[rsp], eax
	je	SHORT $LN24@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148232
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3249
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18512], 0
; Line 3250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbi__proc
; Line 3252
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18080], eax
; Line 3253
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+8], 3
	jne	SHORT $LN25@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:?rgb@?BG@??stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	rdx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rdx+rax+18080], ecx
	jne	SHORT $LN25@stbi__proc
; Line 3254
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18512]
	inc	eax
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18512], eax
$LN25@stbi__proc:
; Line 3255
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$[rsp], eax
; Line 3256
	mov	eax, DWORD PTR q$[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18084], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 0
	je	SHORT $LN27@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], 4
	jle	SHORT $LN26@stbi__proc
$LN27@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG148236
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3257
	mov	eax, DWORD PTR q$[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18088], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 0
	je	SHORT $LN29@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], 4
	jle	SHORT $LN28@stbi__proc
$LN29@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG148239
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3258
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18092], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18092], 3
	jle	SHORT $LN30@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148241
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3259
	jmp	$LN5@stbi__proc
$LN6@stbi__proc:
; Line 3261
	cmp	DWORD PTR scan$[rsp], 0
	je	SHORT $LN31@stbi__proc
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN31@stbi__proc:
; Line 3263
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+8]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN32@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148244
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN32@stbi__proc:
; Line 3265
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__proc
$LN8@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__proc
; Line 3266
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR h_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18084], edx
	jle	SHORT $LN33@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	mov	DWORD PTR h_max$[rsp], eax
$LN33@stbi__proc:
; Line 3267
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR v_max$[rsp]
	cmp	DWORD PTR [rcx+rax+18088], edx
	jle	SHORT $LN34@stbi__proc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	mov	DWORD PTR v_max$[rsp], eax
$LN34@stbi__proc:
; Line 3268
	jmp	$LN8@stbi__proc
$LN9@stbi__proc:
; Line 3272
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__proc
; Line 3273
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv285[rsp], rax
	mov	eax, DWORD PTR h_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv285[rsp]
	idiv	DWORD PTR [rcx+r8+18084]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN35@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148248
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3274
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	QWORD PTR tv294[rsp], rax
	mov	eax, DWORD PTR v_max$[rsp]
	cdq
	mov	rcx, QWORD PTR z$[rsp]
	mov	r8, QWORD PTR tv294[rsp]
	idiv	DWORD PTR [rcx+r8+18088]
	mov	eax, edx
	test	eax, eax
	je	SHORT $LN36@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148250
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN36@stbi__proc:
; Line 3275
	jmp	$LN11@stbi__proc
$LN12@stbi__proc:
; Line 3278
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR h_max$[rsp]
	mov	DWORD PTR [rax+18056], ecx
; Line 3279
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR v_max$[rsp]
	mov	DWORD PTR [rax+18060], ecx
; Line 3280
	mov	eax, DWORD PTR h_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18072], eax
; Line 3281
	mov	eax, DWORD PTR v_max$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18076], eax
; Line 3283
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18072]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18072]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18064], eax
; Line 3284
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18076]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	mov	rcx, QWORD PTR z$[rsp]
	div	DWORD PTR [rcx+18076]
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18068], eax
; Line 3286
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__proc:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__proc
; Line 3288
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	mov	ecx, DWORD PTR h_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR h_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18108], eax
; Line 3289
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	mov	ecx, DWORD PTR v_max$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	xor	edx, edx
	div	DWORD PTR v_max$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18112], eax
; Line 3297
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18064]
	imul	ecx, DWORD PTR [rdx+rax+18084]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18116], eax
; Line 3298
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18068]
	imul	ecx, DWORD PTR [rdx+rax+18088]
	mov	eax, ecx
	shl	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18120], eax
; Line 3299
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
; Line 3300
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3301
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
; Line 3302
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r8d, 15
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18136], rax
; Line 3303
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	jne	SHORT $LN37@stbi__proc
; Line 3304
	lea	rcx, OFFSET FLAT:$SG148252
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
	jmp	$LN1@stbi__proc
$LN37@stbi__proc:
; Line 3306
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18136]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18128], rax
; Line 3307
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN38@stbi__proc
; Line 3309
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18116]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18168], eax
; Line 3310
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18120]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18172], eax
; Line 3311
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	r9d, 15
	mov	r8d, 2
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18120]
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rax+rcx+18116]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18144], rax
; Line 3312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	jne	SHORT $LN39@stbi__proc
; Line 3313
	lea	rcx, OFFSET FLAT:$SG148255
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ; stbi__free_jpeg_components
	jmp	SHORT $LN1@stbi__proc
$LN39@stbi__proc:
; Line 3314
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rcx+rax+18144]
	add	rax, 15
	and	rax, -16
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rdx+rcx+18160], rax
$LN38@stbi__proc:
; Line 3316
	jmp	$LN14@stbi__proc
$LN15@stbi__proc:
; Line 3318
	mov	eax, 1
$LN1@stbi__proc:
; Line 3319
	add	rsp, 104				; 00000068H
	ret	0
?stbi__process_frame_header@@YAHPEAUstbi__jpeg@@H@Z ENDP ; stbi__process_frame_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
z$ = 64
ncomp$ = 72
why$ = 80
?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z PROC ; stbi__free_jpeg_components
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3208
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3210
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__free
$LN2@stbi__free:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__free:
	mov	eax, DWORD PTR ncomp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__free
; Line 3211
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18136], 0
	je	SHORT $LN5@stbi__free
; Line 3212
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18136]
	call	QWORD PTR __imp_free
; Line 3213
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18136], 0
; Line 3214
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18128], 0
$LN5@stbi__free:
; Line 3216
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18144], 0
	je	SHORT $LN6@stbi__free
; Line 3217
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18144]
	call	QWORD PTR __imp_free
; Line 3218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18144], 0
; Line 3219
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18160], 0
$LN6@stbi__free:
; Line 3221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	QWORD PTR [rcx+rax+18152], 0
	je	SHORT $LN7@stbi__free
; Line 3222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+18152]
	call	QWORD PTR __imp_free
; Line 3223
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	QWORD PTR [rcx+rax+18152], 0
$LN7@stbi__free:
; Line 3225
	jmp	$LN2@stbi__free
$LN3@stbi__free:
; Line 3226
	mov	eax, DWORD PTR why$[rsp]
; Line 3227
	add	rsp, 56					; 00000038H
	ret	0
?stbi__free_jpeg_components@@YAHPEAUstbi__jpeg@@HH@Z ENDP ; stbi__free_jpeg_components
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
which$1 = 32
i$ = 36
q$2 = 40
aa$3 = 44
Ls$ = 48
id$4 = 52
z$ = 80
?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z PROC	; stbi__process_scan_header
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3169
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3171
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR Ls$[rsp], eax
; Line 3172
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18516], eax
; Line 3173
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jl	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 4
	jg	SHORT $LN9@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR [rcx+18516], eax
	jle	SHORT $LN8@stbi__proc
$LN9@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG148152
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN8@stbi__proc:
; Line 3174
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	lea	eax, DWORD PTR [rax+rax+6]
	cmp	DWORD PTR Ls$[rsp], eax
	je	SHORT $LN10@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148154
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN10@stbi__proc:
; Line 3175
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__proc
$LN2@stbi__proc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__proc
; Line 3176
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR id$4[rsp], eax
; Line 3177
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$2[rsp], eax
; Line 3178
	mov	DWORD PTR which$1[rsp], 0
	jmp	SHORT $LN7@stbi__proc
$LN5@stbi__proc:
	mov	eax, DWORD PTR which$1[rsp]
	inc	eax
	mov	DWORD PTR which$1[rsp], eax
$LN7@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jge	SHORT $LN6@stbi__proc
; Line 3179
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR id$4[rsp]
	cmp	DWORD PTR [rcx+rax+18080], edx
	jne	SHORT $LN11@stbi__proc
; Line 3180
	jmp	SHORT $LN6@stbi__proc
$LN11@stbi__proc:
	jmp	SHORT $LN5@stbi__proc
$LN6@stbi__proc:
; Line 3181
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR which$1[rsp], eax
	jne	SHORT $LN12@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN12@stbi__proc:
; Line 3182
	mov	eax, DWORD PTR q$2[rsp]
	sar	eax, 4
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18096], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18096], 3
	jle	SHORT $LN13@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148158
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN13@stbi__proc:
; Line 3183
	mov	eax, DWORD PTR q$2[rsp]
	and	eax, 15
	movsxd	rcx, DWORD PTR which$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rdx+rcx+18100], eax
	movsxd	rax, DWORD PTR which$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rcx+rax+18100], 3
	jle	SHORT $LN14@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148160
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN14@stbi__proc:
; Line 3184
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR which$1[rsp]
	mov	DWORD PTR [rcx+rax*4+18520], edx
; Line 3185
	jmp	$LN2@stbi__proc
$LN3@stbi__proc:
; Line 3189
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18484], eax
; Line 3190
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18488], eax
; Line 3191
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR aa$3[rsp], eax
; Line 3192
	mov	eax, DWORD PTR aa$3[rsp]
	sar	eax, 4
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18492], eax
; Line 3193
	mov	eax, DWORD PTR aa$3[rsp]
	and	eax, 15
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18496], eax
; Line 3194
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	SHORT $LN15@stbi__proc
; Line 3195
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18488], 63		; 0000003fH
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR [rcx+18488]
	cmp	DWORD PTR [rax+18484], ecx
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 13
	jg	SHORT $LN18@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 13
	jle	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3196
	lea	rcx, OFFSET FLAT:$SG148165
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN17@stbi__proc:
; Line 3197
	jmp	SHORT $LN16@stbi__proc
$LN15@stbi__proc:
; Line 3198
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	je	SHORT $LN19@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148167
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN19@stbi__proc:
; Line 3199
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	SHORT $LN21@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18496], 0
	je	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG148170
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__proc
$LN20@stbi__proc:
; Line 3200
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18488], 63		; 0000003fH
$LN16@stbi__proc:
; Line 3204
	mov	eax, 1
$LN1@stbi__proc:
; Line 3205
	add	rsp, 72					; 00000048H
	ret	0
?stbi__process_scan_header@@YAHPEAUstbi__jpeg@@@Z ENDP	; stbi__process_scan_header
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
i$1 = 36
th$2 = 40
tv64 = 44
i$3 = 48
n$4 = 52
i$5 = 56
i$6 = 60
p$7 = 64
tc$8 = 68
tv88 = 72
q$9 = 76
t$10 = 80
tv149 = 84
sixteen$11 = 88
tv152 = 92
tv155 = 96
q$12 = 100
tv233 = 104
ok$13 = 108
ok$14 = 112
v$15 = 120
sizes$16 = 128
__$ArrayPad$ = 192
z$ = 224
m$ = 232
?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__process_marker
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3066
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3068
	mov	eax, DWORD PTR m$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 196		; 000000c4H
	je	$LN29@stbi__proc
	cmp	DWORD PTR tv64[rsp], 219		; 000000dbH
	je	SHORT $LN26@stbi__proc
	cmp	DWORD PTR tv64[rsp], 221		; 000000ddH
	je	SHORT $LN24@stbi__proc
	cmp	DWORD PTR tv64[rsp], 255		; 000000ffH
	je	SHORT $LN23@stbi__proc
	jmp	$LN2@stbi__proc
$LN23@stbi__proc:
; Line 3070
	lea	rcx, OFFSET FLAT:$SG148100
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN24@stbi__proc:
; Line 3073
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 4
	je	SHORT $LN25@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148103
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN25@stbi__proc:
; Line 3074
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18536], eax
; Line 3075
	mov	eax, 1
	jmp	$LN1@stbi__proc
$LN26@stbi__proc:
; Line 3078
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN4@stbi__proc:
; Line 3079
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN5@stbi__proc
; Line 3080
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$9[rsp], eax
; Line 3081
	mov	eax, DWORD PTR q$9[rsp]
	sar	eax, 4
	mov	DWORD PTR p$7[rsp], eax
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN51@stbi__proc
	mov	DWORD PTR tv88[rsp], 1
	jmp	SHORT $LN52@stbi__proc
$LN51@stbi__proc:
	mov	DWORD PTR tv88[rsp], 0
$LN52@stbi__proc:
	mov	eax, DWORD PTR tv88[rsp]
	mov	DWORD PTR sixteen$11[rsp], eax
; Line 3082
	mov	eax, DWORD PTR q$9[rsp]
	and	eax, 15
	mov	DWORD PTR t$10[rsp], eax
; Line 3083
	cmp	DWORD PTR p$7[rsp], 0
	je	SHORT $LN27@stbi__proc
	cmp	DWORD PTR p$7[rsp], 1
	je	SHORT $LN27@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148106
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN27@stbi__proc:
; Line 3084
	cmp	DWORD PTR t$10[rsp], 3
	jle	SHORT $LN28@stbi__proc
	lea	rcx, OFFSET FLAT:$SG148108
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN28@stbi__proc:
; Line 3086
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN8@stbi__proc
$LN6@stbi__proc:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN8@stbi__proc:
	cmp	DWORD PTR i$3[rsp], 64			; 00000040H
	jge	SHORT $LN7@stbi__proc
; Line 3087
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN53@stbi__proc
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR tv149[rsp], eax
	jmp	SHORT $LN54@stbi__proc
$LN53@stbi__proc:
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv149[rsp], eax
$LN54@stbi__proc:
	movsxd	rax, DWORD PTR t$10[rsp]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR i$3[rsp]
	lea	rdx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	movzx	edx, WORD PTR tv149[rsp]
	mov	WORD PTR [rax+rcx*2], dx
	jmp	SHORT $LN6@stbi__proc
$LN7@stbi__proc:
; Line 3088
	cmp	DWORD PTR sixteen$11[rsp], 0
	je	SHORT $LN55@stbi__proc
	mov	DWORD PTR tv152[rsp], 129		; 00000081H
	jmp	SHORT $LN56@stbi__proc
$LN55@stbi__proc:
	mov	DWORD PTR tv152[rsp], 65		; 00000041H
$LN56@stbi__proc:
	mov	eax, DWORD PTR tv152[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3089
	jmp	$LN4@stbi__proc
$LN5@stbi__proc:
; Line 3090
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN57@stbi__proc
	mov	DWORD PTR tv155[rsp], 1
	jmp	SHORT $LN58@stbi__proc
$LN57@stbi__proc:
	mov	DWORD PTR tv155[rsp], 0
$LN58@stbi__proc:
	mov	eax, DWORD PTR tv155[rsp]
	jmp	$LN1@stbi__proc
$LN29@stbi__proc:
; Line 3093
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
$LN9@stbi__proc:
; Line 3094
	cmp	DWORD PTR L$[rsp], 0
	jle	$LN10@stbi__proc
; Line 3096
	mov	DWORD PTR n$4[rsp], 0
; Line 3097
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR q$12[rsp], eax
; Line 3098
	mov	eax, DWORD PTR q$12[rsp]
	sar	eax, 4
	mov	DWORD PTR tc$8[rsp], eax
; Line 3099
	mov	eax, DWORD PTR q$12[rsp]
	and	eax, 15
	mov	DWORD PTR th$2[rsp], eax
; Line 3100
	cmp	DWORD PTR tc$8[rsp], 1
	jg	SHORT $LN31@stbi__proc
	cmp	DWORD PTR th$2[rsp], 3
	jle	SHORT $LN30@stbi__proc
$LN31@stbi__proc:
	lea	rcx, OFFSET FLAT:$SG148112
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN30@stbi__proc:
; Line 3101
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbi__proc
$LN11@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbi__proc:
	cmp	DWORD PTR i$1[rsp], 16
	jge	SHORT $LN12@stbi__proc
; Line 3102
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	DWORD PTR sizes$16[rsp+rcx*4], eax
; Line 3103
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	eax, DWORD PTR sizes$16[rsp+rax*4]
	mov	ecx, DWORD PTR n$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$4[rsp], eax
; Line 3104
	jmp	SHORT $LN11@stbi__proc
$LN12@stbi__proc:
; Line 3105
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 17
	mov	DWORD PTR L$[rsp], eax
; Line 3106
	cmp	DWORD PTR tc$8[rsp], 0
	jne	SHORT $LN32@stbi__proc
; Line 3107
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ; stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN34@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN34@stbi__proc:
; Line 3108
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+1032]
	mov	QWORD PTR v$15[rsp], rax
; Line 3109
	jmp	SHORT $LN33@stbi__proc
$LN32@stbi__proc:
; Line 3110
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	lea	rdx, QWORD PTR sizes$16[rsp]
	mov	rcx, rax
	call	?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ; stbi__build_huffman
	test	eax, eax
	jne	SHORT $LN35@stbi__proc
	xor	eax, eax
	jmp	$LN1@stbi__proc
$LN35@stbi__proc:
; Line 3111
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+7752]
	mov	QWORD PTR v$15[rsp], rax
$LN33@stbi__proc:
; Line 3113
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN16@stbi__proc
$LN14@stbi__proc:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN16@stbi__proc:
	mov	eax, DWORD PTR n$4[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN15@stbi__proc
; Line 3114
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR v$15[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN14@stbi__proc
$LN15@stbi__proc:
; Line 3115
	cmp	DWORD PTR tc$8[rsp], 0
	je	SHORT $LN36@stbi__proc
; Line 3116
	movsxd	rax, DWORD PTR th$2[rsp]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6728]
	movsxd	rcx, DWORD PTR th$2[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	mov	rdx, rax
	call	?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z ; stbi__build_fast_ac
$LN36@stbi__proc:
; Line 3117
	mov	eax, DWORD PTR n$4[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR L$[rsp], eax
; Line 3118
	jmp	$LN9@stbi__proc
$LN10@stbi__proc:
; Line 3119
	cmp	DWORD PTR L$[rsp], 0
	jne	SHORT $LN59@stbi__proc
	mov	DWORD PTR tv233[rsp], 1
	jmp	SHORT $LN60@stbi__proc
$LN59@stbi__proc:
	mov	DWORD PTR tv233[rsp], 0
$LN60@stbi__proc:
	mov	eax, DWORD PTR tv233[rsp]
	jmp	$LN1@stbi__proc
$LN2@stbi__proc:
; Line 3123
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jl	SHORT $LN39@stbi__proc
	cmp	DWORD PTR m$[rsp], 239			; 000000efH
	jle	SHORT $LN38@stbi__proc
$LN39@stbi__proc:
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	$LN37@stbi__proc
$LN38@stbi__proc:
; Line 3124
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR L$[rsp], eax
; Line 3125
	cmp	DWORD PTR L$[rsp], 2
	jge	SHORT $LN40@stbi__proc
; Line 3126
	cmp	DWORD PTR m$[rsp], 254			; 000000feH
	jne	SHORT $LN41@stbi__proc
; Line 3127
	lea	rcx, OFFSET FLAT:$SG148124
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
	jmp	SHORT $LN42@stbi__proc
$LN41@stbi__proc:
; Line 3129
	lea	rcx, OFFSET FLAT:$SG148125
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__proc
$LN42@stbi__proc:
$LN40@stbi__proc:
; Line 3131
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 2
	mov	DWORD PTR L$[rsp], eax
; Line 3133
	cmp	DWORD PTR m$[rsp], 224			; 000000e0H
	jne	$LN43@stbi__proc
	cmp	DWORD PTR L$[rsp], 5
	jl	SHORT $LN43@stbi__proc
; Line 3135
	mov	DWORD PTR ok$13[rsp], 1
; Line 3137
	mov	DWORD PTR i$5[rsp], 0
	jmp	SHORT $LN19@stbi__proc
$LN17@stbi__proc:
	mov	eax, DWORD PTR i$5[rsp]
	inc	eax
	mov	DWORD PTR i$5[rsp], eax
$LN19@stbi__proc:
	cmp	DWORD PTR i$5[rsp], 5
	jge	SHORT $LN18@stbi__proc
; Line 3138
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$5[rsp]
	lea	rdx, OFFSET FLAT:?tag@?CL@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN45@stbi__proc
; Line 3139
	mov	DWORD PTR ok$13[rsp], 0
$LN45@stbi__proc:
	jmp	SHORT $LN17@stbi__proc
$LN18@stbi__proc:
; Line 3140
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 5
	mov	DWORD PTR L$[rsp], eax
; Line 3141
	cmp	DWORD PTR ok$13[rsp], 0
	je	SHORT $LN46@stbi__proc
; Line 3142
	mov	rax, QWORD PTR z$[rsp]
	mov	DWORD PTR [rax+18504], 1
$LN46@stbi__proc:
	jmp	$LN44@stbi__proc
$LN43@stbi__proc:
; Line 3143
	cmp	DWORD PTR m$[rsp], 238			; 000000eeH
	jne	$LN47@stbi__proc
	cmp	DWORD PTR L$[rsp], 12
	jl	$LN47@stbi__proc
; Line 3145
	mov	DWORD PTR ok$14[rsp], 1
; Line 3147
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN22@stbi__proc
$LN20@stbi__proc:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN22@stbi__proc:
	cmp	DWORD PTR i$6[rsp], 6
	jge	SHORT $LN21@stbi__proc
; Line 3148
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	movsxd	rcx, DWORD PTR i$6[rsp]
	lea	rdx, OFFSET FLAT:?tag@?DE@??stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z@4QBEB
	movzx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	je	SHORT $LN48@stbi__proc
; Line 3149
	mov	DWORD PTR ok$14[rsp], 0
$LN48@stbi__proc:
	jmp	SHORT $LN20@stbi__proc
$LN21@stbi__proc:
; Line 3150
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
; Line 3151
	cmp	DWORD PTR ok$14[rsp], 0
	je	SHORT $LN49@stbi__proc
; Line 3152
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 3153
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 3154
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 3155
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	rcx, QWORD PTR z$[rsp]
	mov	DWORD PTR [rcx+18508], eax
; Line 3156
	mov	eax, DWORD PTR L$[rsp]
	sub	eax, 6
	mov	DWORD PTR L$[rsp], eax
$LN49@stbi__proc:
$LN47@stbi__proc:
$LN44@stbi__proc:
; Line 3160
	mov	edx, DWORD PTR L$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 3161
	mov	eax, 1
	jmp	SHORT $LN1@stbi__proc
$LN37@stbi__proc:
; Line 3164
	lea	rcx, OFFSET FLAT:$SG148133
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
$LN1@stbi__proc:
; Line 3165
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 216				; 000000d8H
	ret	0
?stbi__process_marker@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__process_marker
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 32
j$2 = 36
i$3 = 40
h$4 = 44
w$5 = 48
data$6 = 56
tv174 = 64
z$ = 96
?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_finish
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3047
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3048
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	je	$LN11@stbi__jpeg
; Line 3051
	mov	DWORD PTR n$1[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR n$1[rsp]
	inc	eax
	mov	DWORD PTR n$1[rsp], eax
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR n$1[rsp], eax
	jge	$LN3@stbi__jpeg
; Line 3052
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$5[rsp], eax
; Line 3053
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$4[rsp], eax
; Line 3054
	mov	DWORD PTR j$2[rsp], 0
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR j$2[rsp]
	inc	eax
	mov	DWORD PTR j$2[rsp], eax
$LN7@stbi__jpeg:
	mov	eax, DWORD PTR h$4[rsp]
	cmp	DWORD PTR j$2[rsp], eax
	jge	$LN6@stbi__jpeg
; Line 3055
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN10@stbi__jpeg
$LN8@stbi__jpeg:
	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN10@stbi__jpeg:
	mov	eax, DWORD PTR w$5[rsp]
	cmp	DWORD PTR i$3[rsp], eax
	jge	$LN9@stbi__jpeg
; Line 3056
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$2[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$3[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$6[rsp], rax
; Line 3057
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	mov	rdx, rax
	mov	rcx, QWORD PTR data$6[rsp]
	call	?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z	; stbi__jpeg_dequantize
; Line 3058
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv174[rsp], rax
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$2[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$3[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	mov	r8, QWORD PTR data$6[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv174[rsp]
; Line 3059
	jmp	$LN8@stbi__jpeg
$LN9@stbi__jpeg:
; Line 3060
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 3061
	jmp	$LN2@stbi__jpeg
$LN3@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 3063
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_finish@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_finish
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
data$ = 32
dequant$ = 40
?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z PROC		; stbi__jpeg_dequantize
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3040
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3042
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__jpeg:
	cmp	DWORD PTR i$[rsp], 64			; 00000040H
	jge	SHORT $LN3@stbi__jpeg
; Line 3043
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR dequant$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	movsx	ecx, WORD PTR [rdx+rcx*2]
	imul	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 3044
	add	rsp, 24
	ret	0
?stbi__jpeg_dequantize@@YAXPEAFPEAG@Z ENDP		; stbi__jpeg_dequantize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$1 = 64
n$2 = 68
n$3 = 72
n$4 = 76
j$5 = 80
i$6 = 84
k$7 = 88
i$8 = 92
x$9 = 96
j$10 = 100
y$11 = 104
j$12 = 108
i$13 = 112
k$14 = 116
i$15 = 120
x$16 = 124
j$17 = 128
y$18 = 132
ha$19 = 136
tv192 = 140
ha$20 = 144
tv315 = 148
ha$21 = 152
tv404 = 156
tv522 = 160
h$22 = 164
w$23 = 168
y2$24 = 172
x2$25 = 176
h$26 = 180
w$27 = 184
y2$28 = 188
x2$29 = 192
data$30 = 200
tv189 = 208
tv312 = 216
data$31 = 224
data$32 = 240
data$33 = 368
__$ArrayPad$ = 496
z$ = 528
?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z PROC ; stbi__parse_entropy_coded_data
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2916
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 520				; 00000208H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2917
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
; Line 2918
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18480], 0
	jne	$LN44@stbi__pars
; Line 2919
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN46@stbi__pars
; Line 2922
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$2[rsp], eax
; Line 2927
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$23[rsp], eax
; Line 2928
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$22[rsp], eax
; Line 2929
	mov	DWORD PTR j$5[rsp], 0
	jmp	SHORT $LN4@stbi__pars
$LN2@stbi__pars:
	mov	eax, DWORD PTR j$5[rsp]
	inc	eax
	mov	DWORD PTR j$5[rsp], eax
$LN4@stbi__pars:
	mov	eax, DWORD PTR h$22[rsp]
	cmp	DWORD PTR j$5[rsp], eax
	jge	$LN3@stbi__pars
; Line 2930
	mov	DWORD PTR i$6[rsp], 0
	jmp	SHORT $LN7@stbi__pars
$LN5@stbi__pars:
	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN7@stbi__pars:
	mov	eax, DWORD PTR w$23[rsp]
	cmp	DWORD PTR i$6[rsp], eax
	jge	$LN6@stbi__pars
; Line 2931
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$19[rsp], eax
; Line 2932
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$19[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$19[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$2[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$2[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$32[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ; stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN48@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN48@stbi__pars:
; Line 2933
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv189[rsp], rax
	movsxd	rax, DWORD PTR n$2[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$2[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$2[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR j$5[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	mov	edx, DWORD PTR i$6[rsp]
	shl	edx, 3
	movsxd	rdx, edx
	add	rcx, rdx
	lea	r8, QWORD PTR data$32[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv189[rsp]
; Line 2935
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv192[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv192[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv192[rsp], 0
	jg	SHORT $LN49@stbi__pars
; Line 2936
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN50@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN50@stbi__pars:
; Line 2939
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN52@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN51@stbi__pars
$LN52@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN51@stbi__pars:
; Line 2940
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN49@stbi__pars:
; Line 2942
	jmp	$LN5@stbi__pars
$LN6@stbi__pars:
; Line 2943
	jmp	$LN2@stbi__pars
$LN3@stbi__pars:
; Line 2944
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 2945
	jmp	$LN47@stbi__pars
$LN46@stbi__pars:
; Line 2948
	mov	DWORD PTR j$10[rsp], 0
	jmp	SHORT $LN10@stbi__pars
$LN8@stbi__pars:
	mov	eax, DWORD PTR j$10[rsp]
	inc	eax
	mov	DWORD PTR j$10[rsp], eax
$LN10@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$10[rsp], eax
	jge	$LN9@stbi__pars
; Line 2949
	mov	DWORD PTR i$8[rsp], 0
	jmp	SHORT $LN13@stbi__pars
$LN11@stbi__pars:
	mov	eax, DWORD PTR i$8[rsp]
	inc	eax
	mov	DWORD PTR i$8[rsp], eax
$LN13@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$8[rsp], eax
	jge	$LN12@stbi__pars
; Line 2951
	mov	DWORD PTR k$7[rsp], 0
	jmp	SHORT $LN16@stbi__pars
$LN14@stbi__pars:
	mov	eax, DWORD PTR k$7[rsp]
	inc	eax
	mov	DWORD PTR k$7[rsp], eax
$LN16@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$7[rsp], eax
	jge	$LN15@stbi__pars
; Line 2952
	movsxd	rax, DWORD PTR k$7[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$1[rsp], eax
; Line 2955
	mov	DWORD PTR y$11[rsp], 0
	jmp	SHORT $LN19@stbi__pars
$LN17@stbi__pars:
	mov	eax, DWORD PTR y$11[rsp]
	inc	eax
	mov	DWORD PTR y$11[rsp], eax
$LN19@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$11[rsp], eax
	jge	$LN18@stbi__pars
; Line 2956
	mov	DWORD PTR x$9[rsp], 0
	jmp	SHORT $LN22@stbi__pars
$LN20@stbi__pars:
	mov	eax, DWORD PTR x$9[rsp]
	inc	eax
	mov	DWORD PTR x$9[rsp], eax
$LN22@stbi__pars:
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$9[rsp], eax
	jge	$LN21@stbi__pars
; Line 2957
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$8[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$9[rsp]
	shl	eax, 3
	mov	DWORD PTR x2$25[rsp], eax
; Line 2958
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$10[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$11[rsp]
	shl	eax, 3
	mov	DWORD PTR y2$24[rsp], eax
; Line 2959
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$20[rsp], eax
; Line 2960
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18092]
	imul	rax, rax, 128				; 00000080H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13448]
	movsxd	rcx, DWORD PTR ha$20[rsp]
	imul	rcx, rcx, 1024				; 00000400H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+13960]
	movsxd	rdx, DWORD PTR ha$20[rsp]
	imul	rdx, rdx, 1680				; 00000690H
	mov	r8, QWORD PTR z$[rsp]
	lea	rdx, QWORD PTR [r8+rdx+6728]
	movsxd	r8, DWORD PTR n$1[rsp]
	imul	r8, r8, 96				; 00000060H
	mov	r9, QWORD PTR z$[rsp]
	movsxd	r8, DWORD PTR [r9+r8+18096]
	imul	r8, r8, 1680				; 00000690H
	mov	r9, QWORD PTR z$[rsp]
	lea	r8, QWORD PTR [r9+r8+8]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR n$1[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rdx
	lea	rdx, QWORD PTR data$33[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ; stbi__jpeg_decode_block
	test	eax, eax
	jne	SHORT $LN53@stbi__pars
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN53@stbi__pars:
; Line 2961
	mov	rax, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rax+18544]
	mov	QWORD PTR tv312[rsp], rax
	movsxd	rax, DWORD PTR n$1[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$1[rsp]
	imul	rcx, rcx, 96				; 00000060H
	movsxd	rdx, DWORD PTR n$1[rsp]
	imul	rdx, rdx, 96				; 00000060H
	mov	r8, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [r8+rdx+18116]
	imul	edx, DWORD PTR y2$24[rsp]
	movsxd	rdx, edx
	mov	r8, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+18128]
	add	rcx, rdx
	movsxd	rdx, DWORD PTR x2$25[rsp]
	add	rcx, rdx
	lea	r8, QWORD PTR data$33[rsp]
	mov	rdx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR [rdx+rax+18116]
	call	QWORD PTR tv312[rsp]
; Line 2962
	jmp	$LN20@stbi__pars
$LN21@stbi__pars:
; Line 2963
	jmp	$LN17@stbi__pars
$LN18@stbi__pars:
; Line 2964
	jmp	$LN14@stbi__pars
$LN15@stbi__pars:
; Line 2967
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv315[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv315[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv315[rsp], 0
	jg	SHORT $LN54@stbi__pars
; Line 2968
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN55@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN55@stbi__pars:
; Line 2969
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN57@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN56@stbi__pars
$LN57@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN56@stbi__pars:
; Line 2970
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN54@stbi__pars:
; Line 2972
	jmp	$LN11@stbi__pars
$LN12@stbi__pars:
; Line 2973
	jmp	$LN8@stbi__pars
$LN9@stbi__pars:
; Line 2974
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN47@stbi__pars:
; Line 2976
	jmp	$LN45@stbi__pars
$LN44@stbi__pars:
; Line 2977
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18516], 1
	jne	$LN58@stbi__pars
; Line 2979
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18520]
	mov	DWORD PTR n$4[rsp], eax
; Line 2984
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18108]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR w$27[rsp], eax
; Line 2985
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18112]
	add	eax, 7
	sar	eax, 3
	mov	DWORD PTR h$26[rsp], eax
; Line 2986
	mov	DWORD PTR j$12[rsp], 0
	jmp	SHORT $LN25@stbi__pars
$LN23@stbi__pars:
	mov	eax, DWORD PTR j$12[rsp]
	inc	eax
	mov	DWORD PTR j$12[rsp], eax
$LN25@stbi__pars:
	mov	eax, DWORD PTR h$26[rsp]
	cmp	DWORD PTR j$12[rsp], eax
	jge	$LN24@stbi__pars
; Line 2987
	mov	DWORD PTR i$13[rsp], 0
	jmp	SHORT $LN28@stbi__pars
$LN26@stbi__pars:
	mov	eax, DWORD PTR i$13[rsp]
	inc	eax
	mov	DWORD PTR i$13[rsp], eax
$LN28@stbi__pars:
	mov	eax, DWORD PTR w$27[rsp]
	cmp	DWORD PTR i$13[rsp], eax
	jge	$LN27@stbi__pars
; Line 2988
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$4[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR j$12[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR i$13[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$30[rsp], rax
; Line 2989
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN60@stbi__pars
; Line 2990
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$4[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ; stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN62@stbi__pars
; Line 2991
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN62@stbi__pars:
; Line 2992
	jmp	$LN61@stbi__pars
$LN60@stbi__pars:
; Line 2993
	movsxd	rax, DWORD PTR n$4[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18100]
	mov	DWORD PTR ha$21[rsp], eax
; Line 2994
	movsxd	rax, DWORD PTR ha$21[rsp]
	imul	rax, rax, 1024				; 00000400H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+13960]
	movsxd	rcx, DWORD PTR ha$21[rsp]
	imul	rcx, rcx, 1680				; 00000690H
	mov	rdx, QWORD PTR z$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+6728]
	mov	r9, rax
	mov	r8, rcx
	mov	rdx, QWORD PTR data$30[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z ; stbi__jpeg_decode_block_prog_ac
	test	eax, eax
	jne	SHORT $LN63@stbi__pars
; Line 2995
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN63@stbi__pars:
$LN61@stbi__pars:
; Line 2998
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv404[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv404[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv404[rsp], 0
	jg	SHORT $LN64@stbi__pars
; Line 2999
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN65@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN65@stbi__pars:
; Line 3000
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN67@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN66@stbi__pars
$LN67@stbi__pars:
	mov	eax, 1
	jmp	$LN1@stbi__pars
$LN66@stbi__pars:
; Line 3001
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN64@stbi__pars:
; Line 3003
	jmp	$LN26@stbi__pars
$LN27@stbi__pars:
; Line 3004
	jmp	$LN23@stbi__pars
$LN24@stbi__pars:
; Line 3005
	mov	eax, 1
	jmp	$LN1@stbi__pars
; Line 3006
	jmp	$LN59@stbi__pars
$LN58@stbi__pars:
; Line 3008
	mov	DWORD PTR j$17[rsp], 0
	jmp	SHORT $LN31@stbi__pars
$LN29@stbi__pars:
	mov	eax, DWORD PTR j$17[rsp]
	inc	eax
	mov	DWORD PTR j$17[rsp], eax
$LN31@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18068]
	cmp	DWORD PTR j$17[rsp], eax
	jge	$LN30@stbi__pars
; Line 3009
	mov	DWORD PTR i$15[rsp], 0
	jmp	SHORT $LN34@stbi__pars
$LN32@stbi__pars:
	mov	eax, DWORD PTR i$15[rsp]
	inc	eax
	mov	DWORD PTR i$15[rsp], eax
$LN34@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18064]
	cmp	DWORD PTR i$15[rsp], eax
	jge	$LN33@stbi__pars
; Line 3011
	mov	DWORD PTR k$14[rsp], 0
	jmp	SHORT $LN37@stbi__pars
$LN35@stbi__pars:
	mov	eax, DWORD PTR k$14[rsp]
	inc	eax
	mov	DWORD PTR k$14[rsp], eax
$LN37@stbi__pars:
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18516]
	cmp	DWORD PTR k$14[rsp], eax
	jge	$LN36@stbi__pars
; Line 3012
	movsxd	rax, DWORD PTR k$14[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+18520]
	mov	DWORD PTR n$3[rsp], eax
; Line 3015
	mov	DWORD PTR y$18[rsp], 0
	jmp	SHORT $LN40@stbi__pars
$LN38@stbi__pars:
	mov	eax, DWORD PTR y$18[rsp]
	inc	eax
	mov	DWORD PTR y$18[rsp], eax
$LN40@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18088]
	cmp	DWORD PTR y$18[rsp], eax
	jge	$LN39@stbi__pars
; Line 3016
	mov	DWORD PTR x$16[rsp], 0
	jmp	SHORT $LN43@stbi__pars
$LN41@stbi__pars:
	mov	eax, DWORD PTR x$16[rsp]
	inc	eax
	mov	DWORD PTR x$16[rsp], eax
$LN43@stbi__pars:
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18084]
	cmp	DWORD PTR x$16[rsp], eax
	jge	$LN42@stbi__pars
; Line 3017
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR i$15[rsp]
	imul	edx, DWORD PTR [rcx+rax+18084]
	mov	eax, edx
	add	eax, DWORD PTR x$16[rsp]
	mov	DWORD PTR x2$29[rsp], eax
; Line 3018
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	mov	edx, DWORD PTR j$17[rsp]
	imul	edx, DWORD PTR [rcx+rax+18088]
	mov	eax, edx
	add	eax, DWORD PTR y$18[rsp]
	mov	DWORD PTR y2$28[rsp], eax
; Line 3019
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	movsxd	rcx, DWORD PTR n$3[rsp]
	imul	rcx, rcx, 96				; 00000060H
	mov	rdx, QWORD PTR z$[rsp]
	mov	r8d, DWORD PTR y2$28[rsp]
	imul	r8d, DWORD PTR [rdx+rcx+18168]
	mov	ecx, r8d
	mov	edx, DWORD PTR x2$29[rsp]
	add	edx, ecx
	mov	ecx, edx
	imul	ecx, ecx, 64				; 00000040H
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR z$[rsp]
	mov	rax, QWORD PTR [rdx+rax+18160]
	lea	rax, QWORD PTR [rax+rcx*2]
	mov	QWORD PTR data$31[rsp], rax
; Line 3020
	movsxd	rax, DWORD PTR n$3[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR z$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax+18096]
	imul	rax, rax, 1680				; 00000690H
	mov	rcx, QWORD PTR z$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	r9d, DWORD PTR n$3[rsp]
	mov	r8, rax
	mov	rdx, QWORD PTR data$31[rsp]
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ; stbi__jpeg_decode_block_prog_dc
	test	eax, eax
	jne	SHORT $LN68@stbi__pars
; Line 3021
	xor	eax, eax
	jmp	$LN1@stbi__pars
$LN68@stbi__pars:
; Line 3022
	jmp	$LN41@stbi__pars
$LN42@stbi__pars:
; Line 3023
	jmp	$LN38@stbi__pars
$LN39@stbi__pars:
; Line 3024
	jmp	$LN35@stbi__pars
$LN36@stbi__pars:
; Line 3027
	mov	rax, QWORD PTR z$[rsp]
	mov	eax, DWORD PTR [rax+18540]
	dec	eax
	mov	DWORD PTR tv522[rsp], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR tv522[rsp]
	mov	DWORD PTR [rax+18540], ecx
	cmp	DWORD PTR tv522[rsp], 0
	jg	SHORT $LN69@stbi__pars
; Line 3028
	mov	rax, QWORD PTR z$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jge	SHORT $LN70@stbi__pars
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN70@stbi__pars:
; Line 3029
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 208				; 000000d0H
	jl	SHORT $LN72@stbi__pars
	mov	rax, QWORD PTR z$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 215				; 000000d7H
	jle	SHORT $LN71@stbi__pars
$LN72@stbi__pars:
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pars
$LN71@stbi__pars:
; Line 3030
	mov	rcx, QWORD PTR z$[rsp]
	call	?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ; stbi__jpeg_reset
$LN69@stbi__pars:
; Line 3032
	jmp	$LN32@stbi__pars
$LN33@stbi__pars:
; Line 3033
	jmp	$LN29@stbi__pars
$LN30@stbi__pars:
; Line 3034
	mov	eax, 1
$LN59@stbi__pars:
$LN45@stbi__pars:
$LN1@stbi__pars:
; Line 3037
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 520				; 00000208H
	ret	0
?stbi__parse_entropy_coded_data@@YAHPEAUstbi__jpeg@@@Z ENDP ; stbi__parse_entropy_coded_data
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 0
j$ = 32
?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_reset
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2903
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 2904
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18468], 0
; Line 2905
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18464], 0
; Line 2906
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 0
; Line 2907
	mov	eax, 96					; 00000060H
	imul	rax, rax, 3
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 2
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
	mov	eax, 96					; 00000060H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+rax+18104], 0
; Line 2908
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
; Line 2909
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18536], 0
	je	SHORT $LN3@stbi__jpeg
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18536]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN4@stbi__jpeg
$LN3@stbi__jpeg:
	mov	DWORD PTR tv88[rsp], 2147483647		; 7fffffffH
$LN4@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR tv88[rsp]
	mov	DWORD PTR [rax+18540], ecx
; Line 2910
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18500], 0
; Line 2913
	add	rsp, 24
	ret	0
?stbi__jpeg_reset@@YAXPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_reset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 32
j$ = 64
?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z PROC		; stbi__get_marker
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2886
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2888
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN4@stbi__get_
	mov	rax, QWORD PTR j$[rsp]
	movzx	eax, BYTE PTR [rax+18472]
	mov	BYTE PTR x$[rsp], al
	mov	rax, QWORD PTR j$[rsp]
	mov	BYTE PTR [rax+18472], 255		; 000000ffH
	movzx	eax, BYTE PTR x$[rsp]
	jmp	SHORT $LN1@stbi__get_
$LN4@stbi__get_:
; Line 2889
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR x$[rsp], al
; Line 2890
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	je	SHORT $LN5@stbi__get_
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__get_
$LN5@stbi__get_:
$LN2@stbi__get_:
; Line 2891
	movzx	eax, BYTE PTR x$[rsp]
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN3@stbi__get_
; Line 2892
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR x$[rsp], al
	jmp	SHORT $LN2@stbi__get_
$LN3@stbi__get_:
; Line 2893
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__get_:
; Line 2894
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get_marker@@YAEPEAUstbi__jpeg@@@Z ENDP		; stbi__get_marker
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tmp$ = 0
row1$ = 16
row3$ = 32
row5$ = 48
row7$ = 64
row0$ = 80
row2$ = 96
row4$ = 112
row6$ = 128
p0$1 = 144
p2$2 = 160
p1$3 = 176
p3$4 = 192
bias_0$ = 208
bias_1$ = 224
rot0_0$ = 240
rot0_1$ = 256
rot2_0$ = 272
rot2_1$ = 288
rot3_0$ = 304
rot3_1$ = 320
rot1_0$ = 336
rot1_1$ = 352
rot0_0lo$5 = 368
rot0_0hi$6 = 384
sum04$7 = 400
dif04$8 = 416
t0e_l$9 = 432
t3e_l$10 = 448
t0e_h$11 = 464
t3e_h$12 = 480
t1e_l$13 = 496
t2e_l$14 = 512
t1e_h$15 = 528
t2e_h$16 = 544
rot2_0lo$17 = 560
rot2_0hi$18 = 576
rot3_0lo$19 = 592
rot3_0hi$20 = 608
sum17$21 = 624
sum35$22 = 640
rot1_0lo$23 = 656
rot1_0hi$24 = 672
y5o_l$25 = 688
y5o_h$26 = 704
y4o_l$27 = 720
y4o_h$28 = 736
abiased_l$29 = 752
x7_l$30 = 768
abiased_h$31 = 784
x7_h$32 = 800
abiased_l$33 = 816
x6_l$34 = 832
abiased_h$35 = 848
x6_h$36 = 864
abiased_l$37 = 880
x5_l$38 = 896
abiased_h$39 = 912
x5_h$40 = 928
abiased_l$41 = 944
x4_l$42 = 960
abiased_h$43 = 976
x4_h$44 = 992
rot0_0lo$45 = 1008
rot0_0hi$46 = 1024
sum04$47 = 1040
dif04$48 = 1056
t0e_l$49 = 1072
t3e_l$50 = 1088
t0e_h$51 = 1104
t3e_h$52 = 1120
t1e_l$53 = 1136
t2e_l$54 = 1152
t1e_h$55 = 1168
t2e_h$56 = 1184
rot2_0lo$57 = 1200
rot2_0hi$58 = 1216
rot3_0lo$59 = 1232
rot3_0hi$60 = 1248
sum17$61 = 1264
sum35$62 = 1280
rot1_0lo$63 = 1296
rot1_0hi$64 = 1312
y5o_l$65 = 1328
y5o_h$66 = 1344
y4o_l$67 = 1360
y4o_h$68 = 1376
abiased_l$69 = 1392
x7_l$70 = 1408
abiased_h$71 = 1424
x7_h$72 = 1440
abiased_l$73 = 1456
x6_l$74 = 1472
abiased_h$75 = 1488
x6_h$76 = 1504
abiased_l$77 = 1520
x5_l$78 = 1536
abiased_h$79 = 1552
x5_h$80 = 1568
abiased_l$81 = 1584
x4_l$82 = 1600
abiased_h$83 = 1616
x4_h$84 = 1632
$T85 = 1648
$T86 = 1664
$T87 = 1680
$T88 = 1696
$T89 = 1712
$T90 = 1728
$T91 = 1744
$T92 = 1760
$T93 = 1776
$T94 = 1792
$T95 = 1808
$T96 = 1824
$T97 = 1840
$T98 = 1856
$T99 = 1872
$T100 = 1888
$T101 = 1904
$T102 = 1920
$T103 = 1936
$T104 = 1952
$T105 = 1968
$T106 = 1984
$T107 = 2000
$T108 = 2016
$T109 = 2032
$T110 = 2048
$T111 = 2064
$T112 = 2080
$T113 = 2096
$T114 = 2112
$T115 = 2128
$T116 = 2144
$T117 = 2160
$T118 = 2176
$T119 = 2192
$T120 = 2208
$T121 = 2224
$T122 = 2240
$T123 = 2256
$T124 = 2272
$T125 = 2288
$T126 = 2304
$T127 = 2320
$T128 = 2336
$T129 = 2352
$T130 = 2368
$T131 = 2384
$T132 = 2400
$T133 = 2416
$T134 = 2432
$T135 = 2448
$T136 = 2464
$T137 = 2480
$T138 = 2496
$T139 = 2512
$T140 = 2528
$T141 = 2544
$T142 = 2560
$T143 = 2576
$T144 = 2592
$T145 = 2608
$T146 = 2624
$T147 = 2640
$T148 = 2656
$T149 = 2672
$T150 = 2688
y0o_l$151 = 2704
$T152 = 2720
y0o_h$153 = 2736
$T154 = 2752
y1o_l$155 = 2768
$T156 = 2784
y1o_h$157 = 2800
$T158 = 2816
y2o_l$159 = 2832
$T160 = 2848
y2o_h$161 = 2864
$T162 = 2880
y3o_l$163 = 2896
$T164 = 2912
y3o_h$165 = 2928
$T166 = 2944
x0_l$167 = 2960
$T168 = 2976
x0_h$169 = 2992
$T170 = 3008
$T171 = 3024
$T172 = 3040
$T173 = 3056
$T174 = 3072
sum_h$175 = 3088
sum_l$176 = 3104
$T177 = 3120
$T178 = 3136
$T179 = 3152
dif_h$180 = 3168
dif_l$181 = 3184
$T182 = 3200
$T183 = 3216
$T184 = 3232
x1_l$185 = 3248
$T186 = 3264
x1_h$187 = 3280
$T188 = 3296
$T189 = 3312
$T190 = 3328
$T191 = 3344
$T192 = 3360
sum_h$193 = 3376
sum_l$194 = 3392
$T195 = 3408
$T196 = 3424
$T197 = 3440
dif_h$198 = 3456
dif_l$199 = 3472
$T200 = 3488
$T201 = 3504
$T202 = 3520
x2_l$203 = 3536
$T204 = 3552
x2_h$205 = 3568
$T206 = 3584
$T207 = 3600
$T208 = 3616
$T209 = 3632
$T210 = 3648
sum_h$211 = 3664
sum_l$212 = 3680
$T213 = 3696
$T214 = 3712
$T215 = 3728
dif_h$216 = 3744
dif_l$217 = 3760
$T218 = 3776
$T219 = 3792
$T220 = 3808
x3_l$221 = 3824
$T222 = 3840
x3_h$223 = 3856
$T224 = 3872
$T225 = 3888
$T226 = 3904
$T227 = 3920
$T228 = 3936
sum_h$229 = 3952
sum_l$230 = 3968
$T231 = 3984
$T232 = 4000
$T233 = 4016
dif_h$234 = 4032
dif_l$235 = 4048
$T236 = 4064
$T237 = 4080
$T238 = 4096
$T239 = 4112
$T240 = 4128
$T241 = 4144
$T242 = 4160
$T243 = 4176
$T244 = 4192
$T245 = 4208
$T246 = 4224
$T247 = 4240
$T248 = 4256
$T249 = 4272
$T250 = 4288
$T251 = 4304
$T252 = 4320
$T253 = 4336
$T254 = 4352
$T255 = 4368
$T256 = 4384
$T257 = 4400
$T258 = 4416
$T259 = 4432
$T260 = 4448
$T261 = 4464
$T262 = 4480
$T263 = 4496
$T264 = 4512
$T265 = 4528
$T266 = 4544
$T267 = 4560
$T268 = 4576
$T269 = 4592
$T270 = 4608
$T271 = 4624
$T272 = 4640
$T273 = 4656
$T274 = 4672
$T275 = 4688
$T276 = 4704
$T277 = 4720
$T278 = 4736
$T279 = 4752
$T280 = 4768
$T281 = 4784
$T282 = 4800
$T283 = 4816
$T284 = 4832
$T285 = 4848
$T286 = 4864
$T287 = 4880
$T288 = 4896
$T289 = 4912
$T290 = 4928
$T291 = 4944
$T292 = 4960
$T293 = 4976
$T294 = 4992
$T295 = 5008
$T296 = 5024
$T297 = 5040
$T298 = 5056
$T299 = 5072
$T300 = 5088
$T301 = 5104
$T302 = 5120
$T303 = 5136
$T304 = 5152
$T305 = 5168
$T306 = 5184
$T307 = 5200
$T308 = 5216
$T309 = 5232
$T310 = 5248
y0o_l$311 = 5264
$T312 = 5280
y0o_h$313 = 5296
$T314 = 5312
y1o_l$315 = 5328
$T316 = 5344
y1o_h$317 = 5360
$T318 = 5376
y2o_l$319 = 5392
$T320 = 5408
y2o_h$321 = 5424
$T322 = 5440
y3o_l$323 = 5456
$T324 = 5472
y3o_h$325 = 5488
$T326 = 5504
x0_l$327 = 5520
$T328 = 5536
x0_h$329 = 5552
$T330 = 5568
$T331 = 5584
$T332 = 5600
$T333 = 5616
$T334 = 5632
sum_h$335 = 5648
sum_l$336 = 5664
$T337 = 5680
$T338 = 5696
$T339 = 5712
dif_h$340 = 5728
dif_l$341 = 5744
$T342 = 5760
$T343 = 5776
$T344 = 5792
x1_l$345 = 5808
$T346 = 5824
x1_h$347 = 5840
$T348 = 5856
$T349 = 5872
$T350 = 5888
$T351 = 5904
$T352 = 5920
sum_h$353 = 5936
sum_l$354 = 5952
$T355 = 5968
$T356 = 5984
$T357 = 6000
dif_h$358 = 6016
dif_l$359 = 6032
$T360 = 6048
$T361 = 6064
$T362 = 6080
x2_l$363 = 6096
$T364 = 6112
x2_h$365 = 6128
$T366 = 6144
$T367 = 6160
$T368 = 6176
$T369 = 6192
$T370 = 6208
sum_h$371 = 6224
sum_l$372 = 6240
$T373 = 6256
$T374 = 6272
$T375 = 6288
dif_h$376 = 6304
dif_l$377 = 6320
$T378 = 6336
$T379 = 6352
$T380 = 6368
x3_l$381 = 6384
$T382 = 6400
x3_h$383 = 6416
$T384 = 6432
$T385 = 6448
$T386 = 6464
$T387 = 6480
$T388 = 6496
sum_h$389 = 6512
sum_l$390 = 6528
$T391 = 6544
$T392 = 6560
$T393 = 6576
dif_h$394 = 6592
dif_l$395 = 6608
$T396 = 6624
$T397 = 6640
$T398 = 6656
$T399 = 6672
$T400 = 6688
$T401 = 6704
$T402 = 6720
$T403 = 6736
$T404 = 6752
$T405 = 6768
$T406 = 6784
$T407 = 6800
$T408 = 6816
$T409 = 6832
$T410 = 6848
$T411 = 6864
$T412 = 6880
$T413 = 6896
$T414 = 6912
$T415 = 6928
$T416 = 6944
$T417 = 6960
$T418 = 6976
out$ = 7008
out_stride$ = 7016
data$ = 7024
?stbi__idct_simd@@YAXPEAEHQEAF@Z PROC			; stbi__idct_simd
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2497
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 7000				; 00001b58H
	call	__chkstk
	sub	rsp, rax
; Line 2581
	vmovdqu	xmm0, XMMWORD PTR __xmm@eb1a08a9eb1a08a9eb1a08a9eb1a08a9
	vmovdqu	XMMWORD PTR $T85[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T85[rsp]
	vmovdqu	XMMWORD PTR rot0_0$[rsp], xmm0
; Line 2582
	vmovdqu	xmm0, XMMWORD PTR __xmm@08a914e808a914e808a914e808a914e8
	vmovdqu	XMMWORD PTR $T86[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T86[rsp]
	vmovdqu	XMMWORD PTR rot0_1$[rsp], xmm0
; Line 2583
	vmovdqu	xmm0, XMMWORD PTR __xmm@12d0046b12d0046b12d0046b12d0046b
	vmovdqu	XMMWORD PTR $T87[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T87[rsp]
	vmovdqu	XMMWORD PTR rot1_0$[rsp], xmm0
; Line 2584
	vmovdqu	xmm0, XMMWORD PTR __xmm@e9cf12d0e9cf12d0e9cf12d0e9cf12d0
	vmovdqu	XMMWORD PTR $T88[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T88[rsp]
	vmovdqu	XMMWORD PTR rot1_1$[rsp], xmm0
; Line 2585
	vmovdqu	xmm0, XMMWORD PTR __xmm@e09ee565e09ee565e09ee565e09ee565
	vmovdqu	XMMWORD PTR $T89[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T89[rsp]
	vmovdqu	XMMWORD PTR rot2_0$[rsp], xmm0
; Line 2586
	vmovdqu	xmm0, XMMWORD PTR __xmm@11c8e09e11c8e09e11c8e09e11c8e09e
	vmovdqu	XMMWORD PTR $T90[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T90[rsp]
	vmovdqu	XMMWORD PTR rot2_1$[rsp], xmm0
; Line 2587
	vmovdqu	xmm0, XMMWORD PTR __xmm@f9c31a9df9c31a9df9c31a9df9c31a9d
	vmovdqu	XMMWORD PTR $T91[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T91[rsp]
	vmovdqu	XMMWORD PTR rot3_0$[rsp], xmm0
; Line 2588
	vmovdqu	xmm0, XMMWORD PTR __xmm@11c8f9c311c8f9c311c8f9c311c8f9c3
	vmovdqu	XMMWORD PTR $T92[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T92[rsp]
	vmovdqu	XMMWORD PTR rot3_1$[rsp], xmm0
; Line 2591
	vmovdqu	xmm0, XMMWORD PTR __xmm@00000200000002000000020000000200
	vmovdqu	XMMWORD PTR $T93[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T93[rsp]
	vmovdqu	XMMWORD PTR bias_0$[rsp], xmm0
; Line 2592
	vmovdqu	xmm0, XMMWORD PTR __xmm@01010000010100000101000001010000
	vmovdqu	XMMWORD PTR $T94[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T94[rsp]
	vmovdqu	XMMWORD PTR bias_1$[rsp], xmm0
; Line 2595
	mov	rax, QWORD PTR data$[rsp]
	vmovdqu	xmm0, XMMWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T95[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T95[rsp]
	vmovdqu	XMMWORD PTR row0$[rsp], xmm0
; Line 2596
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 16
	vmovdqu	xmm0, XMMWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T96[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T96[rsp]
	vmovdqu	XMMWORD PTR row1$[rsp], xmm0
; Line 2597
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 32					; 00000020H
	vmovdqu	xmm0, XMMWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T97[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T97[rsp]
	vmovdqu	XMMWORD PTR row2$[rsp], xmm0
; Line 2598
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 48					; 00000030H
	vmovdqu	xmm0, XMMWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T98[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T98[rsp]
	vmovdqu	XMMWORD PTR row3$[rsp], xmm0
; Line 2599
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 64					; 00000040H
	vmovdqu	xmm0, XMMWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T99[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T99[rsp]
	vmovdqu	XMMWORD PTR row4$[rsp], xmm0
; Line 2600
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 80					; 00000050H
	vmovdqu	xmm0, XMMWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T100[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T100[rsp]
	vmovdqu	XMMWORD PTR row5$[rsp], xmm0
; Line 2601
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 96					; 00000060H
	vmovdqu	xmm0, XMMWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T101[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T101[rsp]
	vmovdqu	XMMWORD PTR row6$[rsp], xmm0
; Line 2602
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 112				; 00000070H
	vmovdqu	xmm0, XMMWORD PTR [rax]
	vmovdqu	XMMWORD PTR $T102[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T102[rsp]
	vmovdqu	XMMWORD PTR row7$[rsp], xmm0
; Line 2605
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR $T103[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T103[rsp]
	vmovdqu	XMMWORD PTR rot0_0lo$5[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR $T104[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T104[rsp]
	vmovdqu	XMMWORD PTR rot0_0hi$6[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot0_0$[rsp]
	vmovdqu	XMMWORD PTR $T105[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T105[rsp]
	vmovdqu	XMMWORD PTR t2e_l$14[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot0_0$[rsp]
	vmovdqu	XMMWORD PTR $T106[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T106[rsp]
	vmovdqu	XMMWORD PTR t2e_h$16[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot0_0lo$5[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot0_1$[rsp]
	vmovdqu	XMMWORD PTR $T107[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T107[rsp]
	vmovdqu	XMMWORD PTR t3e_l$10[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot0_0hi$6[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot0_1$[rsp]
	vmovdqu	XMMWORD PTR $T108[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T108[rsp]
	vmovdqu	XMMWORD PTR t3e_h$12[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR row4$[rsp]
	vmovdqu	XMMWORD PTR $T109[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T109[rsp]
	vmovdqu	XMMWORD PTR sum04$7[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vpsubw	xmm0, xmm0, XMMWORD PTR row4$[rsp]
	vmovdqu	XMMWORD PTR $T110[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T110[rsp]
	vmovdqu	XMMWORD PTR dif04$8[rsp], xmm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T111[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T111[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR sum04$7[rsp]
	vmovdqu	XMMWORD PTR $T112[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T112[rsp]
	vpsrad	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T113[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T113[rsp]
	vmovdqu	XMMWORD PTR t0e_l$9[rsp], xmm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T114[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T114[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR sum04$7[rsp]
	vmovdqu	XMMWORD PTR $T115[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T115[rsp]
	vpsrad	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T116[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T116[rsp]
	vmovdqu	XMMWORD PTR t0e_h$11[rsp], xmm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T117[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T117[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR dif04$8[rsp]
	vmovdqu	XMMWORD PTR $T118[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T118[rsp]
	vpsrad	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T119[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T119[rsp]
	vmovdqu	XMMWORD PTR t1e_l$13[rsp], xmm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T120[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T120[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR dif04$8[rsp]
	vmovdqu	XMMWORD PTR $T121[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T121[rsp]
	vpsrad	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T122[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T122[rsp]
	vmovdqu	XMMWORD PTR t1e_h$15[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t0e_l$9[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR t3e_l$10[rsp]
	vmovdqu	XMMWORD PTR $T123[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T123[rsp]
	vmovdqu	XMMWORD PTR x0_l$167[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t0e_h$11[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR t3e_h$12[rsp]
	vmovdqu	XMMWORD PTR $T124[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T124[rsp]
	vmovdqu	XMMWORD PTR x0_h$169[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t0e_l$9[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR t3e_l$10[rsp]
	vmovdqu	XMMWORD PTR $T125[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T125[rsp]
	vmovdqu	XMMWORD PTR x3_l$221[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t0e_h$11[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR t3e_h$12[rsp]
	vmovdqu	XMMWORD PTR $T126[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T126[rsp]
	vmovdqu	XMMWORD PTR x3_h$223[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t1e_l$13[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR t2e_l$14[rsp]
	vmovdqu	XMMWORD PTR $T127[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T127[rsp]
	vmovdqu	XMMWORD PTR x1_l$185[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t1e_h$15[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR t2e_h$16[rsp]
	vmovdqu	XMMWORD PTR $T128[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T128[rsp]
	vmovdqu	XMMWORD PTR x1_h$187[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t1e_l$13[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR t2e_l$14[rsp]
	vmovdqu	XMMWORD PTR $T129[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T129[rsp]
	vmovdqu	XMMWORD PTR x2_l$203[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t1e_h$15[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR t2e_h$16[rsp]
	vmovdqu	XMMWORD PTR $T130[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T130[rsp]
	vmovdqu	XMMWORD PTR x2_h$205[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row7$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T131[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T131[rsp]
	vmovdqu	XMMWORD PTR rot2_0lo$17[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row7$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T132[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T132[rsp]
	vmovdqu	XMMWORD PTR rot2_0hi$18[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot2_0$[rsp]
	vmovdqu	XMMWORD PTR $T133[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T133[rsp]
	vmovdqu	XMMWORD PTR y0o_l$151[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot2_0$[rsp]
	vmovdqu	XMMWORD PTR $T134[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T134[rsp]
	vmovdqu	XMMWORD PTR y0o_h$153[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot2_0lo$17[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot2_1$[rsp]
	vmovdqu	XMMWORD PTR $T135[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T135[rsp]
	vmovdqu	XMMWORD PTR y2o_l$159[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot2_0hi$18[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot2_1$[rsp]
	vmovdqu	XMMWORD PTR $T136[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T136[rsp]
	vmovdqu	XMMWORD PTR y2o_h$161[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row5$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR $T137[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T137[rsp]
	vmovdqu	XMMWORD PTR rot3_0lo$19[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row5$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR $T138[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T138[rsp]
	vmovdqu	XMMWORD PTR rot3_0hi$20[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot3_0$[rsp]
	vmovdqu	XMMWORD PTR $T139[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T139[rsp]
	vmovdqu	XMMWORD PTR y1o_l$155[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot3_0$[rsp]
	vmovdqu	XMMWORD PTR $T140[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T140[rsp]
	vmovdqu	XMMWORD PTR y1o_h$157[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot3_0lo$19[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot3_1$[rsp]
	vmovdqu	XMMWORD PTR $T141[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T141[rsp]
	vmovdqu	XMMWORD PTR y3o_l$163[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot3_0hi$20[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot3_1$[rsp]
	vmovdqu	XMMWORD PTR $T142[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T142[rsp]
	vmovdqu	XMMWORD PTR y3o_h$165[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row1$[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T143[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T143[rsp]
	vmovdqu	XMMWORD PTR sum17$21[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row3$[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR row5$[rsp]
	vmovdqu	XMMWORD PTR $T144[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T144[rsp]
	vmovdqu	XMMWORD PTR sum35$22[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum17$21[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR sum35$22[rsp]
	vmovdqu	XMMWORD PTR $T145[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T145[rsp]
	vmovdqu	XMMWORD PTR rot1_0lo$23[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum17$21[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR sum35$22[rsp]
	vmovdqu	XMMWORD PTR $T146[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T146[rsp]
	vmovdqu	XMMWORD PTR rot1_0hi$24[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot1_0$[rsp]
	vmovdqu	XMMWORD PTR $T147[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T147[rsp]
	vmovdqu	XMMWORD PTR y4o_l$27[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot1_0$[rsp]
	vmovdqu	XMMWORD PTR $T148[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T148[rsp]
	vmovdqu	XMMWORD PTR y4o_h$28[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot1_0lo$23[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot1_1$[rsp]
	vmovdqu	XMMWORD PTR $T149[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T149[rsp]
	vmovdqu	XMMWORD PTR y5o_l$25[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot1_0hi$24[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot1_1$[rsp]
	vmovdqu	XMMWORD PTR $T150[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T150[rsp]
	vmovdqu	XMMWORD PTR y5o_h$26[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y0o_l$151[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y4o_l$27[rsp]
	vmovdqu	XMMWORD PTR $T152[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T152[rsp]
	vmovdqu	XMMWORD PTR x4_l$42[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y0o_h$153[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y4o_h$28[rsp]
	vmovdqu	XMMWORD PTR $T154[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T154[rsp]
	vmovdqu	XMMWORD PTR x4_h$44[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y1o_l$155[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y5o_l$25[rsp]
	vmovdqu	XMMWORD PTR $T156[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T156[rsp]
	vmovdqu	XMMWORD PTR x5_l$38[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y1o_h$157[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y5o_h$26[rsp]
	vmovdqu	XMMWORD PTR $T158[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T158[rsp]
	vmovdqu	XMMWORD PTR x5_h$40[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y2o_l$159[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y5o_l$25[rsp]
	vmovdqu	XMMWORD PTR $T160[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T160[rsp]
	vmovdqu	XMMWORD PTR x6_l$34[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y2o_h$161[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y5o_h$26[rsp]
	vmovdqu	XMMWORD PTR $T162[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T162[rsp]
	vmovdqu	XMMWORD PTR x6_h$36[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y3o_l$163[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y4o_l$27[rsp]
	vmovdqu	XMMWORD PTR $T164[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T164[rsp]
	vmovdqu	XMMWORD PTR x7_l$30[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y3o_h$165[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y4o_h$28[rsp]
	vmovdqu	XMMWORD PTR $T166[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T166[rsp]
	vmovdqu	XMMWORD PTR x7_h$32[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x0_l$167[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_0$[rsp]
	vmovdqu	XMMWORD PTR $T168[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T168[rsp]
	vmovdqu	XMMWORD PTR abiased_l$29[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x0_h$169[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_0$[rsp]
	vmovdqu	XMMWORD PTR $T170[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T170[rsp]
	vmovdqu	XMMWORD PTR abiased_h$31[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$29[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x7_l$30[rsp]
	vmovdqu	XMMWORD PTR $T171[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T171[rsp]
	vmovdqu	XMMWORD PTR sum_l$176[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$31[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x7_h$32[rsp]
	vmovdqu	XMMWORD PTR $T172[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T172[rsp]
	vmovdqu	XMMWORD PTR sum_h$175[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$29[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x7_l$30[rsp]
	vmovdqu	XMMWORD PTR $T173[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T173[rsp]
	vmovdqu	XMMWORD PTR dif_l$181[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$31[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x7_h$32[rsp]
	vmovdqu	XMMWORD PTR $T174[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T174[rsp]
	vmovdqu	XMMWORD PTR dif_h$180[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_h$175[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T178[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_l$176[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T177[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T177[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T178[rsp]
	vmovdqu	XMMWORD PTR $T179[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T179[rsp]
	vmovdqu	XMMWORD PTR row0$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_h$180[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T183[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_l$181[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T182[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T182[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T183[rsp]
	vmovdqu	XMMWORD PTR $T184[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T184[rsp]
	vmovdqu	XMMWORD PTR row7$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x1_l$185[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_0$[rsp]
	vmovdqu	XMMWORD PTR $T186[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T186[rsp]
	vmovdqu	XMMWORD PTR abiased_l$33[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x1_h$187[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_0$[rsp]
	vmovdqu	XMMWORD PTR $T188[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T188[rsp]
	vmovdqu	XMMWORD PTR abiased_h$35[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$33[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x6_l$34[rsp]
	vmovdqu	XMMWORD PTR $T189[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T189[rsp]
	vmovdqu	XMMWORD PTR sum_l$194[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$35[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x6_h$36[rsp]
	vmovdqu	XMMWORD PTR $T190[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T190[rsp]
	vmovdqu	XMMWORD PTR sum_h$193[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$33[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x6_l$34[rsp]
	vmovdqu	XMMWORD PTR $T191[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T191[rsp]
	vmovdqu	XMMWORD PTR dif_l$199[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$35[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x6_h$36[rsp]
	vmovdqu	XMMWORD PTR $T192[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T192[rsp]
	vmovdqu	XMMWORD PTR dif_h$198[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_h$193[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T196[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_l$194[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T195[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T195[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T196[rsp]
	vmovdqu	XMMWORD PTR $T197[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T197[rsp]
	vmovdqu	XMMWORD PTR row1$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_h$198[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T201[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_l$199[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T200[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T200[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T201[rsp]
	vmovdqu	XMMWORD PTR $T202[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T202[rsp]
	vmovdqu	XMMWORD PTR row6$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x2_l$203[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_0$[rsp]
	vmovdqu	XMMWORD PTR $T204[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T204[rsp]
	vmovdqu	XMMWORD PTR abiased_l$37[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x2_h$205[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_0$[rsp]
	vmovdqu	XMMWORD PTR $T206[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T206[rsp]
	vmovdqu	XMMWORD PTR abiased_h$39[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$37[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x5_l$38[rsp]
	vmovdqu	XMMWORD PTR $T207[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T207[rsp]
	vmovdqu	XMMWORD PTR sum_l$212[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$39[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x5_h$40[rsp]
	vmovdqu	XMMWORD PTR $T208[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T208[rsp]
	vmovdqu	XMMWORD PTR sum_h$211[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$37[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x5_l$38[rsp]
	vmovdqu	XMMWORD PTR $T209[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T209[rsp]
	vmovdqu	XMMWORD PTR dif_l$217[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$39[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x5_h$40[rsp]
	vmovdqu	XMMWORD PTR $T210[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T210[rsp]
	vmovdqu	XMMWORD PTR dif_h$216[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_h$211[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T214[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_l$212[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T213[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T213[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T214[rsp]
	vmovdqu	XMMWORD PTR $T215[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T215[rsp]
	vmovdqu	XMMWORD PTR row2$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_h$216[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T219[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_l$217[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T218[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T218[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T219[rsp]
	vmovdqu	XMMWORD PTR $T220[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T220[rsp]
	vmovdqu	XMMWORD PTR row5$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x3_l$221[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_0$[rsp]
	vmovdqu	XMMWORD PTR $T222[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T222[rsp]
	vmovdqu	XMMWORD PTR abiased_l$41[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x3_h$223[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_0$[rsp]
	vmovdqu	XMMWORD PTR $T224[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T224[rsp]
	vmovdqu	XMMWORD PTR abiased_h$43[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$41[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x4_l$42[rsp]
	vmovdqu	XMMWORD PTR $T225[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T225[rsp]
	vmovdqu	XMMWORD PTR sum_l$230[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$43[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x4_h$44[rsp]
	vmovdqu	XMMWORD PTR $T226[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T226[rsp]
	vmovdqu	XMMWORD PTR sum_h$229[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$41[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x4_l$42[rsp]
	vmovdqu	XMMWORD PTR $T227[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T227[rsp]
	vmovdqu	XMMWORD PTR dif_l$235[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$43[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x4_h$44[rsp]
	vmovdqu	XMMWORD PTR $T228[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T228[rsp]
	vmovdqu	XMMWORD PTR dif_h$234[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_h$229[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T232[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_l$230[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T231[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T231[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T232[rsp]
	vmovdqu	XMMWORD PTR $T233[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T233[rsp]
	vmovdqu	XMMWORD PTR row3$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_h$234[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T237[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_l$235[rsp]
	vpsrad	xmm0, xmm0, 10
	vmovdqu	XMMWORD PTR $T236[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T236[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T237[rsp]
	vmovdqu	XMMWORD PTR $T238[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T238[rsp]
	vmovdqu	XMMWORD PTR row4$[rsp], xmm0
; Line 2609
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row4$[rsp]
	vmovdqu	XMMWORD PTR $T239[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T239[rsp]
	vmovdqu	XMMWORD PTR row0$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row4$[rsp]
	vmovdqu	XMMWORD PTR $T240[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T240[rsp]
	vmovdqu	XMMWORD PTR row4$[rsp], xmm0
; Line 2610
	vmovdqu	xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row1$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row5$[rsp]
	vmovdqu	XMMWORD PTR $T241[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T241[rsp]
	vmovdqu	XMMWORD PTR row1$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row5$[rsp]
	vmovdqu	XMMWORD PTR $T242[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T242[rsp]
	vmovdqu	XMMWORD PTR row5$[rsp], xmm0
; Line 2611
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR $T243[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T243[rsp]
	vmovdqu	XMMWORD PTR row2$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR $T244[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T244[rsp]
	vmovdqu	XMMWORD PTR row6$[rsp], xmm0
; Line 2612
	vmovdqu	xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row3$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T245[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T245[rsp]
	vmovdqu	XMMWORD PTR row3$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T246[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T246[rsp]
	vmovdqu	XMMWORD PTR row7$[rsp], xmm0
; Line 2615
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row2$[rsp]
	vmovdqu	XMMWORD PTR $T247[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T247[rsp]
	vmovdqu	XMMWORD PTR row0$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row2$[rsp]
	vmovdqu	XMMWORD PTR $T248[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T248[rsp]
	vmovdqu	XMMWORD PTR row2$[rsp], xmm0
; Line 2616
	vmovdqu	xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row1$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T249[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T249[rsp]
	vmovdqu	XMMWORD PTR row1$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T250[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T250[rsp]
	vmovdqu	XMMWORD PTR row3$[rsp], xmm0
; Line 2617
	vmovdqu	xmm0, XMMWORD PTR row4$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row4$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR $T251[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T251[rsp]
	vmovdqu	XMMWORD PTR row4$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR $T252[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T252[rsp]
	vmovdqu	XMMWORD PTR row6$[rsp], xmm0
; Line 2618
	vmovdqu	xmm0, XMMWORD PTR row5$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row5$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T253[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T253[rsp]
	vmovdqu	XMMWORD PTR row5$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T254[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T254[rsp]
	vmovdqu	XMMWORD PTR row7$[rsp], xmm0
; Line 2621
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR $T255[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T255[rsp]
	vmovdqu	XMMWORD PTR row0$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR $T256[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T256[rsp]
	vmovdqu	XMMWORD PTR row1$[rsp], xmm0
; Line 2622
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T257[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T257[rsp]
	vmovdqu	XMMWORD PTR row2$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T258[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T258[rsp]
	vmovdqu	XMMWORD PTR row3$[rsp], xmm0
; Line 2623
	vmovdqu	xmm0, XMMWORD PTR row4$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row4$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row5$[rsp]
	vmovdqu	XMMWORD PTR $T259[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T259[rsp]
	vmovdqu	XMMWORD PTR row4$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row5$[rsp]
	vmovdqu	XMMWORD PTR $T260[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T260[rsp]
	vmovdqu	XMMWORD PTR row5$[rsp], xmm0
; Line 2624
	vmovdqu	xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row6$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T261[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T261[rsp]
	vmovdqu	XMMWORD PTR row6$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T262[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T262[rsp]
	vmovdqu	XMMWORD PTR row7$[rsp], xmm0
; Line 2628
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR $T263[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T263[rsp]
	vmovdqu	XMMWORD PTR rot0_0lo$45[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row6$[rsp]
	vmovdqu	XMMWORD PTR $T264[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T264[rsp]
	vmovdqu	XMMWORD PTR rot0_0hi$46[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot0_0$[rsp]
	vmovdqu	XMMWORD PTR $T265[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T265[rsp]
	vmovdqu	XMMWORD PTR t2e_l$54[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot0_0$[rsp]
	vmovdqu	XMMWORD PTR $T266[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T266[rsp]
	vmovdqu	XMMWORD PTR t2e_h$56[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot0_0lo$45[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot0_1$[rsp]
	vmovdqu	XMMWORD PTR $T267[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T267[rsp]
	vmovdqu	XMMWORD PTR t3e_l$50[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot0_0hi$46[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot0_1$[rsp]
	vmovdqu	XMMWORD PTR $T268[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T268[rsp]
	vmovdqu	XMMWORD PTR t3e_h$52[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR row4$[rsp]
	vmovdqu	XMMWORD PTR $T269[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T269[rsp]
	vmovdqu	XMMWORD PTR sum04$47[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vpsubw	xmm0, xmm0, XMMWORD PTR row4$[rsp]
	vmovdqu	XMMWORD PTR $T270[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T270[rsp]
	vmovdqu	XMMWORD PTR dif04$48[rsp], xmm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T271[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T271[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR sum04$47[rsp]
	vmovdqu	XMMWORD PTR $T272[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T272[rsp]
	vpsrad	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T273[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T273[rsp]
	vmovdqu	XMMWORD PTR t0e_l$49[rsp], xmm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T274[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T274[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR sum04$47[rsp]
	vmovdqu	XMMWORD PTR $T275[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T275[rsp]
	vpsrad	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T276[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T276[rsp]
	vmovdqu	XMMWORD PTR t0e_h$51[rsp], xmm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T277[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T277[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR dif04$48[rsp]
	vmovdqu	XMMWORD PTR $T278[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T278[rsp]
	vpsrad	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T279[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T279[rsp]
	vmovdqu	XMMWORD PTR t1e_l$53[rsp], xmm0
	vpxor	xmm0, xmm0, xmm0
	vmovdqu	XMMWORD PTR $T280[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T280[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR dif04$48[rsp]
	vmovdqu	XMMWORD PTR $T281[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T281[rsp]
	vpsrad	xmm0, xmm0, 4
	vmovdqu	XMMWORD PTR $T282[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T282[rsp]
	vmovdqu	XMMWORD PTR t1e_h$55[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t0e_l$49[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR t3e_l$50[rsp]
	vmovdqu	XMMWORD PTR $T283[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T283[rsp]
	vmovdqu	XMMWORD PTR x0_l$327[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t0e_h$51[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR t3e_h$52[rsp]
	vmovdqu	XMMWORD PTR $T284[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T284[rsp]
	vmovdqu	XMMWORD PTR x0_h$329[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t0e_l$49[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR t3e_l$50[rsp]
	vmovdqu	XMMWORD PTR $T285[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T285[rsp]
	vmovdqu	XMMWORD PTR x3_l$381[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t0e_h$51[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR t3e_h$52[rsp]
	vmovdqu	XMMWORD PTR $T286[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T286[rsp]
	vmovdqu	XMMWORD PTR x3_h$383[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t1e_l$53[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR t2e_l$54[rsp]
	vmovdqu	XMMWORD PTR $T287[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T287[rsp]
	vmovdqu	XMMWORD PTR x1_l$345[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t1e_h$55[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR t2e_h$56[rsp]
	vmovdqu	XMMWORD PTR $T288[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T288[rsp]
	vmovdqu	XMMWORD PTR x1_h$347[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t1e_l$53[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR t2e_l$54[rsp]
	vmovdqu	XMMWORD PTR $T289[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T289[rsp]
	vmovdqu	XMMWORD PTR x2_l$363[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR t1e_h$55[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR t2e_h$56[rsp]
	vmovdqu	XMMWORD PTR $T290[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T290[rsp]
	vmovdqu	XMMWORD PTR x2_h$365[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row7$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T291[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T291[rsp]
	vmovdqu	XMMWORD PTR rot2_0lo$57[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row7$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T292[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T292[rsp]
	vmovdqu	XMMWORD PTR rot2_0hi$58[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot2_0$[rsp]
	vmovdqu	XMMWORD PTR $T293[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T293[rsp]
	vmovdqu	XMMWORD PTR y0o_l$311[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot2_0$[rsp]
	vmovdqu	XMMWORD PTR $T294[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T294[rsp]
	vmovdqu	XMMWORD PTR y0o_h$313[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot2_0lo$57[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot2_1$[rsp]
	vmovdqu	XMMWORD PTR $T295[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T295[rsp]
	vmovdqu	XMMWORD PTR y2o_l$319[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot2_0hi$58[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot2_1$[rsp]
	vmovdqu	XMMWORD PTR $T296[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T296[rsp]
	vmovdqu	XMMWORD PTR y2o_h$321[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row5$[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR $T297[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T297[rsp]
	vmovdqu	XMMWORD PTR rot3_0lo$59[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row5$[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR $T298[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T298[rsp]
	vmovdqu	XMMWORD PTR rot3_0hi$60[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot3_0$[rsp]
	vmovdqu	XMMWORD PTR $T299[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T299[rsp]
	vmovdqu	XMMWORD PTR y1o_l$315[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot3_0$[rsp]
	vmovdqu	XMMWORD PTR $T300[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T300[rsp]
	vmovdqu	XMMWORD PTR y1o_h$317[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot3_0lo$59[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot3_1$[rsp]
	vmovdqu	XMMWORD PTR $T301[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T301[rsp]
	vmovdqu	XMMWORD PTR y3o_l$323[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot3_0hi$60[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot3_1$[rsp]
	vmovdqu	XMMWORD PTR $T302[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T302[rsp]
	vmovdqu	XMMWORD PTR y3o_h$325[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row1$[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T303[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T303[rsp]
	vmovdqu	XMMWORD PTR sum17$61[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR row3$[rsp]
	vpaddw	xmm0, xmm0, XMMWORD PTR row5$[rsp]
	vmovdqu	XMMWORD PTR $T304[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T304[rsp]
	vmovdqu	XMMWORD PTR sum35$62[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum17$61[rsp]
	vpunpcklwd xmm0, xmm0, XMMWORD PTR sum35$62[rsp]
	vmovdqu	XMMWORD PTR $T305[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T305[rsp]
	vmovdqu	XMMWORD PTR rot1_0lo$63[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum17$61[rsp]
	vpunpckhwd xmm0, xmm0, XMMWORD PTR sum35$62[rsp]
	vmovdqu	XMMWORD PTR $T306[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T306[rsp]
	vmovdqu	XMMWORD PTR rot1_0hi$64[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot1_0$[rsp]
	vmovdqu	XMMWORD PTR $T307[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T307[rsp]
	vmovdqu	XMMWORD PTR y4o_l$67[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot1_0$[rsp]
	vmovdqu	XMMWORD PTR $T308[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T308[rsp]
	vmovdqu	XMMWORD PTR y4o_h$68[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot1_0lo$63[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot1_1$[rsp]
	vmovdqu	XMMWORD PTR $T309[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T309[rsp]
	vmovdqu	XMMWORD PTR y5o_l$65[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR rot1_0hi$64[rsp]
	vpmaddwd xmm0, xmm0, XMMWORD PTR rot1_1$[rsp]
	vmovdqu	XMMWORD PTR $T310[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T310[rsp]
	vmovdqu	XMMWORD PTR y5o_h$66[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y0o_l$311[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y4o_l$67[rsp]
	vmovdqu	XMMWORD PTR $T312[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T312[rsp]
	vmovdqu	XMMWORD PTR x4_l$82[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y0o_h$313[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y4o_h$68[rsp]
	vmovdqu	XMMWORD PTR $T314[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T314[rsp]
	vmovdqu	XMMWORD PTR x4_h$84[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y1o_l$315[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y5o_l$65[rsp]
	vmovdqu	XMMWORD PTR $T316[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T316[rsp]
	vmovdqu	XMMWORD PTR x5_l$78[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y1o_h$317[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y5o_h$66[rsp]
	vmovdqu	XMMWORD PTR $T318[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T318[rsp]
	vmovdqu	XMMWORD PTR x5_h$80[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y2o_l$319[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y5o_l$65[rsp]
	vmovdqu	XMMWORD PTR $T320[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T320[rsp]
	vmovdqu	XMMWORD PTR x6_l$74[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y2o_h$321[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y5o_h$66[rsp]
	vmovdqu	XMMWORD PTR $T322[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T322[rsp]
	vmovdqu	XMMWORD PTR x6_h$76[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y3o_l$323[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y4o_l$67[rsp]
	vmovdqu	XMMWORD PTR $T324[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T324[rsp]
	vmovdqu	XMMWORD PTR x7_l$70[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR y3o_h$325[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR y4o_h$68[rsp]
	vmovdqu	XMMWORD PTR $T326[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T326[rsp]
	vmovdqu	XMMWORD PTR x7_h$72[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x0_l$327[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_1$[rsp]
	vmovdqu	XMMWORD PTR $T328[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T328[rsp]
	vmovdqu	XMMWORD PTR abiased_l$69[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x0_h$329[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_1$[rsp]
	vmovdqu	XMMWORD PTR $T330[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T330[rsp]
	vmovdqu	XMMWORD PTR abiased_h$71[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$69[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x7_l$70[rsp]
	vmovdqu	XMMWORD PTR $T331[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T331[rsp]
	vmovdqu	XMMWORD PTR sum_l$336[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$71[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x7_h$72[rsp]
	vmovdqu	XMMWORD PTR $T332[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T332[rsp]
	vmovdqu	XMMWORD PTR sum_h$335[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$69[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x7_l$70[rsp]
	vmovdqu	XMMWORD PTR $T333[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T333[rsp]
	vmovdqu	XMMWORD PTR dif_l$341[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$71[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x7_h$72[rsp]
	vmovdqu	XMMWORD PTR $T334[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T334[rsp]
	vmovdqu	XMMWORD PTR dif_h$340[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_h$335[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T338[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_l$336[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T337[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T337[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T338[rsp]
	vmovdqu	XMMWORD PTR $T339[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T339[rsp]
	vmovdqu	XMMWORD PTR row0$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_h$340[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T343[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_l$341[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T342[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T342[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T343[rsp]
	vmovdqu	XMMWORD PTR $T344[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T344[rsp]
	vmovdqu	XMMWORD PTR row7$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x1_l$345[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_1$[rsp]
	vmovdqu	XMMWORD PTR $T346[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T346[rsp]
	vmovdqu	XMMWORD PTR abiased_l$73[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x1_h$347[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_1$[rsp]
	vmovdqu	XMMWORD PTR $T348[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T348[rsp]
	vmovdqu	XMMWORD PTR abiased_h$75[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$73[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x6_l$74[rsp]
	vmovdqu	XMMWORD PTR $T349[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T349[rsp]
	vmovdqu	XMMWORD PTR sum_l$354[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$75[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x6_h$76[rsp]
	vmovdqu	XMMWORD PTR $T350[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T350[rsp]
	vmovdqu	XMMWORD PTR sum_h$353[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$73[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x6_l$74[rsp]
	vmovdqu	XMMWORD PTR $T351[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T351[rsp]
	vmovdqu	XMMWORD PTR dif_l$359[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$75[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x6_h$76[rsp]
	vmovdqu	XMMWORD PTR $T352[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T352[rsp]
	vmovdqu	XMMWORD PTR dif_h$358[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_h$353[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T356[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_l$354[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T355[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T355[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T356[rsp]
	vmovdqu	XMMWORD PTR $T357[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T357[rsp]
	vmovdqu	XMMWORD PTR row1$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_h$358[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T361[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_l$359[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T360[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T360[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T361[rsp]
	vmovdqu	XMMWORD PTR $T362[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T362[rsp]
	vmovdqu	XMMWORD PTR row6$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x2_l$363[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_1$[rsp]
	vmovdqu	XMMWORD PTR $T364[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T364[rsp]
	vmovdqu	XMMWORD PTR abiased_l$77[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x2_h$365[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_1$[rsp]
	vmovdqu	XMMWORD PTR $T366[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T366[rsp]
	vmovdqu	XMMWORD PTR abiased_h$79[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$77[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x5_l$78[rsp]
	vmovdqu	XMMWORD PTR $T367[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T367[rsp]
	vmovdqu	XMMWORD PTR sum_l$372[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$79[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x5_h$80[rsp]
	vmovdqu	XMMWORD PTR $T368[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T368[rsp]
	vmovdqu	XMMWORD PTR sum_h$371[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$77[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x5_l$78[rsp]
	vmovdqu	XMMWORD PTR $T369[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T369[rsp]
	vmovdqu	XMMWORD PTR dif_l$377[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$79[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x5_h$80[rsp]
	vmovdqu	XMMWORD PTR $T370[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T370[rsp]
	vmovdqu	XMMWORD PTR dif_h$376[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_h$371[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T374[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_l$372[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T373[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T373[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T374[rsp]
	vmovdqu	XMMWORD PTR $T375[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T375[rsp]
	vmovdqu	XMMWORD PTR row2$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_h$376[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T379[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_l$377[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T378[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T378[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T379[rsp]
	vmovdqu	XMMWORD PTR $T380[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T380[rsp]
	vmovdqu	XMMWORD PTR row5$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x3_l$381[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_1$[rsp]
	vmovdqu	XMMWORD PTR $T382[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T382[rsp]
	vmovdqu	XMMWORD PTR abiased_l$81[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR x3_h$383[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR bias_1$[rsp]
	vmovdqu	XMMWORD PTR $T384[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T384[rsp]
	vmovdqu	XMMWORD PTR abiased_h$83[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$81[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x4_l$82[rsp]
	vmovdqu	XMMWORD PTR $T385[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T385[rsp]
	vmovdqu	XMMWORD PTR sum_l$390[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$83[rsp]
	vpaddd	xmm0, xmm0, XMMWORD PTR x4_h$84[rsp]
	vmovdqu	XMMWORD PTR $T386[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T386[rsp]
	vmovdqu	XMMWORD PTR sum_h$389[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_l$81[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x4_l$82[rsp]
	vmovdqu	XMMWORD PTR $T387[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T387[rsp]
	vmovdqu	XMMWORD PTR dif_l$395[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR abiased_h$83[rsp]
	vpsubd	xmm0, xmm0, XMMWORD PTR x4_h$84[rsp]
	vmovdqu	XMMWORD PTR $T388[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T388[rsp]
	vmovdqu	XMMWORD PTR dif_h$394[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_h$389[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T392[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR sum_l$390[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T391[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T391[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T392[rsp]
	vmovdqu	XMMWORD PTR $T393[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T393[rsp]
	vmovdqu	XMMWORD PTR row3$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_h$394[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T397[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR dif_l$395[rsp]
	vpsrad	xmm0, xmm0, 17
	vmovdqu	XMMWORD PTR $T396[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T396[rsp]
	vpackssdw xmm0, xmm0, XMMWORD PTR $T397[rsp]
	vmovdqu	XMMWORD PTR $T398[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T398[rsp]
	vmovdqu	XMMWORD PTR row4$[rsp], xmm0
; Line 2632
	vmovdqu	xmm0, XMMWORD PTR row0$[rsp]
	vpackuswb xmm0, xmm0, XMMWORD PTR row1$[rsp]
	vmovdqu	XMMWORD PTR $T399[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T399[rsp]
	vmovdqu	XMMWORD PTR p0$1[rsp], xmm0
; Line 2633
	vmovdqu	xmm0, XMMWORD PTR row2$[rsp]
	vpackuswb xmm0, xmm0, XMMWORD PTR row3$[rsp]
	vmovdqu	XMMWORD PTR $T400[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T400[rsp]
	vmovdqu	XMMWORD PTR p1$3[rsp], xmm0
; Line 2634
	vmovdqu	xmm0, XMMWORD PTR row4$[rsp]
	vpackuswb xmm0, xmm0, XMMWORD PTR row5$[rsp]
	vmovdqu	XMMWORD PTR $T401[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T401[rsp]
	vmovdqu	XMMWORD PTR p2$2[rsp], xmm0
; Line 2635
	vmovdqu	xmm0, XMMWORD PTR row6$[rsp]
	vpackuswb xmm0, xmm0, XMMWORD PTR row7$[rsp]
	vmovdqu	XMMWORD PTR $T402[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T402[rsp]
	vmovdqu	XMMWORD PTR p3$4[rsp], xmm0
; Line 2638
	vmovdqu	xmm0, XMMWORD PTR p0$1[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR p0$1[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR p2$2[rsp]
	vmovdqu	XMMWORD PTR $T403[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T403[rsp]
	vmovdqu	XMMWORD PTR p0$1[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhbw xmm0, xmm0, XMMWORD PTR p2$2[rsp]
	vmovdqu	XMMWORD PTR $T404[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T404[rsp]
	vmovdqu	XMMWORD PTR p2$2[rsp], xmm0
; Line 2639
	vmovdqu	xmm0, XMMWORD PTR p1$3[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR p1$3[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR p3$4[rsp]
	vmovdqu	XMMWORD PTR $T405[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T405[rsp]
	vmovdqu	XMMWORD PTR p1$3[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhbw xmm0, xmm0, XMMWORD PTR p3$4[rsp]
	vmovdqu	XMMWORD PTR $T406[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T406[rsp]
	vmovdqu	XMMWORD PTR p3$4[rsp], xmm0
; Line 2642
	vmovdqu	xmm0, XMMWORD PTR p0$1[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR p0$1[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR p1$3[rsp]
	vmovdqu	XMMWORD PTR $T407[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T407[rsp]
	vmovdqu	XMMWORD PTR p0$1[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhbw xmm0, xmm0, XMMWORD PTR p1$3[rsp]
	vmovdqu	XMMWORD PTR $T408[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T408[rsp]
	vmovdqu	XMMWORD PTR p1$3[rsp], xmm0
; Line 2643
	vmovdqu	xmm0, XMMWORD PTR p2$2[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR p2$2[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR p3$4[rsp]
	vmovdqu	XMMWORD PTR $T409[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T409[rsp]
	vmovdqu	XMMWORD PTR p2$2[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhbw xmm0, xmm0, XMMWORD PTR p3$4[rsp]
	vmovdqu	XMMWORD PTR $T410[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T410[rsp]
	vmovdqu	XMMWORD PTR p3$4[rsp], xmm0
; Line 2646
	vmovdqu	xmm0, XMMWORD PTR p0$1[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR p0$1[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR p2$2[rsp]
	vmovdqu	XMMWORD PTR $T411[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T411[rsp]
	vmovdqu	XMMWORD PTR p0$1[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhbw xmm0, xmm0, XMMWORD PTR p2$2[rsp]
	vmovdqu	XMMWORD PTR $T412[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T412[rsp]
	vmovdqu	XMMWORD PTR p2$2[rsp], xmm0
; Line 2647
	vmovdqu	xmm0, XMMWORD PTR p1$3[rsp]
	vmovdqu	XMMWORD PTR tmp$[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR p1$3[rsp]
	vpunpcklbw xmm0, xmm0, XMMWORD PTR p3$4[rsp]
	vmovdqu	XMMWORD PTR $T413[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T413[rsp]
	vmovdqu	XMMWORD PTR p1$3[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR tmp$[rsp]
	vpunpckhbw xmm0, xmm0, XMMWORD PTR p3$4[rsp]
	vmovdqu	XMMWORD PTR $T414[rsp], xmm0
	vmovdqu	xmm0, XMMWORD PTR $T414[rsp]
	vmovdqu	XMMWORD PTR p3$4[rsp], xmm0
; Line 2650
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR p0$1[rsp]
	vmovq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2651
	vpshufd	xmm0, XMMWORD PTR p0$1[rsp], 78		; 0000004eH
	vmovdqu	XMMWORD PTR $T415[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR $T415[rsp]
	vmovq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2652
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR p2$2[rsp]
	vmovq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2653
	vpshufd	xmm0, XMMWORD PTR p2$2[rsp], 78		; 0000004eH
	vmovdqu	XMMWORD PTR $T416[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR $T416[rsp]
	vmovq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2654
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR p1$3[rsp]
	vmovq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2655
	vpshufd	xmm0, XMMWORD PTR p1$3[rsp], 78		; 0000004eH
	vmovdqu	XMMWORD PTR $T417[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR $T417[rsp]
	vmovq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2656
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR p3$4[rsp]
	vmovq	QWORD PTR [rax], xmm0
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR out$[rsp], rax
; Line 2657
	vpshufd	xmm0, XMMWORD PTR p3$4[rsp], 78		; 0000004eH
	vmovdqu	XMMWORD PTR $T418[rsp], xmm0
	mov	rax, QWORD PTR out$[rsp]
	vmovdqu	xmm0, XMMWORD PTR $T418[rsp]
	vmovq	QWORD PTR [rax], xmm0
; Line 2669
	add	rsp, 7000				; 00001b58H
	ret	0
?stbi__idct_simd@@YAXPEAEHQEAF@Z ENDP			; stbi__idct_simd
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 32
p3$1 = 40
t3$2 = 44
t2$3 = 48
t1$4 = 52
t0$5 = 56
p3$6 = 60
t3$7 = 64
t2$8 = 68
t1$9 = 72
t0$10 = 76
p2$11 = 80
p2$12 = 84
d$ = 88
dcterm$13 = 96
p1$14 = 100
i$ = 104
p1$15 = 108
p4$16 = 112
p4$17 = 116
o$ = 120
x0$18 = 128
x1$19 = 132
x2$20 = 136
x3$21 = 140
x0$22 = 144
x1$23 = 148
x2$24 = 152
x3$25 = 156
p5$26 = 160
p5$27 = 164
val$ = 176
__$ArrayPad$ = 432
out$ = 464
out_stride$ = 472
data$ = 480
?stbi__idct_block@@YAXPEAEHQEAF@Z PROC			; stbi__idct_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2434
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 456				; 000001c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2435
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
; Line 2437
	mov	rax, QWORD PTR data$[rsp]
	mov	QWORD PTR d$[rsp], rax
; Line 2440
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__idct
$LN2@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR d$[rsp]
	add	rax, 2
	mov	QWORD PTR d$[rsp], rax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 4
	mov	QWORD PTR v$[rsp], rax
$LN4@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN3@stbi__idct
; Line 2443
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	jne	$LN8@stbi__idct
; Line 2448
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	shl	eax, 2
	mov	DWORD PTR dcterm$13[rsp], eax
; Line 2449
	mov	eax, 4
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 24
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 16
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 8
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	edx, DWORD PTR dcterm$13[rsp]
	mov	DWORD PTR [rcx+rax], edx
; Line 2450
	jmp	$LN9@stbi__idct
$LN8@stbi__idct:
; Line 2451
	mov	eax, 2
	imul	rax, rax, 16
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 48				; 00000030H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, 2
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$21[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, 2
	imul	rax, rax, 56				; 00000038H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t0$5[rsp], eax
	mov	eax, 2
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, 2
	imul	rax, rax, 24
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, 2
	imul	rax, rax, 8
	mov	rcx, QWORD PTR d$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$1[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p3$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$26[rsp], eax
	imul	eax, DWORD PTR t0$5[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$5[rsp], eax
	imul	eax, DWORD PTR t1$4[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$4[rsp], eax
	imul	eax, DWORD PTR t2$3[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$3[rsp], eax
	imul	eax, DWORD PTR t3$2[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$2[rsp], eax
	imul	eax, DWORD PTR p1$14[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$14[rsp], eax
	imul	eax, DWORD PTR p2$11[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$26[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$11[rsp], eax
	imul	eax, DWORD PTR p3$1[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$1[rsp], eax
	imul	eax, DWORD PTR p4$16[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$16[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$2[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$3[rsp], eax
	mov	eax, DWORD PTR p4$16[rsp]
	mov	ecx, DWORD PTR p2$11[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$4[rsp], eax
	mov	eax, DWORD PTR p3$1[rsp]
	mov	ecx, DWORD PTR p1$14[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$5[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$5[rsp], eax
; Line 2454
	mov	eax, DWORD PTR x0$18[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x0$18[rsp], eax
	mov	eax, DWORD PTR x1$19[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x1$19[rsp], eax
	mov	eax, DWORD PTR x2$20[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x2$20[rsp], eax
	mov	eax, DWORD PTR x3$21[rsp]
	add	eax, 512				; 00000200H
	mov	DWORD PTR x3$21[rsp], eax
; Line 2455
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2456
	mov	eax, DWORD PTR t3$2[rsp]
	mov	ecx, DWORD PTR x0$18[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 56				; 00000038H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2457
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 8
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2458
	mov	eax, DWORD PTR t2$3[rsp]
	mov	ecx, DWORD PTR x1$19[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 48				; 00000030H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2459
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 16
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2460
	mov	eax, DWORD PTR t1$4[rsp]
	mov	ecx, DWORD PTR x2$20[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 40				; 00000028H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2461
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2462
	mov	eax, DWORD PTR t0$5[rsp]
	mov	ecx, DWORD PTR x3$21[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 10
	mov	ecx, 4
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR v$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
$LN9@stbi__idct:
; Line 2464
	jmp	$LN2@stbi__idct
$LN3@stbi__idct:
; Line 2466
	mov	DWORD PTR i$[rsp], 0
	lea	rax, QWORD PTR val$[rsp]
	mov	QWORD PTR v$[rsp], rax
	mov	rax, QWORD PTR out$[rsp]
	mov	QWORD PTR o$[rsp], rax
	jmp	SHORT $LN7@stbi__idct
$LN5@stbi__idct:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR v$[rsp]
	add	rax, 32					; 00000020H
	mov	QWORD PTR v$[rsp], rax
	movsxd	rax, DWORD PTR out_stride$[rsp]
	mov	rcx, QWORD PTR o$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR o$[rsp], rax
$LN7@stbi__idct:
	cmp	DWORD PTR i$[rsp], 8
	jge	$LN6@stbi__idct
; Line 2468
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 6
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 2217				; 000008a9H
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -7567		; ffffffffffffe271H
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], 3135		; 00000c3fH
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, 4
	imul	rax, rax, 4
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	sub	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4096				; 00001000H
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x0$22[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x3$25[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x1$23[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x2$24[rsp], eax
	mov	eax, 4
	imul	rax, rax, 7
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t0$10[rsp], eax
	mov	eax, 4
	imul	rax, rax, 5
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR v$[rsp]
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p3$6[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p3$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	imul	eax, eax, 4816				; 000012d0H
	mov	DWORD PTR p5$27[rsp], eax
	imul	eax, DWORD PTR t0$10[rsp], 1223		; 000004c7H
	mov	DWORD PTR t0$10[rsp], eax
	imul	eax, DWORD PTR t1$9[rsp], 8410		; 000020daH
	mov	DWORD PTR t1$9[rsp], eax
	imul	eax, DWORD PTR t2$8[rsp], 12586		; 0000312aH
	mov	DWORD PTR t2$8[rsp], eax
	imul	eax, DWORD PTR t3$7[rsp], 6149		; 00001805H
	mov	DWORD PTR t3$7[rsp], eax
	imul	eax, DWORD PTR p1$15[rsp], -3685	; fffffffffffff19bH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p1$15[rsp], eax
	imul	eax, DWORD PTR p2$12[rsp], -10497	; ffffffffffffd6ffH
	mov	ecx, DWORD PTR p5$27[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR p2$12[rsp], eax
	imul	eax, DWORD PTR p3$6[rsp], -8034		; ffffffffffffe09eH
	mov	DWORD PTR p3$6[rsp], eax
	imul	eax, DWORD PTR p4$17[rsp], -1597	; fffffffffffff9c3H
	mov	DWORD PTR p4$17[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t3$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t3$7[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t2$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t2$8[rsp], eax
	mov	eax, DWORD PTR p4$17[rsp]
	mov	ecx, DWORD PTR p2$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t1$9[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t1$9[rsp], eax
	mov	eax, DWORD PTR p3$6[rsp]
	mov	ecx, DWORD PTR p1$15[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR t0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR t0$10[rsp], eax
; Line 2475
	mov	eax, DWORD PTR x0$22[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x0$22[rsp], eax
; Line 2476
	mov	eax, DWORD PTR x1$23[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x1$23[rsp], eax
; Line 2477
	mov	eax, DWORD PTR x2$24[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x2$24[rsp], eax
; Line 2478
	mov	eax, DWORD PTR x3$25[rsp]
	add	eax, 16842752				; 01010000H
	mov	DWORD PTR x3$25[rsp], eax
; Line 2481
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2482
	mov	eax, DWORD PTR t3$7[rsp]
	mov	ecx, DWORD PTR x0$22[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 7
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2483
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2484
	mov	eax, DWORD PTR t2$8[rsp]
	mov	ecx, DWORD PTR x1$23[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 6
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2485
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2486
	mov	eax, DWORD PTR t1$9[rsp]
	mov	ecx, DWORD PTR x2$24[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 5
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2487
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2488
	mov	eax, DWORD PTR t0$10[rsp]
	mov	ecx, DWORD PTR x3$25[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 17
	mov	ecx, eax
	call	?stbi__clamp@@YAEH@Z			; stbi__clamp
	mov	ecx, 1
	imul	rcx, rcx, 4
	mov	rdx, QWORD PTR o$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 2489
	jmp	$LN5@stbi__idct
$LN6@stbi__idct:
; Line 2490
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 456				; 000001c8H
	ret	0
?stbi__idct_block@@YAXPEAEHQEAF@Z ENDP			; stbi__idct_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 8
?stbi__clamp@@YAEH@Z PROC				; stbi__clamp
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2383
	mov	DWORD PTR [rsp+8], ecx
; Line 2385
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jbe	SHORT $LN2@stbi__clam
; Line 2386
	cmp	DWORD PTR x$[rsp], 0
	jge	SHORT $LN3@stbi__clam
	xor	al, al
	jmp	SHORT $LN1@stbi__clam
$LN3@stbi__clam:
; Line 2387
	cmp	DWORD PTR x$[rsp], 255			; 000000ffH
	jle	SHORT $LN4@stbi__clam
	mov	al, 255					; 000000ffH
	jmp	SHORT $LN1@stbi__clam
$LN4@stbi__clam:
$LN2@stbi__clam:
; Line 2389
	movzx	eax, BYTE PTR x$[rsp]
$LN1@stbi__clam:
; Line 2390
	ret	0
?stbi__clamp@@YAEH@Z ENDP				; stbi__clamp
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
bit$1 = 36
r$2 = 40
r$3 = 44
s$4 = 48
s$5 = 52
p$6 = 56
rs$7 = 64
zig$8 = 68
rs$9 = 72
p$10 = 80
shift$11 = 88
c$12 = 92
tv136 = 96
tv375 = 100
tv165 = 104
tv163 = 108
tv178 = 112
tv400 = 116
tv427 = 120
tv250 = 124
tv248 = 128
tv357 = 136
tv271 = 144
j$ = 176
data$ = 184
hac$ = 192
fac$ = 200
?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z PROC ; stbi__jpeg_decode_block_prog_ac
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2263
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 2265
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18484], 0
	jne	SHORT $LN13@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG146838
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN13@stbi__jpeg:
; Line 2267
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN14@stbi__jpeg
; Line 2268
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	DWORD PTR shift$11[rsp], eax
; Line 2270
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	SHORT $LN16@stbi__jpeg
; Line 2271
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2272
	mov	eax, 1
	jmp	$LN1@stbi__jpeg
$LN16@stbi__jpeg:
; Line 2275
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2279
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN17@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN17@stbi__jpeg:
; Line 2280
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$12[rsp], eax
; Line 2281
	movsxd	rax, DWORD PTR c$12[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$2[rsp], eax
; Line 2282
	cmp	DWORD PTR r$2[rsp], 0
	je	$LN18@stbi__jpeg
; Line 2283
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2284
	mov	eax, DWORD PTR r$2[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2285
	mov	eax, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv357[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv357[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2286
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$4[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2287
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv136[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv136[rsp]
	mov	DWORD PTR zig$8[rsp], eax
; Line 2288
	mov	eax, DWORD PTR r$2[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2289
	jmp	$LN19@stbi__jpeg
$LN18@stbi__jpeg:
; Line 2290
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$7[rsp], eax
; Line 2291
	cmp	DWORD PTR rs$7[rsp], 0
	jge	SHORT $LN20@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG146846
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN20@stbi__jpeg:
; Line 2292
	mov	eax, DWORD PTR rs$7[rsp]
	and	eax, 15
	mov	DWORD PTR s$4[rsp], eax
; Line 2293
	mov	eax, DWORD PTR rs$7[rsp]
	sar	eax, 4
	mov	DWORD PTR r$2[rsp], eax
; Line 2294
	cmp	DWORD PTR s$4[rsp], 0
	jne	$LN21@stbi__jpeg
; Line 2295
	cmp	DWORD PTR r$2[rsp], 15
	jge	$LN23@stbi__jpeg
; Line 2296
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv375[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv375[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2297
	cmp	DWORD PTR r$2[rsp], 0
	je	SHORT $LN24@stbi__jpeg
; Line 2298
	mov	edx, DWORD PTR r$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ; stbi__jpeg_get_bits
	mov	DWORD PTR tv165[rsp], eax
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	mov	DWORD PTR tv163[rsp], eax
	mov	eax, DWORD PTR tv165[rsp]
	mov	ecx, DWORD PTR tv163[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN24@stbi__jpeg:
; Line 2299
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2300
	jmp	$LN3@stbi__jpeg
$LN23@stbi__jpeg:
; Line 2302
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2303
	jmp	SHORT $LN22@stbi__jpeg
$LN21@stbi__jpeg:
; Line 2304
	mov	eax, DWORD PTR r$2[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2305
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv178[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv178[rsp]
	mov	DWORD PTR zig$8[rsp], eax
; Line 2306
	mov	edx, DWORD PTR s$4[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	ecx, DWORD PTR shift$11[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$8[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN22@stbi__jpeg:
$LN19@stbi__jpeg:
; Line 2309
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2310
	jmp	$LN15@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2313
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv400[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv400[rsp]
	shl	eax, cl
	mov	WORD PTR bit$1[rsp], ax
; Line 2315
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18500], 0
	je	$LN25@stbi__jpeg
; Line 2316
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2317
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN7@stbi__jpeg
$LN5@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__jpeg:
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN6@stbi__jpeg
; Line 2318
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR p$10[rsp], rax
; Line 2319
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN27@stbi__jpeg
; Line 2320
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN28@stbi__jpeg
; Line 2321
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN29@stbi__jpeg
; Line 2322
	mov	rax, QWORD PTR p$10[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN30@stbi__jpeg
; Line 2323
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN31@stbi__jpeg
$LN30@stbi__jpeg:
; Line 2325
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$10[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$10[rsp]
	mov	WORD PTR [rcx], ax
$LN31@stbi__jpeg:
$LN29@stbi__jpeg:
$LN28@stbi__jpeg:
$LN27@stbi__jpeg:
; Line 2327
	jmp	$LN5@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2328
	jmp	$LN26@stbi__jpeg
$LN25@stbi__jpeg:
; Line 2329
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18484]
	mov	DWORD PTR k$[rsp], eax
$LN10@stbi__jpeg:
; Line 2332
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$9[rsp], eax
; Line 2333
	cmp	DWORD PTR rs$9[rsp], 0
	jge	SHORT $LN32@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG146859
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN32@stbi__jpeg:
; Line 2334
	mov	eax, DWORD PTR rs$9[rsp]
	and	eax, 15
	mov	DWORD PTR s$5[rsp], eax
; Line 2335
	mov	eax, DWORD PTR rs$9[rsp]
	sar	eax, 4
	mov	DWORD PTR r$3[rsp], eax
; Line 2336
	cmp	DWORD PTR s$5[rsp], 0
	jne	$LN33@stbi__jpeg
; Line 2337
	cmp	DWORD PTR r$3[rsp], 15
	jge	SHORT $LN35@stbi__jpeg
; Line 2338
	mov	eax, DWORD PTR r$3[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv427[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv427[rsp]
	shl	eax, cl
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
; Line 2339
	cmp	DWORD PTR r$3[rsp], 0
	je	SHORT $LN37@stbi__jpeg
; Line 2340
	mov	edx, DWORD PTR r$3[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ; stbi__jpeg_get_bits
	mov	DWORD PTR tv250[rsp], eax
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18500]
	mov	DWORD PTR tv248[rsp], eax
	mov	eax, DWORD PTR tv250[rsp]
	mov	ecx, DWORD PTR tv248[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18500], eax
$LN37@stbi__jpeg:
; Line 2341
	mov	DWORD PTR r$3[rsp], 64			; 00000040H
$LN35@stbi__jpeg:
; Line 2347
	jmp	SHORT $LN34@stbi__jpeg
$LN33@stbi__jpeg:
; Line 2348
	cmp	DWORD PTR s$5[rsp], 1
	je	SHORT $LN38@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG146866
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN38@stbi__jpeg:
; Line 2350
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN39@stbi__jpeg
; Line 2351
	movsx	eax, WORD PTR bit$1[rsp]
	mov	DWORD PTR s$5[rsp], eax
	jmp	SHORT $LN40@stbi__jpeg
$LN39@stbi__jpeg:
; Line 2353
	movsx	eax, WORD PTR bit$1[rsp]
	neg	eax
	mov	DWORD PTR s$5[rsp], eax
$LN40@stbi__jpeg:
$LN34@stbi__jpeg:
$LN11@stbi__jpeg:
; Line 2357
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jg	$LN12@stbi__jpeg
; Line 2358
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR tv271[rsp], rax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	rax, QWORD PTR tv271[rsp]
	mov	QWORD PTR p$6[rsp], rax
; Line 2359
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	je	SHORT $LN41@stbi__jpeg
; Line 2360
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN43@stbi__jpeg
; Line 2361
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	movsx	ecx, WORD PTR bit$1[rsp]
	and	eax, ecx
	test	eax, eax
	jne	SHORT $LN44@stbi__jpeg
; Line 2362
	mov	rax, QWORD PTR p$6[rsp]
	movsx	eax, WORD PTR [rax]
	test	eax, eax
	jle	SHORT $LN45@stbi__jpeg
; Line 2363
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN46@stbi__jpeg
$LN45@stbi__jpeg:
; Line 2365
	movsx	eax, WORD PTR bit$1[rsp]
	mov	rcx, QWORD PTR p$6[rsp]
	movsx	ecx, WORD PTR [rcx]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR p$6[rsp]
	mov	WORD PTR [rcx], ax
$LN46@stbi__jpeg:
$LN44@stbi__jpeg:
$LN43@stbi__jpeg:
; Line 2367
	jmp	SHORT $LN42@stbi__jpeg
$LN41@stbi__jpeg:
; Line 2368
	cmp	DWORD PTR r$3[rsp], 0
	jne	SHORT $LN47@stbi__jpeg
; Line 2369
	mov	rax, QWORD PTR p$6[rsp]
	movzx	ecx, WORD PTR s$5[rsp]
	mov	WORD PTR [rax], cx
; Line 2370
	jmp	SHORT $LN12@stbi__jpeg
$LN47@stbi__jpeg:
; Line 2372
	mov	eax, DWORD PTR r$3[rsp]
	dec	eax
	mov	DWORD PTR r$3[rsp], eax
$LN42@stbi__jpeg:
; Line 2374
	jmp	$LN11@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2375
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18488]
	cmp	DWORD PTR k$[rsp], eax
	jle	$LN10@stbi__jpeg
$LN26@stbi__jpeg:
$LN15@stbi__jpeg:
; Line 2378
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2379
	add	rsp, 168				; 000000a8H
	ret	0
?stbi__jpeg_decode_block_prog_ac@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@PEAF@Z ENDP ; stbi__jpeg_decode_block_prog_ac
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
tv87 = 36
dc$ = 40
diff$ = 44
tv175 = 48
tv183 = 52
j$ = 80
data$ = 88
hdc$ = 96
b$ = 104
?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z PROC ; stbi__jpeg_decode_block_prog_dc
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2235
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2238
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18488], 0
	je	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG146795
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 2240
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN3@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN3@stbi__jpeg:
; Line 2242
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18492], 0
	jne	$LN4@stbi__jpeg
; Line 2244
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2245
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2246
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG146801
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2247
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN10@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	DWORD PTR tv87[rsp], eax
	jmp	SHORT $LN11@stbi__jpeg
$LN10@stbi__jpeg:
	mov	DWORD PTR tv87[rsp], 0
$LN11@stbi__jpeg:
	mov	eax, DWORD PTR tv87[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2249
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2250
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2251
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv175[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv175[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2252
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
; Line 2254
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ; stbi__jpeg_get_bit
	test	eax, eax
	je	SHORT $LN8@stbi__jpeg
; Line 2255
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18496]
	mov	ecx, 1
	mov	DWORD PTR tv183[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv183[rsp]
	shl	eax, cl
	cwde
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	movsx	ecx, WORD PTR [rdx+rcx]
	add	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN8@stbi__jpeg:
$LN5@stbi__jpeg:
; Line 2257
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2258
	add	rsp, 72					; 00000048H
	ret	0
?stbi__jpeg_decode_block_prog_dc@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@H@Z ENDP ; stbi__jpeg_decode_block_prog_dc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
r$1 = 36
s$2 = 40
zig$3 = 44
t$ = 48
rs$4 = 52
tv81 = 56
dc$ = 60
diff$ = 64
c$5 = 68
tv159 = 72
tv188 = 76
tv240 = 80
j$ = 112
data$ = 120
hdc$ = 128
hac$ = 136
fac$ = 144
b$ = 152
dequant$ = 160
?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z PROC ; stbi__jpeg_decode_block
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2183
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 2187
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2188
	mov	rdx, QWORD PTR hdc$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR t$[rsp], eax
; Line 2189
	cmp	DWORD PTR t$[rsp], 0
	jl	SHORT $LN7@stbi__jpeg
	cmp	DWORD PTR t$[rsp], 15
	jle	SHORT $LN6@stbi__jpeg
$LN7@stbi__jpeg:
	lea	rcx, OFFSET FLAT:$SG146774
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2192
	mov	r8d, 128				; 00000080H
	xor	edx, edx
	mov	rcx, QWORD PTR data$[rsp]
	call	memset
; Line 2194
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN16@stbi__jpeg
	mov	edx, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN17@stbi__jpeg
$LN16@stbi__jpeg:
	mov	DWORD PTR tv81[rsp], 0
$LN17@stbi__jpeg:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR diff$[rsp], eax
; Line 2195
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rcx+rax+18104]
	add	eax, DWORD PTR diff$[rsp]
	mov	DWORD PTR dc$[rsp], eax
; Line 2196
	movsxd	rax, DWORD PTR b$[rsp]
	imul	rax, rax, 96				; 00000060H
	mov	rcx, QWORD PTR j$[rsp]
	mov	edx, DWORD PTR dc$[rsp]
	mov	DWORD PTR [rcx+rax+18104], edx
; Line 2197
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR dequant$[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR dc$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 2200
	mov	DWORD PTR k$[rsp], 1
$LN4@stbi__jpeg:
; Line 2204
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN8@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN8@stbi__jpeg:
; Line 2205
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$5[rsp], eax
; Line 2206
	movsxd	rax, DWORD PTR c$5[rsp]
	mov	rcx, QWORD PTR fac$[rsp]
	movsx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR r$1[rsp], eax
; Line 2207
	cmp	DWORD PTR r$1[rsp], 0
	je	$LN9@stbi__jpeg
; Line 2208
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 4
	and	eax, 15
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2209
	mov	eax, DWORD PTR r$1[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2210
	mov	eax, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv240[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv240[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2211
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$2[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2213
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv159[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv159[rsp]
	mov	DWORD PTR zig$3[rsp], eax
; Line 2214
	mov	eax, DWORD PTR r$1[rsp]
	sar	eax, 8
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
; Line 2215
	jmp	$LN10@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2216
	mov	rdx, QWORD PTR hac$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ; stbi__jpeg_huff_decode
	mov	DWORD PTR rs$4[rsp], eax
; Line 2217
	cmp	DWORD PTR rs$4[rsp], 0
	jge	SHORT $LN11@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG146779
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__jpeg
$LN11@stbi__jpeg:
; Line 2218
	mov	eax, DWORD PTR rs$4[rsp]
	and	eax, 15
	mov	DWORD PTR s$2[rsp], eax
; Line 2219
	mov	eax, DWORD PTR rs$4[rsp]
	sar	eax, 4
	mov	DWORD PTR r$1[rsp], eax
; Line 2220
	cmp	DWORD PTR s$2[rsp], 0
	jne	SHORT $LN12@stbi__jpeg
; Line 2221
	cmp	DWORD PTR rs$4[rsp], 240		; 000000f0H
	je	SHORT $LN14@stbi__jpeg
	jmp	SHORT $LN3@stbi__jpeg
$LN14@stbi__jpeg:
; Line 2222
	mov	eax, DWORD PTR k$[rsp]
	add	eax, 16
	mov	DWORD PTR k$[rsp], eax
; Line 2223
	jmp	SHORT $LN13@stbi__jpeg
$LN12@stbi__jpeg:
; Line 2224
	mov	eax, DWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2226
	movsxd	rax, DWORD PTR k$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jpeg_dezigzag@@3QBEB
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv188[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv188[rsp]
	mov	DWORD PTR zig$3[rsp], eax
; Line 2227
	mov	edx, DWORD PTR s$2[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ; stbi__extend_receive
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR dequant$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2]
	imul	eax, ecx
	mov	ecx, DWORD PTR zig$3[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN13@stbi__jpeg:
$LN10@stbi__jpeg:
; Line 2230
	cmp	DWORD PTR k$[rsp], 64			; 00000040H
	jl	$LN4@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2231
	mov	eax, 1
$LN1@stbi__jpeg:
; Line 2232
	add	rsp, 104				; 00000068H
	ret	0
?stbi__jpeg_decode_block@@YAHPEAUstbi__jpeg@@QEAFPEAUstbi__huffman@@2PEAFHPEAG@Z ENDP ; stbi__jpeg_decode_block
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z PROC		; stbi__jpeg_get_bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2155
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2157
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 1
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2158
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	mov	DWORD PTR k$[rsp], eax
; Line 2159
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, 1
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2160
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	dec	eax
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2161
	mov	eax, DWORD PTR k$[rsp]
	and	eax, -2147483648			; 80000000H
; Line 2162
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_get_bit@@YAHPEAUstbi__jpeg@@@Z ENDP		; stbi__jpeg_get_bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
j$ = 64
n$ = 72
?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__jpeg_get_bits
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2144
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2146
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__jpeg:
; Line 2147
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2148
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2149
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2150
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2151
	mov	eax, DWORD PTR k$[rsp]
; Line 2152
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_get_bits@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__jpeg_get_bits
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
sgn$ = 36
j$ = 64
n$ = 72
?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z PROC	; stbi__extend_receive
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2129
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2132
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	cmp	DWORD PTR [rax+18468], ecx
	jge	SHORT $LN2@stbi__exte
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN2@stbi__exte:
; Line 2134
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 31
	mov	DWORD PTR sgn$[rsp], eax
; Line 2135
	mov	edx, DWORD PTR n$[rsp]
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rax+18464]
	call	_lrotl
	mov	DWORD PTR k$[rsp], eax
; Line 2136
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	not	eax
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2137
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__bmask@@3QBIB
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR k$[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR k$[rsp], eax
; Line 2138
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2139
	movsxd	rax, DWORD PTR n$[rsp]
	lea	rcx, OFFSET FLAT:?stbi__jbias@@3QBHB
	mov	edx, DWORD PTR sgn$[rsp]
	dec	edx
	mov	eax, DWORD PTR [rcx+rax*4]
	and	eax, edx
	mov	ecx, DWORD PTR k$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 2140
	add	rsp, 56					; 00000038H
	ret	0
?stbi__extend_receive@@YAHPEAUstbi__jpeg@@H@Z ENDP	; stbi__extend_receive
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
c$ = 36
s$1 = 40
temp$ = 44
tv209 = 48
tv230 = 56
tv239 = 64
tv250 = 72
j$ = 96
h$ = 104
?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z PROC ; stbi__jpeg_huff_decode
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2075
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2079
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 16
	jge	SHORT $LN5@stbi__jpeg
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ; stbi__grow_buffer_unsafe
$LN5@stbi__jpeg:
; Line 2083
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 23
	and	eax, 511				; 000001ffH
	mov	DWORD PTR c$[rsp], eax
; Line 2084
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR k$[rsp], eax
; Line 2085
	cmp	DWORD PTR k$[rsp], 255			; 000000ffH
	jge	$LN6@stbi__jpeg
; Line 2086
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2087
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR s$1[rsp], eax
	jle	SHORT $LN7@stbi__jpeg
; Line 2088
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN7@stbi__jpeg:
; Line 2089
	mov	eax, DWORD PTR s$1[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv209[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv209[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2090
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR s$1[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2091
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	jmp	$LN1@stbi__jpeg
$LN6@stbi__jpeg:
; Line 2100
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, 16
	mov	DWORD PTR temp$[rsp], eax
; Line 2101
	mov	DWORD PTR k$[rsp], 10
	jmp	SHORT $LN4@stbi__jpeg
$LN2@stbi__jpeg:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbi__jpeg:
; Line 2102
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4+1540]
	cmp	DWORD PTR temp$[rsp], eax
	jae	SHORT $LN8@stbi__jpeg
; Line 2103
	jmp	SHORT $LN3@stbi__jpeg
$LN8@stbi__jpeg:
	jmp	SHORT $LN2@stbi__jpeg
$LN3@stbi__jpeg:
; Line 2104
	cmp	DWORD PTR k$[rsp], 17
	jne	SHORT $LN9@stbi__jpeg
; Line 2106
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, 16
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2107
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN9@stbi__jpeg:
; Line 2110
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	cmp	DWORD PTR k$[rsp], eax
	jle	SHORT $LN10@stbi__jpeg
; Line 2111
	mov	eax, -1
	jmp	$LN1@stbi__jpeg
$LN10@stbi__jpeg:
; Line 2114
	mov	eax, 32					; 00000020H
	sub	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv230[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv230[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR k$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__bmask@@3QBIB
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	add	eax, DWORD PTR [rdx+rcx*4+1612]
	mov	DWORD PTR c$[rsp], eax
; Line 2115
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	ecx, 32					; 00000020H
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv239[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv239[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shr	eax, cl
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx+1280]
	lea	rdx, OFFSET FLAT:?stbi__bmask@@3QBIB
	and	eax, DWORD PTR [rdx+rcx*4]
	movsxd	rcx, DWORD PTR c$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx*2+512]
	cmp	eax, ecx
	je	SHORT $LN12@stbi__jpeg
	mov	r8d, 2115				; 00000843H
	lea	rdx, OFFSET FLAT:$SG146725
	lea	rcx, OFFSET FLAT:$SG146726
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbi__jpeg:
; Line 2118
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	sub	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2119
	mov	eax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	mov	QWORD PTR tv250[rsp], rcx
	movzx	ecx, al
	mov	rax, QWORD PTR tv250[rsp]
	mov	eax, DWORD PTR [rax+18464]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2120
	movsxd	rax, DWORD PTR c$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
$LN1@stbi__jpeg:
; Line 2121
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_huff_decode@@YAHPEAUstbi__jpeg@@PEAUstbi__huffman@@@Z ENDP ; stbi__jpeg_huff_decode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$1 = 32
tv70 = 36
b$2 = 40
j$ = 64
?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z PROC	; stbi__grow_buffer_unsafe
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2053
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
$LN4@stbi__grow:
; Line 2055
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18476], 0
	je	SHORT $LN10@stbi__grow
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN11@stbi__grow
$LN10@stbi__grow:
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv70[rsp], eax
$LN11@stbi__grow:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR b$2[rsp], eax
; Line 2056
	cmp	DWORD PTR b$2[rsp], 255			; 000000ffH
	jne	SHORT $LN7@stbi__grow
; Line 2057
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
$LN5@stbi__grow:
; Line 2058
	cmp	DWORD PTR c$1[rsp], 255			; 000000ffH
	jne	SHORT $LN6@stbi__grow
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c$1[rsp], eax
	jmp	SHORT $LN5@stbi__grow
$LN6@stbi__grow:
; Line 2059
	cmp	DWORD PTR c$1[rsp], 0
	je	SHORT $LN8@stbi__grow
; Line 2060
	mov	rax, QWORD PTR j$[rsp]
	movzx	ecx, BYTE PTR c$1[rsp]
	mov	BYTE PTR [rax+18472], cl
; Line 2061
	mov	rax, QWORD PTR j$[rsp]
	mov	DWORD PTR [rax+18476], 1
; Line 2062
	jmp	SHORT $LN1@stbi__grow
$LN8@stbi__grow:
$LN7@stbi__grow:
; Line 2065
	mov	rax, QWORD PTR j$[rsp]
	mov	ecx, 24
	sub	ecx, DWORD PTR [rax+18468]
	mov	eax, ecx
	movzx	ecx, al
	mov	eax, DWORD PTR b$2[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR j$[rsp]
	mov	ecx, DWORD PTR [rcx+18464]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18464], eax
; Line 2066
	mov	rax, QWORD PTR j$[rsp]
	mov	eax, DWORD PTR [rax+18468]
	add	eax, 8
	mov	rcx, QWORD PTR j$[rsp]
	mov	DWORD PTR [rcx+18468], eax
; Line 2067
	mov	rax, QWORD PTR j$[rsp]
	cmp	DWORD PTR [rax+18468], 24
	jle	$LN4@stbi__grow
$LN1@stbi__grow:
; Line 2068
	add	rsp, 56					; 00000038H
	ret	0
?stbi__grow_buffer_unsafe@@YAXPEAUstbi__jpeg@@@Z ENDP	; stbi__grow_buffer_unsafe
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fast$1 = 0
i$ = 4
k$2 = 8
magbits$3 = 12
len$4 = 16
rs$5 = 20
tv173 = 24
m$6 = 28
tv177 = 32
run$7 = 36
fast_ac$ = 64
h$ = 72
?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z PROC	; stbi__build_fast_ac
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 2028
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2030
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 512			; 00000200H
	jge	$LN3@stbi__buil
; Line 2031
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR fast$1[rsp], al
; Line 2032
	movsxd	rax, DWORD PTR i$[rsp]
	xor	ecx, ecx
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rax*2], cx
; Line 2033
	movzx	eax, BYTE PTR fast$1[rsp]
	cmp	eax, 255				; 000000ffH
	jge	$LN5@stbi__buil
; Line 2034
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1024]
	mov	DWORD PTR rs$5[rsp], eax
; Line 2035
	mov	eax, DWORD PTR rs$5[rsp]
	sar	eax, 4
	and	eax, 15
	mov	DWORD PTR run$7[rsp], eax
; Line 2036
	mov	eax, DWORD PTR rs$5[rsp]
	and	eax, 15
	mov	DWORD PTR magbits$3[rsp], eax
; Line 2037
	movzx	eax, BYTE PTR fast$1[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR len$4[rsp], eax
; Line 2039
	cmp	DWORD PTR magbits$3[rsp], 0
	je	$LN6@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, DWORD PTR len$4[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, 9
	jg	$LN6@stbi__buil
; Line 2041
	mov	eax, DWORD PTR len$4[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, cl
	and	eax, 511				; 000001ffH
	mov	ecx, 9
	sub	ecx, DWORD PTR magbits$3[rsp]
	sar	eax, cl
	mov	DWORD PTR k$2[rsp], eax
; Line 2042
	mov	eax, DWORD PTR magbits$3[rsp]
	dec	eax
	mov	ecx, 1
	mov	DWORD PTR tv173[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv173[rsp]
	shl	eax, cl
	mov	DWORD PTR m$6[rsp], eax
; Line 2043
	mov	eax, DWORD PTR m$6[rsp]
	cmp	DWORD PTR k$2[rsp], eax
	jge	SHORT $LN7@stbi__buil
	mov	eax, DWORD PTR magbits$3[rsp]
	mov	ecx, -1					; ffffffffH
	mov	DWORD PTR tv177[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv177[rsp]
	shl	eax, cl
	mov	ecx, DWORD PTR k$2[rsp]
	lea	eax, DWORD PTR [rcx+rax+1]
	mov	DWORD PTR k$2[rsp], eax
$LN7@stbi__buil:
; Line 2045
	cmp	DWORD PTR k$2[rsp], -128		; ffffffffffffff80H
	jl	SHORT $LN8@stbi__buil
	cmp	DWORD PTR k$2[rsp], 127			; 0000007fH
	jg	SHORT $LN8@stbi__buil
; Line 2046
	imul	eax, DWORD PTR k$2[rsp], 256		; 00000100H
	imul	ecx, DWORD PTR run$7[rsp], 16
	add	eax, ecx
	mov	ecx, DWORD PTR magbits$3[rsp]
	mov	edx, DWORD PTR len$4[rsp]
	add	edx, ecx
	mov	ecx, edx
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR fast_ac$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
$LN8@stbi__buil:
$LN6@stbi__buil:
$LN5@stbi__buil:
; Line 2049
	jmp	$LN2@stbi__buil
$LN3@stbi__buil:
; Line 2050
	add	rsp, 56					; 00000038H
	ret	0
?stbi__build_fast_ac@@YAXPEAFPEAUstbi__huffman@@@Z ENDP	; stbi__build_fast_ac
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 32
k$ = 36
i$ = 40
code$ = 44
tv140 = 48
s$1 = 52
tv235 = 56
m$2 = 60
c$3 = 64
h$ = 96
count$ = 104
?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z PROC	; stbi__build_huffman
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1984
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1985
	mov	DWORD PTR k$[rsp], 0
; Line 1988
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__buil
$LN2@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__buil:
	cmp	DWORD PTR i$[rsp], 16
	jge	SHORT $LN3@stbi__buil
; Line 1989
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__buil
$LN5@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__buil:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR count$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN6@stbi__buil
; Line 1990
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rdx+rcx+1280], al
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN5@stbi__buil
$LN6@stbi__buil:
	jmp	SHORT $LN2@stbi__buil
$LN3@stbi__buil:
; Line 1991
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	BYTE PTR [rcx+rax+1280], 0
; Line 1994
	mov	DWORD PTR code$[rsp], 0
; Line 1995
	mov	DWORD PTR k$[rsp], 0
; Line 1996
	mov	DWORD PTR j$[rsp], 1
	jmp	SHORT $LN10@stbi__buil
$LN8@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN10@stbi__buil:
	cmp	DWORD PTR j$[rsp], 16
	jg	$LN9@stbi__buil
; Line 1998
	mov	eax, DWORD PTR code$[rsp]
	mov	ecx, DWORD PTR k$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1612], eax
; Line 1999
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN19@stbi__buil
$LN11@stbi__buil:
; Line 2000
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	cmp	eax, DWORD PTR j$[rsp]
	jne	SHORT $LN12@stbi__buil
; Line 2001
	movzx	eax, WORD PTR code$[rsp]
	mov	WORD PTR tv140[rsp], ax
	mov	eax, DWORD PTR code$[rsp]
	inc	eax
	mov	DWORD PTR code$[rsp], eax
	movsxd	rax, DWORD PTR k$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, WORD PTR tv140[rsp]
	mov	WORD PTR [rcx+rax*2+512], dx
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	jmp	SHORT $LN11@stbi__buil
$LN12@stbi__buil:
; Line 2002
	mov	eax, DWORD PTR code$[rsp]
	dec	eax
	mov	ecx, DWORD PTR j$[rsp]
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	cmp	eax, ecx
	jb	SHORT $LN20@stbi__buil
	lea	rcx, OFFSET FLAT:$SG146670
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	$LN1@stbi__buil
$LN20@stbi__buil:
$LN19@stbi__buil:
; Line 2005
	mov	eax, 16
	sub	eax, DWORD PTR j$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, cl
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rdx+rcx*4+1540], eax
; Line 2006
	mov	eax, DWORD PTR code$[rsp]
	shl	eax, 1
	mov	DWORD PTR code$[rsp], eax
; Line 2007
	jmp	$LN8@stbi__buil
$LN9@stbi__buil:
; Line 2008
	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	mov	DWORD PTR [rcx+rax*4+1540], -1		; ffffffffH
; Line 2011
	mov	rax, QWORD PTR h$[rsp]
	mov	r8d, 512				; 00000200H
	mov	edx, 255				; 000000ffH
	mov	rcx, rax
	call	memset
; Line 2012
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN15@stbi__buil
$LN13@stbi__buil:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN15@stbi__buil:
	mov	eax, DWORD PTR k$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN14@stbi__buil
; Line 2013
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1280]
	mov	DWORD PTR s$1[rsp], eax
; Line 2014
	cmp	DWORD PTR s$1[rsp], 9
	jg	SHORT $LN21@stbi__buil
; Line 2015
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR h$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2+512]
	mov	ecx, 9
	sub	ecx, DWORD PTR s$1[rsp]
	shl	eax, cl
	mov	DWORD PTR c$3[rsp], eax
; Line 2016
	mov	eax, 9
	sub	eax, DWORD PTR s$1[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv235[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv235[rsp]
	shl	eax, cl
	mov	DWORD PTR m$2[rsp], eax
; Line 2017
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN18@stbi__buil
$LN16@stbi__buil:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN18@stbi__buil:
	mov	eax, DWORD PTR m$2[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN17@stbi__buil
; Line 2018
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR c$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	mov	rcx, QWORD PTR h$[rsp]
	movzx	edx, BYTE PTR i$[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 2019
	jmp	SHORT $LN16@stbi__buil
$LN17@stbi__buil:
$LN21@stbi__buil:
; Line 2021
	jmp	$LN13@stbi__buil
$LN14@stbi__buil:
; Line 2022
	mov	eax, 1
$LN1@stbi__buil:
; Line 2023
	add	rsp, 88					; 00000058H
	ret	0
?stbi__build_huffman@@YAHPEAUstbi__huffman@@PEAH@Z ENDP	; stbi__build_huffman
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
dest$1 = 40
src$2 = 48
j$ = 56
tv130 = 60
tv82 = 64
tv357 = 68
good$ = 72
tv262 = 80
tv282 = 84
tv304 = 88
tv324 = 92
data$ = 112
img_n$ = 120
req_comp$ = 128
x$ = 136
y$ = 144
?stbi__convert_format16@@YAPEAGPEAGHHII@Z PROC		; stbi__convert_format16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1793
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1797
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1798
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1798				; 00000706H
	lea	rdx, OFFSET FLAT:$SG146446
	lea	rcx, OFFSET FLAT:$SG146447
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1800
	mov	eax, DWORD PTR req_comp$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 1
	mov	eax, eax
	mov	ecx, eax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR good$[rsp], rax
; Line 1801
	cmp	QWORD PTR good$[rsp], 0
	jne	SHORT $LN44@stbi__conv
; Line 1802
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1803
	lea	rcx, OFFSET FLAT:$SG146449
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	DWORD PTR tv82[rsp], 0
$LN62@stbi__conv:
	movsxd	rax, DWORD PTR tv82[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1806
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1807
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR src$2[rsp], rax
; Line 1808
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR dest$1[rsp], rax
; Line 1814
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv130[rsp], eax
	mov	eax, DWORD PTR tv130[rsp]
	sub	eax, 10
	mov	DWORD PTR tv130[rsp], eax
	cmp	DWORD PTR tv130[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv130[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1815
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1816
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1817
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1818
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1819
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1820
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1821
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 8
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1822
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv262[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv262[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1823
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 6
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv282[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv282[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 65535				; 0000ffffH
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rax], cx
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1824
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv304[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv304[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1825
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, WORD PTR [rdx+rcx]
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, WORD PTR [r8+rdx]
	mov	DWORD PTR tv324[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv324[rsp]
	mov	ecx, eax
	call	?stbi__compute_y_16@@YAGHHH@Z		; stbi__compute_y_16
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 3
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1826
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 8
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 6
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 2
	imul	rax, rax, 0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 1
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	mov	eax, 2
	imul	rax, rax, 2
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, WORD PTR [r8+rax]
	mov	WORD PTR [rdx+rcx], ax
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	SHORT $LN5@stbi__conv
$LN57@stbi__conv:
; Line 1827
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1827				; 00000723H
	lea	rdx, OFFSET FLAT:$SG146463
	lea	rcx, OFFSET FLAT:$SG146464
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN63@stbi__conv:
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR good$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG146465
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	DWORD PTR tv357[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	DWORD PTR tv357[rsp], 0
$LN65@stbi__conv:
	movsxd	rax, DWORD PTR tv357[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1830
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1832
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1833
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1834
	add	rsp, 104				; 00000068H
	ret	0
	npad	2
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
?stbi__convert_format16@@YAPEAGPEAGHHII@Z ENDP		; stbi__convert_format16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
?stbi__compute_y_16@@YAGHHH@Z PROC			; stbi__compute_y_16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1784
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1785
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1786
	ret	0
?stbi__compute_y_16@@YAGHHH@Z ENDP			; stbi__compute_y_16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
dest$1 = 40
src$2 = 48
j$ = 56
tv95 = 60
tv81 = 64
tv354 = 68
good$ = 72
tv259 = 80
tv279 = 84
tv301 = 88
tv321 = 92
data$ = 112
img_n$ = 120
req_comp$ = 128
x$ = 136
y$ = 144
?stbi__convert_format@@YAPEAEPEAEHHII@Z PROC		; stbi__convert_format
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1736
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1740
	mov	eax, DWORD PTR img_n$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	jne	SHORT $LN43@stbi__conv
	mov	rax, QWORD PTR data$[rsp]
	jmp	$LN1@stbi__conv
$LN43@stbi__conv:
; Line 1741
	cmp	DWORD PTR req_comp$[rsp], 1
	jl	SHORT $LN59@stbi__conv
	cmp	DWORD PTR req_comp$[rsp], 4
	jle	SHORT $LN60@stbi__conv
$LN59@stbi__conv:
	mov	r8d, 1741				; 000006cdH
	lea	rdx, OFFSET FLAT:$SG146354
	lea	rcx, OFFSET FLAT:$SG146355
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN60@stbi__conv:
; Line 1743
	xor	r9d, r9d
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR req_comp$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR good$[rsp], rax
; Line 1744
	cmp	QWORD PTR good$[rsp], 0
	jne	SHORT $LN44@stbi__conv
; Line 1745
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1746
	lea	rcx, OFFSET FLAT:$SG146357
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN61@stbi__conv
	mov	DWORD PTR tv81[rsp], 0
	jmp	SHORT $LN62@stbi__conv
$LN61@stbi__conv:
	mov	DWORD PTR tv81[rsp], 0
$LN62@stbi__conv:
	movsxd	rax, DWORD PTR tv81[rsp]
	jmp	$LN1@stbi__conv
$LN44@stbi__conv:
; Line 1749
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbi__conv
; Line 1750
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR img_n$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR src$2[rsp], rax
; Line 1751
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR good$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR dest$1[rsp], rax
; Line 1757
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	ecx, DWORD PTR img_n$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	DWORD PTR tv95[rsp], eax
	mov	eax, DWORD PTR tv95[rsp]
	sub	eax, 10
	mov	DWORD PTR tv95[rsp], eax
	cmp	DWORD PTR tv95[rsp], 25
	ja	$LN57@stbi__conv
	movsxd	rax, DWORD PTR tv95[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN66@stbi__conv[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN45@stbi__conv:
; Line 1758
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN9@stbi__conv
$LN7@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN9@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN8@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN7@stbi__conv
$LN8@stbi__conv:
	jmp	$LN5@stbi__conv
$LN46@stbi__conv:
; Line 1759
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN12@stbi__conv
$LN10@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN12@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN11@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN10@stbi__conv
$LN11@stbi__conv:
	jmp	$LN5@stbi__conv
$LN47@stbi__conv:
; Line 1760
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN15@stbi__conv
$LN13@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	inc	rax
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN15@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN14@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN13@stbi__conv
$LN14@stbi__conv:
	jmp	$LN5@stbi__conv
$LN48@stbi__conv:
; Line 1761
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN18@stbi__conv
$LN16@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN18@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN17@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN16@stbi__conv
$LN17@stbi__conv:
	jmp	$LN5@stbi__conv
$LN49@stbi__conv:
; Line 1762
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__conv
$LN19@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN21@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN20@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN19@stbi__conv
$LN20@stbi__conv:
	jmp	$LN5@stbi__conv
$LN50@stbi__conv:
; Line 1763
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__conv
$LN22@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 2
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN24@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN23@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR dest$1[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN22@stbi__conv
$LN23@stbi__conv:
	jmp	$LN5@stbi__conv
$LN51@stbi__conv:
; Line 1764
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN27@stbi__conv
$LN25@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 4
	mov	QWORD PTR dest$1[rsp], rax
$LN27@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN26@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN25@stbi__conv
$LN26@stbi__conv:
	jmp	$LN5@stbi__conv
$LN52@stbi__conv:
; Line 1765
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN30@stbi__conv
$LN28@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN30@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN29@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv259[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv259[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN28@stbi__conv
$LN29@stbi__conv:
	jmp	$LN5@stbi__conv
$LN53@stbi__conv:
; Line 1766
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN33@stbi__conv
$LN31@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 3
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN33@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN32@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv279[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv279[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	$LN31@stbi__conv
$LN32@stbi__conv:
	jmp	$LN5@stbi__conv
$LN54@stbi__conv:
; Line 1767
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN36@stbi__conv
$LN34@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	inc	rax
	mov	QWORD PTR dest$1[rsp], rax
$LN36@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN35@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv301[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv301[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN34@stbi__conv
$LN35@stbi__conv:
	jmp	$LN5@stbi__conv
$LN55@stbi__conv:
; Line 1768
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN39@stbi__conv
$LN37@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 2
	mov	QWORD PTR dest$1[rsp], rax
$LN39@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN38@stbi__conv
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR src$2[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR src$2[rsp]
	movzx	edx, BYTE PTR [r8+rdx]
	mov	DWORD PTR tv321[rsp], edx
	mov	r8d, eax
	mov	edx, ecx
	mov	eax, DWORD PTR tv321[rsp]
	mov	ecx, eax
	call	?stbi__compute_y@@YAEHHH@Z		; stbi__compute_y
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 3
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN37@stbi__conv
$LN38@stbi__conv:
	jmp	$LN5@stbi__conv
$LN56@stbi__conv:
; Line 1769
	mov	eax, DWORD PTR x$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN42@stbi__conv
$LN40@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR src$2[rsp]
	add	rax, 4
	mov	QWORD PTR src$2[rsp], rax
	mov	rax, QWORD PTR dest$1[rsp]
	add	rax, 3
	mov	QWORD PTR dest$1[rsp], rax
$LN42@stbi__conv:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN41@stbi__conv
	mov	eax, 1
	imul	rax, rax, 0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 1
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR dest$1[rsp]
	mov	r8, QWORD PTR src$2[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	$LN40@stbi__conv
$LN41@stbi__conv:
	jmp	SHORT $LN5@stbi__conv
$LN57@stbi__conv:
; Line 1770
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN63@stbi__conv
	mov	r8d, 1770				; 000006eaH
	lea	rdx, OFFSET FLAT:$SG146371
	lea	rcx, OFFSET FLAT:$SG146372
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN63@stbi__conv:
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR good$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG146373
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__conv
	mov	DWORD PTR tv354[rsp], 0
	jmp	SHORT $LN65@stbi__conv
$LN64@stbi__conv:
	mov	DWORD PTR tv354[rsp], 0
$LN65@stbi__conv:
	movsxd	rax, DWORD PTR tv354[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1773
	jmp	$LN2@stbi__conv
$LN3@stbi__conv:
; Line 1775
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1776
	mov	rax, QWORD PTR good$[rsp]
$LN1@stbi__conv:
; Line 1777
	add	rsp, 104				; 00000068H
	ret	0
	npad	2
$LN66@stbi__conv:
	DD	$LN45@stbi__conv
	DD	$LN46@stbi__conv
	DD	$LN47@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN48@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN49@stbi__conv
	DD	$LN50@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN52@stbi__conv
	DD	$LN53@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN51@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN57@stbi__conv
	DD	$LN54@stbi__conv
	DD	$LN55@stbi__conv
	DD	$LN56@stbi__conv
?stbi__convert_format@@YAPEAEPEAEHHII@Z ENDP		; stbi__convert_format
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 8
g$ = 16
b$ = 24
?stbi__compute_y@@YAEHHH@Z PROC				; stbi__compute_y
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1727
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
; Line 1728
	imul	eax, DWORD PTR r$[rsp], 77		; 0000004dH
	imul	ecx, DWORD PTR g$[rsp], 150		; 00000096H
	add	eax, ecx
	imul	ecx, DWORD PTR b$[rsp], 29
	add	eax, ecx
	sar	eax, 8
; Line 1729
	ret	0
?stbi__compute_y@@YAEHHH@Z ENDP				; stbi__compute_y
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
?stbi__get32le@@YAIPEAUstbi__context@@@Z PROC		; stbi__get32le
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1703
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1704
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR z$[rsp], eax
; Line 1705
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	shl	eax, 16
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR z$[rsp], eax
; Line 1706
	mov	eax, DWORD PTR z$[rsp]
; Line 1707
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get32le@@YAIPEAUstbi__context@@@Z ENDP		; stbi__get32le
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
s$ = 64
?stbi__get16le@@YAHPEAUstbi__context@@@Z PROC		; stbi__get16le
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1695
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1696
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1697
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	shl	eax, 8
	mov	ecx, DWORD PTR z$[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1698
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get16le@@YAHPEAUstbi__context@@@Z ENDP		; stbi__get16le
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv66 = 36
s$ = 64
?stbi__get32be@@YAIPEAUstbi__context@@@Z PROC		; stbi__get32be
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1685
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1686
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR z$[rsp], eax
; Line 1687
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 16
	mov	DWORD PTR tv66[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	ecx, DWORD PTR tv66[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1688
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get32be@@YAIPEAUstbi__context@@@Z ENDP		; stbi__get32be
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
z$ = 32
tv67 = 36
s$ = 64
?stbi__get16be@@YAHPEAUstbi__context@@@Z PROC		; stbi__get16be
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1675
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1676
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR z$[rsp], eax
; Line 1677
	mov	eax, DWORD PTR z$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv67[rsp], eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv67[rsp]
	add	ecx, eax
	mov	eax, ecx
; Line 1678
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get16be@@YAHPEAUstbi__context@@@Z ENDP		; stbi__get16be
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
tv91 = 36
count$2 = 40
res$3 = 44
tv88 = 48
s$ = 80
buffer$ = 88
n$ = 96
?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z PROC		; stbi__getn
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1647
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1648
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	$LN2@stbi__getn
; Line 1649
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1650
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	$LN3@stbi__getn
; Line 1653
	movsxd	rax, DWORD PTR blen$1[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1655
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv88[rsp], rax
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR blen$1[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, eax
	mov	rdx, rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv88[rsp]
	mov	DWORD PTR count$2[rsp], eax
; Line 1656
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR count$2[rsp], eax
	jne	SHORT $LN7@stbi__getn
	mov	DWORD PTR tv91[rsp], 1
	jmp	SHORT $LN8@stbi__getn
$LN7@stbi__getn:
	mov	DWORD PTR tv91[rsp], 0
$LN8@stbi__getn:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR res$3[rsp], eax
; Line 1657
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1658
	mov	eax, DWORD PTR res$3[rsp]
	jmp	SHORT $LN1@stbi__getn
$LN3@stbi__getn:
$LN2@stbi__getn:
; Line 1662
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	cmp	rax, QWORD PTR [rcx+200]
	ja	SHORT $LN4@stbi__getn
; Line 1663
	movsxd	rax, DWORD PTR n$[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rdx, QWORD PTR [rax+192]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	memcpy
; Line 1664
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1665
	mov	eax, 1
	jmp	SHORT $LN1@stbi__getn
; Line 1666
	jmp	SHORT $LN5@stbi__getn
$LN4@stbi__getn:
; Line 1667
	xor	eax, eax
$LN5@stbi__getn:
$LN1@stbi__getn:
; Line 1668
	add	rsp, 72					; 00000048H
	ret	0
?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ENDP		; stbi__getn
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
blen$1 = 32
tv85 = 40
s$ = 64
n$ = 72
?stbi__skip@@YAXPEAUstbi__context@@H@Z PROC		; stbi__skip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1625
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1626
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__skip
	jmp	$LN1@stbi__skip
$LN2@stbi__skip:
; Line 1627
	cmp	DWORD PTR n$[rsp], 0
	jge	SHORT $LN3@stbi__skip
; Line 1628
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1629
	jmp	$LN1@stbi__skip
$LN3@stbi__skip:
; Line 1631
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN4@stbi__skip
; Line 1632
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+192]
	mov	rax, QWORD PTR [rax+200]
	sub	rax, rcx
	mov	DWORD PTR blen$1[rsp], eax
; Line 1633
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR blen$1[rsp], eax
	jge	SHORT $LN5@stbi__skip
; Line 1634
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+192], rcx
; Line 1635
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv85[rsp], rax
	mov	eax, DWORD PTR blen$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv85[rsp]
; Line 1636
	jmp	SHORT $LN1@stbi__skip
$LN5@stbi__skip:
$LN4@stbi__skip:
; Line 1639
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+192]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
$LN1@stbi__skip:
; Line 1640
	add	rsp, 56					; 00000038H
	ret	0
?stbi__skip@@YAXPEAUstbi__context@@H@Z ENDP		; stbi__skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 32
tv73 = 40
s$ = 64
?stbi__at_eof@@YAHPEAUstbi__context@@@Z PROC		; stbi__at_eof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1609
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1610
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN2@stbi__at_e
; Line 1611
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv73[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv73[rsp]
	test	eax, eax
	jne	SHORT $LN3@stbi__at_e
	xor	eax, eax
	jmp	SHORT $LN1@stbi__at_e
$LN3@stbi__at_e:
; Line 1614
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN4@stbi__at_e
	mov	eax, 1
	jmp	SHORT $LN1@stbi__at_e
$LN4@stbi__at_e:
$LN2@stbi__at_e:
; Line 1617
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jb	SHORT $LN6@stbi__at_e
	mov	DWORD PTR tv80[rsp], 1
	jmp	SHORT $LN7@stbi__at_e
$LN6@stbi__at_e:
	mov	DWORD PTR tv80[rsp], 0
$LN7@stbi__at_e:
	mov	eax, DWORD PTR tv80[rsp]
$LN1@stbi__at_e:
; Line 1618
	add	rsp, 56					; 00000038H
	ret	0
?stbi__at_eof@@YAHPEAUstbi__context@@@Z ENDP		; stbi__at_eof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv81 = 33
s$ = 64
?stbi__get8@@YAEPEAUstbi__context@@@Z PROC		; stbi__get8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1595
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1596
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	cmp	QWORD PTR [rax+192], rcx
	jae	SHORT $LN2@stbi__get8
; Line 1597
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv72[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv72[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN2@stbi__get8:
; Line 1598
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN3@stbi__get8
; Line 1599
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ; stbi__refill_buffer
; Line 1600
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv81[rsp], al
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	inc	rax
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
	movzx	eax, BYTE PTR tv81[rsp]
	jmp	SHORT $LN1@stbi__get8
$LN3@stbi__get8:
; Line 1602
	xor	al, al
$LN1@stbi__get8:
; Line 1603
	add	rsp, 56					; 00000038H
	ret	0
?stbi__get8@@YAEPEAUstbi__context@@@Z ENDP		; stbi__get8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv89 = 48
tv129 = 52
hdr_data$1 = 56
data$ = 64
ri$2 = 72
__$ArrayPad$ = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z PROC ; stbi__loadf_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1441
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1444
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
; Line 1446
	lea	rax, QWORD PTR ri$2[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__hdr_load
	mov	QWORD PTR hdr_data$1[rsp], rax
; Line 1447
	cmp	QWORD PTR hdr_data$1[rsp], 0
	je	SHORT $LN3@stbi__load
; Line 1448
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR hdr_data$1[rsp]
	call	?stbi__float_postprocess@@YAXPEAMPEAH11H@Z ; stbi__float_postprocess
$LN3@stbi__load:
; Line 1449
	mov	rax, QWORD PTR hdr_data$1[rsp]
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1452
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
	mov	QWORD PTR data$[rsp], rax
; Line 1453
	cmp	QWORD PTR data$[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1454
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv89[rsp], eax
	jmp	SHORT $LN7@stbi__load
$LN6@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv89[rsp], eax
$LN7@stbi__load:
	mov	r9d, DWORD PTR tv89[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z	; stbi__ldr_to_hdr
	jmp	SHORT $LN1@stbi__load
$LN4@stbi__load:
; Line 1455
	lea	rcx, OFFSET FLAT:$SG146138
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	DWORD PTR tv129[rsp], 0
	jmp	SHORT $LN9@stbi__load
$LN8@stbi__load:
	mov	DWORD PTR tv129[rsp], 0
$LN9@stbi__load:
	movsxd	rax, DWORD PTR tv129[rsp]
$LN1@stbi__load:
; Line 1456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__loadf_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
f$ = 32
filename$ = 64
mode$ = 72
?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z PROC		; stbi__fopen
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1318
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1337
	mov	r8, QWORD PTR mode$[rsp]
	mov	rdx, QWORD PTR filename$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fopen_s
	test	eax, eax
	je	SHORT $LN2@stbi__fope
; Line 1338
	mov	QWORD PTR f$[rsp], 0
$LN2@stbi__fope:
; Line 1342
	mov	rax, QWORD PTR f$[rsp]
; Line 1343
	add	rsp, 56					; 00000038H
	ret	0
?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z ENDP		; stbi__fopen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
tv81 = 36
channels$1 = 40
result$ = 64
x$ = 72
y$ = 80
comp$ = 88
req_comp$ = 96
?stbi__float_postprocess@@YAXPEAMPEAH11H@Z PROC		; stbi__float_postprocess
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1295
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1296
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi__floa
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv77[rsp], eax
	jmp	SHORT $LN5@stbi__floa
$LN4@stbi__floa:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv77[rsp], eax
$LN5@stbi__floa:
	cmp	DWORD PTR tv77[rsp], 0
	je	SHORT $LN2@stbi__floa
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi__floa
; Line 1297
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN6@stbi__floa
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN7@stbi__floa
$LN6@stbi__floa:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv81[rsp], eax
$LN7@stbi__floa:
	mov	eax, DWORD PTR tv81[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1298
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 2
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN2@stbi__floa:
; Line 1300
	add	rsp, 56					; 00000038H
	ret	0
?stbi__float_postprocess@@YAXPEAMPEAH11H@Z ENDP		; stbi__float_postprocess
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z PROC ; stbi__load_and_postprocess_16bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1267
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1269
	mov	DWORD PTR [rsp+48], 16
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1271
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1272
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1275
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1275				; 000004fbH
	lea	rdx, OFFSET FLAT:$SG146000
	lea	rcx, OFFSET FLAT:$SG146001
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1277
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN3@stbi__load
; Line 1278
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z	; stbi__convert_8_to_16
	mov	QWORD PTR result$[rsp], rax
; Line 1279
	mov	DWORD PTR ri$[rsp], 16
$LN3@stbi__load:
; Line 1285
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1286
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1287
	movsxd	rax, DWORD PTR channels$1[rsp]
	shl	rax, 1
	mov	r9d, eax
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN4@stbi__load:
; Line 1290
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1291
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__load_and_postprocess_16bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv82 = 64
tv132 = 68
tv135 = 72
result$ = 80
channels$1 = 88
ri$ = 96
__$ArrayPad$ = 112
s$ = 144
x$ = 152
y$ = 160
comp$ = 168
req_comp$ = 176
?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z PROC ; stbi__load_and_postprocess_8bit
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1241
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1243
	mov	DWORD PTR [rsp+48], 8
	lea	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__load_main
	mov	QWORD PTR result$[rsp], rax
; Line 1245
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN2@stbi__load
; Line 1246
	xor	eax, eax
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1249
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN6@stbi__load
	cmp	DWORD PTR ri$[rsp], 16
	je	SHORT $LN6@stbi__load
	mov	r8d, 1249				; 000004e1H
	lea	rdx, OFFSET FLAT:$SG145980
	lea	rcx, OFFSET FLAT:$SG145981
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbi__load:
; Line 1251
	cmp	DWORD PTR ri$[rsp], 8
	je	SHORT $LN3@stbi__load
; Line 1252
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv82[rsp], eax
	jmp	SHORT $LN8@stbi__load
$LN7@stbi__load:
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv82[rsp], eax
$LN8@stbi__load:
	mov	r9d, DWORD PTR tv82[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z	; stbi__convert_16_to_8
	mov	QWORD PTR result$[rsp], rax
; Line 1253
	mov	DWORD PTR ri$[rsp], 8
$LN3@stbi__load:
; Line 1258
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN9@stbi__load
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv132[rsp], eax
	jmp	SHORT $LN10@stbi__load
$LN9@stbi__load:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv132[rsp], eax
$LN10@stbi__load:
	cmp	DWORD PTR tv132[rsp], 0
	je	SHORT $LN4@stbi__load
; Line 1259
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN11@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv135[rsp], eax
	jmp	SHORT $LN12@stbi__load
$LN11@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv135[rsp], eax
$LN12@stbi__load:
	mov	eax, DWORD PTR tv135[rsp]
	mov	DWORD PTR channels$1[rsp], eax
; Line 1260
	mov	r9d, DWORD PTR channels$1[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
$LN4@stbi__load:
; Line 1263
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__load:
; Line 1264
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 136				; 00000088H
	ret	0
?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ENDP ; stbi__load_and_postprocess_8bit
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
slice$ = 32
slice_size$ = 36
bytes$ = 40
image$ = 64
w$ = 72
h$ = 80
z$ = 88
bytes_per_pixel$ = 96
?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z PROC		; stbi__vertical_flip_slices
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1228
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1230
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR bytes_per_pixel$[rsp]
	mov	DWORD PTR slice_size$[rsp], eax
; Line 1232
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1233
	mov	DWORD PTR slice$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR slice$[rsp]
	inc	eax
	mov	DWORD PTR slice$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR z$[rsp]
	cmp	DWORD PTR slice$[rsp], eax
	jge	SHORT $LN3@stbi__vert
; Line 1234
	mov	r9d, DWORD PTR bytes_per_pixel$[rsp]
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	call	?stbi__vertical_flip@@YAXPEAXHHH@Z	; stbi__vertical_flip
; Line 1235
	movsxd	rax, DWORD PTR slice_size$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes$[rsp], rax
; Line 1236
	jmp	SHORT $LN2@stbi__vert
$LN3@stbi__vert:
; Line 1237
	add	rsp, 56					; 00000038H
	ret	0
?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z ENDP		; stbi__vertical_flip_slices
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
row$ = 32
bytes_copy$1 = 40
bytes_left$2 = 48
row0$3 = 56
row1$4 = 64
bytes_per_row$ = 72
bytes$ = 80
tv80 = 88
temp$ = 96
__$ArrayPad$ = 2144
image$ = 2176
w$ = 2184
h$ = 2192
bytes_per_pixel$ = 2200
?stbi__vertical_flip@@YAXPEAXHHH@Z PROC			; stbi__vertical_flip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1203
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 2168				; 00000878H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1205
	movsxd	rax, DWORD PTR w$[rsp]
	movsxd	rcx, DWORD PTR bytes_per_pixel$[rsp]
	imul	rax, rcx
	mov	QWORD PTR bytes_per_row$[rsp], rax
; Line 1207
	mov	rax, QWORD PTR image$[rsp]
	mov	QWORD PTR bytes$[rsp], rax
; Line 1209
	mov	DWORD PTR row$[rsp], 0
	jmp	SHORT $LN4@stbi__vert
$LN2@stbi__vert:
	mov	eax, DWORD PTR row$[rsp]
	inc	eax
	mov	DWORD PTR row$[rsp], eax
$LN4@stbi__vert:
	mov	eax, DWORD PTR h$[rsp]
	sar	eax, 1
	cmp	DWORD PTR row$[rsp], eax
	jge	$LN3@stbi__vert
; Line 1210
	movsxd	rax, DWORD PTR row$[rsp]
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1211
	mov	eax, DWORD PTR row$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	cdqe
	imul	rax, QWORD PTR bytes_per_row$[rsp]
	mov	rcx, QWORD PTR bytes$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1213
	mov	rax, QWORD PTR bytes_per_row$[rsp]
	mov	QWORD PTR bytes_left$2[rsp], rax
$LN5@stbi__vert:
; Line 1214
	cmp	QWORD PTR bytes_left$2[rsp], 0
	je	$LN6@stbi__vert
; Line 1215
	cmp	QWORD PTR bytes_left$2[rsp], 2048	; 00000800H
	jae	SHORT $LN8@stbi__vert
	mov	rax, QWORD PTR bytes_left$2[rsp]
	mov	QWORD PTR tv80[rsp], rax
	jmp	SHORT $LN9@stbi__vert
$LN8@stbi__vert:
	mov	QWORD PTR tv80[rsp], 2048		; 00000800H
$LN9@stbi__vert:
	mov	rax, QWORD PTR tv80[rsp]
	mov	QWORD PTR bytes_copy$1[rsp], rax
; Line 1216
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row0$3[rsp]
	lea	rcx, QWORD PTR temp$[rsp]
	call	memcpy
; Line 1217
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	mov	rdx, QWORD PTR row1$4[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	call	memcpy
; Line 1218
	mov	r8, QWORD PTR bytes_copy$1[rsp]
	lea	rdx, QWORD PTR temp$[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	call	memcpy
; Line 1219
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row0$3[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row0$3[rsp], rax
; Line 1220
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR row1$4[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR row1$4[rsp], rax
; Line 1221
	mov	rax, QWORD PTR bytes_copy$1[rsp]
	mov	rcx, QWORD PTR bytes_left$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR bytes_left$2[rsp], rax
; Line 1222
	jmp	$LN5@stbi__vert
$LN6@stbi__vert:
; Line 1223
	jmp	$LN2@stbi__vert
$LN3@stbi__vert:
; Line 1224
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 2168				; 00000878H
	ret	0
?stbi__vertical_flip@@YAXPEAXHHH@Z ENDP			; stbi__vertical_flip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv74 = 36
img_len$ = 40
enlarged$ = 48
orig$ = 80
w$ = 88
h$ = 96
channels$ = 104
?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z PROC		; stbi__convert_8_to_16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1187
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1189
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1192
	mov	eax, DWORD PTR img_len$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR enlarged$[rsp], rax
; Line 1193
	cmp	QWORD PTR enlarged$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG145928
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	DWORD PTR tv74[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	DWORD PTR tv74[rsp], 0
$LN8@stbi__conv:
	movsxd	rax, DWORD PTR tv74[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1195
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1196
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 8
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR orig$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR enlarged$[rsp]
	mov	WORD PTR [rdx+rcx*2], ax
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1198
	mov	rcx, QWORD PTR orig$[rsp]
	call	QWORD PTR __imp_free
; Line 1199
	mov	rax, QWORD PTR enlarged$[rsp]
$LN1@stbi__conv:
; Line 1200
	add	rsp, 72					; 00000048H
	ret	0
?stbi__convert_8_to_16@@YAPEAGPEAEHHH@Z ENDP		; stbi__convert_8_to_16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
tv73 = 36
img_len$ = 40
reduced$ = 48
orig$ = 80
w$ = 88
h$ = 96
channels$ = 104
?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z PROC		; stbi__convert_16_to_8
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1171
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1173
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channels$[rsp]
	mov	DWORD PTR img_len$[rsp], eax
; Line 1176
	movsxd	rax, DWORD PTR img_len$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR reduced$[rsp], rax
; Line 1177
	cmp	QWORD PTR reduced$[rsp], 0
	jne	SHORT $LN5@stbi__conv
	lea	rcx, OFFSET FLAT:$SG145909
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN7@stbi__conv
	mov	DWORD PTR tv73[rsp], 0
	jmp	SHORT $LN8@stbi__conv
$LN7@stbi__conv:
	mov	DWORD PTR tv73[rsp], 0
$LN8@stbi__conv:
	movsxd	rax, DWORD PTR tv73[rsp]
	jmp	SHORT $LN1@stbi__conv
$LN5@stbi__conv:
; Line 1179
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__conv
$LN2@stbi__conv:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__conv:
	mov	eax, DWORD PTR img_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbi__conv
; Line 1180
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR orig$[rsp]
	movzx	eax, WORD PTR [rcx+rax*2]
	sar	eax, 8
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR reduced$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN2@stbi__conv
$LN3@stbi__conv:
; Line 1182
	mov	rcx, QWORD PTR orig$[rsp]
	call	QWORD PTR __imp_free
; Line 1183
	mov	rax, QWORD PTR reduced$[rsp]
$LN1@stbi__conv:
; Line 1184
	add	rsp, 72					; 00000048H
	ret	0
?stbi__convert_16_to_8@@YAPEAEPEAGHHH@Z ENDP		; stbi__convert_16_to_8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv185 = 64
tv203 = 68
hdr$1 = 72
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
bpc$ = 144
?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z PROC ; stbi__load_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1118
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1119
	mov	r8d, 12
	xor	edx, edx
	mov	rcx, QWORD PTR ri$[rsp]
	call	memset
; Line 1120
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 8
; Line 1121
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 1122
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax+4], 0
; Line 1127
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_test@@YAHPEAUstbi__context@@@Z ; stbi__png_test
	test	eax, eax
	je	SHORT $LN2@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__png_load
	jmp	$LN1@stbi__load
$LN2@stbi__load:
; Line 1130
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_test@@YAHPEAUstbi__context@@@Z ; stbi__bmp_test
	test	eax, eax
	je	SHORT $LN3@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__bmp_load
	jmp	$LN1@stbi__load
$LN3@stbi__load:
; Line 1133
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test@@YAHPEAUstbi__context@@@Z ; stbi__gif_test
	test	eax, eax
	je	SHORT $LN4@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__gif_load
	jmp	$LN1@stbi__load
$LN4@stbi__load:
; Line 1136
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_test@@YAHPEAUstbi__context@@@Z ; stbi__psd_test
	test	eax, eax
	je	SHORT $LN5@stbi__load
	mov	eax, DWORD PTR bpc$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ; stbi__psd_load
	jmp	$LN1@stbi__load
$LN5@stbi__load:
; Line 1141
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_test@@YAHPEAUstbi__context@@@Z ; stbi__pic_test
	test	eax, eax
	je	SHORT $LN6@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__pic_load
	jmp	$LN1@stbi__load
$LN6@stbi__load:
; Line 1148
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z ; stbi__jpeg_test
	test	eax, eax
	je	SHORT $LN7@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__jpeg_load
	jmp	$LN1@stbi__load
$LN7@stbi__load:
; Line 1151
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_test@@YAHPEAUstbi__context@@@Z ; stbi__pnm_test
	test	eax, eax
	je	SHORT $LN8@stbi__load
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__pnm_load
	jmp	$LN1@stbi__load
$LN8@stbi__load:
; Line 1155
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	je	SHORT $LN9@stbi__load
; Line 1156
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__hdr_load
	mov	QWORD PTR hdr$1[rsp], rax
; Line 1157
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN12@stbi__load
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR tv185[rsp], eax
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv185[rsp], eax
$LN13@stbi__load:
	mov	r9d, DWORD PTR tv185[rsp]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR hdr$1[rsp]
	call	?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z	; stbi__hdr_to_ldr
	jmp	SHORT $LN1@stbi__load
$LN9@stbi__load:
; Line 1163
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_test@@YAHPEAUstbi__context@@@Z ; stbi__tga_test
	test	eax, eax
	je	SHORT $LN10@stbi__load
; Line 1164
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__tga_load
	jmp	SHORT $LN1@stbi__load
$LN10@stbi__load:
; Line 1167
	lea	rcx, OFFSET FLAT:$SG145891
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__load
	mov	DWORD PTR tv203[rsp], 0
	jmp	SHORT $LN15@stbi__load
$LN14@stbi__load:
	mov	DWORD PTR tv203[rsp], 0
$LN15@stbi__load:
	movsxd	rax, DWORD PTR tv203[rsp]
$LN1@stbi__load:
; Line 1168
	add	rsp, 88					; 00000058H
	ret	0
?stbi__load_main@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ENDP ; stbi__load_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
i$ = 36
z$1 = 40
z$2 = 44
tv75 = 48
n$ = 52
output$ = 56
tv94 = 64
data$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z PROC			; stbi__hdr_to_ldr
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1865
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1868
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN8@stbi__hdr_:
; Line 1869
	xor	r9d, r9d
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR output$[rsp], rax
; Line 1870
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG146524
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__hdr_
	mov	DWORD PTR tv75[rsp], 0
	jmp	SHORT $LN19@stbi__hdr_
$LN18@stbi__hdr_:
	mov	DWORD PTR tv75[rsp], 0
$LN19@stbi__hdr_:
	movsxd	rax, DWORD PTR tv75[rsp]
	jmp	$LN1@stbi__hdr_
$LN9@stbi__hdr_:
; Line 1872
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN10@stbi__hdr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN11@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN11@stbi__hdr_:
; Line 1873
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__hdr_
$LN2@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__hdr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__hdr_
; Line 1874
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__hdr_
$LN5@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN6@stbi__hdr_
; Line 1875
	vcvtss2sd xmm0, xmm0, DWORD PTR ?stbi__h2l_gamma_i@@3MA
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax*4]
	vmulss	xmm1, xmm1, DWORD PTR ?stbi__h2l_scale_i@@3MA
	vcvtss2sd xmm1, xmm1, xmm1
	vmovsd	QWORD PTR tv94[rsp], xmm1
	vmovupd	xmm1, xmm0
	vmovsd	xmm0, QWORD PTR tv94[rsp]
	call	pow
	vcvtsd2ss xmm0, xmm0, xmm0
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR z$1[rsp], xmm0
; Line 1876
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR z$1[rsp]
	jbe	SHORT $LN12@stbi__hdr_
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR z$1[rsp], xmm0
$LN12@stbi__hdr_:
; Line 1877
	vmovss	xmm0, DWORD PTR z$1[rsp]
	vcomiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN13@stbi__hdr_
	vmovss	xmm0, DWORD PTR __real@437f0000
	vmovss	DWORD PTR z$1[rsp], xmm0
$LN13@stbi__hdr_:
; Line 1878
	vcvttss2si eax, DWORD PTR z$1[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 1879
	jmp	$LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 1880
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN14@stbi__hdr_
; Line 1881
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*4]
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR z$2[rsp], xmm0
; Line 1882
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR z$2[rsp]
	jbe	SHORT $LN15@stbi__hdr_
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR z$2[rsp], xmm0
$LN15@stbi__hdr_:
; Line 1883
	vmovss	xmm0, DWORD PTR z$2[rsp]
	vcomiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN16@stbi__hdr_
	vmovss	xmm0, DWORD PTR __real@437f0000
	vmovss	DWORD PTR z$2[rsp], xmm0
$LN16@stbi__hdr_:
; Line 1884
	vcvttss2si eax, DWORD PTR z$2[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR comp$[rsp]
	add	ecx, DWORD PTR k$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN14@stbi__hdr_:
; Line 1886
	jmp	$LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 1887
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1888
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__hdr_:
; Line 1889
	add	rsp, 88					; 00000058H
	ret	0
?stbi__hdr_to_ldr@@YAPEAEPEAMHHH@Z ENDP			; stbi__hdr_to_ldr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
k$ = 52
n$ = 56
tv76 = 60
output$ = 64
tv134 = 72
data$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z PROC			; stbi__ldr_to_hdr
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1839
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1842
	cmp	QWORD PTR data$[rsp], 0
	jne	SHORT $LN11@stbi__ldr_
	xor	eax, eax
	jmp	$LN1@stbi__ldr_
$LN11@stbi__ldr_:
; Line 1843
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR comp$[rsp]
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR output$[rsp], rax
; Line 1844
	cmp	QWORD PTR output$[rsp], 0
	jne	SHORT $LN12@stbi__ldr_
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG146492
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__ldr_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN18@stbi__ldr_
$LN17@stbi__ldr_:
	mov	DWORD PTR tv76[rsp], 0
$LN18@stbi__ldr_:
	movsxd	rax, DWORD PTR tv76[rsp]
	jmp	$LN1@stbi__ldr_
$LN12@stbi__ldr_:
; Line 1846
	mov	eax, DWORD PTR comp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN13@stbi__ldr_
	mov	eax, DWORD PTR comp$[rsp]
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN14@stbi__ldr_
$LN13@stbi__ldr_:
	mov	eax, DWORD PTR comp$[rsp]
	dec	eax
	mov	DWORD PTR n$[rsp], eax
$LN14@stbi__ldr_:
; Line 1847
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__ldr_
$LN2@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__ldr_
; Line 1848
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN7@stbi__ldr_
$LN5@stbi__ldr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN7@stbi__ldr_:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	SHORT $LN6@stbi__ldr_
; Line 1849
	vcvtss2sd xmm0, xmm0, DWORD PTR ?stbi__l2h_gamma@@3MA
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm1, xmm1, eax
	vdivss	xmm1, xmm1, DWORD PTR __real@437f0000
	vcvtss2sd xmm1, xmm1, xmm1
	vmovsd	QWORD PTR tv134[rsp], xmm1
	vmovupd	xmm1, xmm0
	vmovsd	xmm0, QWORD PTR tv134[rsp]
	call	pow
	vcvtss2sd xmm1, xmm1, DWORD PTR ?stbi__l2h_scale@@3MA
	vmulsd	xmm0, xmm0, xmm1
	vcvtsd2ss xmm0, xmm0, xmm0
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR k$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
; Line 1850
	jmp	$LN5@stbi__ldr_
$LN6@stbi__ldr_:
; Line 1851
	jmp	$LN2@stbi__ldr_
$LN3@stbi__ldr_:
; Line 1852
	mov	eax, DWORD PTR comp$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jge	SHORT $LN15@stbi__ldr_
; Line 1853
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__ldr_
$LN8@stbi__ldr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__ldr_:
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbi__ldr_
; Line 1854
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@437f0000
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR comp$[rsp]
	add	eax, DWORD PTR n$[rsp]
	cdqe
	mov	rcx, QWORD PTR output$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
; Line 1855
	jmp	SHORT $LN8@stbi__ldr_
$LN9@stbi__ldr_:
$LN15@stbi__ldr_:
; Line 1857
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_free
; Line 1858
	mov	rax, QWORD PTR output$[rsp]
$LN1@stbi__ldr_:
; Line 1859
	add	rsp, 88					; 00000058H
	ret	0
?stbi__ldr_to_hdr@@YAPEAMPEAEHHH@Z ENDP			; stbi__ldr_to_hdr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
?stbi__malloc_mad4@@YAPEAXHHHHH@Z PROC			; stbi__malloc_mad4
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1060
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1061
	mov	eax, DWORD PTR add$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR d$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1062
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1063
	add	rsp, 56					; 00000038H
	ret	0
?stbi__malloc_mad4@@YAPEAXHHHHH@Z ENDP			; stbi__malloc_mad4
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
c$ = 64
add$ = 72
?stbi__malloc_mad3@@YAPEAXHHHH@Z PROC			; stbi__malloc_mad3
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1053
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1054
	mov	r9d, DWORD PTR add$[rsp]
	mov	r8d, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1055
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1056
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc_mad3@@YAPEAXHHHH@Z ENDP			; stbi__malloc_mad3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
b$ = 56
add$ = 64
?stbi__malloc_mad2@@YAPEAXHHH@Z PROC			; stbi__malloc_mad2
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1046
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 40					; 00000028H
; Line 1047
	mov	r8d, DWORD PTR add$[rsp]
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mad2sizes_valid@@YAHHHH@Z	; stbi__mad2sizes_valid
	test	eax, eax
	jne	SHORT $LN2@stbi__mall
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mall
$LN2@stbi__mall:
; Line 1048
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	add	eax, DWORD PTR add$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
$LN1@stbi__mall:
; Line 1049
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc_mad2@@YAPEAXHHH@Z ENDP			; stbi__malloc_mad2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv86 = 32
a$ = 64
b$ = 72
c$ = 80
d$ = 88
add$ = 96
?stbi__mad4sizes_valid@@YAHHHHHH@Z PROC			; stbi__mad4sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1037
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1038
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR d$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	imul	eax, DWORD PTR d$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad4
	mov	DWORD PTR tv86[rsp], 1
	jmp	SHORT $LN4@stbi__mad4
$LN3@stbi__mad4:
	mov	DWORD PTR tv86[rsp], 0
$LN4@stbi__mad4:
	mov	eax, DWORD PTR tv86[rsp]
; Line 1040
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad4sizes_valid@@YAHHHHHH@Z ENDP			; stbi__mad4sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 32
a$ = 64
b$ = 72
c$ = 80
add$ = 88
?stbi__mad3sizes_valid@@YAHHHHH@Z PROC			; stbi__mad3sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1029
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1030
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR c$[rsp]
	mov	ecx, eax
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	imul	eax, DWORD PTR c$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad3
	mov	DWORD PTR tv79[rsp], 1
	jmp	SHORT $LN4@stbi__mad3
$LN3@stbi__mad3:
	mov	DWORD PTR tv79[rsp], 0
$LN4@stbi__mad3:
	mov	eax, DWORD PTR tv79[rsp]
; Line 1032
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad3sizes_valid@@YAHHHHH@Z ENDP			; stbi__mad3sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 32
a$ = 64
b$ = 72
add$ = 80
?stbi__mad2sizes_valid@@YAHHHH@Z PROC			; stbi__mad2sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1022
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 1023
	mov	edx, DWORD PTR b$[rsp]
	mov	ecx, DWORD PTR a$[rsp]
	call	?stbi__mul2sizes_valid@@YAHHH@Z		; stbi__mul2sizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	eax, DWORD PTR a$[rsp]
	imul	eax, DWORD PTR b$[rsp]
	mov	edx, DWORD PTR add$[rsp]
	mov	ecx, eax
	call	?stbi__addsizes_valid@@YAHHH@Z		; stbi__addsizes_valid
	test	eax, eax
	je	SHORT $LN3@stbi__mad2
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN4@stbi__mad2
$LN3@stbi__mad2:
	mov	DWORD PTR tv73[rsp], 0
$LN4@stbi__mad2:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1024
	add	rsp, 56					; 00000038H
	ret	0
?stbi__mad2sizes_valid@@YAHHHH@Z ENDP			; stbi__mad2sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 0
a$ = 32
b$ = 40
?stbi__mul2sizes_valid@@YAHHH@Z PROC			; stbi__mul2sizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1012
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1013
	cmp	DWORD PTR a$[rsp], 0
	jl	SHORT $LN3@stbi__mul2
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__mul2
$LN3@stbi__mul2:
	xor	eax, eax
	jmp	SHORT $LN1@stbi__mul2
$LN2@stbi__mul2:
; Line 1014
	cmp	DWORD PTR b$[rsp], 0
	jne	SHORT $LN4@stbi__mul2
	mov	eax, 1
	jmp	SHORT $LN1@stbi__mul2
$LN4@stbi__mul2:
; Line 1016
	mov	eax, 2147483647				; 7fffffffH
	cdq
	idiv	DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN6@stbi__mul2
	mov	DWORD PTR tv69[rsp], 1
	jmp	SHORT $LN7@stbi__mul2
$LN6@stbi__mul2:
	mov	DWORD PTR tv69[rsp], 0
$LN7@stbi__mul2:
	mov	eax, DWORD PTR tv69[rsp]
$LN1@stbi__mul2:
; Line 1017
	add	rsp, 24
	ret	0
?stbi__mul2sizes_valid@@YAHHH@Z ENDP			; stbi__mul2sizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
a$ = 32
b$ = 40
?stbi__addsizes_valid@@YAHHH@Z PROC			; stbi__addsizes_valid
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1000
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
; Line 1001
	cmp	DWORD PTR b$[rsp], 0
	jge	SHORT $LN2@stbi__adds
	xor	eax, eax
	jmp	SHORT $LN1@stbi__adds
$LN2@stbi__adds:
; Line 1006
	mov	eax, 2147483647				; 7fffffffH
	sub	eax, DWORD PTR b$[rsp]
	cmp	DWORD PTR a$[rsp], eax
	jg	SHORT $LN4@stbi__adds
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN5@stbi__adds
$LN4@stbi__adds:
	mov	DWORD PTR tv67[rsp], 0
$LN5@stbi__adds:
	mov	eax, DWORD PTR tv67[rsp]
$LN1@stbi__adds:
; Line 1007
	add	rsp, 24
	ret	0
?stbi__addsizes_valid@@YAHHH@Z ENDP			; stbi__addsizes_valid
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
size$ = 48
?stbi__malloc@@YAPEAX_K@Z PROC				; stbi__malloc
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 983
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 984
	mov	rcx, QWORD PTR size$[rsp]
	call	QWORD PTR __imp_malloc
; Line 985
	add	rsp, 40					; 00000028H
	ret	0
?stbi__malloc@@YAPEAX_K@Z ENDP				; stbi__malloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
str$ = 8
?stbi__err@@YAHPEBD@Z PROC				; stbi__err
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 976
	mov	QWORD PTR [rsp+8], rcx
; Line 977
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR str$[rsp]
	mov	QWORD PTR [rax+rcx], rdx
; Line 978
	xor	eax, eax
; Line 979
	ret	0
?stbi__err@@YAHPEBD@Z ENDP				; stbi__err
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__pnm_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7534
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7535
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	cmp	eax, 16
	jne	SHORT $LN2@stbi__pnm_
; Line 7536
	mov	eax, 1
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7537
	xor	eax, eax
$LN1@stbi__pnm_:
; Line 7538
	add	rsp, 40					; 00000028H
	ret	0
?stbi__pnm_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pnm_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
t$ = 33
p$ = 34
dummy$ = 36
tv81 = 40
maxv$ = 44
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__pnm_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7495
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7499
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__pnm_:
; Line 7500
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__pnm_:
; Line 7501
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__pnm_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__pnm_:
; Line 7503
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7506
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7507
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7508
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN6@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN5@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN5@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7509
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7510
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN5@stbi__pnm_:
; Line 7513
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	jne	SHORT $LN12@stbi__pnm_
	mov	DWORD PTR tv81[rsp], 3
	jmp	SHORT $LN13@stbi__pnm_
$LN12@stbi__pnm_:
	mov	DWORD PTR tv81[rsp], 1
$LN13@stbi__pnm_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv81[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7515
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR c$[rsp], al
; Line 7516
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7518
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7519
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7521
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7522
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_skip_whitespace@@YAXPEAUstbi__context@@PEAD@Z ; stbi__pnm_skip_whitespace
; Line 7524
	lea	rdx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_getinteger@@YAHPEAUstbi__context@@PEAD@Z ; stbi__pnm_getinteger
	mov	DWORD PTR maxv$[rsp], eax
; Line 7525
	cmp	DWORD PTR maxv$[rsp], 65535		; 0000ffffH
	jle	SHORT $LN7@stbi__pnm_
; Line 7526
	lea	rcx, OFFSET FLAT:$SG151645
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN8@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7527
	cmp	DWORD PTR maxv$[rsp], 255		; 000000ffH
	jle	SHORT $LN9@stbi__pnm_
; Line 7528
	mov	eax, 16
	jmp	SHORT $LN1@stbi__pnm_
	jmp	SHORT $LN10@stbi__pnm_
$LN9@stbi__pnm_:
; Line 7530
	mov	eax, 8
$LN10@stbi__pnm_:
$LN8@stbi__pnm_:
$LN1@stbi__pnm_:
; Line 7531
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__pnm_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 48
tv87 = 52
tv140 = 56
tv157 = 60
tv164 = 64
out$ = 72
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__pnm_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7429
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 7433
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 8
	mov	rcx, QWORD PTR s$[rsp]
	add	rcx, 4
	mov	rdx, QWORD PTR s$[rsp]
	mov	r9, rax
	mov	r8, rcx
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pnm_info@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__pnm_info
	mov	rcx, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7434
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN2@stbi__pnm_
; Line 7435
	xor	eax, eax
	jmp	$LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7437
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN3@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG151585
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN11@stbi__pnm_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN12@stbi__pnm_
$LN11@stbi__pnm_:
	mov	DWORD PTR tv80[rsp], 0
$LN12@stbi__pnm_:
	movsxd	rax, DWORD PTR tv80[rsp]
	jmp	$LN1@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7438
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN4@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG151587
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN13@stbi__pnm_
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN14@stbi__pnm_
$LN13@stbi__pnm_:
	mov	DWORD PTR tv87[rsp], 0
$LN14@stbi__pnm_:
	movsxd	rax, DWORD PTR tv87[rsp]
	jmp	$LN1@stbi__pnm_
$LN4@stbi__pnm_:
; Line 7440
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 7441
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 7442
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__pnm_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN5@stbi__pnm_:
; Line 7444
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN6@stbi__pnm_
; Line 7445
	lea	rcx, OFFSET FLAT:$SG151590
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN15@stbi__pnm_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN16@stbi__pnm_
$LN15@stbi__pnm_:
	mov	DWORD PTR tv140[rsp], 0
$LN16@stbi__pnm_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__pnm_
$LN6@stbi__pnm_:
; Line 7447
	mov	rax, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rax]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+8]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR out$[rsp], rax
; Line 7448
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN7@stbi__pnm_
	lea	rcx, OFFSET FLAT:$SG151592
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN17@stbi__pnm_
	mov	DWORD PTR tv157[rsp], 0
	jmp	SHORT $LN18@stbi__pnm_
$LN17@stbi__pnm_:
	mov	DWORD PTR tv157[rsp], 0
$LN18@stbi__pnm_:
	movsxd	rax, DWORD PTR tv157[rsp]
	jmp	$LN1@stbi__pnm_
$LN7@stbi__pnm_:
; Line 7449
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	imul	eax, DWORD PTR [rcx]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	mov	DWORD PTR tv164[rsp], eax
	mov	rcx, QWORD PTR ri$[rsp]
	mov	eax, DWORD PTR [rcx]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	ecx, DWORD PTR tv164[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	r8d, eax
	mov	rdx, QWORD PTR out$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 7451
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN8@stbi__pnm_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN8@stbi__pnm_
; Line 7452
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 7453
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN9@stbi__pnm_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__pnm_
$LN9@stbi__pnm_:
$LN8@stbi__pnm_:
; Line 7455
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__pnm_:
; Line 7456
	add	rsp, 88					; 00000058H
	ret	0
?stbi__pnm_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__pnm_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
p$ = 33
s$ = 64
?stbi__pnm_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__pnm_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7417
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7419
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR p$[rsp], al
; Line 7420
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR t$[rsp], al
; Line 7421
	movsx	eax, BYTE PTR p$[rsp]
	cmp	eax, 80					; 00000050H
	jne	SHORT $LN3@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 53					; 00000035H
	je	SHORT $LN2@stbi__pnm_
	movsx	eax, BYTE PTR t$[rsp]
	cmp	eax, 54					; 00000036H
	je	SHORT $LN2@stbi__pnm_
$LN3@stbi__pnm_:
; Line 7422
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7423
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pnm_
$LN2@stbi__pnm_:
; Line 7425
	mov	eax, 1
$LN1@stbi__pnm_:
; Line 7426
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pnm_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pnm_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
x$ = 56
y$ = 64
comp$ = 72
?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__gif_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7000
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 7001
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_info_raw@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__gif_info_raw
; Line 7002
	add	rsp, 40					; 00000028H
	ret	0
?stbi__gif_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__gif_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
layers$1 = 48
stride$2 = 52
out$3 = 56
u$4 = 64
out_size$5 = 72
delays_size$6 = 76
tv202 = 80
tmp$7 = 88
new_delays$8 = 96
two_back$9 = 104
g$10 = 112
__$ArrayPad$ = 35040
s$ = 35072
delays$ = 35080
x$ = 35088
y$ = 35096
z$ = 35104
comp$ = 35112
req_comp$ = 35120
?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z PROC ; stbi__load_gif_main
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6886
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 35064				; 000088f8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6887
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test@@YAHPEAUstbi__context@@@Z ; stbi__gif_test
	test	eax, eax
	je	$LN5@stbi__load
; Line 6888
	mov	DWORD PTR layers$1[rsp], 0
; Line 6889
	mov	QWORD PTR u$4[rsp], 0
; Line 6890
	mov	QWORD PTR out$3[rsp], 0
; Line 6891
	mov	QWORD PTR two_back$9[rsp], 0
; Line 6894
	mov	DWORD PTR out_size$5[rsp], 0
; Line 6895
	mov	DWORD PTR delays_size$6[rsp], 0
; Line 6900
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$10[rsp]
	call	memset
; Line 6901
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN7@stbi__load
; Line 6902
	mov	rax, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rax], 0
$LN7@stbi__load:
$LN4@stbi__load:
; Line 6906
	mov	rax, QWORD PTR two_back$9[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ; stbi__gif_load_next
	mov	QWORD PTR u$4[rsp], rax
; Line 6907
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$4[rsp], rax
	jne	SHORT $LN8@stbi__load
	mov	QWORD PTR u$4[rsp], 0
$LN8@stbi__load:
; Line 6909
	cmp	QWORD PTR u$4[rsp], 0
	je	$LN9@stbi__load
; Line 6910
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$10[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6911
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$10[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6912
	mov	eax, DWORD PTR layers$1[rsp]
	inc	eax
	mov	DWORD PTR layers$1[rsp], eax
; Line 6913
	mov	eax, DWORD PTR g$10[rsp]
	imul	eax, DWORD PTR g$10[rsp+4]
	shl	eax, 2
	mov	DWORD PTR stride$2[rsp], eax
; Line 6915
	cmp	QWORD PTR out$3[rsp], 0
	je	$LN10@stbi__load
; Line 6916
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	rdx, rax
	mov	rcx, QWORD PTR out$3[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR tmp$7[rsp], rax
; Line 6917
	cmp	QWORD PTR tmp$7[rsp], 0
	jne	SHORT $LN12@stbi__load
; Line 6918
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
	jmp	SHORT $LN13@stbi__load
$LN12@stbi__load:
; Line 6920
	mov	rax, QWORD PTR tmp$7[rsp]
	mov	QWORD PTR out$3[rsp], rax
; Line 6921
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
$LN13@stbi__load:
; Line 6924
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN14@stbi__load
; Line 6925
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	rdx, rax
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR new_delays$8[rsp], rax
; Line 6926
	cmp	QWORD PTR new_delays$8[rsp], 0
	jne	SHORT $LN15@stbi__load
; Line 6927
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN15@stbi__load:
; Line 6928
	mov	rax, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR new_delays$8[rsp]
	mov	QWORD PTR [rax], rcx
; Line 6929
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN14@stbi__load:
; Line 6931
	jmp	$LN11@stbi__load
$LN10@stbi__load:
; Line 6932
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR out$3[rsp], rax
; Line 6933
	cmp	QWORD PTR out$3[rsp], 0
	jne	SHORT $LN16@stbi__load
; Line 6934
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN16@stbi__load:
; Line 6935
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR stride$2[rsp]
	mov	DWORD PTR out_size$5[rsp], eax
; Line 6936
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN17@stbi__load
; Line 6937
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	rcx, QWORD PTR delays$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 6938
	mov	rax, QWORD PTR delays$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN18@stbi__load
; Line 6939
	mov	r8, QWORD PTR delays$[rsp]
	mov	rdx, QWORD PTR out$3[rsp]
	lea	rcx, QWORD PTR g$10[rsp]
	call	?stbi__load_gif_main_outofmem@@YAPEAXPEAUstbi__gif@@PEAEPEAPEAH@Z ; stbi__load_gif_main_outofmem
	jmp	$LN1@stbi__load
$LN18@stbi__load:
; Line 6940
	movsxd	rax, DWORD PTR layers$1[rsp]
	shl	rax, 2
	mov	DWORD PTR delays_size$6[rsp], eax
$LN17@stbi__load:
$LN11@stbi__load:
; Line 6943
	movsxd	rax, DWORD PTR stride$2[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	dec	ecx
	imul	ecx, DWORD PTR stride$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$3[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR u$4[rsp]
	call	memcpy
; Line 6944
	cmp	DWORD PTR layers$1[rsp], 2
	jl	SHORT $LN19@stbi__load
; Line 6945
	mov	eax, DWORD PTR stride$2[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR out$3[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR two_back$9[rsp], rax
$LN19@stbi__load:
; Line 6948
	cmp	QWORD PTR delays$[rsp], 0
	je	SHORT $LN20@stbi__load
; Line 6949
	mov	eax, DWORD PTR layers$1[rsp]
	dec	eax
	mov	eax, eax
	mov	rcx, QWORD PTR delays$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	edx, DWORD PTR g$10[rsp+34920]
	mov	DWORD PTR [rcx+rax*4], edx
$LN20@stbi__load:
$LN9@stbi__load:
; Line 6952
	cmp	QWORD PTR u$4[rsp], 0
	jne	$LN4@stbi__load
; Line 6955
	mov	rcx, QWORD PTR g$10[rsp+8]
	call	QWORD PTR __imp_free
; Line 6956
	mov	rcx, QWORD PTR g$10[rsp+24]
	call	QWORD PTR __imp_free
; Line 6957
	mov	rcx, QWORD PTR g$10[rsp+16]
	call	QWORD PTR __imp_free
; Line 6960
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN21@stbi__load
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN21@stbi__load
; Line 6961
	mov	eax, DWORD PTR layers$1[rsp]
	imul	eax, DWORD PTR g$10[rsp]
	mov	ecx, DWORD PTR g$10[rsp+4]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$3[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$3[rsp], rax
$LN21@stbi__load:
; Line 6963
	mov	rax, QWORD PTR z$[rsp]
	mov	ecx, DWORD PTR layers$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6964
	mov	rax, QWORD PTR out$3[rsp]
	jmp	SHORT $LN1@stbi__load
; Line 6965
	jmp	SHORT $LN6@stbi__load
$LN5@stbi__load:
; Line 6966
	lea	rcx, OFFSET FLAT:$SG151247
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN23@stbi__load
	mov	DWORD PTR tv202[rsp], 0
	jmp	SHORT $LN24@stbi__load
$LN23@stbi__load:
	mov	DWORD PTR tv202[rsp], 0
$LN24@stbi__load:
	movsxd	rax, DWORD PTR tv202[rsp]
$LN6@stbi__load:
$LN1@stbi__load:
; Line 6968
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35064				; 000088f8H
	ret	0
?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z ENDP ; stbi__load_gif_main
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
u$ = 48
g$ = 64
__$ArrayPad$ = 34992
s$ = 35024
x$ = 35032
y$ = 35040
comp$ = 35048
req_comp$ = 35056
ri$ = 35064
?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__gif_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6971
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 35016				; 000088c8H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 6972
	mov	QWORD PTR u$[rsp], 0
; Line 6974
	mov	r8d, 34928				; 00008870H
	xor	edx, edx
	lea	rcx, QWORD PTR g$[rsp]
	call	memset
; Line 6977
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR req_comp$[rsp]
	mov	r8, QWORD PTR comp$[rsp]
	lea	rdx, QWORD PTR g$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_load_next@@YAPEAEPEAUstbi__context@@PEAUstbi__gif@@PEAHHPEAE@Z ; stbi__gif_load_next
	mov	QWORD PTR u$[rsp], rax
; Line 6978
	mov	rax, QWORD PTR s$[rsp]
	cmp	QWORD PTR u$[rsp], rax
	jne	SHORT $LN2@stbi__gif_
	mov	QWORD PTR u$[rsp], 0
$LN2@stbi__gif_:
; Line 6979
	cmp	QWORD PTR u$[rsp], 0
	je	SHORT $LN3@stbi__gif_
; Line 6980
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR g$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6981
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 6985
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN5@stbi__gif_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN5@stbi__gif_
; Line 6986
	mov	eax, DWORD PTR g$[rsp+4]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR g$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR u$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR u$[rsp], rax
$LN5@stbi__gif_:
	jmp	SHORT $LN4@stbi__gif_
$LN3@stbi__gif_:
; Line 6987
	cmp	QWORD PTR g$[rsp+8], 0
	je	SHORT $LN6@stbi__gif_
; Line 6989
	mov	rcx, QWORD PTR g$[rsp+8]
	call	QWORD PTR __imp_free
$LN6@stbi__gif_:
$LN4@stbi__gif_:
; Line 6993
	mov	rcx, QWORD PTR g$[rsp+24]
	call	QWORD PTR __imp_free
; Line 6994
	mov	rcx, QWORD PTR g$[rsp+16]
	call	QWORD PTR __imp_free
; Line 6996
	mov	rax, QWORD PTR u$[rsp]
; Line 6997
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 35016				; 000088c8H
	ret	0
?stbi__gif_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__gif_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__gif_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__gif_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6513
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6514
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__gif_test_raw@@YAHPEAUstbi__context@@@Z ; stbi__gif_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 6515
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6516
	mov	eax, DWORD PTR r$[rsp]
; Line 6517
	add	rsp, 56					; 00000038H
	ret	0
?stbi__gif_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__gif_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
num_packets$ = 32
act_comp$ = 36
dummy$ = 40
tv154 = 44
packet$1 = 48
chained$ = 56
tv95 = 64
packets$ = 72
__$ArrayPad$ = 104
s$ = 128
x$ = 136
y$ = 144
comp$ = 152
?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__pic_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7346
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7347
	mov	DWORD PTR act_comp$[rsp], 0
	mov	DWORD PTR num_packets$[rsp], 0
; Line 7350
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN5@stbi__pic_:
; Line 7351
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN6@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN6@stbi__pic_:
; Line 7352
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN7@stbi__pic_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN7@stbi__pic_:
; Line 7354
	lea	rdx, OFFSET FLAT:$SG151546
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_is4@@YAHPEAUstbi__context@@PEBD@Z ; stbi__pic_is4
	test	eax, eax
	jne	SHORT $LN8@stbi__pic_
; Line 7355
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7356
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 7359
	mov	edx, 88					; 00000058H
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7361
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7362
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7363
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN9@stbi__pic_
; Line 7364
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7365
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 7367
	mov	rax, QWORD PTR x$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN10@stbi__pic_
	mov	eax, 268435456				; 10000000H
	cdq
	mov	rcx, QWORD PTR x$[rsp]
	idiv	DWORD PTR [rcx]
	mov	rcx, QWORD PTR y$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jge	SHORT $LN10@stbi__pic_
; Line 7368
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7369
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 7372
	mov	edx, 8
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN4@stbi__pic_:
; Line 7377
	movsxd	rax, DWORD PTR num_packets$[rsp]
	cmp	rax, 10
	jne	SHORT $LN11@stbi__pic_
; Line 7378
	xor	eax, eax
	jmp	$LN1@stbi__pic_
$LN11@stbi__pic_:
; Line 7380
	movsxd	rax, DWORD PTR num_packets$[rsp]
	imul	rax, rax, 3
	lea	rax, QWORD PTR packets$[rsp+rax]
	mov	QWORD PTR tv95[rsp], rax
	mov	eax, DWORD PTR num_packets$[rsp]
	inc	eax
	mov	DWORD PTR num_packets$[rsp], eax
	mov	rax, QWORD PTR tv95[rsp]
	mov	QWORD PTR packet$1[rsp], rax
; Line 7381
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR chained$[rsp], eax
; Line 7382
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx], al
; Line 7383
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+1], al
; Line 7384
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR packet$1[rsp]
	mov	BYTE PTR [rcx+2], al
; Line 7385
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax+2]
	mov	ecx, DWORD PTR act_comp$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR act_comp$[rsp], eax
; Line 7387
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN12@stbi__pic_
; Line 7388
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7389
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN12@stbi__pic_:
; Line 7391
	mov	rax, QWORD PTR packet$1[rsp]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 8
	je	SHORT $LN13@stbi__pic_
; Line 7392
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7393
	xor	eax, eax
	jmp	SHORT $LN1@stbi__pic_
$LN13@stbi__pic_:
; Line 7395
	cmp	DWORD PTR chained$[rsp], 0
	jne	$LN4@stbi__pic_
; Line 7397
	mov	eax, DWORD PTR act_comp$[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN15@stbi__pic_
	mov	DWORD PTR tv154[rsp], 4
	jmp	SHORT $LN16@stbi__pic_
$LN15@stbi__pic_:
	mov	DWORD PTR tv154[rsp], 3
$LN16@stbi__pic_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv154[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7399
	mov	eax, 1
$LN1@stbi__pic_:
; Line 7400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	ret	0
?stbi__pic_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__pic_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
y$ = 48
x$ = 52
result$ = 56
i$ = 64
tv76 = 68
tv82 = 72
tv90 = 76
tv133 = 80
tv147 = 84
internal_comp$ = 88
s$ = 112
px$ = 120
py$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__pic_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6423
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 6428
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN5@stbi__pic_
	lea	rax, QWORD PTR internal_comp$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN5@stbi__pic_:
; Line 6430
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__pic_
$LN2@stbi__pic_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__pic_:
	cmp	DWORD PTR i$[rsp], 92			; 0000005cH
	jge	SHORT $LN3@stbi__pic_
; Line 6431
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	jmp	SHORT $LN2@stbi__pic_
$LN3@stbi__pic_:
; Line 6433
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR x$[rsp], eax
; Line 6434
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR y$[rsp], eax
; Line 6436
	cmp	DWORD PTR y$[rsp], 16777216		; 01000000H
	jle	SHORT $LN6@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150894
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN14@stbi__pic_
	mov	DWORD PTR tv76[rsp], 0
	jmp	SHORT $LN15@stbi__pic_
$LN14@stbi__pic_:
	mov	DWORD PTR tv76[rsp], 0
$LN15@stbi__pic_:
	movsxd	rax, DWORD PTR tv76[rsp]
	jmp	$LN1@stbi__pic_
$LN6@stbi__pic_:
; Line 6437
	cmp	DWORD PTR x$[rsp], 16777216		; 01000000H
	jle	SHORT $LN7@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150896
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN16@stbi__pic_
	mov	DWORD PTR tv82[rsp], 0
	jmp	SHORT $LN17@stbi__pic_
$LN16@stbi__pic_:
	mov	DWORD PTR tv82[rsp], 0
$LN17@stbi__pic_:
	movsxd	rax, DWORD PTR tv82[rsp]
	jmp	$LN1@stbi__pic_
$LN7@stbi__pic_:
; Line 6439
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__at_eof@@YAHPEAUstbi__context@@@Z	; stbi__at_eof
	test	eax, eax
	je	SHORT $LN8@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150898
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN18@stbi__pic_
	mov	DWORD PTR tv90[rsp], 0
	jmp	SHORT $LN19@stbi__pic_
$LN18@stbi__pic_:
	mov	DWORD PTR tv90[rsp], 0
$LN19@stbi__pic_:
	movsxd	rax, DWORD PTR tv90[rsp]
	jmp	$LN1@stbi__pic_
$LN8@stbi__pic_:
; Line 6440
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN9@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150900
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN20@stbi__pic_
	mov	DWORD PTR tv133[rsp], 0
	jmp	SHORT $LN21@stbi__pic_
$LN20@stbi__pic_:
	mov	DWORD PTR tv133[rsp], 0
$LN21@stbi__pic_:
	movsxd	rax, DWORD PTR tv133[rsp]
	jmp	$LN1@stbi__pic_
$LN9@stbi__pic_:
; Line 6442
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 6443
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 6444
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
; Line 6447
	xor	r9d, r9d
	mov	r8d, 4
	mov	edx, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR result$[rsp], rax
; Line 6448
	cmp	QWORD PTR result$[rsp], 0
	jne	SHORT $LN10@stbi__pic_
	lea	rcx, OFFSET FLAT:$SG150902
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN22@stbi__pic_
	mov	DWORD PTR tv147[rsp], 0
	jmp	SHORT $LN23@stbi__pic_
$LN22@stbi__pic_:
	mov	DWORD PTR tv147[rsp], 0
$LN23@stbi__pic_:
	movsxd	rax, DWORD PTR tv147[rsp]
	jmp	$LN1@stbi__pic_
$LN10@stbi__pic_:
; Line 6449
	mov	eax, DWORD PTR x$[rsp]
	imul	eax, DWORD PTR y$[rsp]
	shl	eax, 2
	cdqe
	mov	r8, rax
	mov	edx, 255				; 000000ffH
	mov	rcx, QWORD PTR result$[rsp]
	call	memset
; Line 6451
	mov	rax, QWORD PTR result$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_load_core@@YAPEAEPEAUstbi__context@@HHPEAHPEAE@Z ; stbi__pic_load_core
	test	rax, rax
	jne	SHORT $LN11@stbi__pic_
; Line 6452
	mov	rcx, QWORD PTR result$[rsp]
	call	QWORD PTR __imp_free
; Line 6453
	mov	QWORD PTR result$[rsp], 0
$LN11@stbi__pic_:
; Line 6455
	mov	rax, QWORD PTR px$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6456
	mov	rax, QWORD PTR py$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6457
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN12@stbi__pic_
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR req_comp$[rsp], eax
$LN12@stbi__pic_:
; Line 6458
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR x$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR result$[rsp], rax
; Line 6460
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__pic_:
; Line 6461
	add	rsp, 104				; 00000068H
	ret	0
?stbi__pic_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__pic_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__pic_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__pic_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6464
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6465
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__pic_test_core@@YAHPEAUstbi__context@@@Z ; stbi__pic_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 6466
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6467
	mov	eax, DWORD PTR r$[rsp]
; Line 6468
	add	rsp, 56					; 00000038H
	ret	0
?stbi__pic_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__pic_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
token$ = 32
dummy$ = 40
valid$ = 44
buffer$ = 48
__$ArrayPad$ = 1072
s$ = 1104
x$ = 1112
y$ = 1120
comp$ = 1128
?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__hdr_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7212
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1096				; 00000448H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7215
	mov	DWORD PTR valid$[rsp], 0
; Line 7218
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN7@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN7@stbi__hdr_:
; Line 7219
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN8@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN8@stbi__hdr_:
; Line 7220
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN9@stbi__hdr_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN9@stbi__hdr_:
; Line 7222
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	test	eax, eax
	jne	SHORT $LN10@stbi__hdr_
; Line 7223
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7224
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN10@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7228
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7229
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN11@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7230
	lea	rdx, OFFSET FLAT:$SG151477
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN12@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN12@stbi__hdr_:
; Line 7231
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7233
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN13@stbi__hdr_
; Line 7234
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7235
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN13@stbi__hdr_:
; Line 7237
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7238
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG151480
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN14@stbi__hdr_
; Line 7239
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7240
	xor	eax, eax
	jmp	$LN1@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7242
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7243
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strtol
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi__hdr_:
; Line 7244
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7245
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG151482
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN15@stbi__hdr_
; Line 7246
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7247
	xor	eax, eax
	jmp	SHORT $LN1@stbi__hdr_
$LN15@stbi__hdr_:
; Line 7249
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7250
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strtol
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7251
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
; Line 7252
	mov	eax, 1
$LN1@stbi__hdr_:
; Line 7253
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1096				; 00000448H
	ret	0
?stbi__hdr_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__hdr_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
count$ = 48
i$ = 52
width$ = 56
j$ = 60
value$ = 64
len$ = 68
z$ = 72
token$ = 80
height$ = 88
scanline$ = 96
k$ = 104
rgbe$1 = 108
hdr_data$ = 112
nleft$2 = 120
tv78 = 124
valid$ = 128
tv95 = 132
tv140 = 136
tv158 = 140
tv169 = 144
tv175 = 148
tv189 = 152
tv201 = 156
c1$ = 160
c2$ = 164
tv264 = 168
tv276 = 172
tv298 = 176
tv316 = 180
rgbe$3 = 184
headerToken$ = 192
buffer$ = 208
__$ArrayPad$ = 1232
s$ = 1264
x$ = 1272
y$ = 1280
comp$ = 1288
req_comp$ = 1296
ri$ = 1304
?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__hdr_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7081
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1256				; 000004e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7084
	mov	DWORD PTR valid$[rsp], 0
; Line 7095
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR headerToken$[rsp], rax
; Line 7096
	lea	rdx, OFFSET FLAT:$SG151413
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
	lea	rdx, OFFSET FLAT:$SG151414
	mov	rcx, QWORD PTR headerToken$[rsp]
	call	strcmp
	test	eax, eax
	je	SHORT $LN30@stbi__hdr_
; Line 7097
	lea	rcx, OFFSET FLAT:$SG151415
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN56@stbi__hdr_
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN57@stbi__hdr_
$LN56@stbi__hdr_:
	mov	DWORD PTR tv78[rsp], 0
$LN57@stbi__hdr_:
	movsxd	rax, DWORD PTR tv78[rsp]
	jmp	$LN1@stbi__hdr_
$LN30@stbi__hdr_:
$LN2@stbi__hdr_:
; Line 7101
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7102
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN31@stbi__hdr_
	jmp	SHORT $LN3@stbi__hdr_
$LN31@stbi__hdr_:
; Line 7103
	lea	rdx, OFFSET FLAT:$SG151418
	mov	rcx, QWORD PTR token$[rsp]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN32@stbi__hdr_
	mov	DWORD PTR valid$[rsp], 1
$LN32@stbi__hdr_:
; Line 7104
	jmp	SHORT $LN2@stbi__hdr_
$LN3@stbi__hdr_:
; Line 7106
	cmp	DWORD PTR valid$[rsp], 0
	jne	SHORT $LN33@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG151420
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN58@stbi__hdr_
	mov	DWORD PTR tv95[rsp], 0
	jmp	SHORT $LN59@stbi__hdr_
$LN58@stbi__hdr_:
	mov	DWORD PTR tv95[rsp], 0
$LN59@stbi__hdr_:
	movsxd	rax, DWORD PTR tv95[rsp]
	jmp	$LN1@stbi__hdr_
$LN33@stbi__hdr_:
; Line 7110
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_gettoken@@YAPEADPEAUstbi__context@@PEAD@Z ; stbi__hdr_gettoken
	mov	QWORD PTR token$[rsp], rax
; Line 7111
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG151422
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN34@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG151423
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN60@stbi__hdr_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN61@stbi__hdr_
$LN60@stbi__hdr_:
	mov	DWORD PTR tv140[rsp], 0
$LN61@stbi__hdr_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__hdr_
$LN34@stbi__hdr_:
; Line 7112
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7113
	mov	r8d, 10
	lea	rdx, QWORD PTR token$[rsp]
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strtol
	mov	DWORD PTR height$[rsp], eax
$LN5@stbi__hdr_:
; Line 7114
	mov	rax, QWORD PTR token$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN6@stbi__hdr_
	mov	rax, QWORD PTR token$[rsp]
	inc	rax
	mov	QWORD PTR token$[rsp], rax
	jmp	SHORT $LN5@stbi__hdr_
$LN6@stbi__hdr_:
; Line 7115
	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG151425
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strncmp
	test	eax, eax
	je	SHORT $LN35@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG151426
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__hdr_
	mov	DWORD PTR tv158[rsp], 0
	jmp	SHORT $LN63@stbi__hdr_
$LN62@stbi__hdr_:
	mov	DWORD PTR tv158[rsp], 0
$LN63@stbi__hdr_:
	movsxd	rax, DWORD PTR tv158[rsp]
	jmp	$LN1@stbi__hdr_
$LN35@stbi__hdr_:
; Line 7116
	mov	rax, QWORD PTR token$[rsp]
	add	rax, 3
	mov	QWORD PTR token$[rsp], rax
; Line 7117
	mov	r8d, 10
	xor	edx, edx
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp_strtol
	mov	DWORD PTR width$[rsp], eax
; Line 7119
	cmp	DWORD PTR height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN36@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG151428
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__hdr_
	mov	DWORD PTR tv169[rsp], 0
	jmp	SHORT $LN65@stbi__hdr_
$LN64@stbi__hdr_:
	mov	DWORD PTR tv169[rsp], 0
$LN65@stbi__hdr_:
	movsxd	rax, DWORD PTR tv169[rsp]
	jmp	$LN1@stbi__hdr_
$LN36@stbi__hdr_:
; Line 7120
	cmp	DWORD PTR width$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__hdr_
	lea	rcx, OFFSET FLAT:$SG151430
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN66@stbi__hdr_
	mov	DWORD PTR tv175[rsp], 0
	jmp	SHORT $LN67@stbi__hdr_
$LN66@stbi__hdr_:
	mov	DWORD PTR tv175[rsp], 0
$LN67@stbi__hdr_:
	movsxd	rax, DWORD PTR tv175[rsp]
	jmp	$LN1@stbi__hdr_
$LN37@stbi__hdr_:
; Line 7122
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7123
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 7125
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN38@stbi__hdr_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
$LN38@stbi__hdr_:
; Line 7126
	cmp	DWORD PTR req_comp$[rsp], 0
	jne	SHORT $LN39@stbi__hdr_
	mov	DWORD PTR req_comp$[rsp], 3
$LN39@stbi__hdr_:
; Line 7128
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__mad4sizes_valid@@YAHHHHHH@Z	; stbi__mad4sizes_valid
	test	eax, eax
	jne	SHORT $LN40@stbi__hdr_
; Line 7129
	lea	rcx, OFFSET FLAT:$SG151434
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__hdr_
	mov	DWORD PTR tv189[rsp], 0
	jmp	SHORT $LN69@stbi__hdr_
$LN68@stbi__hdr_:
	mov	DWORD PTR tv189[rsp], 0
$LN69@stbi__hdr_:
	movsxd	rax, DWORD PTR tv189[rsp]
	jmp	$LN1@stbi__hdr_
$LN40@stbi__hdr_:
; Line 7132
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR height$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__malloc_mad4@@YAPEAXHHHHH@Z	; stbi__malloc_mad4
	mov	QWORD PTR hdr_data$[rsp], rax
; Line 7133
	cmp	QWORD PTR hdr_data$[rsp], 0
	jne	SHORT $LN41@stbi__hdr_
; Line 7134
	lea	rcx, OFFSET FLAT:$SG151436
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__hdr_
	mov	DWORD PTR tv201[rsp], 0
	jmp	SHORT $LN71@stbi__hdr_
$LN70@stbi__hdr_:
	mov	DWORD PTR tv201[rsp], 0
$LN71@stbi__hdr_:
	movsxd	rax, DWORD PTR tv201[rsp]
	jmp	$LN1@stbi__hdr_
$LN41@stbi__hdr_:
; Line 7138
	cmp	DWORD PTR width$[rsp], 8
	jl	SHORT $LN44@stbi__hdr_
	cmp	DWORD PTR width$[rsp], 32768		; 00008000H
	jl	$LN42@stbi__hdr_
$LN44@stbi__hdr_:
; Line 7140
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN9@stbi__hdr_
$LN7@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN9@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN8@stbi__hdr_
; Line 7141
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN12@stbi__hdr_
$LN10@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN12@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN11@stbi__hdr_
$main_decode_loop$80:
; Line 7144
	mov	r8d, 4
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 7145
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR width$[rsp]
	imul	eax, DWORD PTR req_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR hdr_data$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$3[rsp]
	mov	rcx, rax
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
; Line 7146
	jmp	SHORT $LN10@stbi__hdr_
$LN11@stbi__hdr_:
; Line 7147
	jmp	$LN7@stbi__hdr_
$LN8@stbi__hdr_:
; Line 7148
	jmp	$LN43@stbi__hdr_
$LN42@stbi__hdr_:
; Line 7150
	mov	QWORD PTR scanline$[rsp], 0
; Line 7152
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN15@stbi__hdr_
$LN13@stbi__hdr_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN15@stbi__hdr_:
	mov	eax, DWORD PTR height$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN14@stbi__hdr_
; Line 7153
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c1$[rsp], eax
; Line 7154
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR c2$[rsp], eax
; Line 7155
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR len$[rsp], eax
; Line 7156
	cmp	DWORD PTR c1$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	cmp	DWORD PTR c2$[rsp], 2
	jne	SHORT $LN46@stbi__hdr_
	mov	eax, DWORD PTR len$[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN45@stbi__hdr_
$LN46@stbi__hdr_:
; Line 7160
	mov	eax, 1
	imul	rax, rax, 0
	movzx	ecx, BYTE PTR c1$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7161
	mov	eax, 1
	imul	rax, rax, 1
	movzx	ecx, BYTE PTR c2$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7162
	mov	eax, 1
	imul	rax, rax, 2
	movzx	ecx, BYTE PTR len$[rsp]
	mov	BYTE PTR rgbe$1[rsp+rax], cl
; Line 7163
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR rgbe$1[rsp+rcx], al
; Line 7164
	mov	r8d, DWORD PTR req_comp$[rsp]
	lea	rdx, QWORD PTR rgbe$1[rsp]
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
; Line 7165
	mov	DWORD PTR i$[rsp], 1
; Line 7166
	mov	DWORD PTR j$[rsp], 0
; Line 7167
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
; Line 7168
	jmp	$main_decode_loop$80
$LN45@stbi__hdr_:
; Line 7170
	mov	eax, DWORD PTR len$[rsp]
	shl	eax, 8
	mov	DWORD PTR len$[rsp], eax
; Line 7171
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	ecx, DWORD PTR len$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR len$[rsp], eax
; Line 7172
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR len$[rsp], eax
	je	SHORT $LN47@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG151443
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__hdr_
	mov	DWORD PTR tv264[rsp], 0
	jmp	SHORT $LN73@stbi__hdr_
$LN72@stbi__hdr_:
	mov	DWORD PTR tv264[rsp], 0
$LN73@stbi__hdr_:
	movsxd	rax, DWORD PTR tv264[rsp]
	jmp	$LN1@stbi__hdr_
$LN47@stbi__hdr_:
; Line 7173
	cmp	QWORD PTR scanline$[rsp], 0
	jne	SHORT $LN48@stbi__hdr_
; Line 7174
	xor	r8d, r8d
	mov	edx, 4
	mov	ecx, DWORD PTR width$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR scanline$[rsp], rax
; Line 7175
	cmp	QWORD PTR scanline$[rsp], 0
	jne	SHORT $LN49@stbi__hdr_
; Line 7176
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	QWORD PTR __imp_free
; Line 7177
	lea	rcx, OFFSET FLAT:$SG151446
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN74@stbi__hdr_
	mov	DWORD PTR tv276[rsp], 0
	jmp	SHORT $LN75@stbi__hdr_
$LN74@stbi__hdr_:
	mov	DWORD PTR tv276[rsp], 0
$LN75@stbi__hdr_:
	movsxd	rax, DWORD PTR tv276[rsp]
	jmp	$LN1@stbi__hdr_
$LN49@stbi__hdr_:
$LN48@stbi__hdr_:
; Line 7181
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN18@stbi__hdr_
$LN16@stbi__hdr_:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN18@stbi__hdr_:
	cmp	DWORD PTR k$[rsp], 4
	jge	$LN17@stbi__hdr_
; Line 7183
	mov	DWORD PTR i$[rsp], 0
$LN19@stbi__hdr_:
; Line 7184
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR width$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR nleft$2[rsp], eax
	cmp	DWORD PTR nleft$2[rsp], 0
	jle	$LN20@stbi__hdr_
; Line 7185
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR count$[rsp], al
; Line 7186
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, 128				; 00000080H
	jle	$LN50@stbi__hdr_
; Line 7188
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	BYTE PTR value$[rsp], al
; Line 7189
	movzx	eax, BYTE PTR count$[rsp]
	sub	eax, 128				; 00000080H
	mov	BYTE PTR count$[rsp], al
; Line 7190
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	SHORT $LN52@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG151450
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__hdr_
	mov	DWORD PTR tv298[rsp], 0
	jmp	SHORT $LN77@stbi__hdr_
$LN76@stbi__hdr_:
	mov	DWORD PTR tv298[rsp], 0
$LN77@stbi__hdr_:
	movsxd	rax, DWORD PTR tv298[rsp]
	jmp	$LN1@stbi__hdr_
$LN52@stbi__hdr_:
; Line 7191
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN23@stbi__hdr_
$LN21@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN23@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN22@stbi__hdr_
; Line 7192
	mov	eax, DWORD PTR k$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*4]
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	movzx	edx, BYTE PTR value$[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@stbi__hdr_
$LN22@stbi__hdr_:
; Line 7193
	jmp	$LN51@stbi__hdr_
$LN50@stbi__hdr_:
; Line 7195
	movzx	eax, BYTE PTR count$[rsp]
	cmp	eax, DWORD PTR nleft$2[rsp]
	jle	SHORT $LN53@stbi__hdr_
	mov	rcx, QWORD PTR hdr_data$[rsp]
	call	QWORD PTR __imp_free
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG151452
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__hdr_
	mov	DWORD PTR tv316[rsp], 0
	jmp	SHORT $LN79@stbi__hdr_
$LN78@stbi__hdr_:
	mov	DWORD PTR tv316[rsp], 0
$LN79@stbi__hdr_:
	movsxd	rax, DWORD PTR tv316[rsp]
	jmp	$LN1@stbi__hdr_
$LN53@stbi__hdr_:
; Line 7196
	mov	DWORD PTR z$[rsp], 0
	jmp	SHORT $LN26@stbi__hdr_
$LN24@stbi__hdr_:
	mov	eax, DWORD PTR z$[rsp]
	inc	eax
	mov	DWORD PTR z$[rsp], eax
$LN26@stbi__hdr_:
	movzx	eax, BYTE PTR count$[rsp]
	cmp	DWORD PTR z$[rsp], eax
	jge	SHORT $LN25@stbi__hdr_
; Line 7197
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR k$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx*4]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR scanline$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN24@stbi__hdr_
$LN25@stbi__hdr_:
$LN51@stbi__hdr_:
; Line 7199
	jmp	$LN19@stbi__hdr_
$LN20@stbi__hdr_:
; Line 7200
	jmp	$LN16@stbi__hdr_
$LN17@stbi__hdr_:
; Line 7201
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN29@stbi__hdr_
$LN27@stbi__hdr_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN29@stbi__hdr_:
	mov	eax, DWORD PTR width$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN28@stbi__hdr_
; Line 7202
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR scanline$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR width$[rsp]
	add	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR req_comp$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR hdr_data$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx*4]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	rdx, rax
	call	?stbi__hdr_convert@@YAXPEAMPEAEH@Z	; stbi__hdr_convert
	jmp	SHORT $LN27@stbi__hdr_
$LN28@stbi__hdr_:
; Line 7203
	jmp	$LN13@stbi__hdr_
$LN14@stbi__hdr_:
; Line 7204
	cmp	QWORD PTR scanline$[rsp], 0
	je	SHORT $LN54@stbi__hdr_
; Line 7205
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
$LN54@stbi__hdr_:
$LN43@stbi__hdr_:
; Line 7208
	mov	rax, QWORD PTR hdr_data$[rsp]
$LN1@stbi__hdr_:
; Line 7209
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1256				; 000004e8H
	ret	0
?stbi__hdr_load@@YAPEAMPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__hdr_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__hdr_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__hdr_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7020
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7021
	lea	rdx, OFFSET FLAT:$SG151284
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ; stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7022
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7023
	cmp	DWORD PTR r$[rsp], 0
	jne	SHORT $LN2@stbi__hdr_
; Line 7024
	lea	rdx, OFFSET FLAT:$SG151286
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test_core@@YAHPEAUstbi__context@@PEBD@Z ; stbi__hdr_test_core
	mov	DWORD PTR r$[rsp], eax
; Line 7025
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
$LN2@stbi__hdr_:
; Line 7027
	mov	eax, DWORD PTR r$[rsp]
; Line 7028
	add	rsp, 56					; 00000038H
	ret	0
?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__hdr_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
channelCount$ = 32
depth$ = 36
s$ = 64
?stbi__psd_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__psd_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7317
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7319
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN2@stbi__psd_
; Line 7320
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7321
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN2@stbi__psd_:
; Line 7323
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN3@stbi__psd_
; Line 7324
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7325
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN3@stbi__psd_:
; Line 7327
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7328
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7329
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN5@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN4@stbi__psd_
$LN5@stbi__psd_:
; Line 7330
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7331
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN4@stbi__psd_:
; Line 7333
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 7334
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
; Line 7335
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7336
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN6@stbi__psd_
; Line 7337
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7338
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7340
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7341
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__psd_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dummy$ = 32
channelCount$ = 36
depth$ = 40
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__psd_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7282
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7284
	cmp	QWORD PTR x$[rsp], 0
	jne	SHORT $LN2@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR x$[rsp], rax
$LN2@stbi__psd_:
; Line 7285
	cmp	QWORD PTR y$[rsp], 0
	jne	SHORT $LN3@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR y$[rsp], rax
$LN3@stbi__psd_:
; Line 7286
	cmp	QWORD PTR comp$[rsp], 0
	jne	SHORT $LN4@stbi__psd_
	lea	rax, QWORD PTR dummy$[rsp]
	mov	QWORD PTR comp$[rsp], rax
$LN4@stbi__psd_:
; Line 7287
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN5@stbi__psd_
; Line 7288
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7289
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN5@stbi__psd_:
; Line 7291
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN6@stbi__psd_
; Line 7292
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7293
	xor	eax, eax
	jmp	$LN1@stbi__psd_
$LN6@stbi__psd_:
; Line 7295
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 7296
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 7297
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN8@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN7@stbi__psd_
$LN8@stbi__psd_:
; Line 7298
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7299
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN7@stbi__psd_:
; Line 7301
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR y$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7302
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	rcx, QWORD PTR x$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 7303
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR depth$[rsp], eax
; Line 7304
	cmp	DWORD PTR depth$[rsp], 8
	je	SHORT $LN9@stbi__psd_
	cmp	DWORD PTR depth$[rsp], 16
	je	SHORT $LN9@stbi__psd_
; Line 7305
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7306
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN9@stbi__psd_:
; Line 7308
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 3
	je	SHORT $LN10@stbi__psd_
; Line 7309
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7310
	xor	eax, eax
	jmp	SHORT $LN1@stbi__psd_
$LN10@stbi__psd_:
; Line 7312
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
; Line 7313
	mov	eax, 1
$LN1@stbi__psd_:
; Line 7314
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__psd_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
channel$ = 52
h$ = 56
w$ = 60
out$ = 64
val$1 = 72
pixelCount$ = 76
channelCount$ = 80
bitdepth$ = 84
ra$2 = 88
ra$3 = 92
pixel$4 = 96
pixel$5 = 104
val$6 = 112
compression$ = 116
inv_a$7 = 120
inv_a$8 = 124
p$9 = 128
tv137 = 136
tv146 = 140
tv154 = 144
tv174 = 148
tv185 = 152
tv205 = 156
tv222 = 160
tv233 = 164
tv244 = 168
tv252 = 172
tv70 = 176
tv78 = 180
tv89 = 184
tv131 = 188
p$10 = 192
a$11 = 200
a$12 = 204
q$13 = 208
p$14 = 216
q$15 = 224
s$ = 256
x$ = 264
y$ = 272
comp$ = 280
req_comp$ = 288
ri$ = 296
bpc$ = 304
?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z PROC ; stbi__psd_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6049
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
; Line 6059
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	je	SHORT $LN32@stbi__psd_
; Line 6060
	lea	rcx, OFFSET FLAT:$SG150659
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN69@stbi__psd_
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN70@stbi__psd_
$LN69@stbi__psd_:
	mov	DWORD PTR tv70[rsp], 0
$LN70@stbi__psd_:
	movsxd	rax, DWORD PTR tv70[rsp]
	jmp	$LN1@stbi__psd_
$LN32@stbi__psd_:
; Line 6063
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 1
	je	SHORT $LN33@stbi__psd_
; Line 6064
	lea	rcx, OFFSET FLAT:$SG150661
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN71@stbi__psd_
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN72@stbi__psd_
$LN71@stbi__psd_:
	mov	DWORD PTR tv78[rsp], 0
$LN72@stbi__psd_:
	movsxd	rax, DWORD PTR tv78[rsp]
	jmp	$LN1@stbi__psd_
$LN33@stbi__psd_:
; Line 6067
	mov	edx, 6
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6070
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR channelCount$[rsp], eax
; Line 6071
	cmp	DWORD PTR channelCount$[rsp], 0
	jl	SHORT $LN35@stbi__psd_
	cmp	DWORD PTR channelCount$[rsp], 16
	jle	SHORT $LN34@stbi__psd_
$LN35@stbi__psd_:
; Line 6072
	lea	rcx, OFFSET FLAT:$SG150664
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN73@stbi__psd_
	mov	DWORD PTR tv89[rsp], 0
	jmp	SHORT $LN74@stbi__psd_
$LN73@stbi__psd_:
	mov	DWORD PTR tv89[rsp], 0
$LN74@stbi__psd_:
	movsxd	rax, DWORD PTR tv89[rsp]
	jmp	$LN1@stbi__psd_
$LN34@stbi__psd_:
; Line 6075
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR h$[rsp], eax
; Line 6076
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	DWORD PTR w$[rsp], eax
; Line 6078
	cmp	DWORD PTR h$[rsp], 16777216		; 01000000H
	jle	SHORT $LN36@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG150666
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN75@stbi__psd_
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN76@stbi__psd_
$LN75@stbi__psd_:
	mov	DWORD PTR tv131[rsp], 0
$LN76@stbi__psd_:
	movsxd	rax, DWORD PTR tv131[rsp]
	jmp	$LN1@stbi__psd_
$LN36@stbi__psd_:
; Line 6079
	cmp	DWORD PTR w$[rsp], 16777216		; 01000000H
	jle	SHORT $LN37@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG150668
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN77@stbi__psd_
	mov	DWORD PTR tv137[rsp], 0
	jmp	SHORT $LN78@stbi__psd_
$LN77@stbi__psd_:
	mov	DWORD PTR tv137[rsp], 0
$LN78@stbi__psd_:
	movsxd	rax, DWORD PTR tv137[rsp]
	jmp	$LN1@stbi__psd_
$LN37@stbi__psd_:
; Line 6082
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR bitdepth$[rsp], eax
; Line 6083
	cmp	DWORD PTR bitdepth$[rsp], 8
	je	SHORT $LN38@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	je	SHORT $LN38@stbi__psd_
; Line 6084
	lea	rcx, OFFSET FLAT:$SG150670
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN79@stbi__psd_
	mov	DWORD PTR tv146[rsp], 0
	jmp	SHORT $LN80@stbi__psd_
$LN79@stbi__psd_:
	mov	DWORD PTR tv146[rsp], 0
$LN80@stbi__psd_:
	movsxd	rax, DWORD PTR tv146[rsp]
	jmp	$LN1@stbi__psd_
$LN38@stbi__psd_:
; Line 6096
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	cmp	eax, 3
	je	SHORT $LN39@stbi__psd_
; Line 6097
	lea	rcx, OFFSET FLAT:$SG150672
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__psd_
	mov	DWORD PTR tv154[rsp], 0
	jmp	SHORT $LN82@stbi__psd_
$LN81@stbi__psd_:
	mov	DWORD PTR tv154[rsp], 0
$LN82@stbi__psd_:
	movsxd	rax, DWORD PTR tv154[rsp]
	jmp	$LN1@stbi__psd_
$LN39@stbi__psd_:
; Line 6100
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6103
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6106
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6112
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	DWORD PTR compression$[rsp], eax
; Line 6113
	cmp	DWORD PTR compression$[rsp], 1
	jle	SHORT $LN40@stbi__psd_
; Line 6114
	lea	rcx, OFFSET FLAT:$SG150674
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN83@stbi__psd_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN84@stbi__psd_
$LN83@stbi__psd_:
	mov	DWORD PTR tv174[rsp], 0
$LN84@stbi__psd_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__psd_
$LN40@stbi__psd_:
; Line 6117
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 4
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN41@stbi__psd_
; Line 6118
	lea	rcx, OFFSET FLAT:$SG150676
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN85@stbi__psd_
	mov	DWORD PTR tv185[rsp], 0
	jmp	SHORT $LN86@stbi__psd_
$LN85@stbi__psd_:
	mov	DWORD PTR tv185[rsp], 0
$LN86@stbi__psd_:
	movsxd	rax, DWORD PTR tv185[rsp]
	jmp	$LN1@stbi__psd_
$LN41@stbi__psd_:
; Line 6122
	cmp	DWORD PTR compression$[rsp], 0
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	SHORT $LN42@stbi__psd_
; Line 6123
	xor	r9d, r9d
	mov	r8d, DWORD PTR h$[rsp]
	mov	edx, DWORD PTR w$[rsp]
	mov	ecx, 8
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 6124
	mov	rax, QWORD PTR ri$[rsp]
	mov	DWORD PTR [rax], 16
; Line 6125
	jmp	SHORT $LN43@stbi__psd_
$LN42@stbi__psd_:
; Line 6126
	mov	eax, DWORD PTR w$[rsp]
	shl	eax, 2
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR out$[rsp], rax
$LN43@stbi__psd_:
; Line 6128
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN44@stbi__psd_
	lea	rcx, OFFSET FLAT:$SG150680
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN87@stbi__psd_
	mov	DWORD PTR tv205[rsp], 0
	jmp	SHORT $LN88@stbi__psd_
$LN87@stbi__psd_:
	mov	DWORD PTR tv205[rsp], 0
$LN88@stbi__psd_:
	movsxd	rax, DWORD PTR tv205[rsp]
	jmp	$LN1@stbi__psd_
$LN44@stbi__psd_:
; Line 6129
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR pixelCount$[rsp], eax
; Line 6135
	cmp	DWORD PTR compression$[rsp], 0
	je	$LN45@stbi__psd_
; Line 6146
	mov	eax, DWORD PTR h$[rsp]
	imul	eax, DWORD PTR channelCount$[rsp]
	shl	eax, 1
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 6149
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN4@stbi__psd_
$LN2@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN4@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN3@stbi__psd_
; Line 6152
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$10[rsp], rax
; Line 6153
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	SHORT $LN47@stbi__psd_
; Line 6155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__psd_
$LN5@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$10[rsp]
	add	rax, 4
	mov	QWORD PTR p$10[rsp], rax
$LN7@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__psd_
; Line 6156
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN89@stbi__psd_
	mov	DWORD PTR tv222[rsp], 255		; 000000ffH
	jmp	SHORT $LN90@stbi__psd_
$LN89@stbi__psd_:
	mov	DWORD PTR tv222[rsp], 0
$LN90@stbi__psd_:
	mov	rax, QWORD PTR p$10[rsp]
	movzx	ecx, BYTE PTR tv222[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN5@stbi__psd_
$LN6@stbi__psd_:
; Line 6157
	jmp	SHORT $LN48@stbi__psd_
$LN47@stbi__psd_:
; Line 6159
	mov	r8d, DWORD PTR pixelCount$[rsp]
	mov	rdx, QWORD PTR p$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__psd_decode_rle@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__psd_decode_rle
	test	eax, eax
	jne	SHORT $LN49@stbi__psd_
; Line 6160
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
; Line 6161
	lea	rcx, OFFSET FLAT:$SG150686
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN91@stbi__psd_
	mov	DWORD PTR tv233[rsp], 0
	jmp	SHORT $LN92@stbi__psd_
$LN91@stbi__psd_:
	mov	DWORD PTR tv233[rsp], 0
$LN92@stbi__psd_:
	movsxd	rax, DWORD PTR tv233[rsp]
	jmp	$LN1@stbi__psd_
$LN49@stbi__psd_:
$LN48@stbi__psd_:
; Line 6164
	jmp	$LN2@stbi__psd_
$LN3@stbi__psd_:
; Line 6166
	jmp	$LN46@stbi__psd_
$LN45@stbi__psd_:
; Line 6171
	mov	DWORD PTR channel$[rsp], 0
	jmp	SHORT $LN10@stbi__psd_
$LN8@stbi__psd_:
	mov	eax, DWORD PTR channel$[rsp]
	inc	eax
	mov	DWORD PTR channel$[rsp], eax
$LN10@stbi__psd_:
	cmp	DWORD PTR channel$[rsp], 4
	jge	$LN9@stbi__psd_
; Line 6172
	mov	eax, DWORD PTR channelCount$[rsp]
	cmp	DWORD PTR channel$[rsp], eax
	jl	$LN50@stbi__psd_
; Line 6174
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	$LN52@stbi__psd_
	cmp	DWORD PTR bpc$[rsp], 16
	jne	$LN52@stbi__psd_
; Line 6175
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$13[rsp], rax
; Line 6176
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN93@stbi__psd_
	mov	DWORD PTR tv244[rsp], 65535		; 0000ffffH
	jmp	SHORT $LN94@stbi__psd_
$LN93@stbi__psd_:
	mov	DWORD PTR tv244[rsp], 0
$LN94@stbi__psd_:
	movzx	eax, WORD PTR tv244[rsp]
	mov	WORD PTR val$6[rsp], ax
; Line 6177
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@stbi__psd_
$LN11@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$13[rsp]
	add	rax, 8
	mov	QWORD PTR q$13[rsp], rax
$LN13@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN12@stbi__psd_
; Line 6178
	mov	rax, QWORD PTR q$13[rsp]
	movzx	ecx, WORD PTR val$6[rsp]
	mov	WORD PTR [rax], cx
	jmp	SHORT $LN11@stbi__psd_
$LN12@stbi__psd_:
; Line 6179
	jmp	$LN53@stbi__psd_
$LN52@stbi__psd_:
; Line 6180
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$14[rsp], rax
; Line 6181
	cmp	DWORD PTR channel$[rsp], 3
	jne	SHORT $LN95@stbi__psd_
	mov	DWORD PTR tv252[rsp], 255		; 000000ffH
	jmp	SHORT $LN96@stbi__psd_
$LN95@stbi__psd_:
	mov	DWORD PTR tv252[rsp], 0
$LN96@stbi__psd_:
	movzx	eax, BYTE PTR tv252[rsp]
	mov	BYTE PTR val$1[rsp], al
; Line 6182
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__psd_
$LN14@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$14[rsp]
	add	rax, 4
	mov	QWORD PTR p$14[rsp], rax
$LN16@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN15@stbi__psd_
; Line 6183
	mov	rax, QWORD PTR p$14[rsp]
	movzx	ecx, BYTE PTR val$1[rsp]
	mov	BYTE PTR [rax], cl
	jmp	SHORT $LN14@stbi__psd_
$LN15@stbi__psd_:
$LN53@stbi__psd_:
; Line 6185
	jmp	$LN51@stbi__psd_
$LN50@stbi__psd_:
; Line 6186
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN54@stbi__psd_
; Line 6187
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR q$15[rsp], rax
; Line 6188
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN19@stbi__psd_
$LN17@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR q$15[rsp]
	add	rax, 8
	mov	QWORD PTR q$15[rsp], rax
$LN19@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN18@stbi__psd_
; Line 6189
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	mov	rcx, QWORD PTR q$15[rsp]
	mov	WORD PTR [rcx], ax
	jmp	SHORT $LN17@stbi__psd_
$LN18@stbi__psd_:
; Line 6190
	jmp	$LN55@stbi__psd_
$LN54@stbi__psd_:
; Line 6191
	movsxd	rax, DWORD PTR channel$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$9[rsp], rax
; Line 6192
	cmp	DWORD PTR bitdepth$[rsp], 16
	jne	SHORT $LN56@stbi__psd_
; Line 6193
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__psd_
$LN20@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN22@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN21@stbi__psd_
; Line 6194
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16be@@YAHPEAUstbi__context@@@Z ; stbi__get16be
	sar	eax, 8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN20@stbi__psd_
$LN21@stbi__psd_:
; Line 6195
	jmp	SHORT $LN57@stbi__psd_
$LN56@stbi__psd_:
; Line 6196
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__psd_
$LN23@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	rax, QWORD PTR p$9[rsp]
	add	rax, 4
	mov	QWORD PTR p$9[rsp], rax
$LN25@stbi__psd_:
	mov	eax, DWORD PTR pixelCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN24@stbi__psd_
; Line 6197
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	rcx, QWORD PTR p$9[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN23@stbi__psd_
$LN24@stbi__psd_:
$LN57@stbi__psd_:
$LN55@stbi__psd_:
$LN51@stbi__psd_:
; Line 6201
	jmp	$LN8@stbi__psd_
$LN9@stbi__psd_:
$LN46@stbi__psd_:
; Line 6205
	cmp	DWORD PTR channelCount$[rsp], 4
	jl	$LN58@stbi__psd_
; Line 6206
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	$LN59@stbi__psd_
; Line 6207
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__psd_
$LN26@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN27@stbi__psd_
; Line 6208
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR pixel$4[rsp], rax
; Line 6209
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	test	eax, eax
	je	$LN61@stbi__psd_
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	cmp	eax, 65535				; 0000ffffH
	je	$LN61@stbi__psd_
; Line 6210
	mov	eax, 2
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@477fff00
	vmovss	DWORD PTR a$11[rsp], xmm0
; Line 6211
	vmovss	xmm0, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm0, DWORD PTR a$11[rsp]
	vmovss	DWORD PTR ra$2[rsp], xmm0
; Line 6212
	vmovss	xmm0, DWORD PTR __real@3f800000
	vsubss	xmm0, xmm0, DWORD PTR ra$2[rsp]
	vmovss	xmm1, DWORD PTR __real@477fff00
	vmulss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR inv_a$7[rsp], xmm0
; Line 6213
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ra$2[rsp]
	vaddss	xmm0, xmm0, DWORD PTR inv_a$7[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6214
	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ra$2[rsp]
	vaddss	xmm0, xmm0, DWORD PTR inv_a$7[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
; Line 6215
	mov	eax, 2
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$4[rsp]
	movzx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ra$2[rsp]
	vaddss	xmm0, xmm0, DWORD PTR inv_a$7[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 2
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$4[rsp]
	mov	WORD PTR [rdx+rcx], ax
$LN61@stbi__psd_:
; Line 6217
	jmp	$LN26@stbi__psd_
$LN27@stbi__psd_:
; Line 6218
	jmp	$LN60@stbi__psd_
$LN59@stbi__psd_:
; Line 6219
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN31@stbi__psd_
$LN29@stbi__psd_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN31@stbi__psd_:
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN30@stbi__psd_
; Line 6220
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixel$5[rsp], rax
; Line 6221
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN62@stbi__psd_
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 255				; 000000ffH
	je	$LN62@stbi__psd_
; Line 6222
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@437f0000
	vmovss	DWORD PTR a$12[rsp], xmm0
; Line 6223
	vmovss	xmm0, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm0, DWORD PTR a$12[rsp]
	vmovss	DWORD PTR ra$3[rsp], xmm0
; Line 6224
	vmovss	xmm0, DWORD PTR __real@3f800000
	vsubss	xmm0, xmm0, DWORD PTR ra$3[rsp]
	vmovss	xmm1, DWORD PTR __real@437f0000
	vmulss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR inv_a$8[rsp], xmm0
; Line 6225
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ra$3[rsp]
	vaddss	xmm0, xmm0, DWORD PTR inv_a$8[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6226
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ra$3[rsp]
	vaddss	xmm0, xmm0, DWORD PTR inv_a$8[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 6227
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR pixel$5[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ra$3[rsp]
	vaddss	xmm0, xmm0, DWORD PTR inv_a$8[rsp]
	vcvttss2si eax, xmm0
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR pixel$5[rsp]
	mov	BYTE PTR [rdx+rcx], al
$LN62@stbi__psd_:
; Line 6229
	jmp	$LN29@stbi__psd_
$LN30@stbi__psd_:
$LN60@stbi__psd_:
$LN58@stbi__psd_:
; Line 6234
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN63@stbi__psd_
	cmp	DWORD PTR req_comp$[rsp], 4
	je	SHORT $LN63@stbi__psd_
; Line 6235
	mov	rax, QWORD PTR ri$[rsp]
	cmp	DWORD PTR [rax], 16
	jne	SHORT $LN64@stbi__psd_
; Line 6236
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format16@@YAPEAGPEAGHHII@Z ; stbi__convert_format16
	mov	QWORD PTR out$[rsp], rax
	jmp	SHORT $LN65@stbi__psd_
$LN64@stbi__psd_:
; Line 6238
	mov	eax, DWORD PTR h$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR w$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, 4
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
$LN65@stbi__psd_:
; Line 6239
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN66@stbi__psd_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__psd_
$LN66@stbi__psd_:
$LN63@stbi__psd_:
; Line 6242
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN67@stbi__psd_
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 4
$LN67@stbi__psd_:
; Line 6243
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6244
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 6246
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__psd_:
; Line 6247
	add	rsp, 248				; 000000f8H
	ret	0
?stbi__psd_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@H@Z ENDP ; stbi__psd_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
r$ = 36
s$ = 64
?stbi__psd_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__psd_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 6004
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 6005
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32be@@YAIPEAUstbi__context@@@Z ; stbi__get32be
	cmp	eax, 943870035				; 38425053H
	jne	SHORT $LN3@stbi__psd_
	mov	DWORD PTR tv67[rsp], 1
	jmp	SHORT $LN4@stbi__psd_
$LN3@stbi__psd_:
	mov	DWORD PTR tv67[rsp], 0
$LN4@stbi__psd_:
	mov	eax, DWORD PTR tv67[rsp]
	mov	DWORD PTR r$[rsp], eax
; Line 6006
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 6007
	mov	eax, DWORD PTR r$[rsp]
; Line 6008
	add	rsp, 56					; 00000038H
	ret	0
?stbi__psd_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__psd_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_image_type$ = 32
sz$ = 36
tga_colormap_bpp$ = 40
tga_bits_per_pixel$ = 44
tga_comp$ = 48
tga_colormap_type$ = 52
tv153 = 56
tga_w$ = 60
tga_h$ = 64
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__tga_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5678
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5681
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5682
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_colormap_type$[rsp], eax
; Line 5683
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
; Line 5684
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5685
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN2@stbi__tga_:
; Line 5687
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5688
	cmp	DWORD PTR tga_colormap_type$[rsp], 1
	jne	$LN3@stbi__tga_
; Line 5689
	cmp	DWORD PTR tga_image_type$[rsp], 1
	je	SHORT $LN5@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 9
	je	SHORT $LN5@stbi__tga_
; Line 5690
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5691
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN5@stbi__tga_:
; Line 5693
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5694
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5695
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN6@stbi__tga_
; Line 5696
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5697
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN6@stbi__tga_:
; Line 5699
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5700
	mov	eax, DWORD PTR sz$[rsp]
	mov	DWORD PTR tga_colormap_bpp$[rsp], eax
; Line 5701
	jmp	SHORT $LN4@stbi__tga_
$LN3@stbi__tga_:
; Line 5702
	cmp	DWORD PTR tga_image_type$[rsp], 2
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 10
	je	SHORT $LN7@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN7@stbi__tga_
; Line 5703
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5704
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN7@stbi__tga_:
; Line 5706
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5707
	mov	DWORD PTR tga_colormap_bpp$[rsp], 0
$LN4@stbi__tga_:
; Line 5709
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_w$[rsp], eax
; Line 5710
	cmp	DWORD PTR tga_w$[rsp], 1
	jge	SHORT $LN8@stbi__tga_
; Line 5711
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5712
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN8@stbi__tga_:
; Line 5714
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_h$[rsp], eax
; Line 5715
	cmp	DWORD PTR tga_h$[rsp], 1
	jge	SHORT $LN9@stbi__tga_
; Line 5716
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5717
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN9@stbi__tga_:
; Line 5719
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5720
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5721
	cmp	DWORD PTR tga_colormap_bpp$[rsp], 0
	je	SHORT $LN10@stbi__tga_
; Line 5722
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	je	SHORT $LN12@stbi__tga_
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 16
	je	SHORT $LN12@stbi__tga_
; Line 5725
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5726
	xor	eax, eax
	jmp	$LN1@stbi__tga_
$LN12@stbi__tga_:
; Line 5728
	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, DWORD PTR tga_colormap_bpp$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
; Line 5729
	jmp	SHORT $LN11@stbi__tga_
$LN10@stbi__tga_:
; Line 5730
	cmp	DWORD PTR tga_image_type$[rsp], 3
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR tga_image_type$[rsp], 11
	je	SHORT $LN18@stbi__tga_
	mov	DWORD PTR tv153[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN18@stbi__tga_:
	mov	DWORD PTR tv153[rsp], 1
$LN19@stbi__tga_:
	xor	r8d, r8d
	mov	edx, DWORD PTR tv153[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN11@stbi__tga_:
; Line 5732
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN13@stbi__tga_
; Line 5733
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5734
	xor	eax, eax
	jmp	SHORT $LN1@stbi__tga_
$LN13@stbi__tga_:
; Line 5736
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN14@stbi__tga_
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN14@stbi__tga_:
; Line 5737
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN15@stbi__tga_
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN15@stbi__tga_:
; Line 5738
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN16@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN16@stbi__tga_:
; Line 5739
	mov	eax, 1
$LN1@stbi__tga_:
; Line 5740
	add	rsp, 88					; 00000058H
	ret	0
?stbi__tga_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__tga_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tga_comp$ = 48
j$ = 52
i$ = 56
tga_width$ = 60
tga_height$ = 64
temp$1 = 68
temp$2 = 69
tga_palette_len$ = 72
tga_data$ = 80
tga_rgb16$ = 88
pal_idx$3 = 92
read_next_pixel$ = 96
tga_image_type$ = 100
tga_indexed$ = 104
raw_data$ = 108
RLE_count$ = 112
tga_inverted$ = 116
index1$4 = 120
index2$5 = 124
tga_palette$ = 128
tga_is_RLE$ = 136
tga_palette_bits$ = 140
tga_pixel$6 = 144
tv162 = 152
tv174 = 156
tv185 = 160
tv197 = 164
tv212 = 168
tv225 = 172
tv250 = 176
RLE_cmd$7 = 180
RLE_repeating$ = 184
tga_bits_per_pixel$ = 188
tv272 = 192
tga_y_origin$ = 196
tga_x_origin$ = 200
tga_palette_start$ = 204
tv134 = 208
tv140 = 212
tv155 = 216
row$8 = 220
tga_offset$ = 224
pal_entry$9 = 232
tga_row$10 = 240
s$ = 272
x$ = 280
y$ = 288
comp$ = 296
req_comp$ = 304
ri$ = 312
?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__tga_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5794
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 256				; 00000100H
; Line 5796
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_offset$[rsp], eax
; Line 5797
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_indexed$[rsp], eax
; Line 5798
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5799
	mov	DWORD PTR tga_is_RLE$[rsp], 0
; Line 5800
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5801
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_palette_len$[rsp], eax
; Line 5802
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_palette_bits$[rsp], eax
; Line 5803
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_x_origin$[rsp], eax
; Line 5804
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_y_origin$[rsp], eax
; Line 5805
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_width$[rsp], eax
; Line 5806
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tga_height$[rsp], eax
; Line 5807
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_bits_per_pixel$[rsp], eax
; Line 5808
	mov	DWORD PTR tga_rgb16$[rsp], 0
; Line 5809
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5813
	mov	QWORD PTR tga_palette$[rsp], 0
; Line 5815
	lea	rax, QWORD PTR raw_data$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 4
	rep stosb
; Line 5816
	mov	DWORD PTR RLE_count$[rsp], 0
; Line 5817
	mov	DWORD PTR RLE_repeating$[rsp], 0
; Line 5818
	mov	DWORD PTR read_next_pixel$[rsp], 1
; Line 5823
	cmp	DWORD PTR tga_height$[rsp], 16777216	; 01000000H
	jle	SHORT $LN29@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG150488
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN62@stbi__tga_
	mov	DWORD PTR tv134[rsp], 0
	jmp	SHORT $LN63@stbi__tga_
$LN62@stbi__tga_:
	mov	DWORD PTR tv134[rsp], 0
$LN63@stbi__tga_:
	movsxd	rax, DWORD PTR tv134[rsp]
	jmp	$LN1@stbi__tga_
$LN29@stbi__tga_:
; Line 5824
	cmp	DWORD PTR tga_width$[rsp], 16777216	; 01000000H
	jle	SHORT $LN30@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG150490
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN64@stbi__tga_
	mov	DWORD PTR tv140[rsp], 0
	jmp	SHORT $LN65@stbi__tga_
$LN64@stbi__tga_:
	mov	DWORD PTR tv140[rsp], 0
$LN65@stbi__tga_:
	movsxd	rax, DWORD PTR tv140[rsp]
	jmp	$LN1@stbi__tga_
$LN30@stbi__tga_:
; Line 5827
	cmp	DWORD PTR tga_image_type$[rsp], 8
	jl	SHORT $LN31@stbi__tga_
; Line 5829
	mov	eax, DWORD PTR tga_image_type$[rsp]
	sub	eax, 8
	mov	DWORD PTR tga_image_type$[rsp], eax
; Line 5830
	mov	DWORD PTR tga_is_RLE$[rsp], 1
$LN31@stbi__tga_:
; Line 5832
	mov	eax, DWORD PTR tga_inverted$[rsp]
	sar	eax, 5
	and	eax, 1
	mov	ecx, 1
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tga_inverted$[rsp], eax
; Line 5835
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	SHORT $LN32@stbi__tga_
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	xor	edx, edx
	mov	ecx, DWORD PTR tga_palette_bits$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
	jmp	SHORT $LN33@stbi__tga_
$LN32@stbi__tga_:
; Line 5836
	cmp	DWORD PTR tga_image_type$[rsp], 3
	jne	SHORT $LN66@stbi__tga_
	mov	DWORD PTR tv155[rsp], 1
	jmp	SHORT $LN67@stbi__tga_
$LN66@stbi__tga_:
	mov	DWORD PTR tv155[rsp], 0
$LN67@stbi__tga_:
	lea	r8, QWORD PTR tga_rgb16$[rsp]
	mov	edx, DWORD PTR tv155[rsp]
	mov	ecx, DWORD PTR tga_bits_per_pixel$[rsp]
	call	?stbi__tga_get_comp@@YAHHHPEAH@Z	; stbi__tga_get_comp
	mov	DWORD PTR tga_comp$[rsp], eax
$LN33@stbi__tga_:
; Line 5838
	cmp	DWORD PTR tga_comp$[rsp], 0
	jne	SHORT $LN34@stbi__tga_
; Line 5839
	lea	rcx, OFFSET FLAT:$SG150495
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN68@stbi__tga_
	mov	DWORD PTR tv162[rsp], 0
	jmp	SHORT $LN69@stbi__tga_
$LN68@stbi__tga_:
	mov	DWORD PTR tv162[rsp], 0
$LN69@stbi__tga_:
	movsxd	rax, DWORD PTR tv162[rsp]
	jmp	$LN1@stbi__tga_
$LN34@stbi__tga_:
; Line 5842
	mov	rax, QWORD PTR x$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5843
	mov	rax, QWORD PTR y$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 5844
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN35@stbi__tga_
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR [rax], ecx
$LN35@stbi__tga_:
; Line 5846
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN36@stbi__tga_
; Line 5847
	lea	rcx, OFFSET FLAT:$SG150498
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN70@stbi__tga_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN71@stbi__tga_
$LN70@stbi__tga_:
	mov	DWORD PTR tv174[rsp], 0
$LN71@stbi__tga_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__tga_
$LN36@stbi__tga_:
; Line 5849
	xor	r9d, r9d
	mov	r8d, DWORD PTR tga_comp$[rsp]
	mov	edx, DWORD PTR tga_height$[rsp]
	mov	ecx, DWORD PTR tga_width$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR tga_data$[rsp], rax
; Line 5850
	cmp	QWORD PTR tga_data$[rsp], 0
	jne	SHORT $LN37@stbi__tga_
	lea	rcx, OFFSET FLAT:$SG150500
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN72@stbi__tga_
	mov	DWORD PTR tv185[rsp], 0
	jmp	SHORT $LN73@stbi__tga_
$LN72@stbi__tga_:
	mov	DWORD PTR tv185[rsp], 0
$LN73@stbi__tga_:
	movsxd	rax, DWORD PTR tv185[rsp]
	jmp	$LN1@stbi__tga_
$LN37@stbi__tga_:
; Line 5853
	mov	edx, DWORD PTR tga_offset$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5855
	cmp	DWORD PTR tga_indexed$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	jne	$LN38@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN38@stbi__tga_
; Line 5856
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__tga_
$LN2@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__tga_:
	mov	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__tga_
; Line 5857
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	SHORT $LN74@stbi__tga_
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR tga_height$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	dec	eax
	mov	DWORD PTR tv197[rsp], eax
	jmp	SHORT $LN75@stbi__tga_
$LN74@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR tv197[rsp], eax
$LN75@stbi__tga_:
	mov	eax, DWORD PTR tv197[rsp]
	mov	DWORD PTR row$8[rsp], eax
; Line 5858
	mov	eax, DWORD PTR row$8[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	cdqe
	mov	rcx, QWORD PTR tga_data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_row$10[rsp], rax
; Line 5859
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_row$10[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
; Line 5860
	jmp	$LN2@stbi__tga_
$LN3@stbi__tga_:
; Line 5861
	jmp	$LN39@stbi__tga_
$LN38@stbi__tga_:
; Line 5863
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN40@stbi__tga_
; Line 5865
	cmp	DWORD PTR tga_palette_len$[rsp], 0
	jne	SHORT $LN41@stbi__tga_
; Line 5866
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	QWORD PTR __imp_free
; Line 5867
	lea	rcx, OFFSET FLAT:$SG150505
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN76@stbi__tga_
	mov	DWORD PTR tv212[rsp], 0
	jmp	SHORT $LN77@stbi__tga_
$LN76@stbi__tga_:
	mov	DWORD PTR tv212[rsp], 0
$LN77@stbi__tga_:
	movsxd	rax, DWORD PTR tv212[rsp]
	jmp	$LN1@stbi__tga_
$LN41@stbi__tga_:
; Line 5871
	mov	edx, DWORD PTR tga_palette_start$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5873
	xor	r8d, r8d
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	ecx, DWORD PTR tga_palette_len$[rsp]
	call	?stbi__malloc_mad2@@YAPEAXHHH@Z		; stbi__malloc_mad2
	mov	QWORD PTR tga_palette$[rsp], rax
; Line 5874
	cmp	QWORD PTR tga_palette$[rsp], 0
	jne	SHORT $LN42@stbi__tga_
; Line 5875
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	QWORD PTR __imp_free
; Line 5876
	lea	rcx, OFFSET FLAT:$SG150507
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN78@stbi__tga_
	mov	DWORD PTR tv225[rsp], 0
	jmp	SHORT $LN79@stbi__tga_
$LN78@stbi__tga_:
	mov	DWORD PTR tv225[rsp], 0
$LN79@stbi__tga_:
	movsxd	rax, DWORD PTR tv225[rsp]
	jmp	$LN1@stbi__tga_
$LN42@stbi__tga_:
; Line 5878
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	$LN43@stbi__tga_
; Line 5879
	mov	rax, QWORD PTR tga_palette$[rsp]
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5880
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN80@stbi__tga_
	mov	r8d, 5880				; 000016f8H
	lea	rdx, OFFSET FLAT:$SG150510
	lea	rcx, OFFSET FLAT:$SG150511
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN80@stbi__tga_:
; Line 5881
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbi__tga_
$LN5@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbi__tga_
; Line 5882
	mov	rdx, QWORD PTR pal_entry$9[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ; stbi__tga_read_rgb16
; Line 5883
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR pal_entry$9[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pal_entry$9[rsp], rax
; Line 5884
	jmp	SHORT $LN5@stbi__tga_
$LN6@stbi__tga_:
; Line 5885
	jmp	SHORT $LN44@stbi__tga_
$LN43@stbi__tga_:
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	r8d, eax
	mov	rdx, QWORD PTR tga_palette$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__getn@@YAHPEAUstbi__context@@PEAEH@Z ; stbi__getn
	test	eax, eax
	jne	SHORT $LN45@stbi__tga_
; Line 5886
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	QWORD PTR __imp_free
; Line 5887
	mov	rcx, QWORD PTR tga_palette$[rsp]
	call	QWORD PTR __imp_free
; Line 5888
	lea	rcx, OFFSET FLAT:$SG150513
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN81@stbi__tga_
	mov	DWORD PTR tv250[rsp], 0
	jmp	SHORT $LN82@stbi__tga_
$LN81@stbi__tga_:
	mov	DWORD PTR tv250[rsp], 0
$LN82@stbi__tga_:
	movsxd	rax, DWORD PTR tv250[rsp]
	jmp	$LN1@stbi__tga_
$LN45@stbi__tga_:
$LN44@stbi__tga_:
$LN40@stbi__tga_:
; Line 5892
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__tga_
$LN8@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__tga_
; Line 5895
	cmp	DWORD PTR tga_is_RLE$[rsp], 0
	je	SHORT $LN46@stbi__tga_
; Line 5897
	cmp	DWORD PTR RLE_count$[rsp], 0
	jne	SHORT $LN48@stbi__tga_
; Line 5900
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR RLE_cmd$7[rsp], eax
; Line 5901
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	and	eax, 127				; 0000007fH
	inc	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5902
	mov	eax, DWORD PTR RLE_cmd$7[rsp]
	sar	eax, 7
	mov	DWORD PTR RLE_repeating$[rsp], eax
; Line 5903
	mov	DWORD PTR read_next_pixel$[rsp], 1
	jmp	SHORT $LN49@stbi__tga_
$LN48@stbi__tga_:
; Line 5904
	cmp	DWORD PTR RLE_repeating$[rsp], 0
	jne	SHORT $LN50@stbi__tga_
; Line 5906
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN50@stbi__tga_:
$LN49@stbi__tga_:
; Line 5908
	jmp	SHORT $LN47@stbi__tga_
$LN46@stbi__tga_:
; Line 5910
	mov	DWORD PTR read_next_pixel$[rsp], 1
$LN47@stbi__tga_:
; Line 5913
	cmp	DWORD PTR read_next_pixel$[rsp], 0
	je	$LN51@stbi__tga_
; Line 5916
	cmp	DWORD PTR tga_indexed$[rsp], 0
	je	$LN52@stbi__tga_
; Line 5919
	cmp	DWORD PTR tga_bits_per_pixel$[rsp], 8
	jne	SHORT $LN83@stbi__tga_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv272[rsp], eax
	jmp	SHORT $LN84@stbi__tga_
$LN83@stbi__tga_:
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tv272[rsp], eax
$LN84@stbi__tga_:
	mov	eax, DWORD PTR tv272[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5920
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	cmp	DWORD PTR pal_idx$3[rsp], eax
	jl	SHORT $LN54@stbi__tga_
; Line 5922
	mov	DWORD PTR pal_idx$3[rsp], 0
$LN54@stbi__tga_:
; Line 5924
	mov	eax, DWORD PTR pal_idx$3[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR pal_idx$3[rsp], eax
; Line 5925
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__tga_
$LN11@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN12@stbi__tga_
; Line 5926
	mov	eax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR pal_idx$3[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR tga_palette$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5927
	jmp	SHORT $LN11@stbi__tga_
$LN12@stbi__tga_:
; Line 5928
	jmp	SHORT $LN53@stbi__tga_
$LN52@stbi__tga_:
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	je	SHORT $LN55@stbi__tga_
; Line 5929
	cmp	DWORD PTR tga_comp$[rsp], 3
	je	SHORT $LN85@stbi__tga_
	mov	r8d, 5929				; 00001729H
	lea	rdx, OFFSET FLAT:$SG150525
	lea	rcx, OFFSET FLAT:$SG150526
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN85@stbi__tga_:
; Line 5930
	lea	rdx, QWORD PTR raw_data$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__tga_read_rgb16@@YAXPEAUstbi__context@@PEAE@Z ; stbi__tga_read_rgb16
; Line 5931
	jmp	SHORT $LN56@stbi__tga_
$LN55@stbi__tga_:
; Line 5933
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN16@stbi__tga_
$LN14@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN16@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN15@stbi__tga_
; Line 5934
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	BYTE PTR raw_data$[rsp+rcx], al
; Line 5935
	jmp	SHORT $LN14@stbi__tga_
$LN15@stbi__tga_:
$LN56@stbi__tga_:
$LN53@stbi__tga_:
; Line 5938
	mov	DWORD PTR read_next_pixel$[rsp], 0
$LN51@stbi__tga_:
; Line 5942
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__tga_
$LN17@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__tga_:
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN18@stbi__tga_
; Line 5943
	movsxd	rax, DWORD PTR j$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	imul	ecx, DWORD PTR tga_comp$[rsp]
	add	ecx, DWORD PTR j$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR raw_data$[rsp+rax]
	mov	BYTE PTR [rdx+rcx], al
	jmp	SHORT $LN17@stbi__tga_
$LN18@stbi__tga_:
; Line 5946
	mov	eax, DWORD PTR RLE_count$[rsp]
	dec	eax
	mov	DWORD PTR RLE_count$[rsp], eax
; Line 5947
	jmp	$LN8@stbi__tga_
$LN9@stbi__tga_:
; Line 5949
	cmp	DWORD PTR tga_inverted$[rsp], 0
	je	$LN57@stbi__tga_
; Line 5951
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN22@stbi__tga_
$LN20@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN22@stbi__tga_:
	mov	eax, DWORD PTR j$[rsp]
	shl	eax, 1
	cmp	eax, DWORD PTR tga_height$[rsp]
	jge	$LN21@stbi__tga_
; Line 5953
	mov	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index1$4[rsp], eax
; Line 5954
	mov	eax, DWORD PTR tga_height$[rsp]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	imul	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR index2$5[rsp], eax
; Line 5955
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_comp$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN25@stbi__tga_
$LN23@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__tga_:
	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN24@stbi__tga_
; Line 5957
	movsxd	rax, DWORD PTR index1$4[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$2[rsp], al
; Line 5958
	movsxd	rax, DWORD PTR index2$5[rsp]
	movsxd	rcx, DWORD PTR index1$4[rsp]
	mov	rdx, QWORD PTR tga_data$[rsp]
	mov	rdi, QWORD PTR tga_data$[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5959
	movsxd	rax, DWORD PTR index2$5[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	movzx	edx, BYTE PTR temp$2[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5960
	mov	eax, DWORD PTR index1$4[rsp]
	inc	eax
	mov	DWORD PTR index1$4[rsp], eax
; Line 5961
	mov	eax, DWORD PTR index2$5[rsp]
	inc	eax
	mov	DWORD PTR index2$5[rsp], eax
; Line 5962
	jmp	SHORT $LN23@stbi__tga_
$LN24@stbi__tga_:
; Line 5963
	jmp	$LN20@stbi__tga_
$LN21@stbi__tga_:
$LN57@stbi__tga_:
; Line 5966
	cmp	QWORD PTR tga_palette$[rsp], 0
	je	SHORT $LN58@stbi__tga_
; Line 5968
	mov	rcx, QWORD PTR tga_palette$[rsp]
	call	QWORD PTR __imp_free
$LN58@stbi__tga_:
$LN39@stbi__tga_:
; Line 5973
	cmp	DWORD PTR tga_comp$[rsp], 3
	jl	$LN59@stbi__tga_
	cmp	DWORD PTR tga_rgb16$[rsp], 0
	jne	$LN59@stbi__tga_
; Line 5975
	mov	rax, QWORD PTR tga_data$[rsp]
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5976
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN28@stbi__tga_
$LN26@stbi__tga_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__tga_:
	mov	eax, DWORD PTR tga_width$[rsp]
	imul	eax, DWORD PTR tga_height$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN27@stbi__tga_
; Line 5978
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR temp$1[rsp], al
; Line 5979
	mov	eax, 1
	imul	rax, rax, 2
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tga_pixel$6[rsp]
	mov	rdi, QWORD PTR tga_pixel$6[rsp]
	movzx	eax, BYTE PTR [rdi+rax]
	mov	BYTE PTR [rdx+rcx], al
; Line 5980
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	movzx	edx, BYTE PTR temp$1[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5981
	movsxd	rax, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_pixel$6[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tga_pixel$6[rsp], rax
; Line 5982
	jmp	$LN26@stbi__tga_
$LN27@stbi__tga_:
$LN59@stbi__tga_:
; Line 5986
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN60@stbi__tga_
	mov	eax, DWORD PTR tga_comp$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN60@stbi__tga_
; Line 5987
	mov	eax, DWORD PTR tga_height$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR tga_width$[rsp]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR tga_comp$[rsp]
	mov	rcx, QWORD PTR tga_data$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR tga_data$[rsp], rax
$LN60@stbi__tga_:
; Line 5991
	mov	DWORD PTR tga_y_origin$[rsp], 0
	mov	eax, DWORD PTR tga_y_origin$[rsp]
	mov	DWORD PTR tga_x_origin$[rsp], eax
	mov	eax, DWORD PTR tga_x_origin$[rsp]
	mov	DWORD PTR tga_palette_bits$[rsp], eax
	mov	eax, DWORD PTR tga_palette_bits$[rsp]
	mov	DWORD PTR tga_palette_len$[rsp], eax
	mov	eax, DWORD PTR tga_palette_len$[rsp]
	mov	DWORD PTR tga_palette_start$[rsp], eax
; Line 5995
	mov	rax, QWORD PTR tga_data$[rsp]
$LN1@stbi__tga_:
; Line 5996
	add	rsp, 256				; 00000100H
	pop	rdi
	ret	0
?stbi__tga_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__tga_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
sz$ = 32
tga_color_type$ = 36
res$ = 40
s$ = 64
?stbi__tga_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__tga_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5743
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5744
	mov	DWORD PTR res$[rsp], 0
; Line 5746
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
; Line 5747
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tga_color_type$[rsp], eax
; Line 5748
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jle	SHORT $LN2@stbi__tga_
	jmp	$LN3@stbi__tga_
	jmp	$errorEnd$21
$LN2@stbi__tga_:
; Line 5749
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5750
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN4@stbi__tga_
; Line 5751
	cmp	DWORD PTR sz$[rsp], 1
	je	SHORT $LN6@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 9
	je	SHORT $LN6@stbi__tga_
	jmp	$LN7@stbi__tga_
	jmp	$errorEnd$21
$LN6@stbi__tga_:
; Line 5752
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5753
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5754
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN8@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN8@stbi__tga_
	jmp	$LN9@stbi__tga_
	jmp	$errorEnd$21
$LN8@stbi__tga_:
; Line 5755
	mov	edx, 4
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5756
	jmp	SHORT $LN5@stbi__tga_
$LN4@stbi__tga_:
; Line 5757
	cmp	DWORD PTR sz$[rsp], 2
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 3
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 10
	je	SHORT $LN10@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 11
	je	SHORT $LN10@stbi__tga_
	jmp	$LN11@stbi__tga_
	jmp	$errorEnd$21
$LN10@stbi__tga_:
; Line 5758
	mov	edx, 9
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
$LN5@stbi__tga_:
; Line 5760
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN12@stbi__tga_
	jmp	SHORT $LN13@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN12@stbi__tga_:
; Line 5761
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	cmp	eax, 1
	jge	SHORT $LN14@stbi__tga_
	jmp	SHORT $LN15@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN14@stbi__tga_:
; Line 5762
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR sz$[rsp], eax
; Line 5763
	cmp	DWORD PTR tga_color_type$[rsp], 1
	jne	SHORT $LN16@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN16@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN16@stbi__tga_
	jmp	SHORT $LN17@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN16@stbi__tga_:
; Line 5764
	cmp	DWORD PTR sz$[rsp], 8
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 15
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 16
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 24
	je	SHORT $LN18@stbi__tga_
	cmp	DWORD PTR sz$[rsp], 32			; 00000020H
	je	SHORT $LN18@stbi__tga_
	jmp	SHORT $LN19@stbi__tga_
	jmp	SHORT $errorEnd$21
$LN18@stbi__tga_:
; Line 5766
	mov	DWORD PTR res$[rsp], 1
$LN3@stbi__tga_:
$LN7@stbi__tga_:
$LN9@stbi__tga_:
$LN11@stbi__tga_:
$LN13@stbi__tga_:
$LN15@stbi__tga_:
$LN17@stbi__tga_:
$LN19@stbi__tga_:
$errorEnd$21:
; Line 5769
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5770
	mov	eax, DWORD PTR res$[rsp]
; Line 5771
	add	rsp, 56					; 00000038H
	ret	0
?stbi__tga_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__tga_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
p$ = 40
info$ = 48
__$ArrayPad$ = 88
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__bmp_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7258
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7262
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 7263
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ; stbi__bmp_parse_header
	mov	QWORD PTR p$[rsp], rax
; Line 7264
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi__bmp_
; Line 7265
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 7266
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN2@stbi__bmp_:
; Line 7268
	cmp	QWORD PTR x$[rsp], 0
	je	SHORT $LN3@stbi__bmp_
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
$LN3@stbi__bmp_:
; Line 7269
	cmp	QWORD PTR y$[rsp], 0
	je	SHORT $LN4@stbi__bmp_
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
$LN4@stbi__bmp_:
; Line 7270
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN5@stbi__bmp_
; Line 7271
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN6@stbi__bmp_
	cmp	DWORD PTR info$[rsp+24], -16777216	; ff000000H
	jne	SHORT $LN6@stbi__bmp_
; Line 7272
	mov	rax, QWORD PTR comp$[rsp]
	mov	DWORD PTR [rax], 3
	jmp	SHORT $LN7@stbi__bmp_
$LN6@stbi__bmp_:
; Line 7274
	cmp	DWORD PTR info$[rsp+24], 0
	je	SHORT $LN9@stbi__bmp_
	mov	DWORD PTR tv77[rsp], 4
	jmp	SHORT $LN10@stbi__bmp_
$LN9@stbi__bmp_:
	mov	DWORD PTR tv77[rsp], 3
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR comp$[rsp]
	mov	ecx, DWORD PTR tv77[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbi__bmp_:
$LN5@stbi__bmp_:
; Line 7276
	mov	eax, 1
$LN1@stbi__bmp_:
; Line 7277
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?stbi__bmp_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__bmp_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
z$1 = 52
z$2 = 56
j$ = 60
out$ = 64
target$ = 72
a$3 = 76
v$4 = 80
ma$ = 84
t$5 = 88
psize$ = 92
width$ = 96
mr$ = 100
mg$ = 104
mb$ = 108
bit_offset$6 = 112
easy$7 = 116
all_a$ = 120
v$8 = 124
pad$ = 128
color$9 = 132
rcount$10 = 136
gcount$11 = 140
bcount$12 = 144
acount$13 = 148
tv80 = 152
tv87 = 156
tv174 = 160
tv181 = 164
tv196 = 168
tv209 = 172
tv218 = 176
tv253 = 180
tv272 = 184
v$14 = 188
v2$15 = 192
tv381 = 196
tv442 = 200
tv472 = 204
tv504 = 208
tv521 = 212
rshift$16 = 216
gshift$17 = 220
bshift$18 = 224
ashift$19 = 228
tv561 = 232
a$20 = 236
tv70 = 240
flip_vertically$ = 244
bpp$21 = 248
p1$22 = 256
p2$23 = 264
info$ = 272
pal$ = 320
__$ArrayPad$ = 1344
s$ = 1376
x$ = 1384
y$ = 1392
comp$ = 1400
req_comp$ = 1408
ri$ = 1416
?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__bmp_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5468
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 1368				; 00000558H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 5470
	mov	DWORD PTR mr$[rsp], 0
	mov	DWORD PTR mg$[rsp], 0
	mov	DWORD PTR mb$[rsp], 0
	mov	DWORD PTR ma$[rsp], 0
; Line 5472
	mov	DWORD PTR psize$[rsp], 0
; Line 5477
	mov	DWORD PTR info$[rsp+28], 255		; 000000ffH
; Line 5478
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_parse_header@@YAPEAXPEAUstbi__context@@PEAUstbi__bmp_data@@@Z ; stbi__bmp_parse_header
	test	rax, rax
	jne	SHORT $LN35@stbi__bmp_
; Line 5479
	xor	eax, eax
	jmp	$LN1@stbi__bmp_
$LN35@stbi__bmp_:
; Line 5481
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jle	SHORT $LN93@stbi__bmp_
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN94@stbi__bmp_
$LN93@stbi__bmp_:
	mov	DWORD PTR tv70[rsp], 0
$LN94@stbi__bmp_:
	mov	eax, DWORD PTR tv70[rsp]
	mov	DWORD PTR flip_vertically$[rsp], eax
; Line 5482
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rax+4]
	call	abs
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 5484
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax+4], 16777216		; 01000000H
	jbe	SHORT $LN36@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG150246
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN95@stbi__bmp_
	mov	DWORD PTR tv80[rsp], 0
	jmp	SHORT $LN96@stbi__bmp_
$LN95@stbi__bmp_:
	mov	DWORD PTR tv80[rsp], 0
$LN96@stbi__bmp_:
	movsxd	rax, DWORD PTR tv80[rsp]
	jmp	$LN1@stbi__bmp_
$LN36@stbi__bmp_:
; Line 5485
	mov	rax, QWORD PTR s$[rsp]
	cmp	DWORD PTR [rax], 16777216		; 01000000H
	jbe	SHORT $LN37@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG150248
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN97@stbi__bmp_
	mov	DWORD PTR tv87[rsp], 0
	jmp	SHORT $LN98@stbi__bmp_
$LN97@stbi__bmp_:
	mov	DWORD PTR tv87[rsp], 0
$LN98@stbi__bmp_:
	movsxd	rax, DWORD PTR tv87[rsp]
	jmp	$LN1@stbi__bmp_
$LN37@stbi__bmp_:
; Line 5487
	mov	eax, DWORD PTR info$[rsp+12]
	mov	DWORD PTR mr$[rsp], eax
; Line 5488
	mov	eax, DWORD PTR info$[rsp+16]
	mov	DWORD PTR mg$[rsp], eax
; Line 5489
	mov	eax, DWORD PTR info$[rsp+20]
	mov	DWORD PTR mb$[rsp], eax
; Line 5490
	mov	eax, DWORD PTR info$[rsp+24]
	mov	DWORD PTR ma$[rsp], eax
; Line 5491
	mov	eax, DWORD PTR info$[rsp+28]
	mov	DWORD PTR all_a$[rsp], eax
; Line 5493
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN38@stbi__bmp_
; Line 5494
	cmp	DWORD PTR info$[rsp], 24
	jge	SHORT $LN40@stbi__bmp_
; Line 5495
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 24
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR psize$[rsp], eax
$LN40@stbi__bmp_:
; Line 5496
	jmp	SHORT $LN39@stbi__bmp_
$LN38@stbi__bmp_:
; Line 5497
	cmp	DWORD PTR info$[rsp], 16
	jge	SHORT $LN41@stbi__bmp_
; Line 5498
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	sar	eax, 2
	mov	DWORD PTR psize$[rsp], eax
$LN41@stbi__bmp_:
$LN39@stbi__bmp_:
; Line 5500
	cmp	DWORD PTR psize$[rsp], 0
	jne	SHORT $LN42@stbi__bmp_
; Line 5501
	movsxd	rax, DWORD PTR info$[rsp+4]
	mov	rcx, QWORD PTR s$[rsp]
	movsxd	rcx, DWORD PTR [rcx+184]
	mov	rdx, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR [r8+208]
	mov	rdx, QWORD PTR [rdx+192]
	sub	rdx, r8
	add	rcx, rdx
	cmp	rax, rcx
	je	SHORT $LN43@stbi__bmp_
; Line 5502
	lea	rcx, OFFSET FLAT:$SG150255
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN99@stbi__bmp_
	mov	DWORD PTR tv174[rsp], 0
	jmp	SHORT $LN100@stbi__bmp_
$LN99@stbi__bmp_:
	mov	DWORD PTR tv174[rsp], 0
$LN100@stbi__bmp_:
	movsxd	rax, DWORD PTR tv174[rsp]
	jmp	$LN1@stbi__bmp_
$LN43@stbi__bmp_:
$LN42@stbi__bmp_:
; Line 5506
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN44@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN44@stbi__bmp_
; Line 5507
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+8], 3
	jmp	SHORT $LN45@stbi__bmp_
$LN44@stbi__bmp_:
; Line 5509
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN101@stbi__bmp_
	mov	DWORD PTR tv181[rsp], 4
	jmp	SHORT $LN102@stbi__bmp_
$LN101@stbi__bmp_:
	mov	DWORD PTR tv181[rsp], 3
$LN102@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR tv181[rsp]
	mov	DWORD PTR [rax+8], ecx
$LN45@stbi__bmp_:
; Line 5510
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN46@stbi__bmp_
	cmp	DWORD PTR req_comp$[rsp], 3
	jl	SHORT $LN46@stbi__bmp_
; Line 5511
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR target$[rsp], eax
	jmp	SHORT $LN47@stbi__bmp_
$LN46@stbi__bmp_:
; Line 5513
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR target$[rsp], eax
$LN47@stbi__bmp_:
; Line 5516
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	?stbi__mad3sizes_valid@@YAHHHHH@Z	; stbi__mad3sizes_valid
	test	eax, eax
	jne	SHORT $LN48@stbi__bmp_
; Line 5517
	lea	rcx, OFFSET FLAT:$SG150261
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN103@stbi__bmp_
	mov	DWORD PTR tv196[rsp], 0
	jmp	SHORT $LN104@stbi__bmp_
$LN103@stbi__bmp_:
	mov	DWORD PTR tv196[rsp], 0
$LN104@stbi__bmp_:
	movsxd	rax, DWORD PTR tv196[rsp]
	jmp	$LN1@stbi__bmp_
$LN48@stbi__bmp_:
; Line 5519
	xor	r9d, r9d
	mov	rax, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rax+4]
	mov	rax, QWORD PTR s$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	ecx, DWORD PTR target$[rsp]
	call	?stbi__malloc_mad3@@YAPEAXHHHH@Z	; stbi__malloc_mad3
	mov	QWORD PTR out$[rsp], rax
; Line 5520
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN49@stbi__bmp_
	lea	rcx, OFFSET FLAT:$SG150263
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN105@stbi__bmp_
	mov	DWORD PTR tv209[rsp], 0
	jmp	SHORT $LN106@stbi__bmp_
$LN105@stbi__bmp_:
	mov	DWORD PTR tv209[rsp], 0
$LN106@stbi__bmp_:
	movsxd	rax, DWORD PTR tv209[rsp]
	jmp	$LN1@stbi__bmp_
$LN49@stbi__bmp_:
; Line 5521
	cmp	DWORD PTR info$[rsp], 16
	jge	$LN50@stbi__bmp_
; Line 5522
	mov	DWORD PTR z$1[rsp], 0
; Line 5523
	cmp	DWORD PTR psize$[rsp], 0
	je	SHORT $LN53@stbi__bmp_
	cmp	DWORD PTR psize$[rsp], 256		; 00000100H
	jle	SHORT $LN52@stbi__bmp_
$LN53@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG150268
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN107@stbi__bmp_
	mov	DWORD PTR tv218[rsp], 0
	jmp	SHORT $LN108@stbi__bmp_
$LN107@stbi__bmp_:
	mov	DWORD PTR tv218[rsp], 0
$LN108@stbi__bmp_:
	movsxd	rax, DWORD PTR tv218[rsp]
	jmp	$LN1@stbi__bmp_
$LN52@stbi__bmp_:
; Line 5524
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbi__bmp_
$LN2@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbi__bmp_:
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbi__bmp_
; Line 5525
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 2
	mov	BYTE PTR [rcx+rdx], al
; Line 5526
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 1
	mov	BYTE PTR [rcx+rdx], al
; Line 5527
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR pal$[rsp+rcx*4]
	mov	edx, 1
	imul	rdx, rdx, 0
	mov	BYTE PTR [rcx+rdx], al
; Line 5528
	cmp	DWORD PTR info$[rsp+8], 12
	je	SHORT $LN54@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
$LN54@stbi__bmp_:
; Line 5529
	movsxd	rax, DWORD PTR i$[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	BYTE PTR [rax+rcx], 255			; 000000ffH
; Line 5530
	jmp	$LN2@stbi__bmp_
$LN3@stbi__bmp_:
; Line 5531
	cmp	DWORD PTR info$[rsp+8], 12
	jne	SHORT $LN109@stbi__bmp_
	mov	DWORD PTR tv253[rsp], 3
	jmp	SHORT $LN110@stbi__bmp_
$LN109@stbi__bmp_:
	mov	DWORD PTR tv253[rsp], 4
$LN110@stbi__bmp_:
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	ecx, DWORD PTR psize$[rsp]
	imul	ecx, DWORD PTR tv253[rsp]
	sub	eax, ecx
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5532
	cmp	DWORD PTR info$[rsp], 1
	jne	SHORT $LN55@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, 7
	shr	eax, 3
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN56@stbi__bmp_
$LN55@stbi__bmp_:
; Line 5533
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN57@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	shr	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN58@stbi__bmp_
$LN57@stbi__bmp_:
; Line 5534
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN59@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN60@stbi__bmp_
$LN59@stbi__bmp_:
; Line 5535
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG150276
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN111@stbi__bmp_
	mov	DWORD PTR tv272[rsp], 0
	jmp	SHORT $LN112@stbi__bmp_
$LN111@stbi__bmp_:
	mov	DWORD PTR tv272[rsp], 0
$LN112@stbi__bmp_:
	movsxd	rax, DWORD PTR tv272[rsp]
	jmp	$LN1@stbi__bmp_
$LN60@stbi__bmp_:
$LN58@stbi__bmp_:
$LN56@stbi__bmp_:
; Line 5536
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5537
	cmp	DWORD PTR info$[rsp], 1
	jne	$LN61@stbi__bmp_
; Line 5538
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbi__bmp_
$LN5@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbi__bmp_
; Line 5539
	mov	DWORD PTR bit_offset$6[rsp], 7
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
; Line 5540
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbi__bmp_
$LN8@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbi__bmp_
; Line 5541
	mov	eax, DWORD PTR bit_offset$6[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR v$14[rsp]
	sar	eax, cl
	and	eax, 1
	mov	DWORD PTR color$9[rsp], eax
; Line 5542
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5543
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5544
	movsxd	rax, DWORD PTR color$9[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5545
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN63@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN63@stbi__bmp_:
; Line 5546
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN64@stbi__bmp_
	jmp	SHORT $LN9@stbi__bmp_
$LN64@stbi__bmp_:
; Line 5547
	mov	eax, DWORD PTR bit_offset$6[rsp]
	dec	eax
	mov	DWORD PTR bit_offset$6[rsp], eax
	cmp	DWORD PTR bit_offset$6[rsp], 0
	jge	SHORT $LN65@stbi__bmp_
; Line 5548
	mov	DWORD PTR bit_offset$6[rsp], 7
; Line 5549
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$14[rsp], eax
$LN65@stbi__bmp_:
; Line 5551
	jmp	$LN8@stbi__bmp_
$LN9@stbi__bmp_:
; Line 5552
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5553
	jmp	$LN5@stbi__bmp_
$LN6@stbi__bmp_:
; Line 5554
	jmp	$LN62@stbi__bmp_
$LN61@stbi__bmp_:
; Line 5555
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN13@stbi__bmp_
$LN11@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN13@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN12@stbi__bmp_
; Line 5556
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN16@stbi__bmp_
$LN14@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN16@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN15@stbi__bmp_
; Line 5557
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR v$4[rsp], eax
	mov	DWORD PTR v2$15[rsp], 0
; Line 5558
	cmp	DWORD PTR info$[rsp], 4
	jne	SHORT $LN66@stbi__bmp_
; Line 5559
	mov	eax, DWORD PTR v$4[rsp]
	and	eax, 15
	mov	DWORD PTR v2$15[rsp], eax
; Line 5560
	mov	eax, DWORD PTR v$4[rsp]
	sar	eax, 4
	mov	DWORD PTR v$4[rsp], eax
$LN66@stbi__bmp_:
; Line 5562
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5563
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5564
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5565
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN67@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN67@stbi__bmp_:
; Line 5566
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	rcx, QWORD PTR s$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jne	SHORT $LN68@stbi__bmp_
	jmp	$LN15@stbi__bmp_
$LN68@stbi__bmp_:
; Line 5567
	cmp	DWORD PTR info$[rsp], 8
	jne	SHORT $LN113@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv381[rsp], eax
	jmp	SHORT $LN114@stbi__bmp_
$LN113@stbi__bmp_:
	mov	eax, DWORD PTR v2$15[rsp]
	mov	DWORD PTR tv381[rsp], eax
$LN114@stbi__bmp_:
	mov	eax, DWORD PTR tv381[rsp]
	mov	DWORD PTR v$4[rsp], eax
; Line 5568
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5569
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 1
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5570
	movsxd	rax, DWORD PTR v$4[rsp]
	lea	rax, QWORD PTR pal$[rsp+rax*4]
	mov	ecx, 1
	imul	rcx, rcx, 2
	movsxd	rdx, DWORD PTR z$1[rsp]
	mov	r8, QWORD PTR out$[rsp]
	movzx	eax, BYTE PTR [rax+rcx]
	mov	BYTE PTR [r8+rdx], al
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
; Line 5571
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN69@stbi__bmp_
	movsxd	rax, DWORD PTR z$1[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	mov	eax, DWORD PTR z$1[rsp]
	inc	eax
	mov	DWORD PTR z$1[rsp], eax
$LN69@stbi__bmp_:
; Line 5572
	jmp	$LN14@stbi__bmp_
$LN15@stbi__bmp_:
; Line 5573
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5574
	jmp	$LN11@stbi__bmp_
$LN12@stbi__bmp_:
$LN62@stbi__bmp_:
; Line 5576
	jmp	$LN51@stbi__bmp_
$LN50@stbi__bmp_:
; Line 5577
	mov	DWORD PTR rshift$16[rsp], 0
	mov	DWORD PTR gshift$17[rsp], 0
	mov	DWORD PTR bshift$18[rsp], 0
	mov	DWORD PTR ashift$19[rsp], 0
	mov	DWORD PTR rcount$10[rsp], 0
	mov	DWORD PTR gcount$11[rsp], 0
	mov	DWORD PTR bcount$12[rsp], 0
	mov	DWORD PTR acount$13[rsp], 0
; Line 5578
	mov	DWORD PTR z$2[rsp], 0
; Line 5579
	mov	DWORD PTR easy$7[rsp], 0
; Line 5580
	mov	eax, DWORD PTR info$[rsp+32]
	mov	ecx, DWORD PTR info$[rsp+4]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR info$[rsp+8]
	mov	edx, eax
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5581
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN70@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rax], 3
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN71@stbi__bmp_
$LN70@stbi__bmp_:
; Line 5582
	cmp	DWORD PTR info$[rsp], 16
	jne	SHORT $LN72@stbi__bmp_
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 1
	mov	DWORD PTR width$[rsp], eax
	jmp	SHORT $LN73@stbi__bmp_
$LN72@stbi__bmp_:
; Line 5583
	mov	DWORD PTR width$[rsp], 0
$LN73@stbi__bmp_:
$LN71@stbi__bmp_:
; Line 5584
	mov	eax, DWORD PTR width$[rsp]
	neg	eax
	and	eax, 3
	mov	DWORD PTR pad$[rsp], eax
; Line 5585
	cmp	DWORD PTR info$[rsp], 24
	jne	SHORT $LN74@stbi__bmp_
; Line 5586
	mov	DWORD PTR easy$7[rsp], 1
	jmp	SHORT $LN75@stbi__bmp_
$LN74@stbi__bmp_:
; Line 5587
	cmp	DWORD PTR info$[rsp], 32		; 00000020H
	jne	SHORT $LN76@stbi__bmp_
; Line 5588
	cmp	DWORD PTR mb$[rsp], 255			; 000000ffH
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 65280		; 0000ff00H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR mr$[rsp], 16711680		; 00ff0000H
	jne	SHORT $LN77@stbi__bmp_
	cmp	DWORD PTR ma$[rsp], -16777216		; ff000000H
	jne	SHORT $LN77@stbi__bmp_
; Line 5589
	mov	DWORD PTR easy$7[rsp], 2
$LN77@stbi__bmp_:
$LN76@stbi__bmp_:
$LN75@stbi__bmp_:
; Line 5591
	cmp	DWORD PTR easy$7[rsp], 0
	jne	$LN78@stbi__bmp_
; Line 5592
	cmp	DWORD PTR mr$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mg$[rsp], 0
	je	SHORT $LN80@stbi__bmp_
	cmp	DWORD PTR mb$[rsp], 0
	jne	SHORT $LN79@stbi__bmp_
$LN80@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG150297
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN115@stbi__bmp_
	mov	DWORD PTR tv442[rsp], 0
	jmp	SHORT $LN116@stbi__bmp_
$LN115@stbi__bmp_:
	mov	DWORD PTR tv442[rsp], 0
$LN116@stbi__bmp_:
	movsxd	rax, DWORD PTR tv442[rsp]
	jmp	$LN1@stbi__bmp_
$LN79@stbi__bmp_:
; Line 5594
	mov	ecx, DWORD PTR mr$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR rshift$16[rsp], eax
	mov	ecx, DWORD PTR mr$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR rcount$10[rsp], eax
; Line 5595
	mov	ecx, DWORD PTR mg$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR gshift$17[rsp], eax
	mov	ecx, DWORD PTR mg$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR gcount$11[rsp], eax
; Line 5596
	mov	ecx, DWORD PTR mb$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR bshift$18[rsp], eax
	mov	ecx, DWORD PTR mb$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR bcount$12[rsp], eax
; Line 5597
	mov	ecx, DWORD PTR ma$[rsp]
	call	?stbi__high_bit@@YAHI@Z			; stbi__high_bit
	sub	eax, 7
	mov	DWORD PTR ashift$19[rsp], eax
	mov	ecx, DWORD PTR ma$[rsp]
	call	?stbi__bitcount@@YAHI@Z			; stbi__bitcount
	mov	DWORD PTR acount$13[rsp], eax
; Line 5598
	cmp	DWORD PTR rcount$10[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR gcount$11[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR bcount$12[rsp], 8
	jg	SHORT $LN82@stbi__bmp_
	cmp	DWORD PTR acount$13[rsp], 8
	jle	SHORT $LN81@stbi__bmp_
$LN82@stbi__bmp_:
	mov	rcx, QWORD PTR out$[rsp]
	call	QWORD PTR __imp_free
	lea	rcx, OFFSET FLAT:$SG150300
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN117@stbi__bmp_
	mov	DWORD PTR tv472[rsp], 0
	jmp	SHORT $LN118@stbi__bmp_
$LN117@stbi__bmp_:
	mov	DWORD PTR tv472[rsp], 0
$LN118@stbi__bmp_:
	movsxd	rax, DWORD PTR tv472[rsp]
	jmp	$LN1@stbi__bmp_
$LN81@stbi__bmp_:
$LN78@stbi__bmp_:
; Line 5600
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN19@stbi__bmp_
$LN17@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN19@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN18@stbi__bmp_
; Line 5601
	cmp	DWORD PTR easy$7[rsp], 0
	je	$LN83@stbi__bmp_
; Line 5602
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@stbi__bmp_
$LN20@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN21@stbi__bmp_
; Line 5604
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5605
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	inc	ecx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5606
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	mov	ecx, DWORD PTR z$2[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 5607
	mov	eax, DWORD PTR z$2[rsp]
	add	eax, 3
	mov	DWORD PTR z$2[rsp], eax
; Line 5608
	cmp	DWORD PTR easy$7[rsp], 2
	jne	SHORT $LN119@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get8@@YAEPEAUstbi__context@@@Z	; stbi__get8
	movzx	eax, al
	mov	DWORD PTR tv504[rsp], eax
	jmp	SHORT $LN120@stbi__bmp_
$LN119@stbi__bmp_:
	mov	DWORD PTR tv504[rsp], 255		; 000000ffH
$LN120@stbi__bmp_:
	movzx	eax, BYTE PTR tv504[rsp]
	mov	BYTE PTR a$3[rsp], al
; Line 5609
	movzx	eax, BYTE PTR a$3[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5610
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN85@stbi__bmp_
	movsxd	rax, DWORD PTR z$2[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	movzx	edx, BYTE PTR a$3[rsp]
	mov	BYTE PTR [rcx+rax], dl
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN85@stbi__bmp_:
; Line 5611
	jmp	$LN20@stbi__bmp_
$LN21@stbi__bmp_:
; Line 5612
	jmp	$LN84@stbi__bmp_
$LN83@stbi__bmp_:
; Line 5613
	mov	eax, DWORD PTR info$[rsp]
	mov	DWORD PTR bpp$21[rsp], eax
; Line 5614
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN25@stbi__bmp_
$LN23@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN24@stbi__bmp_
; Line 5615
	cmp	DWORD PTR bpp$21[rsp], 16
	jne	SHORT $LN121@stbi__bmp_
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get16le@@YAHPEAUstbi__context@@@Z ; stbi__get16le
	mov	DWORD PTR tv521[rsp], eax
	jmp	SHORT $LN122@stbi__bmp_
$LN121@stbi__bmp_:
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__get32le@@YAIPEAUstbi__context@@@Z ; stbi__get32le
	mov	DWORD PTR tv521[rsp], eax
$LN122@stbi__bmp_:
	mov	eax, DWORD PTR tv521[rsp]
	mov	DWORD PTR v$8[rsp], eax
; Line 5617
	mov	eax, DWORD PTR mr$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR rcount$10[rsp]
	mov	edx, DWORD PTR rshift$16[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5618
	mov	eax, DWORD PTR mg$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR gcount$11[rsp]
	mov	edx, DWORD PTR gshift$17[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5619
	mov	eax, DWORD PTR mb$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR bcount$12[rsp]
	mov	edx, DWORD PTR bshift$18[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
; Line 5620
	cmp	DWORD PTR ma$[rsp], 0
	je	SHORT $LN123@stbi__bmp_
	mov	eax, DWORD PTR ma$[rsp]
	mov	ecx, DWORD PTR v$8[rsp]
	and	ecx, eax
	mov	eax, ecx
	mov	r8d, DWORD PTR acount$13[rsp]
	mov	edx, DWORD PTR ashift$19[rsp]
	mov	ecx, eax
	call	?stbi__shiftsigned@@YAHIHH@Z		; stbi__shiftsigned
	mov	DWORD PTR tv561[rsp], eax
	jmp	SHORT $LN124@stbi__bmp_
$LN123@stbi__bmp_:
	mov	DWORD PTR tv561[rsp], 255		; 000000ffH
$LN124@stbi__bmp_:
	mov	eax, DWORD PTR tv561[rsp]
	mov	DWORD PTR a$20[rsp], eax
; Line 5621
	mov	eax, DWORD PTR a$20[rsp]
	mov	ecx, DWORD PTR all_a$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR all_a$[rsp], eax
; Line 5622
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN86@stbi__bmp_
	mov	eax, DWORD PTR a$20[rsp]
	and	eax, 255				; 000000ffH
	movsxd	rcx, DWORD PTR z$2[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rdx+rcx], al
	mov	eax, DWORD PTR z$2[rsp]
	inc	eax
	mov	DWORD PTR z$2[rsp], eax
$LN86@stbi__bmp_:
; Line 5623
	jmp	$LN23@stbi__bmp_
$LN24@stbi__bmp_:
$LN84@stbi__bmp_:
; Line 5625
	mov	edx, DWORD PTR pad$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__skip@@YAXPEAUstbi__context@@H@Z	; stbi__skip
; Line 5626
	jmp	$LN17@stbi__bmp_
$LN18@stbi__bmp_:
$LN51@stbi__bmp_:
; Line 5630
	cmp	DWORD PTR target$[rsp], 4
	jne	SHORT $LN87@stbi__bmp_
	cmp	DWORD PTR all_a$[rsp], 0
	jne	SHORT $LN87@stbi__bmp_
; Line 5631
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	shl	eax, 2
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx+4]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN28@stbi__bmp_
$LN26@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN28@stbi__bmp_:
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN27@stbi__bmp_
; Line 5632
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	mov	BYTE PTR [rcx+rax], 255			; 000000ffH
	jmp	SHORT $LN26@stbi__bmp_
$LN27@stbi__bmp_:
$LN87@stbi__bmp_:
; Line 5634
	cmp	DWORD PTR flip_vertically$[rsp], 0
	je	$LN88@stbi__bmp_
; Line 5636
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN31@stbi__bmp_
$LN29@stbi__bmp_:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN31@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	sar	eax, 1
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN30@stbi__bmp_
; Line 5637
	mov	rax, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax]
	mov	eax, ecx
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p1$22[rsp], rax
; Line 5638
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	dec	eax
	sub	eax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	imul	eax, DWORD PTR [rcx]
	imul	eax, DWORD PTR target$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR out$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p2$23[rsp], rax
; Line 5639
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN34@stbi__bmp_
$LN32@stbi__bmp_:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN34@stbi__bmp_:
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	imul	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN33@stbi__bmp_
; Line 5640
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p1$22[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR t$5[rsp], al
	movsxd	rax, DWORD PTR i$[rsp]
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR p1$22[rsp]
	mov	r8, QWORD PTR p2$23[rsp]
	movzx	eax, BYTE PTR [r8+rax]
	mov	BYTE PTR [rdx+rcx], al
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p2$23[rsp]
	movzx	edx, BYTE PTR t$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 5641
	jmp	SHORT $LN32@stbi__bmp_
$LN33@stbi__bmp_:
; Line 5642
	jmp	$LN29@stbi__bmp_
$LN30@stbi__bmp_:
$LN88@stbi__bmp_:
; Line 5645
	cmp	DWORD PTR req_comp$[rsp], 0
	je	SHORT $LN89@stbi__bmp_
	mov	eax, DWORD PTR target$[rsp]
	cmp	DWORD PTR req_comp$[rsp], eax
	je	SHORT $LN89@stbi__bmp_
; Line 5646
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR s$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	r8d, DWORD PTR req_comp$[rsp]
	mov	edx, DWORD PTR target$[rsp]
	mov	rcx, QWORD PTR out$[rsp]
	call	?stbi__convert_format@@YAPEAEPEAEHHII@Z	; stbi__convert_format
	mov	QWORD PTR out$[rsp], rax
; Line 5647
	cmp	QWORD PTR out$[rsp], 0
	jne	SHORT $LN90@stbi__bmp_
	mov	rax, QWORD PTR out$[rsp]
	jmp	SHORT $LN1@stbi__bmp_
$LN90@stbi__bmp_:
$LN89@stbi__bmp_:
; Line 5650
	mov	rax, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx]
	mov	DWORD PTR [rax], ecx
; Line 5651
	mov	rax, QWORD PTR y$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	mov	DWORD PTR [rax], ecx
; Line 5652
	cmp	QWORD PTR comp$[rsp], 0
	je	SHORT $LN91@stbi__bmp_
	mov	rax, QWORD PTR comp$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rax], ecx
$LN91@stbi__bmp_:
; Line 5653
	mov	rax, QWORD PTR out$[rsp]
$LN1@stbi__bmp_:
; Line 5654
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1368				; 00000558H
	ret	0
?stbi__bmp_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__bmp_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__bmp_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__bmp_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5298
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5299
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__bmp_test_raw@@YAHPEAUstbi__context@@@Z ; stbi__bmp_test_raw
	mov	DWORD PTR r$[rsp], eax
; Line 5300
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5301
	mov	eax, DWORD PTR r$[rsp]
; Line 5302
	add	rsp, 56					; 00000038H
	ret	0
?stbi__bmp_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__bmp_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
?stbi__png_is16@@YAHPEAUstbi__context@@@Z PROC		; stbi__png_is16
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5266
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5268
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5269
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ; stbi__png_info_raw
	test	eax, eax
	jne	SHORT $LN2@stbi__png_
; Line 5270
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN2@stbi__png_:
; Line 5271
	cmp	DWORD PTR p$[rsp+32], 16
	je	SHORT $LN3@stbi__png_
; Line 5272
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5273
	xor	eax, eax
	jmp	SHORT $LN1@stbi__png_
$LN3@stbi__png_:
; Line 5275
	mov	eax, 1
$LN1@stbi__png_:
; Line 5276
	add	rsp, 88					; 00000058H
	ret	0
?stbi__png_is16@@YAHPEAUstbi__context@@@Z ENDP		; stbi__png_is16
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 32
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__png_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5259
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 5261
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5262
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__png_info_raw@@YAHPEAUstbi__png@@PEAH11@Z ; stbi__png_info_raw
; Line 5263
	add	rsp, 88					; 00000058H
	ret	0
?stbi__png_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__png_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
s$ = 112
x$ = 120
y$ = 128
comp$ = 136
req_comp$ = 144
ri$ = 152
?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__png_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5232
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 5234
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR p$[rsp], rax
; Line 5235
	mov	rax, QWORD PTR ri$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR p$[rsp]
	call	?stbi__do_png@@YAPEAXPEAUstbi__png@@PEAH11HPEAUstbi__result_info@@@Z ; stbi__do_png
; Line 5236
	add	rsp, 104				; 00000068H
	ret	0
?stbi__png_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__png_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?stbi__png_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__png_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 5239
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 5241
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__check_png_header@@YAHPEAUstbi__context@@@Z ; stbi__check_png_header
	mov	DWORD PTR r$[rsp], eax
; Line 5242
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 5243
	mov	eax, DWORD PTR r$[rsp]
; Line 5244
	add	rsp, 56					; 00000038H
	ret	0
?stbi__png_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__png_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
j$ = 40
s$ = 64
x$ = 72
y$ = 80
comp$ = 88
?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z PROC	; stbi__jpeg_info
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4013
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4015
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 4016
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG148892
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 4017
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 4018
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__jpeg_info_raw@@YAHPEAUstbi__jpeg@@PEAH11@Z ; stbi__jpeg_info_raw
	mov	DWORD PTR result$[rsp], eax
; Line 4019
	mov	rcx, QWORD PTR j$[rsp]
	call	QWORD PTR __imp_free
; Line 4020
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 4021
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_info@@YAHPEAUstbi__context@@PEAH11@Z ENDP	; stbi__jpeg_info
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
j$ = 56
result$ = 64
s$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
ri$ = 136
?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z PROC ; stbi__jpeg_load
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3975
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3977
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3978
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG148861
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi__jpeg
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN5@stbi__jpeg
$LN4@stbi__jpeg:
	mov	DWORD PTR tv70[rsp], 0
$LN5@stbi__jpeg:
	movsxd	rax, DWORD PTR tv70[rsp]
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3980
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3981
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__setup_jpeg
; Line 3982
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR j$[rsp]
	call	?load_jpeg_image@@YAPEAEPEAUstbi__jpeg@@PEAH11H@Z ; load_jpeg_image
	mov	QWORD PTR result$[rsp], rax
; Line 3983
	mov	rcx, QWORD PTR j$[rsp]
	call	QWORD PTR __imp_free
; Line 3984
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi__jpeg:
; Line 3985
	add	rsp, 88					; 00000058H
	ret	0
?stbi__jpeg_load@@YAPEAXPEAUstbi__context@@PEAH11HPEAUstbi__result_info@@@Z ENDP ; stbi__jpeg_load
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
j$ = 40
s$ = 64
?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z PROC		; stbi__jpeg_test
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 3988
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 3990
	mov	ecx, 18568				; 00004888H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR j$[rsp], rax
; Line 3991
	cmp	QWORD PTR j$[rsp], 0
	jne	SHORT $LN2@stbi__jpeg
	lea	rcx, OFFSET FLAT:$SG148870
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi__jpeg
$LN2@stbi__jpeg:
; Line 3992
	mov	rax, QWORD PTR j$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3993
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__setup_jpeg@@YAXPEAUstbi__jpeg@@@Z ; stbi__setup_jpeg
; Line 3994
	mov	edx, 1
	mov	rcx, QWORD PTR j$[rsp]
	call	?stbi__decode_jpeg_header@@YAHPEAUstbi__jpeg@@H@Z ; stbi__decode_jpeg_header
	mov	DWORD PTR r$[rsp], eax
; Line 3995
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__rewind@@YAXPEAUstbi__context@@@Z	; stbi__rewind
; Line 3996
	mov	rcx, QWORD PTR j$[rsp]
	call	QWORD PTR __imp_free
; Line 3997
	mov	eax, DWORD PTR r$[rsp]
$LN1@stbi__jpeg:
; Line 3998
	add	rsp, 56					; 00000038H
	ret	0
?stbi__jpeg_test@@YAHPEAUstbi__context@@@Z ENDP		; stbi__jpeg_test
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 8
?stbi__rewind@@YAXPEAUstbi__context@@@Z PROC		; stbi__rewind
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 884
	mov	QWORD PTR [rsp+8], rcx
; Line 888
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	QWORD PTR [rax+192], rcx
; Line 889
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+216]
	mov	QWORD PTR [rax+200], rcx
; Line 890
	ret	0
?stbi__rewind@@YAXPEAUstbi__context@@@Z ENDP		; stbi__rewind
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
f$ = 56
?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z PROC ; stbi__start_file
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 875
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 876
	mov	r8, QWORD PTR f$[rsp]
	lea	rdx, OFFSET FLAT:?stbi__stdio_callbacks@@3Ustbi_io_callbacks@@A
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 877
	add	rsp, 40					; 00000028H
	ret	0
?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ENDP ; stbi__start_file
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
user$ = 64
?stbi__stdio_eof@@YAHPEAX@Z PROC			; stbi__stdio_eof
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 863
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 864
	mov	rcx, QWORD PTR user$[rsp]
	call	QWORD PTR __imp_feof
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	rcx, QWORD PTR user$[rsp]
	call	QWORD PTR __imp_ferror
	test	eax, eax
	jne	SHORT $LN3@stbi__stdi
	mov	DWORD PTR tv70[rsp], 0
	jmp	SHORT $LN4@stbi__stdi
$LN3@stbi__stdi:
	mov	DWORD PTR tv70[rsp], 1
$LN4@stbi__stdi:
	mov	eax, DWORD PTR tv70[rsp]
; Line 865
	add	rsp, 56					; 00000038H
	ret	0
?stbi__stdio_eof@@YAHPEAX@Z ENDP			; stbi__stdio_eof
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ch$ = 32
user$ = 64
n$ = 72
?stbi__stdio_skip@@YAXPEAXH@Z PROC			; stbi__stdio_skip
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 853
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 855
	mov	r8d, 1
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	call	QWORD PTR __imp_fseek
; Line 856
	mov	rcx, QWORD PTR user$[rsp]
	call	QWORD PTR __imp_fgetc
	mov	DWORD PTR ch$[rsp], eax
; Line 857
	cmp	DWORD PTR ch$[rsp], -1
	je	SHORT $LN2@stbi__stdi
; Line 858
	mov	rdx, QWORD PTR user$[rsp]
	mov	ecx, DWORD PTR ch$[rsp]
	call	QWORD PTR __imp_ungetc
$LN2@stbi__stdi:
; Line 860
	add	rsp, 56					; 00000038H
	ret	0
?stbi__stdio_skip@@YAXPEAXH@Z ENDP			; stbi__stdio_skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
user$ = 48
data$ = 56
size$ = 64
?stbi__stdio_read@@YAHPEAXPEADH@Z PROC			; stbi__stdio_read
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 848
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 849
	movsxd	rax, DWORD PTR size$[rsp]
	mov	r9, QWORD PTR user$[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR data$[rsp]
	call	QWORD PTR __imp_fread
; Line 850
	add	rsp, 40					; 00000028H
	ret	0
?stbi__stdio_read@@YAHPEAXPEADH@Z ENDP			; stbi__stdio_read
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
s$ = 80
c$ = 88
user$ = 96
?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z PROC ; stbi__start_callbacks
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 834
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 835
	mov	rax, QWORD PTR s$[rsp]
	lea	rdi, QWORD PTR [rax+16]
	mov	rsi, QWORD PTR c$[rsp]
	mov	ecx, 24
	rep movsb
; Line 836
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR user$[rsp]
	mov	QWORD PTR [rax+40], rcx
; Line 837
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+52], 128			; 00000080H
; Line 838
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 1
; Line 839
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 840
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	QWORD PTR tv72[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv72[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 841
	mov	rcx, QWORD PTR s$[rsp]
	call	?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ; stbi__refill_buffer
; Line 842
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+200]
	mov	QWORD PTR [rax+216], rcx
; Line 843
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ENDP ; stbi__start_callbacks
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 0
s$ = 32
buffer$ = 40
len$ = 48
?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z PROC	; stbi__start_mem
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 824
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 825
	mov	rax, QWORD PTR s$[rsp]
	mov	QWORD PTR [rax+16], 0
; Line 826
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 827
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+184], 0
; Line 828
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+208], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax+192], rcx
; Line 829
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv73[rsp], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rax+216], rcx
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rax+200], rcx
; Line 830
	add	rsp, 24
	ret	0
?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ENDP	; stbi__start_mem
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 32
tv74 = 40
s$ = 64
?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z PROC	; stbi__refill_buffer
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1578
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1579
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv74[rsp], rax
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	r8d, DWORD PTR [rcx+52]
	mov	rdx, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rax+40]
	call	QWORD PTR tv74[rsp]
	mov	DWORD PTR n$[rsp], eax
; Line 1580
	mov	rax, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	mov	rcx, QWORD PTR [rcx+208]
	mov	rax, QWORD PTR [rax+192]
	sub	rax, rcx
	mov	rcx, QWORD PTR s$[rsp]
	add	eax, DWORD PTR [rcx+184]
	mov	rcx, QWORD PTR s$[rsp]
	mov	DWORD PTR [rcx+184], eax
; Line 1581
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN2@stbi__refi
; Line 1584
	mov	rax, QWORD PTR s$[rsp]
	mov	DWORD PTR [rax+48], 0
; Line 1585
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1586
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 57					; 00000039H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
; Line 1587
	mov	rax, QWORD PTR s$[rsp]
	mov	rax, QWORD PTR [rax+192]
	mov	BYTE PTR [rax], 0
; Line 1588
	jmp	SHORT $LN3@stbi__refi
$LN2@stbi__refi:
; Line 1589
	mov	rax, QWORD PTR s$[rsp]
	add	rax, 56					; 00000038H
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+192], rax
; Line 1590
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR s$[rsp]
	lea	rax, QWORD PTR [rcx+rax+56]
	mov	rcx, QWORD PTR s$[rsp]
	mov	QWORD PTR [rcx+200], rax
$LN3@stbi__refi:
; Line 1592
	add	rsp, 56					; 00000038H
	ret	0
?stbi__refill_buffer@@YAXPEAUstbi__context@@@Z ENDP	; stbi__refill_buffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
info3$ = 36
?stbi__sse2_available@@YAHXZ PROC			; stbi__sse2_available
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 752
	sub	rsp, 56					; 00000038H
; Line 753
	call	?stbi__cpuid3@@YAHXZ			; stbi__cpuid3
	mov	DWORD PTR info3$[rsp], eax
; Line 754
	mov	eax, DWORD PTR info3$[rsp]
	sar	eax, 26
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@stbi__sse2
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@stbi__sse2
$LN3@stbi__sse2:
	mov	DWORD PTR tv68[rsp], 0
$LN4@stbi__sse2:
	mov	eax, DWORD PTR tv68[rsp]
; Line 755
	add	rsp, 56					; 00000038H
	ret	0
?stbi__sse2_available@@YAHXZ ENDP			; stbi__sse2_available
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 0
__$ArrayPad$ = 16
?stbi__cpuid3@@YAHXZ PROC				; stbi__cpuid3
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 730
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 732
	mov	eax, 1
	xor	ecx, ecx
	cpuid
	lea	r8, QWORD PTR info$[rsp]
	mov	DWORD PTR [r8], eax
	mov	DWORD PTR [r8+4], ebx
	mov	DWORD PTR [r8+8], ecx
	mov	DWORD PTR [r8+12], edx
; Line 733
	mov	eax, 4
	imul	rax, rax, 3
	mov	eax, DWORD PTR info$[rsp+rax]
; Line 734
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?stbi__cpuid3@@YAHXZ ENDP				; stbi__cpuid3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_noheader_buffer PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4507
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4509
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4510
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4511
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4512
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4514
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4515
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_noheader_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
outlen$ = 4208
stbi_zlib_decode_noheader_malloc PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4491
$LN7:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4493
	mov	ecx, 16384				; 00004000H
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4494
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4495
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4496
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4497
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 1
	mov	r8d, 16384				; 00004000H
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4498
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4499
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4500
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4501
	mov	rcx, QWORD PTR a$[rsp+32]
	call	QWORD PTR __imp_free
; Line 4502
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4504
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_noheader_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
a$ = 48
__$ArrayPad$ = 4144
obuffer$ = 4176
olen$ = 4184
ibuffer$ = 4192
ilen$ = 4200
stbi_zlib_decode_buffer PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4480
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4168				; 00001048H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4482
	mov	rax, QWORD PTR ibuffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4483
	movsxd	rax, DWORD PTR ilen$[rsp]
	mov	rcx, QWORD PTR ibuffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4484
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	mov	r8d, DWORD PTR olen$[rsp]
	mov	rdx, QWORD PTR obuffer$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN2@stbi_zlib_
; Line 4485
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbi_zlib_
	jmp	SHORT $LN3@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4487
	mov	eax, -1
$LN3@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4168				; 00001048H
	ret	0
stbi_zlib_decode_buffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
buffer$ = 48
len$ = 56
outlen$ = 64
stbi_zlib_decode_malloc PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4459
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4460
	mov	r9, QWORD PTR outlen$[rsp]
	mov	r8d, 16384				; 00004000H
	mov	edx, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	stbi_zlib_decode_malloc_guesssize
; Line 4461
	add	rsp, 40					; 00000028H
	ret	0
stbi_zlib_decode_malloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
initial_size$ = 4208
outlen$ = 4216
parse_header$ = 4224
stbi_zlib_decode_malloc_guesssize_headerflag PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4464
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4466
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4467
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4468
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4469
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4470
	mov	eax, DWORD PTR parse_header$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4471
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4472
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4473
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4474
	mov	rcx, QWORD PTR a$[rsp+32]
	call	QWORD PTR __imp_free
; Line 4475
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_malloc_guesssize_headerflag ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
a$ = 64
__$ArrayPad$ = 4160
buffer$ = 4192
len$ = 4200
initial_size$ = 4208
outlen$ = 4216
stbi_zlib_decode_malloc_guesssize PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4443
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 4184				; 00001058H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4445
	movsxd	rax, DWORD PTR initial_size$[rsp]
	mov	rcx, rax
	call	?stbi__malloc@@YAPEAX_K@Z		; stbi__malloc
	mov	QWORD PTR p$[rsp], rax
; Line 4446
	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN2@stbi_zlib_
	xor	eax, eax
	jmp	$LN1@stbi_zlib_
$LN2@stbi_zlib_:
; Line 4447
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR a$[rsp], rax
; Line 4448
	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR a$[rsp+8], rax
; Line 4449
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, 1
	mov	r8d, DWORD PTR initial_size$[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	lea	rcx, QWORD PTR a$[rsp]
	call	?stbi__do_zlib@@YAHPEAUstbi__zbuf@@PEADHHH@Z ; stbi__do_zlib
	test	eax, eax
	je	SHORT $LN3@stbi_zlib_
; Line 4450
	cmp	QWORD PTR outlen$[rsp], 0
	je	SHORT $LN5@stbi_zlib_
	mov	rax, QWORD PTR a$[rsp+32]
	mov	rcx, QWORD PTR a$[rsp+24]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR outlen$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbi_zlib_:
; Line 4451
	mov	rax, QWORD PTR a$[rsp+32]
	jmp	SHORT $LN1@stbi_zlib_
; Line 4452
	jmp	SHORT $LN4@stbi_zlib_
$LN3@stbi_zlib_:
; Line 4453
	mov	rcx, QWORD PTR a$[rsp+32]
	call	QWORD PTR __imp_free
; Line 4454
	xor	eax, eax
$LN4@stbi_zlib_:
$LN1@stbi_zlib_:
; Line 4456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 4184				; 00001058H
	ret	0
stbi_zlib_decode_malloc_guesssize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load_thread PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1107
	mov	DWORD PTR [rsp+8], ecx
; Line 1108
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 1109
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 1110
	ret	0
stbi_set_flip_vertically_on_load_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb_thread PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4965
	mov	DWORD PTR [rsp+8], ecx
; Line 4966
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR [rax+rcx], edx
; Line 4967
	mov	eax, OFFSET FLAT:?stbi__de_iphone_flag_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
; Line 4968
	ret	0
stbi_convert_iphone_png_to_rgb_thread ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_flip$ = 8
stbi_set_flip_vertically_on_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1097
	mov	DWORD PTR [rsp+8], ecx
; Line 1098
	mov	eax, DWORD PTR flag_true_if_should_flip$[rsp]
	mov	DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA, eax
; Line 1099
	ret	0
stbi_set_flip_vertically_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_convert$ = 8
stbi_convert_iphone_png_to_rgb PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4947
	mov	DWORD PTR [rsp+8], ecx
; Line 4948
	mov	eax, DWORD PTR flag_true_if_should_convert$[rsp]
	mov	DWORD PTR ?stbi__de_iphone_flag_global@@3HA, eax
; Line 4949
	ret	0
stbi_convert_iphone_png_to_rgb ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flag_true_if_should_unpremultiply$ = 8
stbi_set_unpremultiply_on_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 4942
	mov	DWORD PTR [rsp+8], ecx
; Line 4943
	mov	eax, DWORD PTR flag_true_if_should_unpremultiply$[rsp]
	mov	DWORD PTR ?stbi__unpremultiply_on_load_global@@3HA, eax
; Line 4944
	ret	0
stbi_set_unpremultiply_on_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_16_bit_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7632
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7635
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7636
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 7637
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
	mov	DWORD PTR r$[rsp], eax
; Line 7638
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 7639
	mov	eax, DWORD PTR r$[rsp]
; Line 7640
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_16_bit_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_16_bit PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7622
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7623
	lea	rdx, OFFSET FLAT:$SG151699
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7625
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_is_16
	lea	rcx, OFFSET FLAT:$SG151701
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi_is_16
$LN2@stbi_is_16:
; Line 7626
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_16_bit_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7627
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 7628
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_is_16:
; Line 7629
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_16_bit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
r$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
stbi_info_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7611
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7614
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 7615
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 7616
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
	mov	DWORD PTR r$[rsp], eax
; Line 7617
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 7618
	mov	eax, DWORD PTR r$[rsp]
; Line 7619
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_info_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
x$ = 72
y$ = 80
comp$ = 88
stbi_info PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7601
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 7602
	lea	rdx, OFFSET FLAT:$SG151682
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 7604
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_info
	lea	rcx, OFFSET FLAT:$SG151684
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	jmp	SHORT $LN1@stbi_info
$LN2@stbi_info:
; Line 7605
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_info_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 7606
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 7607
	mov	eax, DWORD PTR result$[rsp]
$LN1@stbi_info:
; Line 7608
	add	rsp, 56					; 00000038H
	ret	0
stbi_info ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
stbi_is_16_bit_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7665
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7667
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 7668
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
; Line 7669
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_16_bit_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7658
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7660
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 7661
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__is_16_main@@YAHPEAUstbi__context@@@Z ; stbi__is_16_main
; Line 7662
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_16_bit_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
c$ = 288
user$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7651
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7653
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR c$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 7654
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
; Line 7655
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
x$ = 304
y$ = 312
comp$ = 320
stbi_info_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 7644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 7646
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 7647
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__info_main@@YAHPEAUstbi__context@@PEAH11@Z ; stbi__info_main
; Line 7648
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_info_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
retval_from_stbi_load$ = 48
stbi_image_free PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1082
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1083
	mov	rcx, QWORD PTR retval_from_stbi_load$[rsp]
	call	QWORD PTR __imp_free
; Line 1084
	add	rsp, 40					; 00000028H
	ret	0
stbi_image_free ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
stbi_failure_reason PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 971
	mov	eax, OFFSET FLAT:?stbi__g_failure_reason@@3PEBDEB
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rax, QWORD PTR [rax+rcx]
; Line 972
	ret	0
stbi_failure_reason ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
pos$ = 32
res$ = 36
s$ = 48
__$ArrayPad$ = 272
f$ = 304
stbi_is_hdr_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1523
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1525
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_ftell
	mov	DWORD PTR pos$[rsp], eax
; Line 1528
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1529
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
	mov	DWORD PTR res$[rsp], eax
; Line 1530
	xor	r8d, r8d
	mov	edx, DWORD PTR pos$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
; Line 1531
	mov	eax, DWORD PTR res$[rsp]
; Line 1536
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_is_hdr_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 32
f$ = 40
filename$ = 64
stbi_is_hdr PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1512
$LN4:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1513
	lea	rdx, OFFSET FLAT:$SG146190
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1514
	mov	DWORD PTR result$[rsp], 0
; Line 1515
	cmp	QWORD PTR f$[rsp], 0
	je	SHORT $LN2@stbi_is_hd
; Line 1516
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_is_hdr_from_file
	mov	DWORD PTR result$[rsp], eax
; Line 1517
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
$LN2@stbi_is_hd:
; Line 1519
	mov	eax, DWORD PTR result$[rsp]
; Line 1520
	add	rsp, 56					; 00000038H
	ret	0
stbi_is_hdr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
buffer$ = 288
len$ = 296
stbi_is_hdr_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1498
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1501
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1502
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
; Line 1508
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 32
__$ArrayPad$ = 256
clbk$ = 288
user$ = 296
stbi_is_hdr_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1540
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1543
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1544
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__hdr_test@@YAHPEAUstbi__context@@@Z ; stbi__hdr_test
; Line 1550
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
stbi_is_hdr_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_ldr_to_hdr_scale PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1556
	vmovss	DWORD PTR [rsp+8], xmm0
	vmovss	xmm0, DWORD PTR scale$[rsp]
	vmovss	DWORD PTR ?stbi__l2h_scale@@3MA, xmm0
	ret	0
stbi_ldr_to_hdr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_ldr_to_hdr_gamma PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1555
	vmovss	DWORD PTR [rsp+8], xmm0
	vmovss	xmm0, DWORD PTR gamma$[rsp]
	vmovss	DWORD PTR ?stbi__l2h_gamma@@3MA, xmm0
	ret	0
stbi_ldr_to_hdr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 8
stbi_hdr_to_ldr_scale PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1562
	vmovss	DWORD PTR [rsp+8], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm0, DWORD PTR scale$[rsp]
	vmovss	DWORD PTR ?stbi__h2l_scale_i@@3MA, xmm0
	ret	0
stbi_hdr_to_ldr_scale ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
gamma$ = 8
stbi_hdr_to_ldr_gamma PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1561
	vmovss	DWORD PTR [rsp+8], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm0, DWORD PTR gamma$[rsp]
	vmovss	DWORD PTR ?stbi__h2l_gamma_i@@3MA, xmm0
	ret	0
stbi_hdr_to_ldr_gamma ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
f$ = 304
x$ = 312
y$ = 320
comp$ = 328
req_comp$ = 336
stbi_loadf_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1484
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1486
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1487
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1488
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_loadf PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1474
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1476
	lea	rdx, OFFSET FLAT:$SG146169
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1477
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_loadf
	lea	rcx, OFFSET FLAT:$SG146171
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_loadf
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_loadf
$LN4@stbi_loadf:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_loadf:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_loadf
$LN2@stbi_loadf:
; Line 1478
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_loadf_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1479
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 1480
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_loadf:
; Line 1481
	add	rsp, 88					; 00000058H
	ret	0
stbi_loadf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1466
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1468
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1469
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1470
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_loadf_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1459
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1461
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1462
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__loadf_main@@YAPEAMPEAUstbi__context@@PEAH11H@Z ; stbi__loadf_main
; Line 1463
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_loadf_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file_16 PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1370
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1373
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1374
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
	mov	QWORD PTR result$[rsp], rax
; Line 1375
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1377
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
$LN2@stbi_load_:
; Line 1379
	mov	rax, QWORD PTR result$[rsp]
; Line 1380
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load_16 PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1383
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1384
	lea	rdx, OFFSET FLAT:$SG146068
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1386
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load_
	lea	rcx, OFFSET FLAT:$SG146070
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load_
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_load_:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load_
$LN2@stbi_load_:
; Line 1387
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file_16
	mov	QWORD PTR result$[rsp], rax
; Line 1388
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 1389
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load_:
; Line 1390
	add	rsp, 88					; 00000058H
	ret	0
stbi_load_16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1403
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1405
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1406
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
; Line 1407
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
channels_in_file$ = 336
desired_channels$ = 344
stbi_load_16_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1396
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1398
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1399
	mov	eax, DWORD PTR desired_channels$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR channels_in_file$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_16bit@@YAPEAGPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_16bit
; Line 1400
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_16_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv88 = 64
result$ = 72
s$ = 80
__$ArrayPad$ = 304
buffer$ = 336
len$ = 344
delays$ = 352
x$ = 360
y$ = 368
z$ = 376
comp$ = 384
req_comp$ = 392
stbi_load_gif_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1425
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1428
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1430
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	rax, QWORD PTR comp$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y$[rsp]
	mov	r8, QWORD PTR x$[rsp]
	mov	rdx, QWORD PTR delays$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_gif_main@@YAPEAXPEAUstbi__context@@PEAPEAHPEAH222H@Z ; stbi__load_gif_main
	mov	QWORD PTR result$[rsp], rax
; Line 1431
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_set@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	cmp	DWORD PTR [rax+rcx], 0
	je	SHORT $LN4@stbi_load_
	mov	eax, OFFSET FLAT:?stbi__vertically_flip_on_load_local@@3HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rax+rcx]
	mov	DWORD PTR tv88[rsp], eax
	jmp	SHORT $LN5@stbi_load_
$LN4@stbi_load_:
	mov	eax, DWORD PTR ?stbi__vertically_flip_on_load_global@@3HA
	mov	DWORD PTR tv88[rsp], eax
$LN5@stbi_load_:
	cmp	DWORD PTR tv88[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1432
	mov	rax, QWORD PTR comp$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR z$[rsp]
	mov	r9d, DWORD PTR [rax]
	mov	rax, QWORD PTR y$[rsp]
	mov	r8d, DWORD PTR [rax]
	mov	rax, QWORD PTR x$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbi__vertical_flip_slices@@YAXPEAXHHHH@Z ; stbi__vertical_flip_slices
$LN2@stbi_load_:
; Line 1435
	mov	rax, QWORD PTR result$[rsp]
; Line 1436
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	ret	0
stbi_load_gif_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
result$ = 48
s$ = 64
__$ArrayPad$ = 288
f$ = 320
x$ = 328
y$ = 336
comp$ = 344
req_comp$ = 352
stbi_load_from_file PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1357
$LN4:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1360
	mov	rdx, QWORD PTR f$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_file@@YAXPEAUstbi__context@@PEAU_iobuf@@@Z ; stbi__start_file
; Line 1361
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
	mov	QWORD PTR result$[rsp], rax
; Line 1362
	cmp	QWORD PTR result$[rsp], 0
	je	SHORT $LN2@stbi_load_
; Line 1364
	mov	rax, QWORD PTR s$[rsp+192]
	mov	rcx, QWORD PTR s$[rsp+200]
	sub	rcx, rax
	mov	rax, rcx
	neg	eax
	mov	r8d, 1
	mov	edx, eax
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fseek
$LN2@stbi_load_:
; Line 1366
	mov	rax, QWORD PTR result$[rsp]
; Line 1367
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	ret	0
stbi_load_from_file ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 48
f$ = 56
result$ = 64
filename$ = 96
x$ = 104
y$ = 112
comp$ = 120
req_comp$ = 128
stbi_load PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1347
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1348
	lea	rdx, OFFSET FLAT:$SG146031
	mov	rcx, QWORD PTR filename$[rsp]
	call	?stbi__fopen@@YAPEAU_iobuf@@PEBD0@Z	; stbi__fopen
	mov	QWORD PTR f$[rsp], rax
; Line 1350
	cmp	QWORD PTR f$[rsp], 0
	jne	SHORT $LN2@stbi_load
	lea	rcx, OFFSET FLAT:$SG146033
	call	?stbi__err@@YAHPEBD@Z			; stbi__err
	test	eax, eax
	je	SHORT $LN4@stbi_load
	mov	DWORD PTR tv71[rsp], 0
	jmp	SHORT $LN5@stbi_load
$LN4@stbi_load:
	mov	DWORD PTR tv71[rsp], 0
$LN5@stbi_load:
	movsxd	rax, DWORD PTR tv71[rsp]
	jmp	SHORT $LN1@stbi_load
$LN2@stbi_load:
; Line 1351
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	mov	rcx, QWORD PTR f$[rsp]
	call	stbi_load_from_file
	mov	QWORD PTR result$[rsp], rax
; Line 1352
	mov	rcx, QWORD PTR f$[rsp]
	call	QWORD PTR __imp_fclose
; Line 1353
	mov	rax, QWORD PTR result$[rsp]
$LN1@stbi_load:
; Line 1354
	add	rsp, 88					; 00000058H
	ret	0
stbi_load ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
clbk$ = 304
user$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_callbacks PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1417
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1419
	mov	r8, QWORD PTR user$[rsp]
	mov	rdx, QWORD PTR clbk$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_callbacks@@YAXPEAUstbi__context@@PEAUstbi_io_callbacks@@PEAX@Z ; stbi__start_callbacks
; Line 1420
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
; Line 1421
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_callbacks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s$ = 48
__$ArrayPad$ = 272
buffer$ = 304
len$ = 312
x$ = 320
y$ = 328
comp$ = 336
req_comp$ = 344
stbi_load_from_memory PROC
; File W:\cpp\void\vendor\stb\stb_image.h
; Line 1410
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1412
	mov	r8d, DWORD PTR len$[rsp]
	mov	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__start_mem@@YAXPEAUstbi__context@@PEBEH@Z ; stbi__start_mem
; Line 1413
	mov	eax, DWORD PTR req_comp$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR comp$[rsp]
	mov	r8, QWORD PTR y$[rsp]
	mov	rdx, QWORD PTR x$[rsp]
	lea	rcx, QWORD PTR s$[rsp]
	call	?stbi__load_and_postprocess_8bit@@YAPEAEPEAUstbi__context@@PEAH11H@Z ; stbi__load_and_postprocess_8bit
; Line 1414
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	ret	0
stbi_load_from_memory ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
off$1 = 32
i$ = 36
font_collection$ = 64
name_utf8$ = 72
flags$ = 80
?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z PROC	; stbtt_FindMatchingFont_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4920
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4922
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Find
$LN2@stbtt_Find:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Find:
; Line 4923
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	DWORD PTR off$1[rsp], eax
; Line 4924
	cmp	DWORD PTR off$1[rsp], 0
	jge	SHORT $LN5@stbtt_Find
	mov	eax, DWORD PTR off$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN5@stbtt_Find:
; Line 4925
	mov	r9d, DWORD PTR flags$[rsp]
	mov	r8, QWORD PTR name_utf8$[rsp]
	mov	edx, DWORD PTR off$1[rsp]
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__matches@@YAHPEAEI0H@Z		; stbtt__matches
	test	eax, eax
	je	SHORT $LN6@stbtt_Find
; Line 4926
	mov	eax, DWORD PTR off$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN6@stbtt_Find:
; Line 4927
	jmp	SHORT $LN2@stbtt_Find
$LN1@stbtt_Find:
; Line 4928
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z ENDP	; stbtt_FindMatchingFont_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
nm$ = 48
nlen$ = 52
hd$ = 56
fc$ = 80
offset$ = 88
name$ = 96
flags$ = 104
?stbtt__matches@@YAHPEAEI0H@Z PROC			; stbtt__matches
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4891
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4892
	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	mov	DWORD PTR nlen$[rsp], eax
; Line 4894
	mov	eax, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	jne	SHORT $LN2@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN2@stbtt__mat:
; Line 4897
	cmp	DWORD PTR flags$[rsp], 0
	je	SHORT $LN3@stbtt__mat
; Line 4898
	lea	r8, OFFSET FLAT:$SG145261
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR hd$[rsp], eax
; Line 4899
	mov	eax, DWORD PTR hd$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+44]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	and	eax, 7
	mov	ecx, DWORD PTR flags$[rsp]
	and	ecx, 7
	cmp	eax, ecx
	je	SHORT $LN4@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN4@stbtt__mat:
$LN3@stbtt__mat:
; Line 4902
	lea	r8, OFFSET FLAT:$SG145263
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR nm$[rsp], eax
; Line 4903
	cmp	DWORD PTR nm$[rsp], 0
	jne	SHORT $LN5@stbtt__mat
	xor	eax, eax
	jmp	$LN1@stbtt__mat
$LN5@stbtt__mat:
; Line 4905
	cmp	DWORD PTR flags$[rsp], 0
	je	$LN6@stbtt__mat
; Line 4907
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN8@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN8@stbtt__mat:
; Line 4908
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN9@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN9@stbtt__mat:
; Line 4909
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN10@stbtt__mat
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN10@stbtt__mat:
; Line 4910
	jmp	$LN7@stbtt__mat
$LN6@stbtt__mat:
; Line 4911
	mov	DWORD PTR [rsp+40], 17
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN11@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN11@stbtt__mat:
; Line 4912
	mov	DWORD PTR [rsp+40], 2
	mov	DWORD PTR [rsp+32], 1
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN12@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN12@stbtt__mat:
; Line 4913
	mov	DWORD PTR [rsp+40], -1
	mov	DWORD PTR [rsp+32], 3
	mov	r9d, DWORD PTR nlen$[rsp]
	mov	r8, QWORD PTR name$[rsp]
	mov	edx, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__matchpair@@YAHPEAEI0HHH@Z	; stbtt__matchpair
	test	eax, eax
	je	SHORT $LN13@stbtt__mat
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN13@stbtt__mat:
$LN7@stbtt__mat:
; Line 4916
	xor	eax, eax
$LN1@stbtt__mat:
; Line 4917
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__matches@@YAHPEAEI0H@Z ENDP			; stbtt__matches
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
matchlen$2 = 36
i$ = 40
platform$3 = 44
slen$4 = 48
encoding$5 = 52
off$6 = 56
count$ = 60
stringOffset$ = 64
id$7 = 68
language$8 = 72
tv231 = 80
fc$ = 112
nm$ = 120
name$ = 128
nlen$ = 136
target_id$ = 144
next_id$ = 152
?stbtt__matchpair@@YAHPEAEI0HHH@Z PROC			; stbtt__matchpair
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4844
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4846
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$[rsp], eax
; Line 4847
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	ecx, DWORD PTR nm$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR stringOffset$[rsp], eax
; Line 4849
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__mat
$LN2@stbtt__mat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__mat:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__mat
; Line 4850
	imul	eax, DWORD PTR i$[rsp], 12
	mov	ecx, DWORD PTR nm$[rsp]
	lea	eax, DWORD PTR [rcx+rax+6]
	mov	DWORD PTR loc$1[rsp], eax
; Line 4851
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR id$7[rsp], eax
; Line 4852
	mov	eax, DWORD PTR target_id$[rsp]
	cmp	DWORD PTR id$7[rsp], eax
	jne	$LN5@stbtt__mat
; Line 4854
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR platform$3[rsp], eax
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR encoding$5[rsp], eax
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR language$8[rsp], eax
; Line 4857
	cmp	DWORD PTR platform$3[rsp], 0
	je	SHORT $LN7@stbtt__mat
	cmp	DWORD PTR platform$3[rsp], 3
	jne	SHORT $LN8@stbtt__mat
	cmp	DWORD PTR encoding$5[rsp], 1
	je	SHORT $LN7@stbtt__mat
$LN8@stbtt__mat:
	cmp	DWORD PTR platform$3[rsp], 3
	jne	$LN6@stbtt__mat
	cmp	DWORD PTR encoding$5[rsp], 10
	jne	$LN6@stbtt__mat
$LN7@stbtt__mat:
; Line 4858
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR slen$4[rsp], eax
; Line 4859
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR off$6[rsp], eax
; Line 4862
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR off$6[rsp]
	add	rax, rcx
	mov	r9d, DWORD PTR slen$4[rsp]
	mov	r8, rax
	mov	edx, DWORD PTR nlen$[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	call	?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ; stbtt__CompareUTF8toUTF16_bigendian_prefix
	mov	DWORD PTR matchlen$2[rsp], eax
; Line 4863
	cmp	DWORD PTR matchlen$2[rsp], 0
	jl	$LN9@stbtt__mat
; Line 4865
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR count$[rsp]
	jge	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR next_id$[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR platform$3[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+14]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR encoding$5[rsp]
	jne	$LN10@stbtt__mat
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+16]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, DWORD PTR language$8[rsp]
	jne	$LN10@stbtt__mat
; Line 4866
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+20]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR slen$4[rsp], eax
; Line 4867
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR off$6[rsp], eax
; Line 4868
	cmp	DWORD PTR slen$4[rsp], 0
	jne	SHORT $LN12@stbtt__mat
; Line 4869
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jne	SHORT $LN14@stbtt__mat
; Line 4870
	mov	eax, 1
	jmp	$LN1@stbtt__mat
$LN14@stbtt__mat:
	jmp	$LN13@stbtt__mat
$LN12@stbtt__mat:
; Line 4871
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jge	$LN15@stbtt__mat
	movsxd	rax, DWORD PTR matchlen$2[rsp]
	mov	rcx, QWORD PTR name$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN15@stbtt__mat
; Line 4872
	mov	eax, DWORD PTR matchlen$2[rsp]
	inc	eax
	mov	DWORD PTR matchlen$2[rsp], eax
; Line 4873
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR off$6[rsp]
	add	rax, rcx
	mov	ecx, DWORD PTR matchlen$2[rsp]
	mov	edx, DWORD PTR nlen$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	movsxd	rdx, DWORD PTR matchlen$2[rsp]
	mov	r8, QWORD PTR name$[rsp]
	add	r8, rdx
	mov	rdx, r8
	mov	QWORD PTR tv231[rsp], rdx
	mov	r9d, DWORD PTR slen$4[rsp]
	mov	r8, rax
	mov	edx, ecx
	mov	rax, QWORD PTR tv231[rsp]
	mov	rcx, rax
	call	?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ; stbtt_CompareUTF8toUTF16_bigendian_internal
	test	eax, eax
	je	SHORT $LN16@stbtt__mat
; Line 4874
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN16@stbtt__mat:
$LN15@stbtt__mat:
$LN13@stbtt__mat:
; Line 4876
	jmp	SHORT $LN11@stbtt__mat
$LN10@stbtt__mat:
; Line 4878
	mov	eax, DWORD PTR nlen$[rsp]
	cmp	DWORD PTR matchlen$2[rsp], eax
	jne	SHORT $LN17@stbtt__mat
; Line 4879
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__mat
$LN17@stbtt__mat:
$LN11@stbtt__mat:
$LN9@stbtt__mat:
$LN6@stbtt__mat:
$LN5@stbtt__mat:
; Line 4886
	jmp	$LN2@stbtt__mat
$LN3@stbtt__mat:
; Line 4887
	xor	eax, eax
$LN1@stbtt__mat:
; Line 4888
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__matchpair@@YAHPEAEI0HHH@Z ENDP			; stbtt__matchpair
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
s1$ = 64
len1$ = 72
s2$ = 80
len2$ = 88
?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z PROC ; stbtt_CompareUTF8toUTF16_bigendian_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4816
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 4817
	mov	r9d, DWORD PTR len2$[rsp]
	mov	r8, QWORD PTR s2$[rsp]
	mov	edx, DWORD PTR len1$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	call	?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ; stbtt__CompareUTF8toUTF16_bigendian_prefix
	cmp	DWORD PTR len1$[rsp], eax
	jne	SHORT $LN3@stbtt_Comp
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@stbtt_Comp
$LN3@stbtt_Comp:
	mov	DWORD PTR tv70[rsp], 0
$LN4@stbtt_Comp:
	mov	eax, DWORD PTR tv70[rsp]
; Line 4818
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ENDP ; stbtt_CompareUTF8toUTF16_bigendian_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
ch$1 = 4
c$2 = 8
ch2$3 = 12
tv85 = 16
tv84 = 20
tv132 = 24
tv131 = 28
tv143 = 32
tv142 = 36
tv175 = 40
tv174 = 44
tv186 = 48
tv185 = 52
tv197 = 56
tv196 = 60
tv207 = 64
tv206 = 68
tv226 = 72
tv225 = 76
tv238 = 80
tv237 = 84
tv249 = 88
tv248 = 92
s1$ = 112
len1$ = 120
s2$ = 128
len2$ = 136
?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z PROC ; stbtt__CompareUTF8toUTF16_bigendian_prefix
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4777
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4778
	mov	DWORD PTR i$[rsp], 0
$LN2@stbtt__Com:
; Line 4781
	cmp	DWORD PTR len2$[rsp], 0
	je	$LN3@stbtt__Com
; Line 4782
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	WORD PTR ch$1[rsp], ax
; Line 4783
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 128				; 00000080H
	jge	SHORT $LN4@stbtt__Com
; Line 4784
	mov	eax, DWORD PTR len1$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN6@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN6@stbtt__Com:
; Line 4785
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv84[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	mov	DWORD PTR tv85[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv85[rsp]
	cmp	DWORD PTR tv84[rsp], eax
	je	SHORT $LN7@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN7@stbtt__Com:
	jmp	$LN5@stbtt__Com
$LN4@stbtt__Com:
; Line 4786
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 2048				; 00000800H
	jge	$LN8@stbtt__Com
; Line 4787
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN10@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN10@stbtt__Com:
; Line 4788
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv131[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 6
	add	eax, 192				; 000000c0H
	mov	DWORD PTR tv132[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv132[rsp]
	cmp	DWORD PTR tv131[rsp], eax
	je	SHORT $LN11@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN11@stbtt__Com:
; Line 4789
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv142[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv143[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv143[rsp]
	cmp	DWORD PTR tv142[rsp], eax
	je	SHORT $LN12@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN12@stbtt__Com:
	jmp	$LN9@stbtt__Com
$LN8@stbtt__Com:
; Line 4790
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 55296				; 0000d800H
	jl	$LN13@stbtt__Com
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 56320				; 0000dc00H
	jge	$LN13@stbtt__Com
; Line 4792
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR s2$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR s2$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	mov	WORD PTR ch2$3[rsp], ax
; Line 4793
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN15@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN15@stbtt__Com:
; Line 4794
	movzx	eax, WORD PTR ch$1[rsp]
	sub	eax, 55296				; 0000d800H
	shl	eax, 10
	movzx	ecx, WORD PTR ch2$3[rsp]
	lea	eax, DWORD PTR [rax+rcx+9216]
	mov	DWORD PTR c$2[rsp], eax
; Line 4795
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv174[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 18
	add	eax, 240				; 000000f0H
	mov	DWORD PTR tv175[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv175[rsp]
	cmp	DWORD PTR tv174[rsp], eax
	je	SHORT $LN16@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN16@stbtt__Com:
; Line 4796
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv185[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 12
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv186[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv186[rsp]
	cmp	DWORD PTR tv185[rsp], eax
	je	SHORT $LN17@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN17@stbtt__Com:
; Line 4797
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv196[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	shr	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv197[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv197[rsp]
	cmp	DWORD PTR tv196[rsp], eax
	je	SHORT $LN18@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN18@stbtt__Com:
; Line 4798
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv206[rsp], eax
	mov	eax, DWORD PTR c$2[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv207[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv207[rsp]
	cmp	DWORD PTR tv206[rsp], eax
	je	SHORT $LN19@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN19@stbtt__Com:
; Line 4799
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4800
	mov	eax, DWORD PTR len2$[rsp]
	sub	eax, 2
	mov	DWORD PTR len2$[rsp], eax
	jmp	$LN14@stbtt__Com
$LN13@stbtt__Com:
; Line 4801
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 56320				; 0000dc00H
	jl	SHORT $LN20@stbtt__Com
	movzx	eax, WORD PTR ch$1[rsp]
	cmp	eax, 57344				; 0000e000H
	jge	SHORT $LN20@stbtt__Com
; Line 4802
	mov	eax, -1
	jmp	$LN1@stbtt__Com
; Line 4803
	jmp	$LN21@stbtt__Com
$LN20@stbtt__Com:
; Line 4804
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cmp	eax, DWORD PTR len1$[rsp]
	jl	SHORT $LN22@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN22@stbtt__Com:
; Line 4805
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv225[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 12
	add	eax, 224				; 000000e0H
	mov	DWORD PTR tv226[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv226[rsp]
	cmp	DWORD PTR tv225[rsp], eax
	je	SHORT $LN23@stbtt__Com
	mov	eax, -1
	jmp	$LN1@stbtt__Com
$LN23@stbtt__Com:
; Line 4806
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv237[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	sar	eax, 6
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv238[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv238[rsp]
	cmp	DWORD PTR tv237[rsp], eax
	je	SHORT $LN24@stbtt__Com
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Com
$LN24@stbtt__Com:
; Line 4807
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR tv248[rsp], eax
	movzx	eax, WORD PTR ch$1[rsp]
	and	eax, 63					; 0000003fH
	add	eax, 128				; 00000080H
	mov	DWORD PTR tv249[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	mov	eax, DWORD PTR tv249[rsp]
	cmp	DWORD PTR tv248[rsp], eax
	je	SHORT $LN25@stbtt__Com
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Com
$LN25@stbtt__Com:
$LN21@stbtt__Com:
$LN14@stbtt__Com:
$LN9@stbtt__Com:
$LN5@stbtt__Com:
; Line 4809
	mov	rax, QWORD PTR s2$[rsp]
	add	rax, 2
	mov	QWORD PTR s2$[rsp], rax
; Line 4810
	mov	eax, DWORD PTR len2$[rsp]
	sub	eax, 2
	mov	DWORD PTR len2$[rsp], eax
; Line 4811
	jmp	$LN2@stbtt__Com
$LN3@stbtt__Com:
; Line 4812
	mov	eax, DWORD PTR i$[rsp]
$LN1@stbtt__Com:
; Line 4813
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__CompareUTF8toUTF16_bigendian_prefix@@YAHPEAEH0H@Z ENDP ; stbtt__CompareUTF8toUTF16_bigendian_prefix
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
q$ = 32
p$ = 36
s$ = 40
u$1 = 44
v$2 = 48
m$3 = 52
u$4 = 56
d$ = 60
z$5 = 64
p3$ = 68
v$6 = 72
n$7 = 76
a$ = 96
b$ = 104
c$ = 112
r$ = 120
?stbtt__solve_cubic@@YAHMMMPEAM@Z PROC			; stbtt__solve_cubic
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4545
	mov	QWORD PTR [rsp+32], r9
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	vmovss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 88					; 00000058H
; Line 4546
	vmovss	xmm0, DWORD PTR a$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vdivss	xmm0, xmm0, DWORD PTR __real@40400000
	vmovss	DWORD PTR s$[rsp], xmm0
; Line 4547
	vmovss	xmm0, DWORD PTR a$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR a$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40400000
	vmovss	xmm1, DWORD PTR b$[rsp]
	vsubss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR p$[rsp], xmm0
; Line 4548
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR a$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR a$[rsp]
	vmovss	xmm1, DWORD PTR __real@41100000
	vmulss	xmm1, xmm1, DWORD PTR b$[rsp]
	vsubss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR a$[rsp]
	vmulss	xmm0, xmm1, xmm0
	vdivss	xmm0, xmm0, DWORD PTR __real@41d80000
	vaddss	xmm0, xmm0, DWORD PTR c$[rsp]
	vmovss	DWORD PTR q$[rsp], xmm0
; Line 4549
	vmovss	xmm0, DWORD PTR p$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR p$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR p$[rsp]
	vmovss	DWORD PTR p3$[rsp], xmm0
; Line 4550
	vmovss	xmm0, DWORD PTR q$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR q$[rsp]
	vmovss	xmm1, DWORD PTR __real@40800000
	vmulss	xmm1, xmm1, DWORD PTR p3$[rsp]
	vdivss	xmm1, xmm1, DWORD PTR __real@41d80000
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR d$[rsp], xmm0
; Line 4551
	vmovss	xmm0, DWORD PTR d$[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jb	$LN2@stbtt__sol
; Line 4552
	vcvtss2sd xmm0, xmm0, DWORD PTR d$[rsp]
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR z$5[rsp], xmm0
; Line 4553
	vmovss	xmm0, DWORD PTR q$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vaddss	xmm0, xmm0, DWORD PTR z$5[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR u$1[rsp], xmm0
; Line 4554
	vmovss	xmm0, DWORD PTR q$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vsubss	xmm0, xmm0, DWORD PTR z$5[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR v$2[rsp], xmm0
; Line 4555
	vmovss	xmm0, DWORD PTR u$1[rsp]
	call	?stbtt__cuberoot@@YAMM@Z		; stbtt__cuberoot
	vmovss	DWORD PTR u$1[rsp], xmm0
; Line 4556
	vmovss	xmm0, DWORD PTR v$2[rsp]
	call	?stbtt__cuberoot@@YAMM@Z		; stbtt__cuberoot
	vmovss	DWORD PTR v$2[rsp], xmm0
; Line 4557
	vmovss	xmm0, DWORD PTR s$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR u$1[rsp]
	vaddss	xmm0, xmm0, DWORD PTR v$2[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR r$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 4558
	mov	eax, 1
	jmp	$LN1@stbtt__sol
; Line 4559
	jmp	$LN3@stbtt__sol
$LN2@stbtt__sol:
; Line 4560
	vmovss	xmm0, DWORD PTR p$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vdivss	xmm0, xmm0, DWORD PTR __real@40400000
	vcvtss2sd xmm0, xmm0, xmm0
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR u$4[rsp], xmm0
; Line 4561
	vmovss	xmm0, DWORD PTR __real@c1d80000
	vdivss	xmm0, xmm0, DWORD PTR p3$[rsp]
	vcvtss2sd xmm0, xmm0, xmm0
	call	sqrt
	vxorpd	xmm0, xmm0, QWORD PTR __xmm@80000000000000008000000000000000
	vcvtss2sd xmm1, xmm1, DWORD PTR q$[rsp]
	vmulsd	xmm0, xmm0, xmm1
	vdivsd	xmm0, xmm0, QWORD PTR __real@4000000000000000
	call	acos
	vcvtsd2ss xmm0, xmm0, xmm0
	vdivss	xmm0, xmm0, DWORD PTR __real@40400000
	vmovss	DWORD PTR v$6[rsp], xmm0
; Line 4562
	vcvtss2sd xmm0, xmm0, DWORD PTR v$6[rsp]
	call	cos
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR m$3[rsp], xmm0
; Line 4563
	vcvtss2sd xmm0, xmm0, DWORD PTR v$6[rsp]
	vsubsd	xmm0, xmm0, QWORD PTR __real@3ff921fafc8b007a
	call	cos
	vcvtsd2ss xmm0, xmm0, xmm0
	vmulss	xmm0, xmm0, DWORD PTR __real@3fddb3d7
	vmovss	DWORD PTR n$7[rsp], xmm0
; Line 4564
	vmovss	xmm0, DWORD PTR u$4[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR m$3[rsp]
	vmovss	xmm1, DWORD PTR s$[rsp]
	vaddss	xmm0, xmm1, xmm0
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR r$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 4565
	vmovss	xmm0, DWORD PTR m$3[rsp]
	vaddss	xmm0, xmm0, DWORD PTR n$7[rsp]
	vmovss	xmm1, DWORD PTR u$4[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR s$[rsp]
	vsubss	xmm0, xmm1, xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR r$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 4566
	vmovss	xmm0, DWORD PTR m$3[rsp]
	vsubss	xmm0, xmm0, DWORD PTR n$7[rsp]
	vmovss	xmm1, DWORD PTR u$4[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR s$[rsp]
	vsubss	xmm0, xmm1, xmm0
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR r$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 4571
	mov	eax, 3
$LN3@stbtt__sol:
$LN1@stbtt__sol:
; Line 4573
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__solve_cubic@@YAHMMMPEAM@Z ENDP			; stbtt__solve_cubic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$ = 48
?stbtt__cuberoot@@YAMM@Z PROC				; stbtt__cuberoot
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4536
	vmovss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 4537
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR x$[rsp]
	jbe	SHORT $LN2@stbtt__cub
; Line 4538
	vmovss	xmm0, DWORD PTR x$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vcvtss2sd xmm0, xmm0, xmm0
	vmovsd	xmm1, QWORD PTR __real@3fd5555560000000
	call	pow
	vcvtsd2ss xmm0, xmm0, xmm0
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	jmp	SHORT $LN1@stbtt__cub
	jmp	SHORT $LN3@stbtt__cub
$LN2@stbtt__cub:
; Line 4540
	vcvtss2sd xmm0, xmm0, DWORD PTR x$[rsp]
	vmovsd	xmm1, QWORD PTR __real@3fd5555560000000
	call	pow
	vcvtsd2ss xmm0, xmm0, xmm0
$LN3@stbtt__cub:
$LN1@stbtt__cub:
; Line 4541
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__cuberoot@@YAMM@Z ENDP				; stbtt__cuberoot
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
y1$1 = 52
y0$2 = 56
y2$3 = 60
x1$4 = 64
winding$ = 68
x0$5 = 72
y0$6 = 76
y1$7 = 80
x2$8 = 84
x0$9 = 88
x1$10 = 92
y_frac$ = 96
tv140 = 100
tv144 = 104
tv148 = 108
tv163 = 112
tv204 = 116
tv207 = 120
tv208 = 124
tv210 = 128
tv213 = 132
tv214 = 136
tv216 = 140
tv219 = 144
tv220 = 148
tv276 = 152
tv280 = 156
tv284 = 160
tv299 = 164
tv319 = 168
num_hits$11 = 172
tv364 = 176
q1$12 = 184
ay$13 = 192
by$14 = 196
ax$15 = 200
x_inter$16 = 204
x_inter$17 = 208
q2$18 = 216
q0$19 = 224
ray$ = 232
orig$ = 240
hits$20 = 248
__$ArrayPad$ = 264
x$ = 288
y$ = 296
nverts$ = 304
verts$ = 312
?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z PROC ; stbtt__compute_crossings_x
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4468
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	vmovss	DWORD PTR [rsp+16], xmm1
	vmovss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 280				; 00000118H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4470
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR ray$[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR ray$[rsp+4], xmm0
; Line 4472
	mov	DWORD PTR winding$[rsp], 0
; Line 4475
	vcvtss2sd xmm0, xmm0, DWORD PTR y$[rsp]
	vmovsd	xmm1, QWORD PTR __real@3ff0000000000000
	call	fmod
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR y_frac$[rsp], xmm0
; Line 4476
	vmovss	xmm0, DWORD PTR __real@3c23d70a
	vcomiss	xmm0, DWORD PTR y_frac$[rsp]
	jbe	SHORT $LN5@stbtt__com
; Line 4477
	vmovss	xmm0, DWORD PTR y$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@3c23d70a
	vmovss	DWORD PTR y$[rsp], xmm0
	jmp	SHORT $LN6@stbtt__com
$LN5@stbtt__com:
; Line 4478
	vmovss	xmm0, DWORD PTR y_frac$[rsp]
	vcomiss	xmm0, DWORD PTR __real@3f7d70a4
	jbe	SHORT $LN7@stbtt__com
; Line 4479
	vmovss	xmm0, DWORD PTR y$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR __real@3c23d70a
	vmovss	DWORD PTR y$[rsp], xmm0
$LN7@stbtt__com:
$LN6@stbtt__com:
; Line 4481
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR x$[rsp]
	vmovss	DWORD PTR orig$[rsp+rax], xmm0
; Line 4482
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	xmm0, DWORD PTR y$[rsp]
	vmovss	DWORD PTR orig$[rsp+rax], xmm0
; Line 4485
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__com
$LN2@stbtt__com:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__com:
	mov	eax, DWORD PTR nverts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__com
; Line 4486
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN8@stbtt__com
; Line 4487
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$9[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$6[rsp], eax
; Line 4488
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x1$10[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y1$7[rsp], eax
; Line 4489
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN23@stbtt__com
	mov	eax, DWORD PTR y0$6[rsp]
	mov	DWORD PTR tv140[rsp], eax
	jmp	SHORT $LN24@stbtt__com
$LN23@stbtt__com:
	mov	eax, DWORD PTR y1$7[rsp]
	mov	DWORD PTR tv140[rsp], eax
$LN24@stbtt__com:
	vcvtsi2ss xmm0, xmm0, DWORD PTR tv140[rsp]
	vmovss	xmm1, DWORD PTR y$[rsp]
	vcomiss	xmm1, xmm0
	jbe	$LN9@stbtt__com
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN25@stbtt__com
	mov	eax, DWORD PTR y1$7[rsp]
	mov	DWORD PTR tv144[rsp], eax
	jmp	SHORT $LN26@stbtt__com
$LN25@stbtt__com:
	mov	eax, DWORD PTR y0$6[rsp]
	mov	DWORD PTR tv144[rsp], eax
$LN26@stbtt__com:
	vcvtsi2ss xmm0, xmm0, DWORD PTR tv144[rsp]
	vcomiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN9@stbtt__com
	mov	eax, DWORD PTR x1$10[rsp]
	cmp	DWORD PTR x0$9[rsp], eax
	jge	SHORT $LN27@stbtt__com
	mov	eax, DWORD PTR x0$9[rsp]
	mov	DWORD PTR tv148[rsp], eax
	jmp	SHORT $LN28@stbtt__com
$LN27@stbtt__com:
	mov	eax, DWORD PTR x1$10[rsp]
	mov	DWORD PTR tv148[rsp], eax
$LN28@stbtt__com:
	vcvtsi2ss xmm0, xmm0, DWORD PTR tv148[rsp]
	vmovss	xmm1, DWORD PTR x$[rsp]
	vcomiss	xmm1, xmm0
	jbe	$LN9@stbtt__com
; Line 4490
	vcvtsi2ss xmm0, xmm0, DWORD PTR y0$6[rsp]
	vmovss	xmm1, DWORD PTR y$[rsp]
	vsubss	xmm0, xmm1, xmm0
	mov	eax, DWORD PTR y0$6[rsp]
	mov	ecx, DWORD PTR y1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm1, xmm1, eax
	vdivss	xmm0, xmm0, xmm1
	mov	eax, DWORD PTR x0$9[rsp]
	mov	ecx, DWORD PTR x1$10[rsp]
	sub	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm1, xmm1, eax
	vmulss	xmm0, xmm0, xmm1
	vcvtsi2ss xmm1, xmm1, DWORD PTR x0$9[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR x_inter$17[rsp], xmm0
; Line 4491
	vmovss	xmm0, DWORD PTR x$[rsp]
	vcomiss	xmm0, DWORD PTR x_inter$17[rsp]
	jbe	SHORT $LN10@stbtt__com
; Line 4492
	mov	eax, DWORD PTR y1$7[rsp]
	cmp	DWORD PTR y0$6[rsp], eax
	jge	SHORT $LN29@stbtt__com
	mov	DWORD PTR tv163[rsp], 1
	jmp	SHORT $LN30@stbtt__com
$LN29@stbtt__com:
	mov	DWORD PTR tv163[rsp], -1
$LN30@stbtt__com:
	mov	eax, DWORD PTR tv163[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN10@stbtt__com:
$LN9@stbtt__com:
$LN8@stbtt__com:
; Line 4495
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN11@stbtt__com
; Line 4496
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$5[rsp], eax
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$2[rsp], eax
; Line 4497
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	mov	DWORD PTR x1$4[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	mov	DWORD PTR y1$1[rsp], eax
; Line 4498
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x2$8[rsp], eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y2$3[rsp], eax
; Line 4499
	mov	eax, DWORD PTR x2$8[rsp]
	cmp	DWORD PTR x1$4[rsp], eax
	jge	SHORT $LN31@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv204[rsp], eax
	jmp	SHORT $LN32@stbtt__com
$LN31@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	mov	DWORD PTR tv204[rsp], eax
$LN32@stbtt__com:
	mov	eax, DWORD PTR tv204[rsp]
	cmp	DWORD PTR x0$5[rsp], eax
	jge	SHORT $LN35@stbtt__com
	mov	eax, DWORD PTR x0$5[rsp]
	mov	DWORD PTR tv208[rsp], eax
	jmp	SHORT $LN36@stbtt__com
$LN35@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	cmp	DWORD PTR x1$4[rsp], eax
	jge	SHORT $LN33@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv207[rsp], eax
	jmp	SHORT $LN34@stbtt__com
$LN33@stbtt__com:
	mov	eax, DWORD PTR x2$8[rsp]
	mov	DWORD PTR tv207[rsp], eax
$LN34@stbtt__com:
	mov	eax, DWORD PTR tv207[rsp]
	mov	DWORD PTR tv208[rsp], eax
$LN36@stbtt__com:
	mov	eax, DWORD PTR tv208[rsp]
	mov	DWORD PTR ax$15[rsp], eax
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN37@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv210[rsp], eax
	jmp	SHORT $LN38@stbtt__com
$LN37@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv210[rsp], eax
$LN38@stbtt__com:
	mov	eax, DWORD PTR tv210[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN41@stbtt__com
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv214[rsp], eax
	jmp	SHORT $LN42@stbtt__com
$LN41@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN39@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv213[rsp], eax
	jmp	SHORT $LN40@stbtt__com
$LN39@stbtt__com:
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv213[rsp], eax
$LN40@stbtt__com:
	mov	eax, DWORD PTR tv213[rsp]
	mov	DWORD PTR tv214[rsp], eax
$LN42@stbtt__com:
	mov	eax, DWORD PTR tv214[rsp]
	mov	DWORD PTR ay$13[rsp], eax
; Line 4500
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN43@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv216[rsp], eax
	jmp	SHORT $LN44@stbtt__com
$LN43@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv216[rsp], eax
$LN44@stbtt__com:
	mov	eax, DWORD PTR tv216[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN47@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	cmp	DWORD PTR y1$1[rsp], eax
	jge	SHORT $LN45@stbtt__com
	mov	eax, DWORD PTR y2$3[rsp]
	mov	DWORD PTR tv219[rsp], eax
	jmp	SHORT $LN46@stbtt__com
$LN45@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv219[rsp], eax
$LN46@stbtt__com:
	mov	eax, DWORD PTR tv219[rsp]
	mov	DWORD PTR tv220[rsp], eax
	jmp	SHORT $LN48@stbtt__com
$LN47@stbtt__com:
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv220[rsp], eax
$LN48@stbtt__com:
	mov	eax, DWORD PTR tv220[rsp]
	mov	DWORD PTR by$14[rsp], eax
; Line 4501
	vcvtsi2ss xmm0, xmm0, DWORD PTR ay$13[rsp]
	vmovss	xmm1, DWORD PTR y$[rsp]
	vcomiss	xmm1, xmm0
	jbe	$LN12@stbtt__com
	vcvtsi2ss xmm0, xmm0, DWORD PTR by$14[rsp]
	vcomiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN12@stbtt__com
	vcvtsi2ss xmm0, xmm0, DWORD PTR ax$15[rsp]
	vmovss	xmm1, DWORD PTR x$[rsp]
	vcomiss	xmm1, xmm0
	jbe	$LN12@stbtt__com
; Line 4504
	vcvtsi2ss xmm0, xmm0, DWORD PTR x0$5[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	DWORD PTR q0$19[rsp+rax], xmm0
; Line 4505
	vcvtsi2ss xmm0, xmm0, DWORD PTR y0$2[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	DWORD PTR q0$19[rsp+rax], xmm0
; Line 4506
	vcvtsi2ss xmm0, xmm0, DWORD PTR x1$4[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	DWORD PTR q1$12[rsp+rax], xmm0
; Line 4507
	vcvtsi2ss xmm0, xmm0, DWORD PTR y1$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	DWORD PTR q1$12[rsp+rax], xmm0
; Line 4508
	vcvtsi2ss xmm0, xmm0, DWORD PTR x2$8[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	DWORD PTR q2$18[rsp+rax], xmm0
; Line 4509
	vcvtsi2ss xmm0, xmm0, DWORD PTR y2$3[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	DWORD PTR q2$18[rsp+rax], xmm0
; Line 4510
	lea	rdx, QWORD PTR q1$12[rsp]
	lea	rcx, QWORD PTR q0$19[rsp]
	call	?equal@@YAHPEAM0@Z			; equal
	test	eax, eax
	jne	SHORT $LN15@stbtt__com
	lea	rdx, QWORD PTR q2$18[rsp]
	lea	rcx, QWORD PTR q1$12[rsp]
	call	?equal@@YAHPEAM0@Z			; equal
	test	eax, eax
	je	$LN13@stbtt__com
$LN15@stbtt__com:
; Line 4511
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x0$5[rsp], eax
; Line 4512
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y0$2[rsp], eax
; Line 4513
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x1$4[rsp], eax
; Line 4514
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y1$1[rsp], eax
; Line 4515
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN49@stbtt__com
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv276[rsp], eax
	jmp	SHORT $LN50@stbtt__com
$LN49@stbtt__com:
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv276[rsp], eax
$LN50@stbtt__com:
	vcvtsi2ss xmm0, xmm0, DWORD PTR tv276[rsp]
	vmovss	xmm1, DWORD PTR y$[rsp]
	vcomiss	xmm1, xmm0
	jbe	$LN16@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN51@stbtt__com
	mov	eax, DWORD PTR y1$1[rsp]
	mov	DWORD PTR tv280[rsp], eax
	jmp	SHORT $LN52@stbtt__com
$LN51@stbtt__com:
	mov	eax, DWORD PTR y0$2[rsp]
	mov	DWORD PTR tv280[rsp], eax
$LN52@stbtt__com:
	vcvtsi2ss xmm0, xmm0, DWORD PTR tv280[rsp]
	vcomiss	xmm0, DWORD PTR y$[rsp]
	jbe	$LN16@stbtt__com
	mov	eax, DWORD PTR x1$4[rsp]
	cmp	DWORD PTR x0$5[rsp], eax
	jge	SHORT $LN53@stbtt__com
	mov	eax, DWORD PTR x0$5[rsp]
	mov	DWORD PTR tv284[rsp], eax
	jmp	SHORT $LN54@stbtt__com
$LN53@stbtt__com:
	mov	eax, DWORD PTR x1$4[rsp]
	mov	DWORD PTR tv284[rsp], eax
$LN54@stbtt__com:
	vcvtsi2ss xmm0, xmm0, DWORD PTR tv284[rsp]
	vmovss	xmm1, DWORD PTR x$[rsp]
	vcomiss	xmm1, xmm0
	jbe	$LN16@stbtt__com
; Line 4516
	vcvtsi2ss xmm0, xmm0, DWORD PTR y0$2[rsp]
	vmovss	xmm1, DWORD PTR y$[rsp]
	vsubss	xmm0, xmm1, xmm0
	mov	eax, DWORD PTR y0$2[rsp]
	mov	ecx, DWORD PTR y1$1[rsp]
	sub	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm1, xmm1, eax
	vdivss	xmm0, xmm0, xmm1
	mov	eax, DWORD PTR x0$5[rsp]
	mov	ecx, DWORD PTR x1$4[rsp]
	sub	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm1, xmm1, eax
	vmulss	xmm0, xmm0, xmm1
	vcvtsi2ss xmm1, xmm1, DWORD PTR x0$5[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR x_inter$16[rsp], xmm0
; Line 4517
	vmovss	xmm0, DWORD PTR x$[rsp]
	vcomiss	xmm0, DWORD PTR x_inter$16[rsp]
	jbe	SHORT $LN17@stbtt__com
; Line 4518
	mov	eax, DWORD PTR y1$1[rsp]
	cmp	DWORD PTR y0$2[rsp], eax
	jge	SHORT $LN55@stbtt__com
	mov	DWORD PTR tv299[rsp], 1
	jmp	SHORT $LN56@stbtt__com
$LN55@stbtt__com:
	mov	DWORD PTR tv299[rsp], -1
$LN56@stbtt__com:
	mov	eax, DWORD PTR tv299[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN17@stbtt__com:
$LN16@stbtt__com:
; Line 4520
	jmp	$LN14@stbtt__com
$LN13@stbtt__com:
; Line 4521
	lea	rax, QWORD PTR hits$20[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR q2$18[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR q1$12[rsp]
	lea	r8, QWORD PTR q0$19[rsp]
	lea	rdx, QWORD PTR ray$[rsp]
	lea	rcx, QWORD PTR orig$[rsp]
	call	?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z ; stbtt__ray_intersect_bezier
	mov	DWORD PTR num_hits$11[rsp], eax
; Line 4522
	cmp	DWORD PTR num_hits$11[rsp], 1
	jl	SHORT $LN18@stbtt__com
; Line 4523
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN19@stbtt__com
; Line 4524
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN57@stbtt__com
	mov	DWORD PTR tv319[rsp], -1
	jmp	SHORT $LN58@stbtt__com
$LN57@stbtt__com:
	mov	DWORD PTR tv319[rsp], 1
$LN58@stbtt__com:
	mov	eax, DWORD PTR tv319[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN19@stbtt__com:
$LN18@stbtt__com:
; Line 4525
	cmp	DWORD PTR num_hits$11[rsp], 2
	jl	SHORT $LN20@stbtt__com
; Line 4526
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN21@stbtt__com
; Line 4527
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR hits$20[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR [rax+rcx]
	jbe	SHORT $LN59@stbtt__com
	mov	DWORD PTR tv364[rsp], -1
	jmp	SHORT $LN60@stbtt__com
$LN59@stbtt__com:
	mov	DWORD PTR tv364[rsp], 1
$LN60@stbtt__com:
	mov	eax, DWORD PTR tv364[rsp]
	mov	ecx, DWORD PTR winding$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR winding$[rsp], eax
$LN21@stbtt__com:
$LN20@stbtt__com:
$LN14@stbtt__com:
$LN12@stbtt__com:
$LN11@stbtt__com:
; Line 4531
	jmp	$LN2@stbtt__com
$LN3@stbtt__com:
; Line 4532
	mov	eax, DWORD PTR winding$[rsp]
; Line 4533
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 280				; 00000118H
	ret	0
?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z ENDP ; stbtt__compute_crossings_x
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 0
a$ = 32
b$ = 40
?equal@@YAHPEAM0@Z PROC					; equal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4463
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 4464
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vucomiss xmm0, DWORD PTR [r8+rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR a$[rsp]
	mov	r8, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vucomiss xmm0, DWORD PTR [r8+rcx]
	jp	SHORT $LN3@equal
	jne	SHORT $LN3@equal
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN4@equal
$LN3@equal:
	mov	DWORD PTR tv74[rsp], 0
$LN4@equal:
	mov	eax, DWORD PTR tv74[rsp]
; Line 4465
	add	rsp, 24
	ret	0
?equal@@YAHPEAM0@Z ENDP					; equal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s0$ = 32
s1$ = 36
num_s$ = 40
b$ = 44
a$ = 48
rayn_x$1 = 52
rayn_y$2 = 56
q0perp$ = 60
d$3 = 64
q0d$4 = 68
q1perp$ = 72
discr$5 = 76
rcpna$6 = 80
c$ = 84
rcp_len2$7 = 88
q10d$8 = 92
q0rd$9 = 96
q20d$10 = 100
q2perp$ = 104
roperp$ = 108
q1d$11 = 112
q2d$12 = 116
rod$13 = 120
orig$ = 144
ray$ = 152
q0$ = 160
q1$ = 168
q2$ = 176
hits$ = 184
?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z PROC	; stbtt__ray_intersect_bezier
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4399
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 4400
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q0$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vmulss	xmm0, xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q0$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+rax]
	vmulss	xmm1, xmm1, DWORD PTR [r8+rcx]
	vsubss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR q0perp$[rsp], xmm0
; Line 4401
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q1$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vmulss	xmm0, xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q1$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+rax]
	vmulss	xmm1, xmm1, DWORD PTR [r8+rcx]
	vsubss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR q1perp$[rsp], xmm0
; Line 4402
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR q2$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vmulss	xmm0, xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR q2$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+rax]
	vmulss	xmm1, xmm1, DWORD PTR [r8+rcx]
	vsubss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR q2perp$[rsp], xmm0
; Line 4403
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vmulss	xmm0, xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR orig$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+rax]
	vmulss	xmm1, xmm1, DWORD PTR [r8+rcx]
	vsubss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR roperp$[rsp], xmm0
; Line 4405
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR q1perp$[rsp]
	vmovss	xmm1, DWORD PTR q0perp$[rsp]
	vsubss	xmm0, xmm1, xmm0
	vaddss	xmm0, xmm0, DWORD PTR q2perp$[rsp]
	vmovss	DWORD PTR a$[rsp], xmm0
; Line 4406
	vmovss	xmm0, DWORD PTR q1perp$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR q0perp$[rsp]
	vmovss	DWORD PTR b$[rsp], xmm0
; Line 4407
	vmovss	xmm0, DWORD PTR q0perp$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR roperp$[rsp]
	vmovss	DWORD PTR c$[rsp], xmm0
; Line 4409
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR s0$[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR s1$[rsp], xmm0
; Line 4410
	mov	DWORD PTR num_s$[rsp], 0
; Line 4412
	vcvtss2sd xmm0, xmm0, DWORD PTR a$[rsp]
	vucomisd xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN14@stbtt__ray
	je	$LN2@stbtt__ray
$LN14@stbtt__ray:
; Line 4413
	vmovss	xmm0, DWORD PTR b$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR b$[rsp]
	vmovss	xmm1, DWORD PTR a$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR c$[rsp]
	vsubss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR discr$5[rsp], xmm0
; Line 4414
	vcvtss2sd xmm0, xmm0, DWORD PTR discr$5[rsp]
	vcomisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	$LN4@stbtt__ray
; Line 4415
	vmovss	xmm0, DWORD PTR __real@bf800000
	vdivss	xmm0, xmm0, DWORD PTR a$[rsp]
	vmovss	DWORD PTR rcpna$6[rsp], xmm0
; Line 4416
	vcvtss2sd xmm0, xmm0, DWORD PTR discr$5[rsp]
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR d$3[rsp], xmm0
; Line 4417
	vmovss	xmm0, DWORD PTR b$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR d$3[rsp]
	vmulss	xmm0, xmm0, DWORD PTR rcpna$6[rsp]
	vmovss	DWORD PTR s0$[rsp], xmm0
; Line 4418
	vmovss	xmm0, DWORD PTR b$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR d$3[rsp]
	vmulss	xmm0, xmm0, DWORD PTR rcpna$6[rsp]
	vmovss	DWORD PTR s1$[rsp], xmm0
; Line 4419
	vcvtss2sd xmm0, xmm0, DWORD PTR s0$[rsp]
	vcomisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN5@stbtt__ray
	vcvtss2sd xmm0, xmm0, DWORD PTR s0$[rsp]
	vmovsd	xmm1, QWORD PTR __real@3ff0000000000000
	vcomisd	xmm1, xmm0
	jb	SHORT $LN5@stbtt__ray
; Line 4420
	mov	DWORD PTR num_s$[rsp], 1
$LN5@stbtt__ray:
; Line 4421
	vcvtss2sd xmm0, xmm0, DWORD PTR d$3[rsp]
	vcomisd	xmm0, QWORD PTR __real@0000000000000000
	jbe	SHORT $LN6@stbtt__ray
	vcvtss2sd xmm0, xmm0, DWORD PTR s1$[rsp]
	vcomisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN6@stbtt__ray
	vcvtss2sd xmm0, xmm0, DWORD PTR s1$[rsp]
	vmovsd	xmm1, QWORD PTR __real@3ff0000000000000
	vcomisd	xmm1, xmm0
	jb	SHORT $LN6@stbtt__ray
; Line 4422
	cmp	DWORD PTR num_s$[rsp], 0
	jne	SHORT $LN7@stbtt__ray
	vmovss	xmm0, DWORD PTR s1$[rsp]
	vmovss	DWORD PTR s0$[rsp], xmm0
$LN7@stbtt__ray:
; Line 4423
	mov	eax, DWORD PTR num_s$[rsp]
	inc	eax
	mov	DWORD PTR num_s$[rsp], eax
$LN6@stbtt__ray:
$LN4@stbtt__ray:
; Line 4426
	jmp	SHORT $LN3@stbtt__ray
$LN2@stbtt__ray:
; Line 4429
	vmovss	xmm0, DWORD PTR __real@c0000000
	vmulss	xmm0, xmm0, DWORD PTR b$[rsp]
	vmovss	xmm1, DWORD PTR c$[rsp]
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR s0$[rsp], xmm0
; Line 4430
	vcvtss2sd xmm0, xmm0, DWORD PTR s0$[rsp]
	vcomisd	xmm0, QWORD PTR __real@0000000000000000
	jb	SHORT $LN8@stbtt__ray
	vcvtss2sd xmm0, xmm0, DWORD PTR s0$[rsp]
	vmovsd	xmm1, QWORD PTR __real@3ff0000000000000
	vcomisd	xmm1, xmm0
	jb	SHORT $LN8@stbtt__ray
; Line 4431
	mov	DWORD PTR num_s$[rsp], 1
$LN8@stbtt__ray:
$LN3@stbtt__ray:
; Line 4434
	cmp	DWORD PTR num_s$[rsp], 0
	jne	SHORT $LN9@stbtt__ray
; Line 4435
	xor	eax, eax
	jmp	$LN1@stbtt__ray
	jmp	$LN10@stbtt__ray
$LN9@stbtt__ray:
; Line 4437
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR ray$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax]
	vmulss	xmm0, xmm0, DWORD PTR [r8+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR ray$[rsp]
	mov	r8, QWORD PTR ray$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+rax]
	vmulss	xmm1, xmm1, DWORD PTR [r8+rcx]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR rcp_len2$7[rsp], xmm0
; Line 4438
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR ray$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR rcp_len2$7[rsp]
	vmovss	DWORD PTR rayn_x$1[rsp], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR ray$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR rcp_len2$7[rsp]
	vmovss	DWORD PTR rayn_y$2[rsp], xmm0
; Line 4440
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q0$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q0$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax]
	vmulss	xmm1, xmm1, DWORD PTR rayn_y$2[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR q0d$4[rsp], xmm0
; Line 4441
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q1$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q1$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax]
	vmulss	xmm1, xmm1, DWORD PTR rayn_y$2[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR q1d$11[rsp], xmm0
; Line 4442
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR q2$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR q2$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax]
	vmulss	xmm1, xmm1, DWORD PTR rayn_y$2[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR q2d$12[rsp], xmm0
; Line 4443
	mov	eax, 4
	imul	rax, rax, 0
	mov	rcx, QWORD PTR orig$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmulss	xmm0, xmm0, DWORD PTR rayn_x$1[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR orig$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax]
	vmulss	xmm1, xmm1, DWORD PTR rayn_y$2[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR rod$13[rsp], xmm0
; Line 4445
	vmovss	xmm0, DWORD PTR q1d$11[rsp]
	vsubss	xmm0, xmm0, DWORD PTR q0d$4[rsp]
	vmovss	DWORD PTR q10d$8[rsp], xmm0
; Line 4446
	vmovss	xmm0, DWORD PTR q2d$12[rsp]
	vsubss	xmm0, xmm0, DWORD PTR q0d$4[rsp]
	vmovss	DWORD PTR q20d$10[rsp], xmm0
; Line 4447
	vmovss	xmm0, DWORD PTR q0d$4[rsp]
	vsubss	xmm0, xmm0, DWORD PTR rod$13[rsp]
	vmovss	DWORD PTR q0rd$9[rsp], xmm0
; Line 4449
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR s0$[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vsubss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR s0$[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmulss	xmm0, xmm0, DWORD PTR q10d$8[rsp]
	vmovss	xmm1, DWORD PTR q0rd$9[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR s0$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR s0$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR q20d$10[rsp]
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 4450
	vmovss	xmm0, DWORD PTR a$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR s0$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR b$[rsp]
	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 4452
	cmp	DWORD PTR num_s$[rsp], 1
	jle	$LN11@stbtt__ray
; Line 4453
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR s1$[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vsubss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR s1$[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmulss	xmm0, xmm0, DWORD PTR q10d$8[rsp]
	vmovss	xmm1, DWORD PTR q0rd$9[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR s1$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR s1$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR q20d$10[rsp]
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 4454
	vmovss	xmm0, DWORD PTR a$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR s1$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR b$[rsp]
	mov	eax, 8
	imul	rax, rax, 1
	mov	rcx, QWORD PTR hits$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 4455
	mov	eax, 2
	jmp	SHORT $LN1@stbtt__ray
; Line 4456
	jmp	SHORT $LN12@stbtt__ray
$LN11@stbtt__ray:
; Line 4457
	mov	eax, 1
$LN12@stbtt__ray:
$LN10@stbtt__ray:
$LN1@stbtt__ray:
; Line 4460
	add	rsp, 136				; 00000088H
	ret	0
?stbtt__ray_intersect_bezier@@YAHQEAM0000QEAY01M@Z ENDP	; stbtt__ray_intersect_bezier
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
oversample$ = 8
?stbtt__oversample_shift@@YAMH@Z PROC			; stbtt__oversample_shift
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4137
	mov	DWORD PTR [rsp+8], ecx
; Line 4138
	cmp	DWORD PTR oversample$[rsp], 0
	jne	SHORT $LN2@stbtt__ove
; Line 4139
	vxorps	xmm0, xmm0, xmm0
	jmp	SHORT $LN1@stbtt__ove
$LN2@stbtt__ove:
; Line 4145
	mov	eax, DWORD PTR oversample$[rsp]
	dec	eax
	neg	eax
	vcvtsi2ss xmm0, xmm0, eax
	vcvtsi2ss xmm1, xmm1, DWORD PTR oversample$[rsp]
	vmovss	xmm2, DWORD PTR __real@40000000
	vmulss	xmm1, xmm2, xmm1
	vdivss	xmm0, xmm0, xmm1
$LN1@stbtt__ove:
; Line 4146
	ret	0
?stbtt__oversample_shift@@YAMH@Z ENDP			; stbtt__oversample_shift
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
total$2 = 36
safe_h$ = 40
tv70 = 44
j$ = 48
buffer$ = 56
__$ArrayPad$ = 64
pixels$ = 96
w$ = 104
h$ = 112
stride_in_bytes$ = 120
kernel_width$ = 128
?stbtt__v_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__v_prefilter
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4075
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4077
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_h$[rsp], eax
; Line 4079
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4080
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbtt__v_p
$LN2@stbtt__v_p:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbtt__v_p:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__v_p
; Line 4083
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	r8d, eax
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4085
	mov	DWORD PTR total$2[rsp], 0
; Line 4088
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 2
	je	SHORT $LN25@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN26@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 4
	je	$LN27@stbtt__v_p
	cmp	DWORD PTR tv70[rsp], 5
	je	$LN28@stbtt__v_p
	jmp	$LN29@stbtt__v_p
$LN25@stbtt__v_p:
; Line 4090
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@stbtt__v_p
$LN7@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN8@stbtt__v_p
; Line 4091
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4092
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4093
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 2
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4094
	jmp	$LN7@stbtt__v_p
$LN8@stbtt__v_p:
; Line 4095
	jmp	$LN5@stbtt__v_p
$LN26@stbtt__v_p:
; Line 4097
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN12@stbtt__v_p
$LN10@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN12@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN11@stbtt__v_p
; Line 4098
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4099
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4100
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 3
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4101
	jmp	$LN10@stbtt__v_p
$LN11@stbtt__v_p:
; Line 4102
	jmp	$LN5@stbtt__v_p
$LN27@stbtt__v_p:
; Line 4104
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN15@stbtt__v_p
$LN13@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN15@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN14@stbtt__v_p
; Line 4105
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4106
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4107
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 4
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4108
	jmp	$LN13@stbtt__v_p
$LN14@stbtt__v_p:
; Line 4109
	jmp	$LN5@stbtt__v_p
$LN28@stbtt__v_p:
; Line 4111
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@stbtt__v_p
$LN16@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN17@stbtt__v_p
; Line 4112
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4113
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4114
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 5
	div	ecx
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4115
	jmp	$LN16@stbtt__v_p
$LN17@stbtt__v_p:
; Line 4116
	jmp	$LN5@stbtt__v_p
$LN29@stbtt__v_p:
; Line 4118
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@stbtt__v_p
$LN19@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@stbtt__v_p:
	mov	eax, DWORD PTR safe_h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	$LN20@stbtt__v_p
; Line 4119
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4120
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4121
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4122
	jmp	$LN19@stbtt__v_p
$LN20@stbtt__v_p:
$LN5@stbtt__v_p:
; Line 4126
	jmp	SHORT $LN24@stbtt__v_p
$LN22@stbtt__v_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN24@stbtt__v_p:
	mov	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN23@stbtt__v_p
; Line 4127
	mov	eax, DWORD PTR i$1[rsp]
	imul	eax, DWORD PTR stride_in_bytes$[rsp]
	cdqe
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stbtt__v_p
	mov	r8d, 4127				; 0000101fH
	lea	rdx, OFFSET FLAT:$SG144619
	lea	rcx, OFFSET FLAT:$SG144620
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@stbtt__v_p:
; Line 4128
	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR total$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4129
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR i$1[rsp]
	imul	ecx, DWORD PTR stride_in_bytes$[rsp]
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4130
	jmp	$LN22@stbtt__v_p
$LN23@stbtt__v_p:
; Line 4132
	mov	rax, QWORD PTR pixels$[rsp]
	inc	rax
	mov	QWORD PTR pixels$[rsp], rax
; Line 4133
	jmp	$LN2@stbtt__v_p
$LN3@stbtt__v_p:
; Line 4134
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__v_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__v_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
total$2 = 36
safe_w$ = 40
tv70 = 44
j$ = 48
buffer$ = 56
__$ArrayPad$ = 64
pixels$ = 96
w$ = 104
h$ = 112
stride_in_bytes$ = 120
kernel_width$ = 128
?stbtt__h_prefilter@@YAXPEAEHHHI@Z PROC			; stbtt__h_prefilter
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4013
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4015
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR safe_w$[rsp], eax
; Line 4017
	mov	r8d, 8
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4018
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN4@stbtt__h_p
$LN2@stbtt__h_p:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@stbtt__h_p:
	mov	eax, DWORD PTR h$[rsp]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__h_p
; Line 4021
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	r8d, eax
	xor	edx, edx
	lea	rcx, QWORD PTR buffer$[rsp]
	call	memset
; Line 4023
	mov	DWORD PTR total$2[rsp], 0
; Line 4026
	mov	eax, DWORD PTR kernel_width$[rsp]
	mov	DWORD PTR tv70[rsp], eax
	cmp	DWORD PTR tv70[rsp], 2
	je	SHORT $LN25@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 3
	je	$LN26@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 4
	je	$LN27@stbtt__h_p
	cmp	DWORD PTR tv70[rsp], 5
	je	$LN28@stbtt__h_p
	jmp	$LN29@stbtt__h_p
$LN25@stbtt__h_p:
; Line 4028
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN9@stbtt__h_p
$LN7@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN8@stbtt__h_p
; Line 4029
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4030
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4031
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 2
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4032
	jmp	$LN7@stbtt__h_p
$LN8@stbtt__h_p:
; Line 4033
	jmp	$LN5@stbtt__h_p
$LN26@stbtt__h_p:
; Line 4035
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN12@stbtt__h_p
$LN10@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN12@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN11@stbtt__h_p
; Line 4036
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4037
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4038
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 3
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4039
	jmp	$LN10@stbtt__h_p
$LN11@stbtt__h_p:
; Line 4040
	jmp	$LN5@stbtt__h_p
$LN27@stbtt__h_p:
; Line 4042
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN15@stbtt__h_p
$LN13@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN15@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN14@stbtt__h_p
; Line 4043
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4044
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4045
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 4
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4046
	jmp	$LN13@stbtt__h_p
$LN14@stbtt__h_p:
; Line 4047
	jmp	$LN5@stbtt__h_p
$LN28@stbtt__h_p:
; Line 4049
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN18@stbtt__h_p
$LN16@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN18@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN17@stbtt__h_p
; Line 4050
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4051
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4052
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	mov	ecx, 5
	div	ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4053
	jmp	$LN16@stbtt__h_p
$LN17@stbtt__h_p:
; Line 4054
	jmp	$LN5@stbtt__h_p
$LN29@stbtt__h_p:
; Line 4056
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN21@stbtt__h_p
$LN19@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN21@stbtt__h_p:
	mov	eax, DWORD PTR safe_w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jg	SHORT $LN20@stbtt__h_p
; Line 4057
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, DWORD PTR i$1[rsp]
	and	ecx, 7
	movsxd	rcx, ecx
	movzx	ecx, BYTE PTR buffer$[rsp+rcx]
	sub	eax, ecx
	mov	ecx, DWORD PTR total$2[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4058
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR kernel_width$[rsp]
	mov	edx, DWORD PTR i$1[rsp]
	add	edx, ecx
	mov	ecx, edx
	and	ecx, 7
	mov	ecx, ecx
	mov	rdx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rdx+rax]
	mov	BYTE PTR buffer$[rsp+rcx], al
; Line 4059
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4060
	jmp	$LN19@stbtt__h_p
$LN20@stbtt__h_p:
$LN5@stbtt__h_p:
; Line 4064
	jmp	SHORT $LN24@stbtt__h_p
$LN22@stbtt__h_p:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN24@stbtt__h_p:
	mov	eax, DWORD PTR w$[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	SHORT $LN23@stbtt__h_p
; Line 4065
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN31@stbtt__h_p
	mov	r8d, 4065				; 00000fe1H
	lea	rdx, OFFSET FLAT:$SG144569
	lea	rcx, OFFSET FLAT:$SG144570
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@stbtt__h_p:
; Line 4066
	mov	eax, DWORD PTR i$1[rsp]
	and	eax, 7
	cdqe
	movzx	eax, BYTE PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR total$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR total$2[rsp], eax
; Line 4067
	xor	edx, edx
	mov	eax, DWORD PTR total$2[rsp]
	div	DWORD PTR kernel_width$[rsp]
	movsxd	rcx, DWORD PTR i$1[rsp]
	mov	rdx, QWORD PTR pixels$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4068
	jmp	SHORT $LN22@stbtt__h_p
$LN23@stbtt__h_p:
; Line 4070
	movsxd	rax, DWORD PTR stride_in_bytes$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pixels$[rsp], rax
; Line 4071
	jmp	$LN2@stbtt__h_p
$LN3@stbtt__h_p:
; Line 4072
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__h_prefilter@@YAXPEAEHHHI@Z ENDP			; stbtt__h_prefilter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 0
con$ = 32
rects$ = 40
num_rects$ = 48
?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z PROC ; stbrp_pack_rects
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3929
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 3931
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbrp_pack
$LN2@stbrp_pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbrp_pack
; Line 3932
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+12]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx]
	jle	SHORT $LN8@stbrp_pack
; Line 3933
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 3934
	mov	rax, QWORD PTR con$[rsp]
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+12], ecx
$LN8@stbrp_pack:
; Line 3936
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx+4]
	jle	SHORT $LN9@stbrp_pack
; Line 3937
	jmp	$LN3@stbrp_pack
$LN9@stbrp_pack:
; Line 3938
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	rdx, QWORD PTR con$[rsp]
	mov	edx, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx+rax], edx
; Line 3939
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	rdx, QWORD PTR con$[rsp]
	mov	edx, DWORD PTR [rdx+12]
	mov	DWORD PTR [rcx+rax+4], edx
; Line 3940
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+20], 1
; Line 3941
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+8]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+12]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	mov	DWORD PTR [rcx+8], eax
; Line 3942
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	cmp	eax, DWORD PTR [rcx+16]
	jle	SHORT $LN10@stbrp_pack
; Line 3943
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	mov	rdx, QWORD PTR rects$[rsp]
	add	ecx, DWORD PTR [rdx+rax+16]
	mov	eax, ecx
	mov	rcx, QWORD PTR con$[rsp]
	mov	DWORD PTR [rcx+16], eax
$LN10@stbrp_pack:
; Line 3944
	jmp	$LN2@stbrp_pack
$LN3@stbrp_pack:
; Line 3945
	jmp	SHORT $LN7@stbrp_pack
$LN5@stbrp_pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbrp_pack:
	mov	eax, DWORD PTR num_rects$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN6@stbrp_pack
; Line 3946
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+20], 0
	jmp	SHORT $LN5@stbrp_pack
$LN6@stbrp_pack:
; Line 3947
	add	rsp, 24
	ret	0
?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z ENDP ; stbrp_pack_rects
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
con$ = 8
pw$ = 16
ph$ = 24
nodes$ = 32
num_nodes$ = 40
?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z PROC ; stbrp_init_target
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3918
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 3919
	mov	rax, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3920
	mov	rax, QWORD PTR con$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rax+4], ecx
; Line 3921
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+8], 0
; Line 3922
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+12], 0
; Line 3923
	mov	rax, QWORD PTR con$[rsp]
	mov	DWORD PTR [rax+16], 0
; Line 3926
	ret	0
?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z ENDP ; stbrp_init_target
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
y$ = 68
x$ = 72
gh$1 = 76
scale$ = 80
gw$2 = 84
bottom_y$ = 88
g$3 = 92
x0$4 = 96
y0$5 = 100
x1$6 = 104
y1$7 = 108
advance$8 = 112
lsb$9 = 116
f$ = 128
data$ = 304
offset$ = 312
pixel_height$ = 320
pixels$ = 328
pw$ = 336
ph$ = 344
first_char$ = 352
num_chars$ = 360
chardata$ = 368
?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z PROC ; stbtt_BakeFontBitmap_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3818
	mov	QWORD PTR [rsp+32], r9
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 296				; 00000128H
; Line 3822
	mov	QWORD PTR f$[rsp], 0
; Line 3823
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_InitFont
	test	eax, eax
	jne	SHORT $LN5@stbtt_Bake
; Line 3824
	mov	eax, -1
	jmp	$LN1@stbtt_Bake
$LN5@stbtt_Bake:
; Line 3825
	mov	eax, DWORD PTR pw$[rsp]
	imul	eax, DWORD PTR ph$[rsp]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR pixels$[rsp]
	call	memset
; Line 3826
	mov	DWORD PTR y$[rsp], 1
	mov	eax, DWORD PTR y$[rsp]
	mov	DWORD PTR x$[rsp], eax
; Line 3827
	mov	DWORD PTR bottom_y$[rsp], 1
; Line 3829
	vmovss	xmm1, DWORD PTR pixel_height$[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_ScaleForPixelHeight
	vmovss	DWORD PTR scale$[rsp], xmm0
; Line 3831
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Bake
$LN2@stbtt_Bake:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Bake:
	mov	eax, DWORD PTR num_chars$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Bake
; Line 3833
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR first_char$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR g$3[rsp], eax
; Line 3834
	lea	r9, QWORD PTR lsb$9[rsp]
	lea	r8, QWORD PTR advance$8[rsp]
	mov	edx, DWORD PTR g$3[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 3835
	lea	rax, QWORD PTR y1$7[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$6[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$5[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$4[rsp]
	mov	QWORD PTR [rsp+32], rax
	vmovss	xmm3, DWORD PTR scale$[rsp]
	vmovss	xmm2, DWORD PTR scale$[rsp]
	mov	edx, DWORD PTR g$3[rsp]
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_GetGlyphBitmapBox
; Line 3836
	mov	eax, DWORD PTR x0$4[rsp]
	mov	ecx, DWORD PTR x1$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gw$2[rsp], eax
; Line 3837
	mov	eax, DWORD PTR y0$5[rsp]
	mov	ecx, DWORD PTR y1$7[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gh$1[rsp], eax
; Line 3838
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR gw$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR pw$[rsp]
	jl	SHORT $LN6@stbtt_Bake
; Line 3839
	mov	eax, DWORD PTR bottom_y$[rsp]
	mov	DWORD PTR y$[rsp], eax
	mov	DWORD PTR x$[rsp], 1
$LN6@stbtt_Bake:
; Line 3840
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR ph$[rsp]
	jl	SHORT $LN7@stbtt_Bake
; Line 3841
	mov	eax, DWORD PTR i$[rsp]
	neg	eax
	jmp	$LN1@stbtt_Bake
$LN7@stbtt_Bake:
; Line 3842
	mov	eax, DWORD PTR gw$2[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR pw$[rsp]
	jl	SHORT $LN10@stbtt_Bake
	mov	r8d, 3842				; 00000f02H
	lea	rdx, OFFSET FLAT:$SG144380
	lea	rcx, OFFSET FLAT:$SG144381
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN10@stbtt_Bake:
; Line 3843
	mov	eax, DWORD PTR gh$1[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, DWORD PTR ph$[rsp]
	jl	SHORT $LN11@stbtt_Bake
	mov	r8d, 3843				; 00000f03H
	lea	rdx, OFFSET FLAT:$SG144382
	lea	rcx, OFFSET FLAT:$SG144383
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN11@stbtt_Bake:
; Line 3844
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR y$[rsp]
	imul	ecx, DWORD PTR pw$[rsp]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR g$3[rsp]
	mov	DWORD PTR [rsp+56], ecx
	vmovss	xmm0, DWORD PTR scale$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR gh$1[rsp]
	mov	r8d, DWORD PTR gw$2[rsp]
	mov	rdx, rax
	lea	rcx, QWORD PTR f$[rsp]
	call	stbtt_MakeGlyphBitmap
; Line 3845
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movzx	edx, WORD PTR x$[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 3846
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	movzx	edx, WORD PTR y$[rsp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 3847
	mov	eax, DWORD PTR gw$2[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR chardata$[rsp]
	mov	WORD PTR [rdx+rcx+4], ax
; Line 3848
	mov	eax, DWORD PTR gh$1[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR chardata$[rsp]
	mov	WORD PTR [rdx+rcx+6], ax
; Line 3849
	vcvtsi2ss xmm0, xmm0, DWORD PTR advance$8[rsp]
	vmovss	xmm1, DWORD PTR scale$[rsp]
	vmulss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	vmovss	DWORD PTR [rcx+rax+16], xmm0
; Line 3850
	vcvtsi2ss xmm0, xmm0, DWORD PTR x0$4[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	vmovss	DWORD PTR [rcx+rax+8], xmm0
; Line 3851
	vcvtsi2ss xmm0, xmm0, DWORD PTR y0$5[rsp]
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	vmovss	DWORD PTR [rcx+rax+12], xmm0
; Line 3852
	mov	eax, DWORD PTR x$[rsp]
	mov	ecx, DWORD PTR gw$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR x$[rsp], eax
; Line 3853
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cmp	eax, DWORD PTR bottom_y$[rsp]
	jle	SHORT $LN8@stbtt_Bake
; Line 3854
	mov	eax, DWORD PTR y$[rsp]
	mov	ecx, DWORD PTR gh$1[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	mov	DWORD PTR bottom_y$[rsp], eax
$LN8@stbtt_Bake:
; Line 3855
	jmp	$LN2@stbtt_Bake
$LN3@stbtt_Bake:
; Line 3856
	mov	eax, DWORD PTR bottom_y$[rsp]
$LN1@stbtt_Bake:
; Line 3857
	add	rsp, 296				; 00000128H
	ret	0
?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z ENDP ; stbtt_BakeFontBitmap_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 96
num_points$ = 100
n$ = 104
x$1 = 108
y$2 = 112
pass$ = 116
tv133 = 120
points$ = 128
start$ = 136
objspace_flatness_squared$ = 140
tv155 = 144
tv173 = 148
vertices$ = 192
num_verts$ = 200
objspace_flatness$ = 208
contour_lengths$ = 216
num_contours$ = 224
userdata$ = 232
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z PROC ; stbtt_FlattenCurves
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3619
	mov	QWORD PTR [rsp+32], r9
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H
	vmovaps	XMMWORD PTR [rsp+160], xmm6
; Line 3620
	mov	QWORD PTR points$[rsp], 0
; Line 3621
	mov	DWORD PTR num_points$[rsp], 0
; Line 3623
	vmovss	xmm0, DWORD PTR objspace_flatness$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR objspace_flatness$[rsp]
	vmovss	DWORD PTR objspace_flatness_squared$[rsp], xmm0
; Line 3624
	mov	DWORD PTR n$[rsp], 0
	mov	DWORD PTR start$[rsp], 0
; Line 3627
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Flat
$LN2@stbtt_Flat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt_Flat
; Line 3628
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 1
	jne	SHORT $LN13@stbtt_Flat
; Line 3629
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
$LN13@stbtt_Flat:
	jmp	SHORT $LN2@stbtt_Flat
$LN3@stbtt_Flat:
; Line 3631
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 3632
	cmp	DWORD PTR n$[rsp], 0
	jne	SHORT $LN14@stbtt_Flat
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN14@stbtt_Flat:
; Line 3634
	movsxd	rax, DWORD PTR n$[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR contour_lengths$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 3636
	mov	rax, QWORD PTR contour_lengths$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN15@stbtt_Flat
; Line 3637
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3638
	xor	eax, eax
	jmp	$LN1@stbtt_Flat
$LN15@stbtt_Flat:
; Line 3642
	mov	DWORD PTR pass$[rsp], 0
	jmp	SHORT $LN7@stbtt_Flat
$LN5@stbtt_Flat:
	mov	eax, DWORD PTR pass$[rsp]
	inc	eax
	mov	DWORD PTR pass$[rsp], eax
$LN7@stbtt_Flat:
	cmp	DWORD PTR pass$[rsp], 2
	jge	$LN6@stbtt_Flat
; Line 3643
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR x$1[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR y$2[rsp], xmm0
; Line 3644
	cmp	DWORD PTR pass$[rsp], 1
	jne	SHORT $LN16@stbtt_Flat
; Line 3645
	movsxd	rax, DWORD PTR num_points$[rsp]
	shl	rax, 3
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR points$[rsp], rax
; Line 3646
	cmp	QWORD PTR points$[rsp], 0
	jne	SHORT $LN17@stbtt_Flat
	jmp	$LN18@stbtt_Flat
	jmp	$error$25
$LN17@stbtt_Flat:
$LN16@stbtt_Flat:
; Line 3648
	mov	DWORD PTR num_points$[rsp], 0
; Line 3649
	mov	DWORD PTR n$[rsp], -1
; Line 3650
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt_Flat
$LN8@stbtt_Flat:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt_Flat:
	mov	eax, DWORD PTR num_verts$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbtt_Flat
; Line 3651
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR tv133[rsp], al
	cmp	BYTE PTR tv133[rsp], 1
	je	SHORT $LN19@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 2
	je	$LN21@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 3
	je	$LN22@stbtt_Flat
	cmp	BYTE PTR tv133[rsp], 4
	je	$LN23@stbtt_Flat
	jmp	$LN11@stbtt_Flat
$LN19@stbtt_Flat:
; Line 3654
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN20@stbtt_Flat
; Line 3655
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR num_points$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR contour_lengths$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
$LN20@stbtt_Flat:
; Line 3656
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 3657
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 3659
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR y$2[rsp], xmm0
; Line 3660
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR tv155[rsp], eax
	mov	eax, DWORD PTR num_points$[rsp]
	inc	eax
	mov	DWORD PTR num_points$[rsp], eax
	vmovss	xmm3, DWORD PTR y$2[rsp]
	vmovss	xmm2, DWORD PTR x$1[rsp]
	mov	edx, DWORD PTR tv155[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3661
	jmp	$LN11@stbtt_Flat
$LN21@stbtt_Flat:
; Line 3663
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR y$2[rsp], xmm0
; Line 3664
	mov	eax, DWORD PTR num_points$[rsp]
	mov	DWORD PTR tv173[rsp], eax
	mov	eax, DWORD PTR num_points$[rsp]
	inc	eax
	mov	DWORD PTR num_points$[rsp], eax
	vmovss	xmm3, DWORD PTR y$2[rsp]
	vmovss	xmm2, DWORD PTR x$1[rsp]
	mov	edx, DWORD PTR tv173[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3665
	jmp	$LN11@stbtt_Flat
$LN22@stbtt_Flat:
; Line 3667
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm1, xmm1, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	vcvtsi2ss xmm2, xmm2, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	vcvtsi2ss xmm3, xmm3, eax
	mov	DWORD PTR [rsp+72], 0
	vmovss	xmm4, DWORD PTR objspace_flatness_squared$[rsp]
	vmovss	DWORD PTR [rsp+64], xmm4
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	DWORD PTR [rsp+48], xmm1
	vmovss	DWORD PTR [rsp+40], xmm2
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	xmm3, DWORD PTR y$2[rsp]
	vmovss	xmm2, DWORD PTR x$1[rsp]
	lea	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3671
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR y$2[rsp], xmm0
; Line 3672
	jmp	$LN11@stbtt_Flat
$LN23@stbtt_Flat:
; Line 3674
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm1, xmm1, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+10]
	vcvtsi2ss xmm2, xmm2, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+8]
	vcvtsi2ss xmm3, xmm3, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	vcvtsi2ss xmm4, xmm4, eax
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	vcvtsi2ss xmm5, xmm5, eax
	mov	DWORD PTR [rsp+88], 0
	vmovss	xmm6, DWORD PTR objspace_flatness_squared$[rsp]
	vmovss	DWORD PTR [rsp+80], xmm6
	vmovss	DWORD PTR [rsp+72], xmm0
	vmovss	DWORD PTR [rsp+64], xmm1
	vmovss	DWORD PTR [rsp+56], xmm2
	vmovss	DWORD PTR [rsp+48], xmm3
	vmovss	DWORD PTR [rsp+40], xmm4
	vmovss	DWORD PTR [rsp+32], xmm5
	vmovss	xmm3, DWORD PTR y$2[rsp]
	vmovss	xmm2, DWORD PTR x$1[rsp]
	lea	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3679
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR x$1[rsp], xmm0
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR y$2[rsp], xmm0
$LN11@stbtt_Flat:
; Line 3682
	jmp	$LN8@stbtt_Flat
$LN9@stbtt_Flat:
; Line 3683
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR num_points$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR contour_lengths$[rsp]
	mov	rdx, QWORD PTR [rdx]
	mov	DWORD PTR [rdx+rcx*4], eax
; Line 3684
	jmp	$LN5@stbtt_Flat
$LN6@stbtt_Flat:
; Line 3686
	mov	rax, QWORD PTR points$[rsp]
	jmp	SHORT $LN1@stbtt_Flat
$LN18@stbtt_Flat:
$error$25:
; Line 3688
	mov	rcx, QWORD PTR points$[rsp]
	call	QWORD PTR __imp_free
; Line 3689
	mov	rax, QWORD PTR contour_lengths$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp_free
; Line 3690
	mov	rax, QWORD PTR contour_lengths$[rsp]
	mov	QWORD PTR [rax], 0
; Line 3691
	mov	rax, QWORD PTR num_contours$[rsp]
	mov	DWORD PTR [rax], 0
; Line 3692
	xor	eax, eax
$LN1@stbtt_Flat:
; Line 3693
	vmovaps	xmm6, XMMWORD PTR [rsp+160]
	add	rsp, 184				; 000000b8H
	ret	0
?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ENDP ; stbtt_FlattenCurves
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dx0$ = 96
dy0$ = 100
dx1$ = 104
dy1$ = 108
dx2$ = 112
dy2$ = 116
dx$ = 120
dy$ = 124
longlen$ = 128
shortlen$ = 132
x12$1 = 136
y12$2 = 140
ya$3 = 144
xa$4 = 148
y01$5 = 152
x01$6 = 156
y23$7 = 160
x23$8 = 164
yb$9 = 168
xb$10 = 172
my$11 = 176
mx$12 = 180
flatness_squared$ = 184
tv72 = 192
tv84 = 200
points$ = 224
num_points$ = 232
x0$ = 240
y0$ = 248
x1$ = 256
y1$ = 264
x2$ = 272
y2$ = 280
x3$ = 288
y3$ = 296
objspace_flatness_squared$ = 304
n$ = 312
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z PROC ; stbtt__tesselate_cubic
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3576
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 3578
	vmovss	xmm0, DWORD PTR x1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$[rsp]
	vmovss	DWORD PTR dx0$[rsp], xmm0
; Line 3579
	vmovss	xmm0, DWORD PTR y1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y0$[rsp]
	vmovss	DWORD PTR dy0$[rsp], xmm0
; Line 3580
	vmovss	xmm0, DWORD PTR x2$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x1$[rsp]
	vmovss	DWORD PTR dx1$[rsp], xmm0
; Line 3581
	vmovss	xmm0, DWORD PTR y2$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y1$[rsp]
	vmovss	DWORD PTR dy1$[rsp], xmm0
; Line 3582
	vmovss	xmm0, DWORD PTR x3$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x2$[rsp]
	vmovss	DWORD PTR dx2$[rsp], xmm0
; Line 3583
	vmovss	xmm0, DWORD PTR y3$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y2$[rsp]
	vmovss	DWORD PTR dy2$[rsp], xmm0
; Line 3584
	vmovss	xmm0, DWORD PTR x3$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$[rsp]
	vmovss	DWORD PTR dx$[rsp], xmm0
; Line 3585
	vmovss	xmm0, DWORD PTR y3$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y0$[rsp]
	vmovss	DWORD PTR dy$[rsp], xmm0
; Line 3586
	vmovss	xmm0, DWORD PTR dx0$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR dx0$[rsp]
	vmovss	xmm1, DWORD PTR dy0$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR dy0$[rsp]
	vaddss	xmm0, xmm0, xmm1
	vcvtss2sd xmm0, xmm0, xmm0
	call	sqrt
	vmovsd	QWORD PTR tv72[rsp], xmm0
	vmovss	xmm1, DWORD PTR dx1$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR dx1$[rsp]
	vmovss	xmm2, DWORD PTR dy1$[rsp]
	vmulss	xmm2, xmm2, DWORD PTR dy1$[rsp]
	vaddss	xmm1, xmm1, xmm2
	vcvtss2sd xmm1, xmm1, xmm1
	vmovupd	xmm0, xmm1
	call	sqrt
	vmovsd	xmm1, QWORD PTR tv72[rsp]
	vaddsd	xmm0, xmm1, xmm0
	vmovsd	QWORD PTR tv84[rsp], xmm0
	vmovss	xmm1, DWORD PTR dx2$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR dx2$[rsp]
	vmovss	xmm2, DWORD PTR dy2$[rsp]
	vmulss	xmm2, xmm2, DWORD PTR dy2$[rsp]
	vaddss	xmm1, xmm1, xmm2
	vcvtss2sd xmm1, xmm1, xmm1
	vmovupd	xmm0, xmm1
	call	sqrt
	vmovsd	xmm1, QWORD PTR tv84[rsp]
	vaddsd	xmm0, xmm1, xmm0
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR longlen$[rsp], xmm0
; Line 3587
	vmovss	xmm0, DWORD PTR dx$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR dx$[rsp]
	vmovss	xmm1, DWORD PTR dy$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR dy$[rsp]
	vaddss	xmm0, xmm0, xmm1
	vcvtss2sd xmm0, xmm0, xmm0
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR shortlen$[rsp], xmm0
; Line 3588
	vmovss	xmm0, DWORD PTR longlen$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR longlen$[rsp]
	vmovss	xmm1, DWORD PTR shortlen$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR shortlen$[rsp]
	vsubss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR flatness_squared$[rsp], xmm0
; Line 3590
	cmp	DWORD PTR n$[rsp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3591
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3593
	vmovss	xmm0, DWORD PTR flatness_squared$[rsp]
	vcomiss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	jbe	$LN3@stbtt__tes
; Line 3594
	vmovss	xmm0, DWORD PTR x0$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR x1$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR x01$6[rsp], xmm0
; Line 3595
	vmovss	xmm0, DWORD PTR y0$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y1$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR y01$5[rsp], xmm0
; Line 3596
	vmovss	xmm0, DWORD PTR x1$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR x2$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR x12$1[rsp], xmm0
; Line 3597
	vmovss	xmm0, DWORD PTR y1$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y2$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR y12$2[rsp], xmm0
; Line 3598
	vmovss	xmm0, DWORD PTR x2$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR x3$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR x23$8[rsp], xmm0
; Line 3599
	vmovss	xmm0, DWORD PTR y2$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y3$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR y23$7[rsp], xmm0
; Line 3601
	vmovss	xmm0, DWORD PTR x01$6[rsp]
	vaddss	xmm0, xmm0, DWORD PTR x12$1[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR xa$4[rsp], xmm0
; Line 3602
	vmovss	xmm0, DWORD PTR y01$5[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y12$2[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR ya$3[rsp], xmm0
; Line 3603
	vmovss	xmm0, DWORD PTR x12$1[rsp]
	vaddss	xmm0, xmm0, DWORD PTR x23$8[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR xb$10[rsp], xmm0
; Line 3604
	vmovss	xmm0, DWORD PTR y12$2[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y23$7[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR yb$9[rsp], xmm0
; Line 3606
	vmovss	xmm0, DWORD PTR xa$4[rsp]
	vaddss	xmm0, xmm0, DWORD PTR xb$10[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR mx$12[rsp], xmm0
; Line 3607
	vmovss	xmm0, DWORD PTR ya$3[rsp]
	vaddss	xmm0, xmm0, DWORD PTR yb$9[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	DWORD PTR my$11[rsp], xmm0
; Line 3609
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	vmovss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	vmovss	DWORD PTR [rsp+80], xmm0
	vmovss	xmm0, DWORD PTR my$11[rsp]
	vmovss	DWORD PTR [rsp+72], xmm0
	vmovss	xmm0, DWORD PTR mx$12[rsp]
	vmovss	DWORD PTR [rsp+64], xmm0
	vmovss	xmm0, DWORD PTR ya$3[rsp]
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR xa$4[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR y01$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR x01$6[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR y0$[rsp]
	vmovss	xmm2, DWORD PTR x0$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3610
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR [rsp+88], eax
	vmovss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	vmovss	DWORD PTR [rsp+80], xmm0
	vmovss	xmm0, DWORD PTR y3$[rsp]
	vmovss	DWORD PTR [rsp+72], xmm0
	vmovss	xmm0, DWORD PTR x3$[rsp]
	vmovss	DWORD PTR [rsp+64], xmm0
	vmovss	xmm0, DWORD PTR y23$7[rsp]
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR x23$8[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR yb$9[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR xb$10[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR my$11[rsp]
	vmovss	xmm2, DWORD PTR mx$12[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ; stbtt__tesselate_cubic
; Line 3611
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3612
	vmovss	xmm3, DWORD PTR y3$[rsp]
	vmovss	xmm2, DWORD PTR x3$[rsp]
	mov	rax, QWORD PTR num_points$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3613
	mov	rax, QWORD PTR num_points$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
$LN1@stbtt__tes:
; Line 3615
	add	rsp, 216				; 000000d8H
	ret	0
?stbtt__tesselate_cubic@@YAXPEAUstbtt__point@@PEAHMMMMMMMMMH@Z ENDP ; stbtt__tesselate_cubic
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
my$ = 80
mx$ = 84
dx$ = 88
dy$ = 92
points$ = 112
num_points$ = 120
x0$ = 128
y0$ = 136
x1$ = 144
y1$ = 152
x2$ = 160
y2$ = 168
objspace_flatness_squared$ = 176
n$ = 184
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z PROC ; stbtt__tesselate_curve
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3556
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 3558
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR x1$[rsp]
	vmovss	xmm1, DWORD PTR x0$[rsp]
	vaddss	xmm0, xmm1, xmm0
	vaddss	xmm0, xmm0, DWORD PTR x2$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40800000
	vmovss	DWORD PTR mx$[rsp], xmm0
; Line 3559
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR y1$[rsp]
	vmovss	xmm1, DWORD PTR y0$[rsp]
	vaddss	xmm0, xmm1, xmm0
	vaddss	xmm0, xmm0, DWORD PTR y2$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40800000
	vmovss	DWORD PTR my$[rsp], xmm0
; Line 3561
	vmovss	xmm0, DWORD PTR x0$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR x2$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vsubss	xmm0, xmm0, DWORD PTR mx$[rsp]
	vmovss	DWORD PTR dx$[rsp], xmm0
; Line 3562
	vmovss	xmm0, DWORD PTR y0$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y2$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vsubss	xmm0, xmm0, DWORD PTR my$[rsp]
	vmovss	DWORD PTR dy$[rsp], xmm0
; Line 3563
	cmp	DWORD PTR n$[rsp], 16
	jle	SHORT $LN2@stbtt__tes
; Line 3564
	mov	eax, 1
	jmp	$LN1@stbtt__tes
$LN2@stbtt__tes:
; Line 3565
	vmovss	xmm0, DWORD PTR dx$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR dx$[rsp]
	vmovss	xmm1, DWORD PTR dy$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR dy$[rsp]
	vaddss	xmm0, xmm0, xmm1
	vcomiss	xmm0, DWORD PTR objspace_flatness_squared$[rsp]
	jbe	$LN3@stbtt__tes
; Line 3566
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	vmovss	xmm0, DWORD PTR y0$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y1$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	xmm1, DWORD PTR x0$[rsp]
	vaddss	xmm1, xmm1, DWORD PTR x1$[rsp]
	vdivss	xmm1, xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	vmovss	xmm2, DWORD PTR objspace_flatness_squared$[rsp]
	vmovss	DWORD PTR [rsp+64], xmm2
	vmovss	xmm2, DWORD PTR my$[rsp]
	vmovss	DWORD PTR [rsp+56], xmm2
	vmovss	xmm2, DWORD PTR mx$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm2
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	DWORD PTR [rsp+32], xmm1
	vmovss	xmm3, DWORD PTR y0$[rsp]
	vmovss	xmm2, DWORD PTR x0$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3567
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	vmovss	xmm0, DWORD PTR y1$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y2$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	xmm1, DWORD PTR x1$[rsp]
	vaddss	xmm1, xmm1, DWORD PTR x2$[rsp]
	vdivss	xmm1, xmm1, DWORD PTR __real@40000000
	mov	DWORD PTR [rsp+72], eax
	vmovss	xmm2, DWORD PTR objspace_flatness_squared$[rsp]
	vmovss	DWORD PTR [rsp+64], xmm2
	vmovss	xmm2, DWORD PTR y2$[rsp]
	vmovss	DWORD PTR [rsp+56], xmm2
	vmovss	xmm2, DWORD PTR x2$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm2
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	DWORD PTR [rsp+32], xmm1
	vmovss	xmm3, DWORD PTR my$[rsp]
	vmovss	xmm2, DWORD PTR mx$[rsp]
	mov	rdx, QWORD PTR num_points$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ; stbtt__tesselate_curve
; Line 3568
	jmp	SHORT $LN4@stbtt__tes
$LN3@stbtt__tes:
; Line 3569
	vmovss	xmm3, DWORD PTR y2$[rsp]
	vmovss	xmm2, DWORD PTR x2$[rsp]
	mov	rax, QWORD PTR num_points$[rsp]
	mov	edx, DWORD PTR [rax]
	mov	rcx, QWORD PTR points$[rsp]
	call	?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ; stbtt__add_point
; Line 3570
	mov	rax, QWORD PTR num_points$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR num_points$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt__tes:
; Line 3572
	mov	eax, 1
$LN1@stbtt__tes:
; Line 3573
	add	rsp, 104				; 00000068H
	ret	0
?stbtt__tesselate_curve@@YAHPEAUstbtt__point@@PEAHMMMMMMMH@Z ENDP ; stbtt__tesselate_curve
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
points$ = 8
n$ = 16
x$ = 24
y$ = 32
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z PROC	; stbtt__add_point
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3548
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 3549
	cmp	QWORD PTR points$[rsp], 0
	jne	SHORT $LN2@stbtt__add
	jmp	SHORT $LN1@stbtt__add
$LN2@stbtt__add:
; Line 3550
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	vmovss	xmm0, DWORD PTR x$[rsp]
	vmovss	DWORD PTR [rcx+rax*8], xmm0
; Line 3551
	movsxd	rax, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR points$[rsp]
	vmovss	xmm0, DWORD PTR y$[rsp]
	vmovss	DWORD PTR [rcx+rax*8+4], xmm0
$LN1@stbtt__add:
; Line 3552
	ret	0
?stbtt__add_point@@YAXPEAUstbtt__point@@HMM@Z ENDP	; stbtt__add_point
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
n$ = 64
i$ = 68
k$ = 72
j$ = 76
p$1 = 80
e$ = 88
m$ = 96
a$2 = 100
b$3 = 104
vsubsample$ = 108
tv66 = 112
tv166 = 116
tv165 = 120
tv168 = 124
y_scale_inv$ = 128
tv129 = 132
result$ = 160
pts$ = 168
wcount$ = 176
windings$ = 184
scale_x$ = 192
scale_y$ = 200
shift_x$ = 208
shift_y$ = 216
off_x$ = 224
off_y$ = 232
invert$ = 240
userdata$ = 248
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z PROC ; stbtt__rasterize
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3491
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 3492
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN15@stbtt__ras
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR tv66[rsp], xmm0
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR tv66[rsp], xmm0
$LN16@stbtt__ras:
	vmovss	xmm0, DWORD PTR tv66[rsp]
	vmovss	DWORD PTR y_scale_inv$[rsp], xmm0
; Line 3498
	mov	DWORD PTR vsubsample$[rsp], 1
; Line 3505
	mov	DWORD PTR n$[rsp], 0
; Line 3506
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__ras
$LN2@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__ras:
	mov	eax, DWORD PTR windings$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__ras
; Line 3507
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3509
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR e$[rsp], rax
; Line 3510
	cmp	QWORD PTR e$[rsp], 0
	jne	SHORT $LN11@stbtt__ras
	jmp	$LN1@stbtt__ras
$LN11@stbtt__ras:
; Line 3511
	mov	DWORD PTR n$[rsp], 0
; Line 3513
	mov	DWORD PTR m$[rsp], 0
; Line 3514
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@stbtt__ras
$LN5@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@stbtt__ras:
	mov	eax, DWORD PTR windings$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN6@stbtt__ras
; Line 3515
	movsxd	rax, DWORD PTR m$[rsp]
	mov	rcx, QWORD PTR pts$[rsp]
	lea	rax, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR p$1[rsp], rax
; Line 3516
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	ecx, DWORD PTR m$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR m$[rsp], eax
; Line 3517
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3518
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR tv129[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
	mov	eax, DWORD PTR tv129[rsp]
	mov	DWORD PTR j$[rsp], eax
$LN10@stbtt__ras:
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR wcount$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN9@stbtt__ras
; Line 3519
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR a$2[rsp], eax
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR b$3[rsp], eax
; Line 3521
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*8+4]
	vucomiss xmm0, DWORD PTR [r8+rcx*8+4]
	jp	SHORT $LN12@stbtt__ras
	jne	SHORT $LN12@stbtt__ras
; Line 3522
	jmp	SHORT $LN8@stbtt__ras
$LN12@stbtt__ras:
; Line 3524
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	mov	DWORD PTR [rcx+rax+16], 0
; Line 3525
	cmp	DWORD PTR invert$[rsp], 0
	je	SHORT $LN21@stbtt__ras
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rax*8+4]
	vcomiss	xmm0, DWORD PTR [r8+rcx*8+4]
	jbe	SHORT $LN19@stbtt__ras
	mov	DWORD PTR tv166[rsp], 1
	jmp	SHORT $LN20@stbtt__ras
$LN19@stbtt__ras:
	mov	DWORD PTR tv166[rsp], 0
$LN20@stbtt__ras:
	mov	eax, DWORD PTR tv166[rsp]
	mov	DWORD PTR tv168[rsp], eax
	jmp	SHORT $LN22@stbtt__ras
$LN21@stbtt__ras:
	movsxd	rax, DWORD PTR j$[rsp]
	movsxd	rcx, DWORD PTR k$[rsp]
	mov	rdx, QWORD PTR p$1[rsp]
	mov	r8, QWORD PTR p$1[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rcx*8+4]
	vcomiss	xmm0, DWORD PTR [r8+rax*8+4]
	jbe	SHORT $LN17@stbtt__ras
	mov	DWORD PTR tv165[rsp], 1
	jmp	SHORT $LN18@stbtt__ras
$LN17@stbtt__ras:
	mov	DWORD PTR tv165[rsp], 0
$LN18@stbtt__ras:
	mov	eax, DWORD PTR tv165[rsp]
	mov	DWORD PTR tv168[rsp], eax
$LN22@stbtt__ras:
	cmp	DWORD PTR tv168[rsp], 0
	je	SHORT $LN13@stbtt__ras
; Line 3526
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	mov	DWORD PTR [rcx+rax+16], 1
; Line 3527
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR a$2[rsp], eax
	mov	eax, DWORD PTR k$[rsp]
	mov	DWORD PTR b$3[rsp], eax
$LN13@stbtt__ras:
; Line 3529
	movsxd	rax, DWORD PTR a$2[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*8]
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR shift_x$[rsp]
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 3530
	movsxd	rax, DWORD PTR a$2[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*8+4]
	vmulss	xmm0, xmm0, DWORD PTR y_scale_inv$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR shift_y$[rsp]
	vcvtsi2ss xmm1, xmm1, DWORD PTR vsubsample$[rsp]
	vmulss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	DWORD PTR [rcx+rax+4], xmm0
; Line 3531
	movsxd	rax, DWORD PTR b$3[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*8]
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR shift_x$[rsp]
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	DWORD PTR [rcx+rax+8], xmm0
; Line 3532
	movsxd	rax, DWORD PTR b$3[rsp]
	mov	rcx, QWORD PTR p$1[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*8+4]
	vmulss	xmm0, xmm0, DWORD PTR y_scale_inv$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR shift_y$[rsp]
	vcvtsi2ss xmm1, xmm1, DWORD PTR vsubsample$[rsp]
	vmulss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	DWORD PTR [rcx+rax+12], xmm0
; Line 3533
	mov	eax, DWORD PTR n$[rsp]
	inc	eax
	mov	DWORD PTR n$[rsp], eax
; Line 3534
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3535
	jmp	$LN5@stbtt__ras
$LN6@stbtt__ras:
; Line 3539
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	call	?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges
; Line 3542
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR off_y$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR off_x$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR vsubsample$[rsp]
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ; stbtt__rasterize_sorted_edges
; Line 3544
	mov	rcx, QWORD PTR e$[rsp]
	call	QWORD PTR __imp_free
$LN1@stbtt__ras:
; Line 3545
	add	rsp, 152				; 00000098H
	ret	0
?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ENDP ; stbtt__rasterize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 48
n$ = 56
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z PROC	; stbtt__sort_edges
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3480
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3481
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3482
	mov	edx, DWORD PTR n$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_ins_sort
; Line 3483
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__sort_edges@@YAXPEAUstbtt__edge@@H@Z ENDP	; stbtt__sort_edges
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 32
j$2 = 36
m$3 = 40
tv74 = 44
tv85 = 48
tv128 = 52
c12$4 = 56
tv131 = 60
z$5 = 64
c01$6 = 68
c$7 = 72
tv235 = 80
tv252 = 88
tv279 = 96
t$8 = 104
__$ArrayPad$ = 128
p$ = 176
n$ = 184
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_quicksort
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3418
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
$LN2@stbtt__sor:
; Line 3420
	cmp	DWORD PTR n$[rsp], 12
	jle	$LN3@stbtt__sor
; Line 3425
	mov	eax, DWORD PTR n$[rsp]
	sar	eax, 1
	mov	DWORD PTR m$3[rsp], eax
; Line 3426
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR m$3[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rcx+4]
	vcomiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN20@stbtt__sor
	mov	DWORD PTR tv74[rsp], 1
	jmp	SHORT $LN21@stbtt__sor
$LN20@stbtt__sor:
	mov	DWORD PTR tv74[rsp], 0
$LN21@stbtt__sor:
	mov	eax, DWORD PTR tv74[rsp]
	mov	DWORD PTR c01$6[rsp], eax
; Line 3427
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	ecx, DWORD PTR n$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rcx+4]
	vcomiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN22@stbtt__sor
	mov	DWORD PTR tv85[rsp], 1
	jmp	SHORT $LN23@stbtt__sor
$LN22@stbtt__sor:
	mov	DWORD PTR tv85[rsp], 0
$LN23@stbtt__sor:
	mov	eax, DWORD PTR tv85[rsp]
	mov	DWORD PTR c12$4[rsp], eax
; Line 3429
	mov	eax, DWORD PTR c12$4[rsp]
	cmp	DWORD PTR c01$6[rsp], eax
	je	$LN13@stbtt__sor
; Line 3432
	mov	eax, 20
	imul	rax, rax, 0
	mov	ecx, DWORD PTR n$[rsp]
	dec	ecx
	movsxd	rcx, ecx
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	r8, QWORD PTR p$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rcx+4]
	vcomiss	xmm0, DWORD PTR [r8+rax+4]
	jbe	SHORT $LN24@stbtt__sor
	mov	DWORD PTR tv128[rsp], 1
	jmp	SHORT $LN25@stbtt__sor
$LN24@stbtt__sor:
	mov	DWORD PTR tv128[rsp], 0
$LN25@stbtt__sor:
	mov	eax, DWORD PTR tv128[rsp]
	mov	DWORD PTR c$7[rsp], eax
; Line 3435
	mov	eax, DWORD PTR c12$4[rsp]
	cmp	DWORD PTR c$7[rsp], eax
	jne	SHORT $LN26@stbtt__sor
	mov	DWORD PTR tv131[rsp], 0
	jmp	SHORT $LN27@stbtt__sor
$LN26@stbtt__sor:
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR tv131[rsp], eax
$LN27@stbtt__sor:
	mov	eax, DWORD PTR tv131[rsp]
	mov	DWORD PTR z$5[rsp], eax
; Line 3436
	movsxd	rax, DWORD PTR z$5[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3437
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR z$5[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv235[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv235[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3438
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN13@stbtt__sor:
; Line 3442
	mov	eax, 20
	imul	rax, rax, 0
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3443
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv252[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv252[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3444
	movsxd	rax, DWORD PTR m$3[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3447
	mov	DWORD PTR i$1[rsp], 1
; Line 3448
	mov	eax, DWORD PTR n$[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
$LN4@stbtt__sor:
; Line 3452
	jmp	SHORT $LN9@stbtt__sor
$LN7@stbtt__sor:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN9@stbtt__sor:
; Line 3453
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	mov	ecx, 20
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rcx+4]
	vcomiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN14@stbtt__sor
	jmp	SHORT $LN8@stbtt__sor
$LN14@stbtt__sor:
; Line 3454
	jmp	SHORT $LN7@stbtt__sor
$LN8@stbtt__sor:
; Line 3455
	jmp	SHORT $LN12@stbtt__sor
$LN10@stbtt__sor:
	mov	eax, DWORD PTR j$2[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
$LN12@stbtt__sor:
; Line 3456
	mov	eax, 20
	imul	rax, rax, 0
	movsxd	rcx, DWORD PTR j$2[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+rcx+4]
	vcomiss	xmm0, DWORD PTR [rdi+rax+4]
	ja	SHORT $LN15@stbtt__sor
	jmp	SHORT $LN11@stbtt__sor
$LN15@stbtt__sor:
; Line 3457
	jmp	SHORT $LN10@stbtt__sor
$LN11@stbtt__sor:
; Line 3459
	mov	eax, DWORD PTR j$2[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jl	SHORT $LN16@stbtt__sor
	jmp	$LN5@stbtt__sor
$LN16@stbtt__sor:
; Line 3460
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$8[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
; Line 3461
	movsxd	rax, DWORD PTR j$2[rsp]
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv279[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv279[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3462
	movsxd	rax, DWORD PTR j$2[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$8[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
; Line 3464
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
; Line 3465
	mov	eax, DWORD PTR j$2[rsp]
	dec	eax
	mov	DWORD PTR j$2[rsp], eax
; Line 3466
	jmp	$LN4@stbtt__sor
$LN5@stbtt__sor:
; Line 3468
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR j$2[rsp], eax
	jge	SHORT $LN17@stbtt__sor
; Line 3469
	mov	edx, DWORD PTR j$2[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3470
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax
; Line 3471
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 3472
	jmp	SHORT $LN18@stbtt__sor
$LN17@stbtt__sor:
; Line 3473
	mov	eax, DWORD PTR i$1[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$1[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	edx, eax
	call	?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ; stbtt__sort_edges_quicksort
; Line 3474
	mov	eax, DWORD PTR j$2[rsp]
	mov	DWORD PTR n$[rsp], eax
$LN18@stbtt__sor:
; Line 3476
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3477
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__sort_edges_quicksort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_quicksort
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
j$ = 0
i$ = 4
tv78 = 8
c$1 = 12
b$2 = 16
a$3 = 24
tv142 = 32
t$4 = 40
__$ArrayPad$ = 64
p$ = 112
n$ = 120
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z PROC ; stbtt__sort_edges_ins_sort
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3400
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3402
	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@stbtt__sor
$LN2@stbtt__sor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__sor:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__sor
; Line 3403
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 20
	lea	rcx, QWORD PTR t$4[rsp]
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 20
	rep movsb
	lea	rax, QWORD PTR t$4[rsp]
	mov	QWORD PTR a$3[rsp], rax
; Line 3404
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$[rsp], eax
$LN5@stbtt__sor:
; Line 3405
	cmp	DWORD PTR j$[rsp], 0
	jle	$LN6@stbtt__sor
; Line 3406
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$2[rsp], rax
; Line 3407
	mov	rax, QWORD PTR b$2[rsp]
	mov	rcx, QWORD PTR a$3[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vcomiss	xmm0, DWORD PTR [rcx+4]
	jbe	SHORT $LN10@stbtt__sor
	mov	DWORD PTR tv78[rsp], 1
	jmp	SHORT $LN11@stbtt__sor
$LN10@stbtt__sor:
	mov	DWORD PTR tv78[rsp], 0
$LN11@stbtt__sor:
	mov	eax, DWORD PTR tv78[rsp]
	mov	DWORD PTR c$1[rsp], eax
; Line 3408
	cmp	DWORD PTR c$1[rsp], 0
	jne	SHORT $LN7@stbtt__sor
	jmp	SHORT $LN6@stbtt__sor
$LN7@stbtt__sor:
; Line 3409
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 20
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 20
	mov	rdx, QWORD PTR p$[rsp]
	mov	rdi, QWORD PTR p$[rsp]
	mov	QWORD PTR tv142[rsp], rdi
	lea	rdi, QWORD PTR [rdx+rcx]
	mov	rcx, QWORD PTR tv142[rsp]
	lea	rsi, QWORD PTR [rcx+rax]
	mov	ecx, 20
	rep movsb
; Line 3410
	mov	eax, DWORD PTR j$[rsp]
	dec	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3411
	jmp	$LN5@stbtt__sor
$LN6@stbtt__sor:
; Line 3412
	mov	eax, DWORD PTR j$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	je	SHORT $LN8@stbtt__sor
; Line 3413
	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR p$[rsp]
	lea	rdx, QWORD PTR t$4[rsp]
	lea	rdi, QWORD PTR [rcx+rax]
	mov	rsi, rdx
	mov	ecx, 20
	rep movsb
$LN8@stbtt__sor:
; Line 3414
	jmp	$LN2@stbtt__sor
$LN3@stbtt__sor:
; Line 3415
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__sort_edges_ins_sort@@YAXPEAUstbtt__edge@@H@Z ENDP ; stbtt__sort_edges_ins_sort
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scan_y_top$1 = 48
i$ = 52
j$ = 56
step$2 = 64
y$ = 72
sum$3 = 76
k$4 = 80
m$5 = 84
scanline$ = 88
z$6 = 96
active$ = 104
z$7 = 112
scan_y_bottom$8 = 120
scanline2$ = 128
z$9 = 136
hh$ = 144
scanline_data$ = 176
__$ArrayPad$ = 704
result$ = 736
e$ = 744
n$ = 752
vsubsample$ = 760
off_x$ = 768
off_y$ = 776
userdata$ = 784
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z PROC ; stbtt__rasterize_sorted_edges
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3298
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 728				; 000002d8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 3299
	mov	QWORD PTR hh$[rsp], 0
	mov	QWORD PTR hh$[rsp+8], 0
	mov	DWORD PTR hh$[rsp+16], 0
; Line 3300
	mov	QWORD PTR active$[rsp], 0
; Line 3301
	mov	DWORD PTR j$[rsp], 0
; Line 3306
	mov	rax, QWORD PTR result$[rsp]
	cmp	DWORD PTR [rax], 64			; 00000040H
	jle	SHORT $LN13@stbtt__ras
; Line 3307
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	lea	eax, DWORD PTR [rax+rax+1]
	cdqe
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR scanline$[rsp], rax
	jmp	SHORT $LN14@stbtt__ras
$LN13@stbtt__ras:
; Line 3309
	lea	rax, QWORD PTR scanline_data$[rsp]
	mov	QWORD PTR scanline$[rsp], rax
$LN14@stbtt__ras:
; Line 3311
	mov	rax, QWORD PTR result$[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR scanline$[rsp]
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR scanline2$[rsp], rax
; Line 3313
	mov	eax, DWORD PTR off_y$[rsp]
	mov	DWORD PTR y$[rsp], eax
; Line 3314
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	ecx, DWORD PTR off_y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm0, xmm0, eax
	vaddss	xmm0, xmm0, DWORD PTR __real@3f800000
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	DWORD PTR [rcx+rax+4], xmm0
$LN2@stbtt__ras:
; Line 3316
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax+4]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN3@stbtt__ras
; Line 3318
	vcvtsi2ss xmm0, xmm0, DWORD PTR y$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@00000000
	vmovss	DWORD PTR scan_y_top$1[rsp], xmm0
; Line 3319
	vcvtsi2ss xmm0, xmm0, DWORD PTR y$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR scan_y_bottom$8[rsp], xmm0
; Line 3320
	lea	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR step$2[rsp], rax
; Line 3322
	mov	rax, QWORD PTR result$[rsp]
	movsxd	rax, DWORD PTR [rax]
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR scanline$[rsp]
	call	memset
; Line 3323
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	cdqe
	shl	rax, 2
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR scanline2$[rsp]
	call	memset
$LN4@stbtt__ras:
; Line 3327
	mov	rax, QWORD PTR step$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN5@stbtt__ras
; Line 3328
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$7[rsp], rax
; Line 3329
	mov	rax, QWORD PTR z$7[rsp]
	vmovss	xmm0, DWORD PTR scan_y_top$1[rsp]
	vcomiss	xmm0, DWORD PTR [rax+28]
	jb	SHORT $LN15@stbtt__ras
; Line 3330
	mov	rax, QWORD PTR step$2[rsp]
	mov	rcx, QWORD PTR z$7[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 3331
	mov	rax, QWORD PTR z$7[rsp]
	vmovss	xmm0, DWORD PTR [rax+20]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN25@stbtt__ras
	jne	SHORT $LN25@stbtt__ras
	mov	r8d, 3331				; 00000d03H
	lea	rdx, OFFSET FLAT:$SG143952
	lea	rcx, OFFSET FLAT:$SG143953
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN25@stbtt__ras:
; Line 3332
	mov	rax, QWORD PTR z$7[rsp]
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rax+20], xmm0
; Line 3333
	mov	rdx, QWORD PTR z$7[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_free
; Line 3334
	jmp	SHORT $LN16@stbtt__ras
$LN15@stbtt__ras:
; Line 3335
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$2[rsp], rax
$LN16@stbtt__ras:
; Line 3337
	jmp	$LN4@stbtt__ras
$LN5@stbtt__ras:
$LN6@stbtt__ras:
; Line 3340
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR scan_y_bottom$8[rsp]
	vcomiss	xmm0, DWORD PTR [rax+4]
	jb	$LN7@stbtt__ras
; Line 3341
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vucomiss xmm0, DWORD PTR [rcx+12]
	jp	SHORT $LN27@stbtt__ras
	je	$LN17@stbtt__ras
$LN27@stbtt__ras:
; Line 3342
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+32], rax
	vmovss	xmm3, DWORD PTR scan_y_top$1[rsp]
	mov	r8d, DWORD PTR off_x$[rsp]
	mov	rdx, QWORD PTR e$[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ; stbtt__new_active
	mov	QWORD PTR z$6[rsp], rax
; Line 3343
	cmp	QWORD PTR z$6[rsp], 0
	je	SHORT $LN18@stbtt__ras
; Line 3344
	cmp	DWORD PTR j$[rsp], 0
	jne	SHORT $LN19@stbtt__ras
	cmp	DWORD PTR off_y$[rsp], 0
	je	SHORT $LN19@stbtt__ras
; Line 3345
	mov	rax, QWORD PTR z$6[rsp]
	vmovss	xmm0, DWORD PTR scan_y_top$1[rsp]
	vcomiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN20@stbtt__ras
; Line 3347
	mov	rax, QWORD PTR z$6[rsp]
	vmovss	xmm0, DWORD PTR scan_y_top$1[rsp]
	vmovss	DWORD PTR [rax+28], xmm0
$LN20@stbtt__ras:
$LN19@stbtt__ras:
; Line 3350
	mov	rax, QWORD PTR z$6[rsp]
	vmovss	xmm0, DWORD PTR [rax+28]
	vcomiss	xmm0, DWORD PTR scan_y_top$1[rsp]
	jae	SHORT $LN26@stbtt__ras
	mov	r8d, 3350				; 00000d16H
	lea	rdx, OFFSET FLAT:$SG143958
	lea	rcx, OFFSET FLAT:$SG143959
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN26@stbtt__ras:
; Line 3352
	mov	rax, QWORD PTR z$6[rsp]
	mov	rcx, QWORD PTR active$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3353
	mov	rax, QWORD PTR z$6[rsp]
	mov	QWORD PTR active$[rsp], rax
$LN18@stbtt__ras:
$LN17@stbtt__ras:
; Line 3356
	mov	rax, QWORD PTR e$[rsp]
	add	rax, 20
	mov	QWORD PTR e$[rsp], rax
; Line 3357
	jmp	$LN6@stbtt__ras
$LN7@stbtt__ras:
; Line 3360
	cmp	QWORD PTR active$[rsp], 0
	je	SHORT $LN21@stbtt__ras
; Line 3361
	mov	rax, QWORD PTR scanline2$[rsp]
	add	rax, 4
	vmovss	xmm0, DWORD PTR scan_y_top$1[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	mov	r9, QWORD PTR active$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	mov	r8d, DWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ; stbtt__fill_active_edges_new
$LN21@stbtt__ras:
; Line 3364
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR sum$3[rsp], xmm0
; Line 3365
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt__ras
$LN8@stbtt__ras:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt__ras:
	mov	rax, QWORD PTR result$[rsp]
	mov	eax, DWORD PTR [rax]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN9@stbtt__ras
; Line 3368
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR scanline2$[rsp]
	vmovss	xmm0, DWORD PTR sum$3[rsp]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+rax*4]
	vmovss	DWORD PTR sum$3[rsp], xmm0
; Line 3369
	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*4]
	vaddss	xmm0, xmm0, DWORD PTR sum$3[rsp]
	vmovss	DWORD PTR k$4[rsp], xmm0
; Line 3370
	vcvtss2sd xmm0, xmm0, DWORD PTR k$4[rsp]
	call	fabs
	vcvtsd2ss xmm0, xmm0, xmm0
	vmulss	xmm0, xmm0, DWORD PTR __real@437f0000
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR k$4[rsp], xmm0
; Line 3371
	vcvttss2si eax, DWORD PTR k$4[rsp]
	mov	DWORD PTR m$5[rsp], eax
; Line 3372
	cmp	DWORD PTR m$5[rsp], 255			; 000000ffH
	jle	SHORT $LN22@stbtt__ras
	mov	DWORD PTR m$5[rsp], 255			; 000000ffH
$LN22@stbtt__ras:
; Line 3373
	mov	rax, QWORD PTR result$[rsp]
	mov	ecx, DWORD PTR j$[rsp]
	imul	ecx, DWORD PTR [rax+8]
	mov	eax, ecx
	add	eax, DWORD PTR i$[rsp]
	cdqe
	mov	rcx, QWORD PTR result$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	movzx	edx, BYTE PTR m$5[rsp]
	mov	BYTE PTR [rcx+rax], dl
; Line 3374
	jmp	$LN8@stbtt__ras
$LN9@stbtt__ras:
; Line 3377
	lea	rax, QWORD PTR active$[rsp]
	mov	QWORD PTR step$2[rsp], rax
$LN11@stbtt__ras:
; Line 3378
	mov	rax, QWORD PTR step$2[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN12@stbtt__ras
; Line 3379
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR z$9[rsp], rax
; Line 3380
	mov	rax, QWORD PTR z$9[rsp]
	mov	rcx, QWORD PTR z$9[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR z$9[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 3381
	mov	rax, QWORD PTR step$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR step$2[rsp], rax
; Line 3382
	jmp	SHORT $LN11@stbtt__ras
$LN12@stbtt__ras:
; Line 3384
	mov	eax, DWORD PTR y$[rsp]
	inc	eax
	mov	DWORD PTR y$[rsp], eax
; Line 3385
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
; Line 3386
	jmp	$LN2@stbtt__ras
$LN3@stbtt__ras:
; Line 3388
	mov	rdx, QWORD PTR userdata$[rsp]
	lea	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ; stbtt__hheap_cleanup
; Line 3390
	lea	rax, QWORD PTR scanline_data$[rsp]
	cmp	QWORD PTR scanline$[rsp], rax
	je	SHORT $LN23@stbtt__ras
; Line 3391
	mov	rcx, QWORD PTR scanline$[rsp]
	call	QWORD PTR __imp_free
$LN23@stbtt__ras:
; Line 3392
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 728				; 000002d8H
	ret	0
?stbtt__rasterize_sorted_edges@@YAXPEAUstbtt__bitmap@@PEAUstbtt__edge@@HHHHPEAX@Z ENDP ; stbtt__rasterize_sorted_edges
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x0$1 = 64
x$2 = 68
x1$3 = 72
x2$4 = 76
y_bottom$ = 80
x3$5 = 84
x_top$6 = 88
x0$7 = 92
x_bottom$8 = 96
x2$9 = 100
sy1$10 = 104
x$11 = 108
sy0$12 = 112
dx$13 = 116
y1$14 = 120
y2$15 = 124
dy$16 = 128
y3$17 = 132
y0$18 = 136
x1$19 = 140
area$20 = 144
t$21 = 148
x$22 = 152
y_final$23 = 156
y_crossing$24 = 160
sign$25 = 164
xb$26 = 168
height$27 = 172
step$28 = 176
tv198 = 180
tv200 = 184
tv254 = 188
tv256 = 192
tv304 = 196
tv306 = 200
tv314 = 204
tv316 = 208
scanline$ = 240
scanline_fill$ = 248
len$ = 256
e$ = 264
y_top$ = 272
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z PROC ; stbtt__fill_active_edges_new
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3083
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
; Line 3084
	vmovss	xmm0, DWORD PTR y_top$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR y_bottom$[rsp], xmm0
$LN2@stbtt__fil:
; Line 3086
	cmp	QWORD PTR e$[rsp], 0
	je	$LN3@stbtt__fil
; Line 3090
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+28]
	vcomiss	xmm0, DWORD PTR y_top$[rsp]
	jae	SHORT $LN39@stbtt__fil
	mov	r8d, 3090				; 00000c12H
	lea	rdx, OFFSET FLAT:$SG143856
	lea	rcx, OFFSET FLAT:$SG143857
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN39@stbtt__fil:
; Line 3092
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+12]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	$LN10@stbtt__fil
	jne	$LN10@stbtt__fil
; Line 3093
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vmovss	DWORD PTR x0$7[rsp], xmm0
; Line 3094
	vcvtsi2ss xmm0, xmm0, DWORD PTR len$[rsp]
	vcomiss	xmm0, DWORD PTR x0$7[rsp]
	jbe	$LN12@stbtt__fil
; Line 3095
	vmovss	xmm0, DWORD PTR x0$7[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jb	$LN13@stbtt__fil
; Line 3096
	vcvttss2si eax, DWORD PTR x0$7[rsp]
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x0$7[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y_top$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3097
	vcvttss2si eax, DWORD PTR x0$7[rsp]
	inc	eax
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	sub	rcx, 4
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x0$7[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y_top$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, eax
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3098
	jmp	SHORT $LN14@stbtt__fil
$LN13@stbtt__fil:
; Line 3099
	mov	rax, QWORD PTR scanline_fill$[rsp]
	sub	rax, 4
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x0$7[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y_top$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$7[rsp]
	mov	r8, QWORD PTR e$[rsp]
	xor	edx, edx
	mov	rcx, rax
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN14@stbtt__fil:
$LN12@stbtt__fil:
; Line 3102
	jmp	$LN11@stbtt__fil
$LN10@stbtt__fil:
; Line 3103
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vmovss	DWORD PTR x0$1[rsp], xmm0
; Line 3104
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+12]
	vmovss	DWORD PTR dx$13[rsp], xmm0
; Line 3105
	vmovss	xmm0, DWORD PTR x0$1[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dx$13[rsp]
	vmovss	DWORD PTR xb$26[rsp], xmm0
; Line 3108
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+16]
	vmovss	DWORD PTR dy$16[rsp], xmm0
; Line 3109
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vcomiss	xmm0, DWORD PTR [rax+24]
	jb	SHORT $LN40@stbtt__fil
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+28]
	vcomiss	xmm0, DWORD PTR y_top$[rsp]
	jae	SHORT $LN41@stbtt__fil
$LN40@stbtt__fil:
	mov	r8d, 3109				; 00000c25H
	lea	rdx, OFFSET FLAT:$SG143863
	lea	rcx, OFFSET FLAT:$SG143864
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN41@stbtt__fil:
; Line 3114
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+24]
	vcomiss	xmm0, DWORD PTR y_top$[rsp]
	jbe	SHORT $LN15@stbtt__fil
; Line 3115
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+24]
	vsubss	xmm0, xmm0, DWORD PTR y_top$[rsp]
	vmovss	xmm1, DWORD PTR dx$13[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR x0$1[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR x_top$6[rsp], xmm0
; Line 3116
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+24]
	vmovss	DWORD PTR sy0$12[rsp], xmm0
; Line 3117
	jmp	SHORT $LN16@stbtt__fil
$LN15@stbtt__fil:
; Line 3118
	vmovss	xmm0, DWORD PTR x0$1[rsp]
	vmovss	DWORD PTR x_top$6[rsp], xmm0
; Line 3119
	vmovss	xmm0, DWORD PTR y_top$[rsp]
	vmovss	DWORD PTR sy0$12[rsp], xmm0
$LN16@stbtt__fil:
; Line 3121
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vcomiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN17@stbtt__fil
; Line 3122
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+28]
	vsubss	xmm0, xmm0, DWORD PTR y_top$[rsp]
	vmovss	xmm1, DWORD PTR dx$13[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR x0$1[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR x_bottom$8[rsp], xmm0
; Line 3123
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+28]
	vmovss	DWORD PTR sy1$10[rsp], xmm0
; Line 3124
	jmp	SHORT $LN18@stbtt__fil
$LN17@stbtt__fil:
; Line 3125
	vmovss	xmm0, DWORD PTR xb$26[rsp]
	vmovss	DWORD PTR x_bottom$8[rsp], xmm0
; Line 3126
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vmovss	DWORD PTR sy1$10[rsp], xmm0
$LN18@stbtt__fil:
; Line 3129
	vmovss	xmm0, DWORD PTR x_top$6[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jb	$LN19@stbtt__fil
	vmovss	xmm0, DWORD PTR x_bottom$8[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jb	$LN19@stbtt__fil
	vcvtsi2ss xmm0, xmm0, DWORD PTR len$[rsp]
	vcomiss	xmm0, DWORD PTR x_top$6[rsp]
	jbe	$LN19@stbtt__fil
	vcvtsi2ss xmm0, xmm0, DWORD PTR len$[rsp]
	vcomiss	xmm0, DWORD PTR x_bottom$8[rsp]
	jbe	$LN19@stbtt__fil
; Line 3132
	vcvttss2si eax, DWORD PTR x_top$6[rsp]
	vcvttss2si ecx, DWORD PTR x_bottom$8[rsp]
	cmp	eax, ecx
	jne	$LN21@stbtt__fil
; Line 3135
	vcvttss2si eax, DWORD PTR x_top$6[rsp]
	mov	DWORD PTR x$11[rsp], eax
; Line 3136
	vmovss	xmm0, DWORD PTR sy1$10[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sy0$12[rsp]
	mov	rax, QWORD PTR e$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR [rax+20]
	vmovss	DWORD PTR height$27[rsp], xmm0
; Line 3137
	cmp	DWORD PTR x$11[rsp], 0
	jl	SHORT $LN42@stbtt__fil
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR x$11[rsp], eax
	jl	SHORT $LN43@stbtt__fil
$LN42@stbtt__fil:
	mov	r8d, 3137				; 00000c41H
	lea	rdx, OFFSET FLAT:$SG143873
	lea	rcx, OFFSET FLAT:$SG143874
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN43@stbtt__fil:
; Line 3138
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$11[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f800000
	vcvtsi2ss xmm1, xmm1, DWORD PTR x$11[rsp]
	vaddss	xmm1, xmm1, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x_bottom$8[rsp]
	vmovups	xmm2, xmm1
	vmovss	xmm1, DWORD PTR x_top$6[rsp]
	vmovss	xmm0, DWORD PTR height$27[rsp]
	call	?stbtt__position_trapezoid_area@@YAMMMMMM@Z ; stbtt__position_trapezoid_area
	vmovss	DWORD PTR tv200[rsp], xmm0
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*4]
	vmovss	DWORD PTR tv198[rsp], xmm0
	vmovss	xmm0, DWORD PTR tv198[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tv200[rsp]
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
; Line 3139
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*4]
	vaddss	xmm0, xmm0, DWORD PTR height$27[rsp]
	movsxd	rax, DWORD PTR x$11[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
; Line 3140
	jmp	$LN22@stbtt__fil
$LN21@stbtt__fil:
; Line 3144
	vmovss	xmm0, DWORD PTR x_top$6[rsp]
	vcomiss	xmm0, DWORD PTR x_bottom$8[rsp]
	jbe	$LN23@stbtt__fil
; Line 3147
	vmovss	xmm0, DWORD PTR sy0$12[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y_top$[rsp]
	vmovss	xmm1, DWORD PTR y_bottom$[rsp]
	vsubss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR sy0$12[rsp], xmm0
; Line 3148
	vmovss	xmm0, DWORD PTR sy1$10[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y_top$[rsp]
	vmovss	xmm1, DWORD PTR y_bottom$[rsp]
	vsubss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR sy1$10[rsp], xmm0
; Line 3149
	vmovss	xmm0, DWORD PTR sy0$12[rsp]
	vmovss	DWORD PTR t$21[rsp], xmm0
	vmovss	xmm0, DWORD PTR sy1$10[rsp]
	vmovss	DWORD PTR sy0$12[rsp], xmm0
	vmovss	xmm0, DWORD PTR t$21[rsp]
	vmovss	DWORD PTR sy1$10[rsp], xmm0
; Line 3150
	vmovss	xmm0, DWORD PTR x_bottom$8[rsp]
	vmovss	DWORD PTR t$21[rsp], xmm0
	vmovss	xmm0, DWORD PTR x_top$6[rsp]
	vmovss	DWORD PTR x_bottom$8[rsp], xmm0
	vmovss	xmm0, DWORD PTR t$21[rsp]
	vmovss	DWORD PTR x_top$6[rsp], xmm0
; Line 3151
	vmovss	xmm0, DWORD PTR dx$13[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR dx$13[rsp], xmm0
; Line 3152
	vmovss	xmm0, DWORD PTR dy$16[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR dy$16[rsp], xmm0
; Line 3153
	vmovss	xmm0, DWORD PTR x0$1[rsp]
	vmovss	DWORD PTR t$21[rsp], xmm0
	vmovss	xmm0, DWORD PTR xb$26[rsp]
	vmovss	DWORD PTR x0$1[rsp], xmm0
	vmovss	xmm0, DWORD PTR t$21[rsp]
	vmovss	DWORD PTR xb$26[rsp], xmm0
$LN23@stbtt__fil:
; Line 3155
	vmovss	xmm0, DWORD PTR dy$16[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN44@stbtt__fil
	mov	r8d, 3155				; 00000c53H
	lea	rdx, OFFSET FLAT:$SG143876
	lea	rcx, OFFSET FLAT:$SG143877
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN44@stbtt__fil:
; Line 3156
	vmovss	xmm0, DWORD PTR dx$13[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN45@stbtt__fil
	mov	r8d, 3156				; 00000c54H
	lea	rdx, OFFSET FLAT:$SG143878
	lea	rcx, OFFSET FLAT:$SG143879
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN45@stbtt__fil:
; Line 3158
	vcvttss2si eax, DWORD PTR x_top$6[rsp]
	mov	DWORD PTR x1$19[rsp], eax
; Line 3159
	vcvttss2si eax, DWORD PTR x_bottom$8[rsp]
	mov	DWORD PTR x2$9[rsp], eax
; Line 3161
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vsubss	xmm0, xmm0, DWORD PTR x0$1[rsp]
	vmovss	xmm1, DWORD PTR dy$16[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR y_top$[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR y_crossing$24[rsp], xmm0
; Line 3164
	vcvtsi2ss xmm0, xmm0, DWORD PTR x2$9[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$1[rsp]
	vmovss	xmm1, DWORD PTR dy$16[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR y_top$[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR y_final$23[rsp], xmm0
; Line 3185
	vmovss	xmm0, DWORD PTR y_crossing$24[rsp]
	vcomiss	xmm0, DWORD PTR y_bottom$[rsp]
	jbe	SHORT $LN24@stbtt__fil
; Line 3186
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vmovss	DWORD PTR y_crossing$24[rsp], xmm0
$LN24@stbtt__fil:
; Line 3188
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+20]
	vmovss	DWORD PTR sign$25[rsp], xmm0
; Line 3191
	vmovss	xmm0, DWORD PTR y_crossing$24[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sy0$12[rsp]
	vmovss	xmm1, DWORD PTR sign$25[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR area$20[rsp], xmm0
; Line 3194
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vsubss	xmm0, xmm0, DWORD PTR x_top$6[rsp]
	vmovups	xmm1, xmm0
	vmovss	xmm0, DWORD PTR area$20[rsp]
	call	?stbtt__sized_triangle_area@@YAMMM@Z	; stbtt__sized_triangle_area
	vmovss	DWORD PTR tv256[rsp], xmm0
	movsxd	rax, DWORD PTR x1$19[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*4]
	vmovss	DWORD PTR tv254[rsp], xmm0
	vmovss	xmm0, DWORD PTR tv254[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tv256[rsp]
	movsxd	rax, DWORD PTR x1$19[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
; Line 3197
	vmovss	xmm0, DWORD PTR y_final$23[rsp]
	vcomiss	xmm0, DWORD PTR y_bottom$[rsp]
	jbe	SHORT $LN25@stbtt__fil
; Line 3198
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vmovss	DWORD PTR y_final$23[rsp], xmm0
; Line 3199
	vmovss	xmm0, DWORD PTR y_final$23[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y_crossing$24[rsp]
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	mov	ecx, DWORD PTR x2$9[rsp]
	sub	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm1, xmm1, eax
	vdivss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR dy$16[rsp], xmm0
$LN25@stbtt__fil:
; Line 3212
	vmovss	xmm0, DWORD PTR sign$25[rsp]
	vmulss	xmm0, xmm0, DWORD PTR dy$16[rsp]
	vmulss	xmm0, xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR step$28[rsp], xmm0
; Line 3216
	mov	eax, DWORD PTR x1$19[rsp]
	inc	eax
	mov	DWORD PTR x$22[rsp], eax
	jmp	SHORT $LN6@stbtt__fil
$LN4@stbtt__fil:
	mov	eax, DWORD PTR x$22[rsp]
	inc	eax
	mov	DWORD PTR x$22[rsp], eax
$LN6@stbtt__fil:
	mov	eax, DWORD PTR x2$9[rsp]
	cmp	DWORD PTR x$22[rsp], eax
	jge	SHORT $LN5@stbtt__fil
; Line 3217
	vmovss	xmm0, DWORD PTR step$28[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmovss	xmm1, DWORD PTR area$20[rsp]
	vaddss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR x$22[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax*4]
	vaddss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR x$22[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
; Line 3218
	vmovss	xmm0, DWORD PTR area$20[rsp]
	vaddss	xmm0, xmm0, DWORD PTR step$28[rsp]
	vmovss	DWORD PTR area$20[rsp], xmm0
; Line 3219
	jmp	$LN4@stbtt__fil
$LN5@stbtt__fil:
; Line 3220
	vcvtss2sd xmm0, xmm0, DWORD PTR area$20[rsp]
	call	fabs
	vmovsd	xmm1, QWORD PTR __real@3ff028f5c0000000
	vcomisd	xmm1, xmm0
	jae	SHORT $LN46@stbtt__fil
	mov	r8d, 3220				; 00000c94H
	lea	rdx, OFFSET FLAT:$SG143882
	lea	rcx, OFFSET FLAT:$SG143883
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN46@stbtt__fil:
; Line 3221
	vmovss	xmm0, DWORD PTR y_final$23[rsp]
	vsubss	xmm0, xmm0, DWORD PTR __real@3c23d70a
	vmovss	xmm1, DWORD PTR sy1$10[rsp]
	vcomiss	xmm1, xmm0
	ja	SHORT $LN47@stbtt__fil
	mov	r8d, 3221				; 00000c95H
	lea	rdx, OFFSET FLAT:$SG143884
	lea	rcx, OFFSET FLAT:$SG143885
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN47@stbtt__fil:
; Line 3225
	vcvtsi2ss xmm0, xmm0, DWORD PTR x2$9[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f800000
	vcvtsi2ss xmm1, xmm1, DWORD PTR x2$9[rsp]
	vaddss	xmm1, xmm1, DWORD PTR __real@3f800000
	vcvtsi2ss xmm2, xmm2, DWORD PTR x2$9[rsp]
	vmovss	DWORD PTR tv304[rsp], xmm2
	vmovss	xmm3, DWORD PTR sy1$10[rsp]
	vsubss	xmm3, xmm3, DWORD PTR y_final$23[rsp]
	vmovss	DWORD PTR tv306[rsp], xmm3
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x_bottom$8[rsp]
	vmovups	xmm2, xmm1
	vmovss	xmm0, DWORD PTR tv304[rsp]
	vmovups	xmm1, xmm0
	vmovss	xmm0, DWORD PTR tv306[rsp]
	call	?stbtt__position_trapezoid_area@@YAMMMMMM@Z ; stbtt__position_trapezoid_area
	vmovss	xmm1, DWORD PTR sign$25[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR area$20[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR tv316[rsp], xmm0
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*4]
	vmovss	DWORD PTR tv314[rsp], xmm0
	vmovss	xmm0, DWORD PTR tv314[rsp]
	vaddss	xmm0, xmm0, DWORD PTR tv316[rsp]
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
; Line 3228
	vmovss	xmm0, DWORD PTR sy1$10[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sy0$12[rsp]
	vmovss	xmm1, DWORD PTR sign$25[rsp]
	vmulss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax*4]
	vaddss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR x2$9[rsp]
	mov	rcx, QWORD PTR scanline_fill$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
$LN22@stbtt__fil:
; Line 3230
	jmp	$LN20@stbtt__fil
$LN19@stbtt__fil:
; Line 3239
	mov	DWORD PTR x$2[rsp], 0
	jmp	SHORT $LN9@stbtt__fil
$LN7@stbtt__fil:
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	mov	DWORD PTR x$2[rsp], eax
$LN9@stbtt__fil:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR x$2[rsp], eax
	jge	$LN8@stbtt__fil
; Line 3254
	vmovss	xmm0, DWORD PTR y_top$[rsp]
	vmovss	DWORD PTR y0$18[rsp], xmm0
; Line 3255
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$2[rsp]
	vmovss	DWORD PTR x1$3[rsp], xmm0
; Line 3256
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR x2$4[rsp], xmm0
; Line 3257
	vmovss	xmm0, DWORD PTR xb$26[rsp]
	vmovss	DWORD PTR x3$5[rsp], xmm0
; Line 3258
	vmovss	xmm0, DWORD PTR y_bottom$[rsp]
	vmovss	DWORD PTR y3$17[rsp], xmm0
; Line 3263
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$2[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$1[rsp]
	vdivss	xmm0, xmm0, DWORD PTR dx$13[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y_top$[rsp]
	vmovss	DWORD PTR y1$14[rsp], xmm0
; Line 3264
	mov	eax, DWORD PTR x$2[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vsubss	xmm0, xmm0, DWORD PTR x0$1[rsp]
	vdivss	xmm0, xmm0, DWORD PTR dx$13[rsp]
	vaddss	xmm0, xmm0, DWORD PTR y_top$[rsp]
	vmovss	DWORD PTR y2$15[rsp], xmm0
; Line 3266
	vmovss	xmm0, DWORD PTR x1$3[rsp]
	vcomiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN26@stbtt__fil
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vcomiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN26@stbtt__fil
; Line 3267
	vmovss	xmm0, DWORD PTR y1$14[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x1$3[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y0$18[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3268
	vmovss	xmm0, DWORD PTR y2$15[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x2$4[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y1$14[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3269
	vmovss	xmm0, DWORD PTR y3$17[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y2$15[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN27@stbtt__fil
$LN26@stbtt__fil:
; Line 3270
	vmovss	xmm0, DWORD PTR x1$3[rsp]
	vcomiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN28@stbtt__fil
	vmovss	xmm0, DWORD PTR x0$1[rsp]
	vcomiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN28@stbtt__fil
; Line 3271
	vmovss	xmm0, DWORD PTR y2$15[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x2$4[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y0$18[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3272
	vmovss	xmm0, DWORD PTR y1$14[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x1$3[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y2$15[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3273
	vmovss	xmm0, DWORD PTR y3$17[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y1$14[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN29@stbtt__fil
$LN28@stbtt__fil:
; Line 3274
	vmovss	xmm0, DWORD PTR x1$3[rsp]
	vcomiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN30@stbtt__fil
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vcomiss	xmm0, DWORD PTR x1$3[rsp]
	jbe	$LN30@stbtt__fil
; Line 3275
	vmovss	xmm0, DWORD PTR y1$14[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x1$3[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y0$18[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3276
	vmovss	xmm0, DWORD PTR y3$17[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y1$14[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN31@stbtt__fil
$LN30@stbtt__fil:
; Line 3277
	vmovss	xmm0, DWORD PTR x1$3[rsp]
	vcomiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN32@stbtt__fil
	vmovss	xmm0, DWORD PTR x0$1[rsp]
	vcomiss	xmm0, DWORD PTR x1$3[rsp]
	jbe	$LN32@stbtt__fil
; Line 3278
	vmovss	xmm0, DWORD PTR y1$14[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x1$3[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y0$18[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3279
	vmovss	xmm0, DWORD PTR y3$17[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y1$14[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x1$3[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN33@stbtt__fil
$LN32@stbtt__fil:
; Line 3280
	vmovss	xmm0, DWORD PTR x2$4[rsp]
	vcomiss	xmm0, DWORD PTR x0$1[rsp]
	jbe	$LN34@stbtt__fil
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vcomiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN34@stbtt__fil
; Line 3281
	vmovss	xmm0, DWORD PTR y2$15[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x2$4[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y0$18[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3282
	vmovss	xmm0, DWORD PTR y3$17[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y2$15[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
	jmp	$LN35@stbtt__fil
$LN34@stbtt__fil:
; Line 3283
	vmovss	xmm0, DWORD PTR x2$4[rsp]
	vcomiss	xmm0, DWORD PTR x3$5[rsp]
	jbe	$LN36@stbtt__fil
	vmovss	xmm0, DWORD PTR x0$1[rsp]
	vcomiss	xmm0, DWORD PTR x2$4[rsp]
	jbe	$LN36@stbtt__fil
; Line 3284
	vmovss	xmm0, DWORD PTR y2$15[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x2$4[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y0$18[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3285
	vmovss	xmm0, DWORD PTR y3$17[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y2$15[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x2$4[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
; Line 3286
	jmp	SHORT $LN37@stbtt__fil
$LN36@stbtt__fil:
; Line 3287
	vmovss	xmm0, DWORD PTR y3$17[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR x3$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR y0$18[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR x0$1[rsp]
	mov	r8, QWORD PTR e$[rsp]
	mov	edx, DWORD PTR x$2[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	call	?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ; stbtt__handle_clipped_edge
$LN37@stbtt__fil:
$LN35@stbtt__fil:
$LN33@stbtt__fil:
$LN31@stbtt__fil:
$LN29@stbtt__fil:
$LN27@stbtt__fil:
; Line 3289
	jmp	$LN7@stbtt__fil
$LN8@stbtt__fil:
$LN20@stbtt__fil:
$LN11@stbtt__fil:
; Line 3292
	mov	rax, QWORD PTR e$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR e$[rsp], rax
; Line 3293
	jmp	$LN2@stbtt__fil
$LN3@stbtt__fil:
; Line 3294
	add	rsp, 232				; 000000e8H
	ret	0
?stbtt__fill_active_edges_new@@YAXPEAM0HPEAUstbtt__active_edge@@M@Z ENDP ; stbtt__fill_active_edges_new
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 8
width$ = 16
?stbtt__sized_triangle_area@@YAMMM@Z PROC		; stbtt__sized_triangle_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3078
	vmovss	DWORD PTR [rsp+16], xmm1
	vmovss	DWORD PTR [rsp+8], xmm0
; Line 3079
	vmovss	xmm0, DWORD PTR height$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR width$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
; Line 3080
	ret	0
?stbtt__sized_triangle_area@@YAMMM@Z ENDP		; stbtt__sized_triangle_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 48
tx0$ = 56
tx1$ = 64
bx0$ = 72
bx1$ = 80
?stbtt__position_trapezoid_area@@YAMMMMMM@Z PROC	; stbtt__position_trapezoid_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3073
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	vmovss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 3074
	vmovss	xmm0, DWORD PTR bx1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR bx0$[rsp]
	vmovss	xmm1, DWORD PTR tx1$[rsp]
	vsubss	xmm1, xmm1, DWORD PTR tx0$[rsp]
	vmovups	xmm2, xmm0
	vmovss	xmm0, DWORD PTR height$[rsp]
	call	?stbtt__sized_trapezoid_area@@YAMMMM@Z	; stbtt__sized_trapezoid_area
; Line 3075
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__position_trapezoid_area@@YAMMMMMM@Z ENDP	; stbtt__position_trapezoid_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
height$ = 48
top_width$ = 56
bottom_width$ = 64
?stbtt__sized_trapezoid_area@@YAMMMM@Z PROC		; stbtt__sized_trapezoid_area
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3066
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	vmovss	DWORD PTR [rsp+8], xmm0
	sub	rsp, 40					; 00000028H
; Line 3067
	vmovss	xmm0, DWORD PTR top_width$[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN3@stbtt__siz
	mov	r8d, 3067				; 00000bfbH
	lea	rdx, OFFSET FLAT:$SG143773
	lea	rcx, OFFSET FLAT:$SG143774
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbtt__siz:
; Line 3068
	vmovss	xmm0, DWORD PTR bottom_width$[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jae	SHORT $LN4@stbtt__siz
	mov	r8d, 3068				; 00000bfcH
	lea	rdx, OFFSET FLAT:$SG143775
	lea	rcx, OFFSET FLAT:$SG143776
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stbtt__siz:
; Line 3069
	vmovss	xmm0, DWORD PTR top_width$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR bottom_width$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR height$[rsp]
; Line 3070
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__sized_trapezoid_area@@YAMMMM@Z ENDP		; stbtt__sized_trapezoid_area
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scanline$ = 48
x$ = 56
e$ = 64
x0$ = 72
y0$ = 80
x1$ = 88
y1$ = 96
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z PROC ; stbtt__handle_clipped_edge
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3029
	vmovss	DWORD PTR [rsp+32], xmm3
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3030
	vmovss	xmm0, DWORD PTR y0$[rsp]
	vucomiss xmm0, DWORD PTR y1$[rsp]
	jp	SHORT $LN2@stbtt__han
	jne	SHORT $LN2@stbtt__han
	jmp	$LN1@stbtt__han
$LN2@stbtt__han:
; Line 3031
	vmovss	xmm0, DWORD PTR y1$[rsp]
	vcomiss	xmm0, DWORD PTR y0$[rsp]
	ja	SHORT $LN20@stbtt__han
	mov	r8d, 3031				; 00000bd7H
	lea	rdx, OFFSET FLAT:$SG143732
	lea	rcx, OFFSET FLAT:$SG143733
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN20@stbtt__han:
; Line 3032
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+28]
	vcomiss	xmm0, DWORD PTR [rcx+24]
	jae	SHORT $LN21@stbtt__han
	mov	r8d, 3032				; 00000bd8H
	lea	rdx, OFFSET FLAT:$SG143734
	lea	rcx, OFFSET FLAT:$SG143735
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN21@stbtt__han:
; Line 3033
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR y0$[rsp]
	vcomiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN3@stbtt__han
	jmp	$LN1@stbtt__han
$LN3@stbtt__han:
; Line 3034
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+24]
	vcomiss	xmm0, DWORD PTR y1$[rsp]
	jbe	SHORT $LN4@stbtt__han
	jmp	$LN1@stbtt__han
$LN4@stbtt__han:
; Line 3035
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+24]
	vcomiss	xmm0, DWORD PTR y0$[rsp]
	jbe	SHORT $LN5@stbtt__han
; Line 3036
	vmovss	xmm0, DWORD PTR x1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm1, DWORD PTR [rax+24]
	vsubss	xmm1, xmm1, DWORD PTR y0$[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR y1$[rsp]
	vsubss	xmm1, xmm1, DWORD PTR y0$[rsp]
	vdivss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR x0$[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR x0$[rsp], xmm0
; Line 3037
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+24]
	vmovss	DWORD PTR y0$[rsp], xmm0
$LN5@stbtt__han:
; Line 3039
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR y1$[rsp]
	vcomiss	xmm0, DWORD PTR [rax+28]
	jbe	SHORT $LN6@stbtt__han
; Line 3040
	vmovss	xmm0, DWORD PTR x1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm1, DWORD PTR [rax+28]
	vsubss	xmm1, xmm1, DWORD PTR y1$[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR y1$[rsp]
	vsubss	xmm1, xmm1, DWORD PTR y0$[rsp]
	vdivss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR x1$[rsp]
	vaddss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR x1$[rsp], xmm0
; Line 3041
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+28]
	vmovss	DWORD PTR y1$[rsp], xmm0
$LN6@stbtt__han:
; Line 3044
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vmovss	xmm1, DWORD PTR x0$[rsp]
	vucomiss xmm1, xmm0
	jp	SHORT $LN7@stbtt__han
	jne	SHORT $LN7@stbtt__han
; Line 3045
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vcomiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN22@stbtt__han
	mov	r8d, 3045				; 00000be5H
	lea	rdx, OFFSET FLAT:$SG143742
	lea	rcx, OFFSET FLAT:$SG143743
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN22@stbtt__han:
	jmp	$LN8@stbtt__han
$LN7@stbtt__han:
; Line 3046
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	xmm1, DWORD PTR x0$[rsp]
	vucomiss xmm1, xmm0
	jp	SHORT $LN9@stbtt__han
	jne	SHORT $LN9@stbtt__han
; Line 3047
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vmovss	xmm1, DWORD PTR x1$[rsp]
	vcomiss	xmm1, xmm0
	jae	SHORT $LN23@stbtt__han
	mov	r8d, 3047				; 00000be7H
	lea	rdx, OFFSET FLAT:$SG143746
	lea	rcx, OFFSET FLAT:$SG143747
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN23@stbtt__han:
	jmp	$LN10@stbtt__han
$LN9@stbtt__han:
; Line 3048
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vcomiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN11@stbtt__han
; Line 3049
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vcomiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN24@stbtt__han
	mov	r8d, 3049				; 00000be9H
	lea	rdx, OFFSET FLAT:$SG143750
	lea	rcx, OFFSET FLAT:$SG143751
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN24@stbtt__han:
	jmp	$LN12@stbtt__han
$LN11@stbtt__han:
; Line 3050
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	xmm1, DWORD PTR x0$[rsp]
	vcomiss	xmm1, xmm0
	jb	SHORT $LN13@stbtt__han
; Line 3051
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	xmm1, DWORD PTR x1$[rsp]
	vcomiss	xmm1, xmm0
	jae	SHORT $LN25@stbtt__han
	mov	r8d, 3051				; 00000bebH
	lea	rdx, OFFSET FLAT:$SG143754
	lea	rcx, OFFSET FLAT:$SG143755
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN25@stbtt__han:
	jmp	SHORT $LN14@stbtt__han
$LN13@stbtt__han:
; Line 3053
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vmovss	xmm1, DWORD PTR x1$[rsp]
	vcomiss	xmm1, xmm0
	jb	SHORT $LN26@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vcomiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN27@stbtt__han
$LN26@stbtt__han:
	mov	r8d, 3053				; 00000bedH
	lea	rdx, OFFSET FLAT:$SG143756
	lea	rcx, OFFSET FLAT:$SG143757
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN27@stbtt__han:
$LN14@stbtt__han:
$LN12@stbtt__han:
$LN10@stbtt__han:
$LN8@stbtt__han:
; Line 3055
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vcomiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN15@stbtt__han
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vcomiss	xmm0, DWORD PTR x1$[rsp]
	jb	SHORT $LN15@stbtt__han
; Line 3056
	vmovss	xmm0, DWORD PTR y1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm1, DWORD PTR [rax+20]
	vmulss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax*4]
	vaddss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN16@stbtt__han
$LN15@stbtt__han:
; Line 3057
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	xmm1, DWORD PTR x0$[rsp]
	vcomiss	xmm1, xmm0
	jb	SHORT $LN17@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	xmm1, DWORD PTR x1$[rsp]
	vcomiss	xmm1, xmm0
	jb	SHORT $LN17@stbtt__han
; Line 3058
	jmp	$LN18@stbtt__han
$LN17@stbtt__han:
; Line 3060
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vmovss	xmm1, DWORD PTR x0$[rsp]
	vcomiss	xmm1, xmm0
	jb	SHORT $LN28@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vcomiss	xmm0, DWORD PTR x0$[rsp]
	jb	SHORT $LN28@stbtt__han
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$[rsp]
	vmovss	xmm1, DWORD PTR x1$[rsp]
	vcomiss	xmm1, xmm0
	jb	SHORT $LN28@stbtt__han
	mov	eax, DWORD PTR x$[rsp]
	inc	eax
	vcvtsi2ss xmm0, xmm0, eax
	vcomiss	xmm0, DWORD PTR x1$[rsp]
	jae	SHORT $LN29@stbtt__han
$LN28@stbtt__han:
	mov	r8d, 3060				; 00000bf4H
	lea	rdx, OFFSET FLAT:$SG143762
	lea	rcx, OFFSET FLAT:$SG143763
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN29@stbtt__han:
; Line 3061
	vmovss	xmm0, DWORD PTR y1$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y0$[rsp]
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm1, DWORD PTR [rax+20]
	vmulss	xmm0, xmm1, xmm0
	vcvtsi2ss xmm1, xmm1, DWORD PTR x$[rsp]
	vmovss	xmm2, DWORD PTR x0$[rsp]
	vsubss	xmm1, xmm2, xmm1
	vcvtsi2ss xmm2, xmm2, DWORD PTR x$[rsp]
	vmovss	xmm3, DWORD PTR x1$[rsp]
	vsubss	xmm2, xmm3, xmm2
	vaddss	xmm1, xmm1, xmm2
	vdivss	xmm1, xmm1, DWORD PTR __real@40000000
	vmovss	xmm2, DWORD PTR __real@3f800000
	vsubss	xmm1, xmm2, xmm1
	vmulss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	xmm1, DWORD PTR [rcx+rax*4]
	vaddss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR scanline$[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
$LN18@stbtt__han:
$LN16@stbtt__han:
$LN1@stbtt__han:
; Line 3063
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__handle_clipped_edge@@YAXPEAMHPEAUstbtt__active_edge@@MMMM@Z ENDP ; stbtt__handle_clipped_edge
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
dxdy$ = 32
tv86 = 36
tv132 = 40
z$ = 48
hh$ = 80
e$ = 88
off_x$ = 96
start_point$ = 104
userdata$ = 112
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z PROC ; stbtt__new_active
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2858
	vmovss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2859
	mov	r8, QWORD PTR userdata$[rsp]
	mov	edx, 32					; 00000020H
	mov	rcx, QWORD PTR hh$[rsp]
	call	?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ; stbtt__hheap_alloc
	mov	QWORD PTR z$[rsp], rax
; Line 2860
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vsubss	xmm0, xmm0, DWORD PTR [rcx]
	mov	rax, QWORD PTR e$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	xmm1, DWORD PTR [rax+12]
	vsubss	xmm1, xmm1, DWORD PTR [rcx+4]
	vdivss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR dxdy$[rsp], xmm0
; Line 2861
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN4@stbtt__new
	mov	r8d, 2861				; 00000b2dH
	lea	rdx, OFFSET FLAT:$SG143703
	lea	rcx, OFFSET FLAT:$SG143704
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stbtt__new:
; Line 2863
	cmp	QWORD PTR z$[rsp], 0
	jne	SHORT $LN2@stbtt__new
	mov	rax, QWORD PTR z$[rsp]
	jmp	$LN1@stbtt__new
$LN2@stbtt__new:
; Line 2864
	mov	rax, QWORD PTR z$[rsp]
	vmovss	xmm0, DWORD PTR dxdy$[rsp]
	vmovss	DWORD PTR [rax+12], xmm0
; Line 2865
	vmovss	xmm0, DWORD PTR dxdy$[rsp]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN9@stbtt__new
	je	SHORT $LN5@stbtt__new
$LN9@stbtt__new:
	vmovss	xmm0, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm0, DWORD PTR dxdy$[rsp]
	vmovss	DWORD PTR tv86[rsp], xmm0
	jmp	SHORT $LN6@stbtt__new
$LN5@stbtt__new:
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR tv86[rsp], xmm0
$LN6@stbtt__new:
	mov	rax, QWORD PTR z$[rsp]
	vmovss	xmm0, DWORD PTR tv86[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 2866
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR start_point$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR [rax+4]
	vmovss	xmm1, DWORD PTR dxdy$[rsp]
	vmulss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR e$[rsp]
	vmovss	xmm1, DWORD PTR [rax]
	vaddss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR z$[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 2867
	vcvtsi2ss xmm0, xmm0, DWORD PTR off_x$[rsp]
	mov	rax, QWORD PTR z$[rsp]
	vmovss	xmm1, DWORD PTR [rax+8]
	vsubss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR z$[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 2868
	mov	rax, QWORD PTR e$[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	SHORT $LN7@stbtt__new
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR tv132[rsp], xmm0
	jmp	SHORT $LN8@stbtt__new
$LN7@stbtt__new:
	vmovss	xmm0, DWORD PTR __real@bf800000
	vmovss	DWORD PTR tv132[rsp], xmm0
$LN8@stbtt__new:
	mov	rax, QWORD PTR z$[rsp]
	vmovss	xmm0, DWORD PTR tv132[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
; Line 2869
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+4]
	vmovss	DWORD PTR [rax+24], xmm0
; Line 2870
	mov	rax, QWORD PTR z$[rsp]
	mov	rcx, QWORD PTR e$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+12]
	vmovss	DWORD PTR [rax+28], xmm0
; Line 2871
	mov	rax, QWORD PTR z$[rsp]
	mov	QWORD PTR [rax], 0
; Line 2872
	mov	rax, QWORD PTR z$[rsp]
$LN1@stbtt__new:
; Line 2873
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__new_active@@YAPEAUstbtt__active_edge@@PEAUstbtt__hheap@@PEAUstbtt__edge@@HMPEAX@Z ENDP ; stbtt__new_active
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 32
n$1 = 40
hh$ = 64
userdata$ = 72
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_cleanup
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2798
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2799
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR c$[rsp], rax
$LN2@stbtt__hhe:
; Line 2800
	cmp	QWORD PTR c$[rsp], 0
	je	SHORT $LN3@stbtt__hhe
; Line 2801
	mov	rax, QWORD PTR c$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR n$1[rsp], rax
; Line 2802
	mov	rcx, QWORD PTR c$[rsp]
	call	QWORD PTR __imp_free
; Line 2803
	mov	rax, QWORD PTR n$1[rsp]
	mov	QWORD PTR c$[rsp], rax
; Line 2804
	jmp	SHORT $LN2@stbtt__hhe
$LN3@stbtt__hhe:
; Line 2805
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__hheap_cleanup@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_cleanup
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
hh$ = 8
p$ = 16
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z PROC	; stbtt__hheap_free
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2792
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
; Line 2793
	mov	rax, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rax], rcx
; Line 2794
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 2795
	ret	0
?stbtt__hheap_free@@YAXPEAUstbtt__hheap@@PEAX@Z ENDP	; stbtt__hheap_free
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
tv73 = 36
count$1 = 40
c$2 = 48
p$3 = 56
hh$ = 80
size$ = 88
userdata$ = 96
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z PROC ; stbtt__hheap_alloc
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2771
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2772
	mov	rax, QWORD PTR hh$[rsp]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN2@stbtt__hhe
; Line 2773
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR p$3[rsp], rax
; Line 2774
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR p$3[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax+8], rcx
; Line 2775
	mov	rax, QWORD PTR p$3[rsp]
	jmp	$LN1@stbtt__hhe
; Line 2776
	jmp	$LN3@stbtt__hhe
$LN2@stbtt__hhe:
; Line 2777
	mov	rax, QWORD PTR hh$[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	$LN4@stbtt__hhe
; Line 2778
	cmp	QWORD PTR size$[rsp], 32		; 00000020H
	jae	SHORT $LN9@stbtt__hhe
	mov	DWORD PTR tv73[rsp], 2000		; 000007d0H
	jmp	SHORT $LN10@stbtt__hhe
$LN9@stbtt__hhe:
	cmp	QWORD PTR size$[rsp], 128		; 00000080H
	jae	SHORT $LN7@stbtt__hhe
	mov	DWORD PTR tv72[rsp], 800		; 00000320H
	jmp	SHORT $LN8@stbtt__hhe
$LN7@stbtt__hhe:
	mov	DWORD PTR tv72[rsp], 100		; 00000064H
$LN8@stbtt__hhe:
	mov	eax, DWORD PTR tv72[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN10@stbtt__hhe:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR count$1[rsp], eax
; Line 2779
	movsxd	rax, DWORD PTR count$1[rsp]
	mov	rcx, QWORD PTR size$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	add	rax, 8
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR c$2[rsp], rax
; Line 2780
	cmp	QWORD PTR c$2[rsp], 0
	jne	SHORT $LN5@stbtt__hhe
; Line 2781
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__hhe
$LN5@stbtt__hhe:
; Line 2782
	mov	rax, QWORD PTR c$2[rsp]
	mov	rcx, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx
; Line 2783
	mov	rax, QWORD PTR hh$[rsp]
	mov	rcx, QWORD PTR c$2[rsp]
	mov	QWORD PTR [rax], rcx
; Line 2784
	mov	rax, QWORD PTR hh$[rsp]
	mov	ecx, DWORD PTR count$1[rsp]
	mov	DWORD PTR [rax+16], ecx
$LN4@stbtt__hhe:
; Line 2786
	mov	rax, QWORD PTR hh$[rsp]
	mov	eax, DWORD PTR [rax+16]
	dec	eax
	mov	rcx, QWORD PTR hh$[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 2787
	mov	rax, QWORD PTR hh$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rcx, QWORD PTR hh$[rsp]
	movsxd	rcx, DWORD PTR [rcx+16]
	mov	rdx, QWORD PTR size$[rsp]
	imul	rdx, rcx
	mov	rcx, rdx
	lea	rax, QWORD PTR [rax+rcx+8]
$LN3@stbtt__hhe:
$LN1@stbtt__hhe:
; Line 2789
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__hheap_alloc@@YAPEAXPEAUstbtt__hheap@@_KPEAX@Z ENDP ; stbtt__hheap_alloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
table$1 = 32
class2Count$2 = 40
i$ = 44
sti$ = 48
lookupOffset$3 = 52
lookupType$4 = 56
subTableCount$5 = 60
subtableOffset$6 = 64
coverageOffset$7 = 68
posFormat$8 = 72
valueFormat1$9 = 76
valueFormat2$10 = 80
pairPosOffset$11 = 84
pairSetCount$12 = 88
pairValueCount$13 = 92
secondGlyph$14 = 96
xAdvance$15 = 100
valueFormat1$16 = 104
classDef1Offset$17 = 108
classDef2Offset$18 = 112
class1Count$19 = 116
xAdvance$20 = 120
valueFormat2$21 = 124
lookupListOffset$ = 128
coverageIndex$22 = 132
r$23 = 136
m$24 = 140
l$25 = 144
glyph1class$26 = 148
glyph2class$27 = 152
lookupCount$ = 156
straw$28 = 160
needle$29 = 164
tv159 = 168
data$ = 176
lookupTable$30 = 184
valueRecordPairSizeInBytes$31 = 192
lookupList$ = 200
pairValueTable$32 = 208
pairValue$33 = 216
subTableOffsets$34 = 224
pairValueArray$35 = 232
class1Records$36 = 240
class2Records$37 = 248
info$ = 272
glyph1$ = 280
glyph2$ = 288
?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z PROC ; stbtt__GetGlyphGPOSInfoAdvance
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2497
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 264				; 00000108H
; Line 2504
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN12@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN12@stbtt__Get:
; Line 2506
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2508
	mov	rcx, QWORD PTR data$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN13@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN13@stbtt__Get:
; Line 2509
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	test	eax, eax
	je	SHORT $LN14@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN14@stbtt__Get:
; Line 2511
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupListOffset$[rsp], ax
; Line 2512
	movzx	eax, WORD PTR lookupListOffset$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lookupList$[rsp], rax
; Line 2513
	mov	rcx, QWORD PTR lookupList$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupCount$[rsp], ax
; Line 2515
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__Get:
	movzx	eax, WORD PTR lookupCount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__Get
; Line 2516
	mov	eax, DWORD PTR i$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR lookupList$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupOffset$3[rsp], ax
; Line 2517
	movzx	eax, WORD PTR lookupOffset$3[rsp]
	mov	rcx, QWORD PTR lookupList$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR lookupTable$30[rsp], rax
; Line 2519
	mov	rcx, QWORD PTR lookupTable$30[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR lookupType$4[rsp], ax
; Line 2520
	mov	rax, QWORD PTR lookupTable$30[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR subTableCount$5[rsp], ax
; Line 2521
	mov	rax, QWORD PTR lookupTable$30[rsp]
	add	rax, 6
	mov	QWORD PTR subTableOffsets$34[rsp], rax
; Line 2522
	movzx	eax, WORD PTR lookupType$4[rsp]
	cmp	eax, 2
	je	SHORT $LN15@stbtt__Get
; Line 2523
	jmp	$LN2@stbtt__Get
$LN15@stbtt__Get:
; Line 2525
	mov	DWORD PTR sti$[rsp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR sti$[rsp]
	inc	eax
	mov	DWORD PTR sti$[rsp], eax
$LN7@stbtt__Get:
	movzx	eax, WORD PTR subTableCount$5[rsp]
	cmp	DWORD PTR sti$[rsp], eax
	jge	$LN6@stbtt__Get
; Line 2526
	mov	eax, DWORD PTR sti$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR subTableOffsets$34[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR subtableOffset$6[rsp], ax
; Line 2527
	movzx	eax, WORD PTR subtableOffset$6[rsp]
	mov	rcx, QWORD PTR lookupTable$30[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR table$1[rsp], rax
; Line 2528
	mov	rcx, QWORD PTR table$1[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR posFormat$8[rsp], ax
; Line 2529
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR coverageOffset$7[rsp], ax
; Line 2530
	movzx	eax, WORD PTR coverageOffset$7[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph1$[rsp]
	mov	rcx, rax
	call	?stbtt__GetCoverageIndex@@YAHPEAEH@Z	; stbtt__GetCoverageIndex
	mov	DWORD PTR coverageIndex$22[rsp], eax
; Line 2531
	cmp	DWORD PTR coverageIndex$22[rsp], -1
	jne	SHORT $LN16@stbtt__Get
	jmp	$LN5@stbtt__Get
$LN16@stbtt__Get:
; Line 2533
	movzx	eax, WORD PTR posFormat$8[rsp]
	mov	DWORD PTR tv159[rsp], eax
	cmp	DWORD PTR tv159[rsp], 1
	je	SHORT $LN17@stbtt__Get
	cmp	DWORD PTR tv159[rsp], 2
	je	$LN25@stbtt__Get
	jmp	$LN32@stbtt__Get
$LN17@stbtt__Get:
; Line 2537
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat1$9[rsp], ax
; Line 2538
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 6
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat2$10[rsp], ax
; Line 2539
	movzx	eax, WORD PTR valueFormat1$9[rsp]
	cmp	eax, 4
	jne	$LN18@stbtt__Get
	movzx	eax, WORD PTR valueFormat2$10[rsp]
	test	eax, eax
	jne	$LN18@stbtt__Get
; Line 2540
	mov	DWORD PTR valueRecordPairSizeInBytes$31[rsp], 2
; Line 2541
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairSetCount$12[rsp], ax
; Line 2542
	mov	eax, DWORD PTR coverageIndex$22[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR table$1[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairPosOffset$11[rsp], ax
; Line 2543
	movzx	eax, WORD PTR pairPosOffset$11[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pairValueTable$32[rsp], rax
; Line 2544
	mov	rcx, QWORD PTR pairValueTable$32[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR pairValueCount$13[rsp], ax
; Line 2545
	mov	rax, QWORD PTR pairValueTable$32[rsp]
	add	rax, 2
	mov	QWORD PTR pairValueArray$35[rsp], rax
; Line 2547
	movzx	eax, WORD PTR pairSetCount$12[rsp]
	cmp	DWORD PTR coverageIndex$22[rsp], eax
	jl	SHORT $LN20@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN20@stbtt__Get:
; Line 2549
	mov	eax, DWORD PTR glyph2$[rsp]
	mov	DWORD PTR needle$29[rsp], eax
; Line 2550
	movzx	eax, WORD PTR pairValueCount$13[rsp]
	dec	eax
	mov	DWORD PTR r$23[rsp], eax
; Line 2551
	mov	DWORD PTR l$25[rsp], 0
$LN10@stbtt__Get:
; Line 2554
	mov	eax, DWORD PTR r$23[rsp]
	cmp	DWORD PTR l$25[rsp], eax
	jg	$LN11@stbtt__Get
; Line 2557
	mov	eax, DWORD PTR r$23[rsp]
	mov	ecx, DWORD PTR l$25[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$24[rsp], eax
; Line 2558
	mov	eax, DWORD PTR valueRecordPairSizeInBytes$31[rsp]
	add	eax, 2
	imul	eax, DWORD PTR m$24[rsp]
	cdqe
	mov	rcx, QWORD PTR pairValueArray$35[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pairValue$33[rsp], rax
; Line 2559
	mov	rcx, QWORD PTR pairValue$33[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR secondGlyph$14[rsp], ax
; Line 2560
	movzx	eax, WORD PTR secondGlyph$14[rsp]
	mov	DWORD PTR straw$28[rsp], eax
; Line 2561
	mov	eax, DWORD PTR straw$28[rsp]
	cmp	DWORD PTR needle$29[rsp], eax
	jge	SHORT $LN21@stbtt__Get
; Line 2562
	mov	eax, DWORD PTR m$24[rsp]
	dec	eax
	mov	DWORD PTR r$23[rsp], eax
	jmp	SHORT $LN22@stbtt__Get
$LN21@stbtt__Get:
; Line 2563
	mov	eax, DWORD PTR straw$28[rsp]
	cmp	DWORD PTR needle$29[rsp], eax
	jle	SHORT $LN23@stbtt__Get
; Line 2564
	mov	eax, DWORD PTR m$24[rsp]
	inc	eax
	mov	DWORD PTR l$25[rsp], eax
	jmp	SHORT $LN24@stbtt__Get
$LN23@stbtt__Get:
; Line 2566
	mov	rax, QWORD PTR pairValue$33[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR xAdvance$15[rsp], ax
; Line 2567
	movsx	eax, WORD PTR xAdvance$15[rsp]
	jmp	$LN1@stbtt__Get
$LN24@stbtt__Get:
$LN22@stbtt__Get:
; Line 2569
	jmp	$LN10@stbtt__Get
$LN11@stbtt__Get:
; Line 2570
	jmp	SHORT $LN19@stbtt__Get
$LN18@stbtt__Get:
; Line 2571
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN19@stbtt__Get:
; Line 2572
	jmp	$LN8@stbtt__Get
$LN25@stbtt__Get:
; Line 2576
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat1$16[rsp], ax
; Line 2577
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 6
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR valueFormat2$21[rsp], ax
; Line 2578
	movzx	eax, WORD PTR valueFormat1$16[rsp]
	cmp	eax, 4
	jne	$LN26@stbtt__Get
	movzx	eax, WORD PTR valueFormat2$21[rsp]
	test	eax, eax
	jne	$LN26@stbtt__Get
; Line 2579
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDef1Offset$17[rsp], ax
; Line 2580
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDef2Offset$18[rsp], ax
; Line 2581
	movzx	eax, WORD PTR classDef1Offset$17[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph1$[rsp]
	mov	rcx, rax
	call	?stbtt__GetGlyphClass@@YAHPEAEH@Z	; stbtt__GetGlyphClass
	mov	DWORD PTR glyph1class$26[rsp], eax
; Line 2582
	movzx	eax, WORD PTR classDef2Offset$18[rsp]
	mov	rcx, QWORD PTR table$1[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	edx, DWORD PTR glyph2$[rsp]
	mov	rcx, rax
	call	?stbtt__GetGlyphClass@@YAHPEAEH@Z	; stbtt__GetGlyphClass
	mov	DWORD PTR glyph2class$27[rsp], eax
; Line 2584
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 12
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR class1Count$19[rsp], ax
; Line 2585
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 14
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR class2Count$2[rsp], ax
; Line 2589
	cmp	DWORD PTR glyph1class$26[rsp], 0
	jl	SHORT $LN29@stbtt__Get
	movzx	eax, WORD PTR class1Count$19[rsp]
	cmp	DWORD PTR glyph1class$26[rsp], eax
	jl	SHORT $LN28@stbtt__Get
$LN29@stbtt__Get:
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN28@stbtt__Get:
; Line 2590
	cmp	DWORD PTR glyph2class$27[rsp], 0
	jl	SHORT $LN31@stbtt__Get
	movzx	eax, WORD PTR class2Count$2[rsp]
	cmp	DWORD PTR glyph2class$27[rsp], eax
	jl	SHORT $LN30@stbtt__Get
$LN31@stbtt__Get:
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN30@stbtt__Get:
; Line 2592
	mov	rax, QWORD PTR table$1[rsp]
	add	rax, 16
	mov	QWORD PTR class1Records$36[rsp], rax
; Line 2593
	movzx	eax, WORD PTR class2Count$2[rsp]
	mov	ecx, DWORD PTR glyph1class$26[rsp]
	imul	ecx, eax
	mov	eax, ecx
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR class1Records$36[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR class2Records$37[rsp], rax
; Line 2594
	mov	eax, DWORD PTR glyph2class$27[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR class2Records$37[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR xAdvance$20[rsp], ax
; Line 2595
	movsx	eax, WORD PTR xAdvance$20[rsp]
	jmp	SHORT $LN1@stbtt__Get
; Line 2596
	jmp	SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 2597
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__Get
$LN27@stbtt__Get:
; Line 2598
	jmp	SHORT $LN8@stbtt__Get
$LN32@stbtt__Get:
; Line 2602
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__Get
$LN8@stbtt__Get:
; Line 2604
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 2605
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 2607
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2608
	add	rsp, 264				; 00000108H
	ret	0
?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ENDP ; stbtt__GetGlyphGPOSInfoAdvance
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
startGlyphID$1 = 32
classDefFormat$ = 36
glyphCount$2 = 40
classRangeCount$3 = 44
r$4 = 48
m$5 = 52
l$6 = 56
tv67 = 60
needle$7 = 64
strawStart$8 = 68
strawEnd$9 = 72
classRangeRecord$10 = 80
classDef1ValueArray$11 = 88
classRangeRecords$12 = 96
classDefTable$ = 128
glyph$ = 136
?stbtt__GetGlyphClass@@YAHPEAEH@Z PROC			; stbtt__GetGlyphClass
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2448
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2449
	mov	rcx, QWORD PTR classDefTable$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classDefFormat$[rsp], ax
; Line 2450
	movzx	eax, WORD PTR classDefFormat$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN6@stbtt__Get
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN8@stbtt__Get
	jmp	$LN13@stbtt__Get
$LN6@stbtt__Get:
; Line 2453
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR startGlyphID$1[rsp], ax
; Line 2454
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphCount$2[rsp], ax
; Line 2455
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 6
	mov	QWORD PTR classDef1ValueArray$11[rsp], rax
; Line 2457
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	cmp	DWORD PTR glyph$[rsp], eax
	jl	SHORT $LN7@stbtt__Get
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	movzx	ecx, WORD PTR glyphCount$2[rsp]
	add	eax, ecx
	cmp	DWORD PTR glyph$[rsp], eax
	jge	SHORT $LN7@stbtt__Get
; Line 2458
	movzx	eax, WORD PTR startGlyphID$1[rsp]
	mov	ecx, DWORD PTR glyph$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR classDef1ValueArray$11[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt__Get
$LN7@stbtt__Get:
; Line 2459
	jmp	$LN2@stbtt__Get
$LN8@stbtt__Get:
; Line 2463
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR classRangeCount$3[rsp], ax
; Line 2464
	mov	rax, QWORD PTR classDefTable$[rsp]
	add	rax, 4
	mov	QWORD PTR classRangeRecords$12[rsp], rax
; Line 2467
	mov	DWORD PTR l$6[rsp], 0
	movzx	eax, WORD PTR classRangeCount$3[rsp]
	dec	eax
	mov	DWORD PTR r$4[rsp], eax
; Line 2468
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$7[rsp], eax
$LN4@stbtt__Get:
; Line 2469
	mov	eax, DWORD PTR r$4[rsp]
	cmp	DWORD PTR l$6[rsp], eax
	jg	$LN5@stbtt__Get
; Line 2471
	mov	eax, DWORD PTR r$4[rsp]
	mov	ecx, DWORD PTR l$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$5[rsp], eax
; Line 2472
	imul	eax, DWORD PTR m$5[rsp], 6
	cdqe
	mov	rcx, QWORD PTR classRangeRecords$12[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR classRangeRecord$10[rsp], rax
; Line 2473
	mov	rcx, QWORD PTR classRangeRecord$10[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawStart$8[rsp], eax
; Line 2474
	mov	rax, QWORD PTR classRangeRecord$10[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawEnd$9[rsp], eax
; Line 2475
	mov	eax, DWORD PTR strawStart$8[rsp]
	cmp	DWORD PTR needle$7[rsp], eax
	jge	SHORT $LN9@stbtt__Get
; Line 2476
	mov	eax, DWORD PTR m$5[rsp]
	dec	eax
	mov	DWORD PTR r$4[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2477
	mov	eax, DWORD PTR strawEnd$9[rsp]
	cmp	DWORD PTR needle$7[rsp], eax
	jle	SHORT $LN11@stbtt__Get
; Line 2478
	mov	eax, DWORD PTR m$5[rsp]
	inc	eax
	mov	DWORD PTR l$6[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
; Line 2480
	mov	rax, QWORD PTR classRangeRecord$10[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	SHORT $LN1@stbtt__Get
$LN12@stbtt__Get:
$LN10@stbtt__Get:
; Line 2481
	jmp	$LN4@stbtt__Get
$LN5@stbtt__Get:
; Line 2482
	jmp	SHORT $LN2@stbtt__Get
$LN13@stbtt__Get:
; Line 2486
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 2490
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2491
	add	rsp, 120				; 00000078H
	ret	0
?stbtt__GetGlyphClass@@YAHPEAEH@Z ENDP			; stbtt__GetGlyphClass
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$1 = 32
coverageFormat$ = 36
glyphCount$2 = 40
glyphID$3 = 44
rangeCount$4 = 48
startCoverageIndex$5 = 52
r$6 = 56
l$7 = 60
r$8 = 64
m$9 = 68
l$10 = 72
tv67 = 76
straw$11 = 80
needle$12 = 84
needle$13 = 88
strawStart$14 = 92
strawEnd$15 = 96
rangeRecord$16 = 104
glyphArray$17 = 112
rangeArray$18 = 120
coverageTable$ = 144
glyph$ = 152
?stbtt__GetCoverageIndex@@YAHPEAEH@Z PROC		; stbtt__GetCoverageIndex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2390
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 2391
	mov	rcx, QWORD PTR coverageTable$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR coverageFormat$[rsp], ax
; Line 2392
	movzx	eax, WORD PTR coverageFormat$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 1
	je	SHORT $LN8@stbtt__Get
	cmp	DWORD PTR tv67[rsp], 2
	je	$LN13@stbtt__Get
	jmp	$LN18@stbtt__Get
$LN8@stbtt__Get:
; Line 2394
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphCount$2[rsp], ax
; Line 2397
	mov	DWORD PTR l$7[rsp], 0
	movzx	eax, WORD PTR glyphCount$2[rsp]
	dec	eax
	mov	DWORD PTR r$6[rsp], eax
; Line 2398
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$12[rsp], eax
$LN4@stbtt__Get:
; Line 2399
	mov	eax, DWORD PTR r$6[rsp]
	cmp	DWORD PTR l$7[rsp], eax
	jg	$LN5@stbtt__Get
; Line 2400
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 4
	mov	QWORD PTR glyphArray$17[rsp], rax
; Line 2402
	mov	eax, DWORD PTR r$6[rsp]
	mov	ecx, DWORD PTR l$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$1[rsp], eax
; Line 2403
	mov	eax, DWORD PTR m$1[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR glyphArray$17[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR glyphID$3[rsp], ax
; Line 2404
	movzx	eax, WORD PTR glyphID$3[rsp]
	mov	DWORD PTR straw$11[rsp], eax
; Line 2405
	mov	eax, DWORD PTR straw$11[rsp]
	cmp	DWORD PTR needle$12[rsp], eax
	jge	SHORT $LN9@stbtt__Get
; Line 2406
	mov	eax, DWORD PTR m$1[rsp]
	dec	eax
	mov	DWORD PTR r$6[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2407
	mov	eax, DWORD PTR straw$11[rsp]
	cmp	DWORD PTR needle$12[rsp], eax
	jle	SHORT $LN11@stbtt__Get
; Line 2408
	mov	eax, DWORD PTR m$1[rsp]
	inc	eax
	mov	DWORD PTR l$7[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
; Line 2410
	mov	eax, DWORD PTR m$1[rsp]
	jmp	$LN1@stbtt__Get
$LN12@stbtt__Get:
$LN10@stbtt__Get:
; Line 2412
	jmp	$LN4@stbtt__Get
$LN5@stbtt__Get:
; Line 2413
	jmp	$LN2@stbtt__Get
$LN13@stbtt__Get:
; Line 2417
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR rangeCount$4[rsp], ax
; Line 2418
	mov	rax, QWORD PTR coverageTable$[rsp]
	add	rax, 4
	mov	QWORD PTR rangeArray$18[rsp], rax
; Line 2421
	mov	DWORD PTR l$10[rsp], 0
	movzx	eax, WORD PTR rangeCount$4[rsp]
	dec	eax
	mov	DWORD PTR r$8[rsp], eax
; Line 2422
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR needle$13[rsp], eax
$LN6@stbtt__Get:
; Line 2423
	mov	eax, DWORD PTR r$8[rsp]
	cmp	DWORD PTR l$10[rsp], eax
	jg	$LN7@stbtt__Get
; Line 2425
	mov	eax, DWORD PTR r$8[rsp]
	mov	ecx, DWORD PTR l$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$9[rsp], eax
; Line 2426
	imul	eax, DWORD PTR m$9[rsp], 6
	cdqe
	mov	rcx, QWORD PTR rangeArray$18[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR rangeRecord$16[rsp], rax
; Line 2427
	mov	rcx, QWORD PTR rangeRecord$16[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawStart$14[rsp], eax
; Line 2428
	mov	rax, QWORD PTR rangeRecord$16[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR strawEnd$15[rsp], eax
; Line 2429
	mov	eax, DWORD PTR strawStart$14[rsp]
	cmp	DWORD PTR needle$13[rsp], eax
	jge	SHORT $LN14@stbtt__Get
; Line 2430
	mov	eax, DWORD PTR m$9[rsp]
	dec	eax
	mov	DWORD PTR r$8[rsp], eax
	jmp	SHORT $LN15@stbtt__Get
$LN14@stbtt__Get:
; Line 2431
	mov	eax, DWORD PTR strawEnd$15[rsp]
	cmp	DWORD PTR needle$13[rsp], eax
	jle	SHORT $LN16@stbtt__Get
; Line 2432
	mov	eax, DWORD PTR m$9[rsp]
	inc	eax
	mov	DWORD PTR l$10[rsp], eax
	jmp	SHORT $LN17@stbtt__Get
$LN16@stbtt__Get:
; Line 2434
	mov	rax, QWORD PTR rangeRecord$16[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR startCoverageIndex$5[rsp], ax
; Line 2435
	movzx	eax, WORD PTR startCoverageIndex$5[rsp]
	add	eax, DWORD PTR glyph$[rsp]
	sub	eax, DWORD PTR strawStart$14[rsp]
	jmp	SHORT $LN1@stbtt__Get
$LN17@stbtt__Get:
$LN15@stbtt__Get:
; Line 2437
	jmp	$LN6@stbtt__Get
$LN7@stbtt__Get:
; Line 2438
	jmp	SHORT $LN2@stbtt__Get
$LN18@stbtt__Get:
; Line 2441
	mov	eax, -1
	jmp	SHORT $LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 2444
	mov	eax, -1
$LN1@stbtt__Get:
; Line 2445
	add	rsp, 136				; 00000088H
	ret	0
?stbtt__GetCoverageIndex@@YAHPEAEH@Z ENDP		; stbtt__GetCoverageIndex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
m$ = 32
r$ = 36
l$ = 40
straw$ = 44
needle$ = 48
data$ = 56
info$ = 80
glyph1$ = 88
glyph2$ = 96
?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z PROC ; stbtt__GetGlyphKernInfoAdvance
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2360
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2361
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2366
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN4@stbtt__Get
; Line 2367
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN4@stbtt__Get:
; Line 2368
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN5@stbtt__Get
; Line 2369
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN5@stbtt__Get:
; Line 2370
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN6@stbtt__Get
; Line 2371
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN6@stbtt__Get:
; Line 2373
	mov	DWORD PTR l$[rsp], 0
; Line 2374
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	dec	eax
	mov	DWORD PTR r$[rsp], eax
; Line 2375
	mov	eax, DWORD PTR glyph1$[rsp]
	shl	eax, 16
	or	eax, DWORD PTR glyph2$[rsp]
	mov	DWORD PTR needle$[rsp], eax
$LN2@stbtt__Get:
; Line 2376
	mov	eax, DWORD PTR r$[rsp]
	cmp	DWORD PTR l$[rsp], eax
	jg	SHORT $LN3@stbtt__Get
; Line 2377
	mov	eax, DWORD PTR r$[rsp]
	mov	ecx, DWORD PTR l$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR m$[rsp], eax
; Line 2378
	imul	eax, DWORD PTR m$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR straw$[rsp], eax
; Line 2379
	mov	eax, DWORD PTR straw$[rsp]
	cmp	DWORD PTR needle$[rsp], eax
	jae	SHORT $LN7@stbtt__Get
; Line 2380
	mov	eax, DWORD PTR m$[rsp]
	dec	eax
	mov	DWORD PTR r$[rsp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
; Line 2381
	mov	eax, DWORD PTR straw$[rsp]
	cmp	DWORD PTR needle$[rsp], eax
	jbe	SHORT $LN9@stbtt__Get
; Line 2382
	mov	eax, DWORD PTR m$[rsp]
	inc	eax
	mov	DWORD PTR l$[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
; Line 2384
	imul	eax, DWORD PTR m$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	jmp	SHORT $LN1@stbtt__Get
$LN10@stbtt__Get:
$LN8@stbtt__Get:
; Line 2385
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 2386
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2387
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ENDP ; stbtt__GetGlyphKernInfoAdvance
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
output_ctx$ = 32
count_ctx$ = 88
info$ = 160
glyph_index$ = 168
pvertices$ = 176
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeT2
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2270
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 2272
	mov	DWORD PTR count_ctx$[rsp], 1
	mov	DWORD PTR count_ctx$[rsp+4], 0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR count_ctx$[rsp+8], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR count_ctx$[rsp+12], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR count_ctx$[rsp+16], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR count_ctx$[rsp+20], xmm0
	mov	DWORD PTR count_ctx$[rsp+24], 0
	mov	DWORD PTR count_ctx$[rsp+28], 0
	mov	DWORD PTR count_ctx$[rsp+32], 0
	mov	DWORD PTR count_ctx$[rsp+36], 0
	mov	QWORD PTR count_ctx$[rsp+40], 0
	mov	DWORD PTR count_ctx$[rsp+48], 0
; Line 2273
	mov	DWORD PTR output_ctx$[rsp], 0
	mov	DWORD PTR output_ctx$[rsp+4], 0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR output_ctx$[rsp+8], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR output_ctx$[rsp+12], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR output_ctx$[rsp+16], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR output_ctx$[rsp+20], xmm0
	mov	DWORD PTR output_ctx$[rsp+24], 0
	mov	DWORD PTR output_ctx$[rsp+28], 0
	mov	DWORD PTR output_ctx$[rsp+32], 0
	mov	DWORD PTR output_ctx$[rsp+36], 0
	mov	QWORD PTR output_ctx$[rsp+40], 0
	mov	DWORD PTR output_ctx$[rsp+48], 0
; Line 2274
	lea	r8, QWORD PTR count_ctx$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	test	eax, eax
	je	SHORT $LN2@stbtt__Get
; Line 2275
	movsxd	rax, DWORD PTR count_ctx$[rsp+48]
	imul	rax, rax, 14
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	rcx, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2276
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR output_ctx$[rsp+40], rax
; Line 2277
	lea	r8, QWORD PTR output_ctx$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	test	eax, eax
	je	SHORT $LN3@stbtt__Get
; Line 2278
	mov	eax, DWORD PTR count_ctx$[rsp+48]
	cmp	DWORD PTR output_ctx$[rsp+48], eax
	je	SHORT $LN5@stbtt__Get
	mov	r8d, 2278				; 000008e6H
	lea	rdx, OFFSET FLAT:$SG143213
	lea	rcx, OFFSET FLAT:$SG143214
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stbtt__Get:
; Line 2279
	mov	eax, DWORD PTR output_ctx$[rsp+48]
	jmp	SHORT $LN1@stbtt__Get
$LN3@stbtt__Get:
$LN2@stbtt__Get:
; Line 2282
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rax], 0
; Line 2283
	xor	eax, eax
$LN1@stbtt__Get:
; Line 2284
	add	rsp, 152				; 00000098H
	ret	0
?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeT2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 64
sp$ = 68
dy2$1 = 72
subr_stack_height$ = 76
dx3$2 = 80
dx2$3 = 84
dx1$4 = 88
dx6$5 = 92
dx5$6 = 96
dx4$7 = 100
dy1$8 = 104
dy5$9 = 108
b0$ = 112
f$ = 116
maskbits$ = 120
in_header$ = 124
dy6$10 = 128
tv76 = 132
tv470 = 136
dy3$11 = 140
dy4$12 = 144
clear_stack$ = 148
b$ = 152
tv225 = 168
has_subrs$ = 172
dy$13 = 176
dx$14 = 180
tv188 = 184
v$ = 188
tv456 = 192
b1$15 = 196
tv244 = 200
tv453 = 208
tv640 = 216
subrs$ = 224
$T16 = 240
$T17 = 256
$T18 = 272
$T19 = 288
$T20 = 304
$T21 = 320
$T22 = 336
$T23 = 352
s$ = 368
subr_stack$ = 560
__$ArrayPad$ = 720
info$ = 768
glyph_index$ = 776
c$ = 784
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z PROC ; stbtt__run_charstring
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2011
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 744				; 000002e8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2012
	mov	DWORD PTR in_header$[rsp], 1
	mov	DWORD PTR maskbits$[rsp], 0
	mov	DWORD PTR subr_stack_height$[rsp], 0
	mov	DWORD PTR sp$[rsp], 0
; Line 2013
	mov	DWORD PTR has_subrs$[rsp], 0
; Line 2015
	lea	rax, QWORD PTR subrs$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+112]
	mov	ecx, 16
	rep movsb
; Line 2021
	lea	rax, QWORD PTR $T16[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+80]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR glyph_index$[rsp]
	lea	rdx, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN2@stbtt__run:
; Line 2022
	mov	eax, DWORD PTR b$[rsp+12]
	cmp	DWORD PTR b$[rsp+8], eax
	jge	$LN3@stbtt__run
; Line 2023
	mov	DWORD PTR i$[rsp], 0
; Line 2024
	mov	DWORD PTR clear_stack$[rsp], 1
; Line 2025
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 2026
	mov	eax, DWORD PTR b0$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	mov	eax, DWORD PTR tv76[rsp]
	dec	eax
	mov	DWORD PTR tv76[rsp], eax
	cmp	DWORD PTR tv76[rsp], 30
	ja	$LN94@stbtt__run
	movsxd	rax, DWORD PTR tv76[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN107@stbtt__run[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN29@stbtt__run:
$LN30@stbtt__run:
; Line 2030
	cmp	DWORD PTR in_header$[rsp], 0
	je	SHORT $LN31@stbtt__run
; Line 2031
	mov	eax, DWORD PTR sp$[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rsp], eax
$LN31@stbtt__run:
; Line 2032
	mov	DWORD PTR in_header$[rsp], 0
; Line 2033
	mov	eax, DWORD PTR maskbits$[rsp]
	add	eax, 7
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	mov	edx, eax
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 2034
	jmp	$LN4@stbtt__run
$LN32@stbtt__run:
$LN33@stbtt__run:
$LN34@stbtt__run:
$LN35@stbtt__run:
; Line 2040
	mov	eax, DWORD PTR sp$[rsp]
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	ecx, DWORD PTR maskbits$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR maskbits$[rsp], eax
; Line 2041
	jmp	$LN4@stbtt__run
$LN36@stbtt__run:
; Line 2044
	mov	DWORD PTR in_header$[rsp], 0
; Line 2045
	cmp	DWORD PTR sp$[rsp], 2
	jge	SHORT $LN37@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN37@stbtt__run:
; Line 2046
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 2
	movsxd	rcx, ecx
	vmovss	xmm2, DWORD PTR s$[rsp+rax*4]
	vmovss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2047
	jmp	$LN4@stbtt__run
$LN38@stbtt__run:
; Line 2049
	mov	DWORD PTR in_header$[rsp], 0
; Line 2050
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN39@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN39@stbtt__run:
; Line 2051
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	vmovss	xmm2, DWORD PTR s$[rsp+rax*4]
	vxorps	xmm1, xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2052
	jmp	$LN4@stbtt__run
$LN40@stbtt__run:
; Line 2054
	mov	DWORD PTR in_header$[rsp], 0
; Line 2055
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN41@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN41@stbtt__run:
; Line 2056
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	cdqe
	vxorps	xmm2, xmm2, xmm2
	vmovss	xmm1, DWORD PTR s$[rsp+rax*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rmove_to
; Line 2057
	jmp	$LN4@stbtt__run
$LN42@stbtt__run:
; Line 2060
	cmp	DWORD PTR sp$[rsp], 2
	jge	SHORT $LN43@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN43@stbtt__run:
; Line 2061
	jmp	SHORT $LN8@stbtt__run
$LN6@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN8@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rsp]
	jge	SHORT $LN7@stbtt__run
; Line 2062
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	vmovss	xmm2, DWORD PTR s$[rsp+rax*4]
	vmovss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
	jmp	SHORT $LN6@stbtt__run
$LN7@stbtt__run:
; Line 2063
	jmp	$LN4@stbtt__run
$LN44@stbtt__run:
; Line 2069
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN45@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN45@stbtt__run:
; Line 2070
	jmp	SHORT $LN46@stbtt__run
	jmp	SHORT $vlineto$108
$LN47@stbtt__run:
; Line 2072
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN48@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN48@stbtt__run:
$LN9@stbtt__run:
; Line 2074
	mov	eax, DWORD PTR sp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN49@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN49@stbtt__run:
; Line 2075
	movsxd	rax, DWORD PTR i$[rsp]
	vxorps	xmm2, xmm2, xmm2
	vmovss	xmm1, DWORD PTR s$[rsp+rax*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2076
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN46@stbtt__run:
$vlineto$108:
; Line 2078
	mov	eax, DWORD PTR sp$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN50@stbtt__run
	jmp	SHORT $LN10@stbtt__run
$LN50@stbtt__run:
; Line 2079
	movsxd	rax, DWORD PTR i$[rsp]
	vmovss	xmm2, DWORD PTR s$[rsp+rax*4]
	vxorps	xmm1, xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2080
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
; Line 2081
	jmp	SHORT $LN9@stbtt__run
$LN10@stbtt__run:
; Line 2082
	jmp	$LN4@stbtt__run
$LN51@stbtt__run:
; Line 2085
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN52@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN52@stbtt__run:
; Line 2086
	jmp	$LN53@stbtt__run
	jmp	$hvcurveto$109
$LN54@stbtt__run:
; Line 2088
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN55@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN55@stbtt__run:
$LN12@stbtt__run:
; Line 2090
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN56@stbtt__run
	jmp	$LN13@stbtt__run
$LN56@stbtt__run:
; Line 2091
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN101@stbtt__run
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cdqe
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR tv188[rsp], xmm0
	jmp	SHORT $LN102@stbtt__run
$LN101@stbtt__run:
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR tv188[rsp], xmm0
$LN102@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	vmovss	xmm0, DWORD PTR tv188[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rcx*4]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR s$[rsp+rdx*4]
	vmovss	xmm2, DWORD PTR s$[rsp+rdi*4]
	vxorps	xmm1, xmm1, xmm1
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2092
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN53@stbtt__run:
$hvcurveto$109:
; Line 2094
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN57@stbtt__run
	jmp	$LN13@stbtt__run
$LN57@stbtt__run:
; Line 2095
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR tv244[rsp], xmm0
	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	cmp	eax, 5
	jne	SHORT $LN103@stbtt__run
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	cdqe
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR tv225[rsp], xmm0
	jmp	SHORT $LN104@stbtt__run
$LN103@stbtt__run:
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR tv225[rsp], xmm0
$LN104@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	inc	ecx
	movsxd	rcx, ecx
	movsxd	rdx, DWORD PTR i$[rsp]
	vmovss	xmm0, DWORD PTR tv244[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR tv225[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR s$[rsp+rcx*4]
	vxorps	xmm2, xmm2, xmm2
	vmovss	xmm1, DWORD PTR s$[rsp+rdx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2096
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
; Line 2097
	jmp	$LN12@stbtt__run
$LN13@stbtt__run:
; Line 2098
	jmp	$LN4@stbtt__run
$LN58@stbtt__run:
; Line 2101
	cmp	DWORD PTR sp$[rsp], 6
	jge	SHORT $LN59@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN59@stbtt__run:
; Line 2102
	jmp	SHORT $LN17@stbtt__run
$LN15@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN17@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rsp]
	jge	$LN16@stbtt__run
; Line 2103
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rcx*4]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rdx*4]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR s$[rsp+rdi*4]
	vmovss	xmm2, DWORD PTR s$[rsp+rsi*4]
	vmovss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	$LN15@stbtt__run
$LN16@stbtt__run:
; Line 2104
	jmp	$LN4@stbtt__run
$LN60@stbtt__run:
; Line 2107
	cmp	DWORD PTR sp$[rsp], 8
	jge	SHORT $LN61@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN61@stbtt__run:
; Line 2108
	jmp	SHORT $LN20@stbtt__run
$LN18@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 6
	mov	DWORD PTR i$[rsp], eax
$LN20@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 2
	cmp	eax, ecx
	jge	$LN19@stbtt__run
; Line 2109
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rcx*4]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rdx*4]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR s$[rsp+rdi*4]
	vmovss	xmm2, DWORD PTR s$[rsp+rsi*4]
	vmovss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	$LN18@stbtt__run
$LN19@stbtt__run:
; Line 2110
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN62@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN62@stbtt__run:
; Line 2111
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	vmovss	xmm2, DWORD PTR s$[rsp+rax*4]
	vmovss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
; Line 2112
	jmp	$LN4@stbtt__run
$LN63@stbtt__run:
; Line 2115
	cmp	DWORD PTR sp$[rsp], 8
	jge	SHORT $LN64@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN64@stbtt__run:
; Line 2116
	jmp	SHORT $LN23@stbtt__run
$LN21@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 2
	mov	DWORD PTR i$[rsp], eax
$LN23@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	ecx, DWORD PTR sp$[rsp]
	sub	ecx, 6
	cmp	eax, ecx
	jge	SHORT $LN22@stbtt__run
; Line 2117
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	movsxd	rcx, DWORD PTR i$[rsp]
	vmovss	xmm2, DWORD PTR s$[rsp+rax*4]
	vmovss	xmm1, DWORD PTR s$[rsp+rcx*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ; stbtt__csctx_rline_to
	jmp	SHORT $LN21@stbtt__run
$LN22@stbtt__run:
; Line 2118
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cmp	eax, DWORD PTR sp$[rsp]
	jl	SHORT $LN65@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN65@stbtt__run:
; Line 2119
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 5
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 4
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	add	edx, 3
	movsxd	rdx, edx
	mov	edi, DWORD PTR i$[rsp]
	add	edi, 2
	movsxd	rdi, edi
	mov	esi, DWORD PTR i$[rsp]
	inc	esi
	movsxd	rsi, esi
	movsxd	r8, DWORD PTR i$[rsp]
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rcx*4]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rdx*4]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR s$[rsp+rdi*4]
	vmovss	xmm2, DWORD PTR s$[rsp+rsi*4]
	vmovss	xmm1, DWORD PTR s$[rsp+r8*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2120
	jmp	$LN4@stbtt__run
$LN66@stbtt__run:
$LN67@stbtt__run:
; Line 2124
	cmp	DWORD PTR sp$[rsp], 4
	jge	SHORT $LN68@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN68@stbtt__run:
; Line 2125
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR f$[rsp], xmm0
; Line 2126
	mov	eax, DWORD PTR sp$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN69@stbtt__run
	movsxd	rax, DWORD PTR i$[rsp]
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR f$[rsp], xmm0
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN69@stbtt__run:
; Line 2127
	jmp	SHORT $LN26@stbtt__run
$LN24@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 4
	mov	DWORD PTR i$[rsp], eax
$LN26@stbtt__run:
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cmp	eax, DWORD PTR sp$[rsp]
	jge	$LN25@stbtt__run
; Line 2128
	cmp	DWORD PTR b0$[rsp], 27
	jne	SHORT $LN70@stbtt__run
; Line 2129
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rcx*4]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR s$[rsp+rdx*4]
	vmovss	xmm2, DWORD PTR f$[rsp]
	vmovss	xmm1, DWORD PTR s$[rsp+rdi*4]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
	jmp	SHORT $LN71@stbtt__run
$LN70@stbtt__run:
; Line 2131
	mov	eax, DWORD PTR i$[rsp]
	add	eax, 3
	cdqe
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 2
	movsxd	rcx, ecx
	mov	edx, DWORD PTR i$[rsp]
	inc	edx
	movsxd	rdx, edx
	movsxd	rdi, DWORD PTR i$[rsp]
	vmovss	xmm0, DWORD PTR s$[rsp+rax*4]
	vmovss	DWORD PTR [rsp+48], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR s$[rsp+rcx*4]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR s$[rsp+rdx*4]
	vmovss	xmm2, DWORD PTR s$[rsp+rdi*4]
	vmovss	xmm1, DWORD PTR f$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
$LN71@stbtt__run:
; Line 2132
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR f$[rsp], xmm0
; Line 2133
	jmp	$LN24@stbtt__run
$LN25@stbtt__run:
; Line 2134
	jmp	$LN4@stbtt__run
$LN72@stbtt__run:
; Line 2137
	cmp	DWORD PTR has_subrs$[rsp], 0
	jne	SHORT $LN73@stbtt__run
; Line 2138
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+156], 0
	je	SHORT $LN74@stbtt__run
; Line 2139
	mov	r8d, DWORD PTR glyph_index$[rsp]
	mov	rdx, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	call	?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ; stbtt__cid_get_glyph_subrs
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR subrs$[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN74@stbtt__run:
; Line 2140
	mov	DWORD PTR has_subrs$[rsp], 1
$LN73@stbtt__run:
$LN75@stbtt__run:
; Line 2144
	cmp	DWORD PTR sp$[rsp], 1
	jge	SHORT $LN76@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN76@stbtt__run:
; Line 2145
	mov	eax, DWORD PTR sp$[rsp]
	dec	eax
	mov	DWORD PTR sp$[rsp], eax
	movsxd	rax, DWORD PTR sp$[rsp]
	vcvttss2si eax, DWORD PTR s$[rsp+rax*4]
	mov	DWORD PTR v$[rsp], eax
; Line 2146
	cmp	DWORD PTR subr_stack_height$[rsp], 10
	jl	SHORT $LN77@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN77@stbtt__run:
; Line 2147
	movsxd	rax, DWORD PTR subr_stack_height$[rsp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rsp]
	lea	rdi, QWORD PTR subr_stack$[rsp+rax]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	eax, DWORD PTR subr_stack_height$[rsp]
	inc	eax
	mov	DWORD PTR subr_stack_height$[rsp], eax
; Line 2148
	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR tv456[rsp], eax
	cmp	DWORD PTR b0$[rsp], 10
	jne	SHORT $LN105@stbtt__run
	lea	rax, QWORD PTR subrs$[rsp]
	mov	QWORD PTR tv453[rsp], rax
	jmp	SHORT $LN106@stbtt__run
$LN105@stbtt__run:
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 96					; 00000060H
	mov	QWORD PTR tv453[rsp], rax
$LN106@stbtt__run:
	lea	rax, QWORD PTR $T19[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR tv453[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR tv456[rsp]
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	call	?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__get_subr
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 2149
	cmp	DWORD PTR b$[rsp+12], 0
	jne	SHORT $LN78@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN78@stbtt__run:
; Line 2150
	mov	DWORD PTR b$[rsp+8], 0
; Line 2151
	mov	DWORD PTR clear_stack$[rsp], 0
; Line 2152
	jmp	$LN4@stbtt__run
$LN79@stbtt__run:
; Line 2155
	cmp	DWORD PTR subr_stack_height$[rsp], 0
	jg	SHORT $LN80@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN80@stbtt__run:
; Line 2156
	mov	eax, DWORD PTR subr_stack_height$[rsp]
	dec	eax
	mov	DWORD PTR subr_stack_height$[rsp], eax
	movsxd	rax, DWORD PTR subr_stack_height$[rsp]
	imul	rax, rax, 16
	lea	rcx, QWORD PTR b$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR subr_stack$[rsp+rax]
	mov	ecx, 16
	rep movsb
; Line 2157
	mov	DWORD PTR clear_stack$[rsp], 0
; Line 2158
	jmp	$LN4@stbtt__run
$LN81@stbtt__run:
; Line 2161
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape
; Line 2162
	mov	eax, 1
	jmp	$LN1@stbtt__run
$LN82@stbtt__run:
; Line 2167
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b1$15[rsp], eax
; Line 2168
	mov	eax, DWORD PTR b1$15[rsp]
	mov	DWORD PTR tv470[rsp], eax
	cmp	DWORD PTR tv470[rsp], 34		; 00000022H
	je	SHORT $LN83@stbtt__run
	cmp	DWORD PTR tv470[rsp], 35		; 00000023H
	je	$LN85@stbtt__run
	cmp	DWORD PTR tv470[rsp], 36		; 00000024H
	je	$LN87@stbtt__run
	cmp	DWORD PTR tv470[rsp], 37		; 00000025H
	je	$LN89@stbtt__run
	jmp	$LN93@stbtt__run
$LN83@stbtt__run:
; Line 2172
	cmp	DWORD PTR sp$[rsp], 7
	jge	SHORT $LN84@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN84@stbtt__run:
; Line 2173
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx1$4[rsp], xmm0
; Line 2174
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx2$3[rsp], xmm0
; Line 2175
	mov	eax, 4
	imul	rax, rax, 2
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy2$1[rsp], xmm0
; Line 2176
	mov	eax, 4
	imul	rax, rax, 3
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx3$2[rsp], xmm0
; Line 2177
	mov	eax, 4
	imul	rax, rax, 4
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx4$7[rsp], xmm0
; Line 2178
	mov	eax, 4
	imul	rax, rax, 5
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx5$6[rsp], xmm0
; Line 2179
	mov	eax, 4
	imul	rax, rax, 6
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx6$5[rsp], xmm0
; Line 2180
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR dx3$2[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR dy2$1[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR dx2$3[rsp]
	vxorps	xmm2, xmm2, xmm2
	vmovss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2181
	vmovss	xmm0, DWORD PTR dy2$1[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vxorps	xmm1, xmm1, xmm1
	vmovss	DWORD PTR [rsp+48], xmm1
	vmovss	xmm1, DWORD PTR dx6$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm1
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR dx5$6[rsp]
	vxorps	xmm2, xmm2, xmm2
	vmovss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2182
	jmp	$LN27@stbtt__run
$LN85@stbtt__run:
; Line 2185
	cmp	DWORD PTR sp$[rsp], 13
	jge	SHORT $LN86@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN86@stbtt__run:
; Line 2186
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx1$4[rsp], xmm0
; Line 2187
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy1$8[rsp], xmm0
; Line 2188
	mov	eax, 4
	imul	rax, rax, 2
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx2$3[rsp], xmm0
; Line 2189
	mov	eax, 4
	imul	rax, rax, 3
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy2$1[rsp], xmm0
; Line 2190
	mov	eax, 4
	imul	rax, rax, 4
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx3$2[rsp], xmm0
; Line 2191
	mov	eax, 4
	imul	rax, rax, 5
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy3$11[rsp], xmm0
; Line 2192
	mov	eax, 4
	imul	rax, rax, 6
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx4$7[rsp], xmm0
; Line 2193
	mov	eax, 4
	imul	rax, rax, 7
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy4$12[rsp], xmm0
; Line 2194
	mov	eax, 4
	imul	rax, rax, 8
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx5$6[rsp], xmm0
; Line 2195
	mov	eax, 4
	imul	rax, rax, 9
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy5$9[rsp], xmm0
; Line 2196
	mov	eax, 4
	imul	rax, rax, 10
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx6$5[rsp], xmm0
; Line 2197
	mov	eax, 4
	imul	rax, rax, 11
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy6$10[rsp], xmm0
; Line 2199
	vmovss	xmm0, DWORD PTR dy3$11[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR dx3$2[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR dy2$1[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR dx2$3[rsp]
	vmovss	xmm2, DWORD PTR dy1$8[rsp]
	vmovss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2200
	vmovss	xmm0, DWORD PTR dy6$10[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR dx6$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR dy5$9[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR dx5$6[rsp]
	vmovss	xmm2, DWORD PTR dy4$12[rsp]
	vmovss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2201
	jmp	$LN27@stbtt__run
$LN87@stbtt__run:
; Line 2204
	cmp	DWORD PTR sp$[rsp], 9
	jge	SHORT $LN88@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN88@stbtt__run:
; Line 2205
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx1$4[rsp], xmm0
; Line 2206
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy1$8[rsp], xmm0
; Line 2207
	mov	eax, 4
	imul	rax, rax, 2
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx2$3[rsp], xmm0
; Line 2208
	mov	eax, 4
	imul	rax, rax, 3
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy2$1[rsp], xmm0
; Line 2209
	mov	eax, 4
	imul	rax, rax, 4
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx3$2[rsp], xmm0
; Line 2210
	mov	eax, 4
	imul	rax, rax, 5
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx4$7[rsp], xmm0
; Line 2211
	mov	eax, 4
	imul	rax, rax, 6
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx5$6[rsp], xmm0
; Line 2212
	mov	eax, 4
	imul	rax, rax, 7
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy5$9[rsp], xmm0
; Line 2213
	mov	eax, 4
	imul	rax, rax, 8
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx6$5[rsp], xmm0
; Line 2214
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR dx3$2[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR dy2$1[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR dx2$3[rsp]
	vmovss	xmm2, DWORD PTR dy1$8[rsp]
	vmovss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2215
	vmovss	xmm0, DWORD PTR dy1$8[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dy2$1[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dy5$9[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR dx6$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR dy5$9[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR dx5$6[rsp]
	vxorps	xmm2, xmm2, xmm2
	vmovss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2216
	jmp	$LN27@stbtt__run
$LN89@stbtt__run:
; Line 2219
	cmp	DWORD PTR sp$[rsp], 11
	jge	SHORT $LN90@stbtt__run
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN90@stbtt__run:
; Line 2220
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx1$4[rsp], xmm0
; Line 2221
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy1$8[rsp], xmm0
; Line 2222
	mov	eax, 4
	imul	rax, rax, 2
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx2$3[rsp], xmm0
; Line 2223
	mov	eax, 4
	imul	rax, rax, 3
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy2$1[rsp], xmm0
; Line 2224
	mov	eax, 4
	imul	rax, rax, 4
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx3$2[rsp], xmm0
; Line 2225
	mov	eax, 4
	imul	rax, rax, 5
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy3$11[rsp], xmm0
; Line 2226
	mov	eax, 4
	imul	rax, rax, 6
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx4$7[rsp], xmm0
; Line 2227
	mov	eax, 4
	imul	rax, rax, 7
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy4$12[rsp], xmm0
; Line 2228
	mov	eax, 4
	imul	rax, rax, 8
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dx5$6[rsp], xmm0
; Line 2229
	mov	eax, 4
	imul	rax, rax, 9
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy5$9[rsp], xmm0
; Line 2230
	mov	eax, 4
	imul	rax, rax, 10
	vmovss	xmm0, DWORD PTR s$[rsp+rax]
	vmovss	DWORD PTR dy6$10[rsp], xmm0
	vmovss	xmm0, DWORD PTR dy6$10[rsp]
	vmovss	DWORD PTR dx6$5[rsp], xmm0
; Line 2231
	vmovss	xmm0, DWORD PTR dx1$4[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dx2$3[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dx3$2[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dx4$7[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dx5$6[rsp]
	vmovss	DWORD PTR dx$14[rsp], xmm0
; Line 2232
	vmovss	xmm0, DWORD PTR dy1$8[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dy2$1[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dy3$11[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dy4$12[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dy5$9[rsp]
	vmovss	DWORD PTR dy$13[rsp], xmm0
; Line 2233
	vcvtss2sd xmm0, xmm0, DWORD PTR dx$14[rsp]
	call	fabs
	vmovsd	QWORD PTR tv640[rsp], xmm0
	vcvtss2sd xmm1, xmm1, DWORD PTR dy$13[rsp]
	vmovupd	xmm0, xmm1
	call	fabs
	vmovsd	xmm1, QWORD PTR tv640[rsp]
	vcomisd	xmm1, xmm0
	jbe	SHORT $LN91@stbtt__run
; Line 2234
	vmovss	xmm0, DWORD PTR dy$13[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR dy6$10[rsp], xmm0
	jmp	SHORT $LN92@stbtt__run
$LN91@stbtt__run:
; Line 2236
	vmovss	xmm0, DWORD PTR dx$14[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR dx6$5[rsp], xmm0
$LN92@stbtt__run:
; Line 2237
	vmovss	xmm0, DWORD PTR dy3$11[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR dx3$2[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR dy2$1[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR dx2$3[rsp]
	vmovss	xmm2, DWORD PTR dy1$8[rsp]
	vmovss	xmm1, DWORD PTR dx1$4[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2238
	vmovss	xmm0, DWORD PTR dy6$10[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR dx6$5[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR dy5$9[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR dx5$6[rsp]
	vmovss	xmm2, DWORD PTR dy4$12[rsp]
	vmovss	xmm1, DWORD PTR dx4$7[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ; stbtt__csctx_rccurve_to
; Line 2239
	jmp	SHORT $LN27@stbtt__run
$LN93@stbtt__run:
; Line 2242
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN27@stbtt__run:
; Line 2244
	jmp	$LN4@stbtt__run
$LN94@stbtt__run:
; Line 2247
	cmp	DWORD PTR b0$[rsp], 255			; 000000ffH
	je	SHORT $LN95@stbtt__run
	cmp	DWORD PTR b0$[rsp], 28
	je	SHORT $LN95@stbtt__run
	cmp	DWORD PTR b0$[rsp], 32			; 00000020H
	jge	SHORT $LN95@stbtt__run
; Line 2248
	xor	eax, eax
	jmp	$LN1@stbtt__run
$LN95@stbtt__run:
; Line 2251
	cmp	DWORD PTR b0$[rsp], 255			; 000000ffH
	jne	SHORT $LN96@stbtt__run
; Line 2252
	mov	edx, 4
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@47800000
	vmovss	DWORD PTR f$[rsp], xmm0
; Line 2253
	jmp	SHORT $LN97@stbtt__run
$LN96@stbtt__run:
; Line 2254
	mov	edx, -1
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 2255
	lea	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR f$[rsp], xmm0
$LN97@stbtt__run:
; Line 2257
	cmp	DWORD PTR sp$[rsp], 48			; 00000030H
	jl	SHORT $LN98@stbtt__run
	xor	eax, eax
	jmp	SHORT $LN1@stbtt__run
$LN98@stbtt__run:
; Line 2258
	movsxd	rax, DWORD PTR sp$[rsp]
	vmovss	xmm0, DWORD PTR f$[rsp]
	vmovss	DWORD PTR s$[rsp+rax*4], xmm0
	mov	eax, DWORD PTR sp$[rsp]
	inc	eax
	mov	DWORD PTR sp$[rsp], eax
; Line 2259
	mov	DWORD PTR clear_stack$[rsp], 0
$LN4@stbtt__run:
; Line 2262
	cmp	DWORD PTR clear_stack$[rsp], 0
	je	SHORT $LN99@stbtt__run
	mov	DWORD PTR sp$[rsp], 0
$LN99@stbtt__run:
; Line 2263
	jmp	$LN2@stbtt__run
$LN3@stbtt__run:
; Line 2264
	xor	eax, eax
$LN1@stbtt__run:
; Line 2267
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 744				; 000002e8H
	pop	rdi
	pop	rsi
	ret	0
$LN107@stbtt__run:
	DD	$LN32@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN33@stbtt__run
	DD	$LN38@stbtt__run
	DD	$LN42@stbtt__run
	DD	$LN47@stbtt__run
	DD	$LN44@stbtt__run
	DD	$LN58@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN72@stbtt__run
	DD	$LN79@stbtt__run
	DD	$LN82@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN81@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN34@stbtt__run
	DD	$LN29@stbtt__run
	DD	$LN30@stbtt__run
	DD	$LN36@stbtt__run
	DD	$LN40@stbtt__run
	DD	$LN35@stbtt__run
	DD	$LN60@stbtt__run
	DD	$LN63@stbtt__run
	DD	$LN66@stbtt__run
	DD	$LN67@stbtt__run
	DD	$LN94@stbtt__run
	DD	$LN75@stbtt__run
	DD	$LN54@stbtt__run
	DD	$LN51@stbtt__run
?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ENDP ; stbtt__run_charstring
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fdselector$ = 32
i$ = 36
fmt$ = 40
end$ = 44
start$ = 48
fdselect$ = 56
nranges$ = 72
v$ = 76
$T1 = 80
$T2 = 96
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
__$ReturnAddress$ = 256
info$ = 264
glyph_index$ = 272
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z PROC ; stbtt__cid_get_glyph_subrs
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1983
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 232				; 000000e8H
; Line 1984
	lea	rax, QWORD PTR fdselect$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+144]
	mov	ecx, 16
	rep movsb
; Line 1985
	mov	DWORD PTR fdselector$[rsp], -1
; Line 1987
	xor	edx, edx
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1988
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fmt$[rsp], eax
; Line 1989
	cmp	DWORD PTR fmt$[rsp], 0
	jne	SHORT $LN5@stbtt__cid
; Line 1991
	mov	edx, DWORD PTR glyph_index$[rsp]
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1992
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR fdselector$[rsp], eax
	jmp	$LN6@stbtt__cid
$LN5@stbtt__cid:
; Line 1993
	cmp	DWORD PTR fmt$[rsp], 3
	jne	$LN7@stbtt__cid
; Line 1994
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR nranges$[rsp], eax
; Line 1995
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR start$[rsp], eax
; Line 1996
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__cid
$LN2@stbtt__cid:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__cid:
	mov	eax, DWORD PTR nranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__cid
; Line 1997
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rsp], eax
; Line 1998
	mov	edx, 2
	lea	rcx, QWORD PTR fdselect$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR end$[rsp], eax
; Line 1999
	mov	eax, DWORD PTR start$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jl	SHORT $LN8@stbtt__cid
	mov	eax, DWORD PTR end$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jge	SHORT $LN8@stbtt__cid
; Line 2000
	mov	eax, DWORD PTR v$[rsp]
	mov	DWORD PTR fdselector$[rsp], eax
; Line 2001
	jmp	SHORT $LN3@stbtt__cid
$LN8@stbtt__cid:
; Line 2003
	mov	eax, DWORD PTR end$[rsp]
	mov	DWORD PTR start$[rsp], eax
; Line 2004
	jmp	SHORT $LN2@stbtt__cid
$LN3@stbtt__cid:
$LN7@stbtt__cid:
$LN6@stbtt__cid:
; Line 2006
	cmp	DWORD PTR fdselector$[rsp], -1
	jne	SHORT $LN9@stbtt__cid
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T6[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
$LN9@stbtt__cid:
; Line 2007
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+128]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR fdselector$[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T3[rsp]
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	call	?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 2008
	add	rsp, 232				; 000000e8H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cid_get_glyph_subrs@@YA?AUstbtt__buf@@PEBUstbtt_fontinfo@@H@Z ENDP ; stbtt__cid_get_glyph_subrs
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bias$ = 32
count$ = 36
$T1 = 40
$T2 = 64
$T3 = 80
$T4 = 96
$T5 = 112
__$ReturnAddress$ = 160
idx$ = 168
n$ = 176
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z PROC		; stbtt__get_subr
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1969
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 1970
	mov	rcx, QWORD PTR idx$[rsp]
	call	?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ; stbtt__cff_index_count
	mov	DWORD PTR count$[rsp], eax
; Line 1971
	mov	DWORD PTR bias$[rsp], 107		; 0000006bH
; Line 1972
	cmp	DWORD PTR count$[rsp], 33900		; 0000846cH
	jl	SHORT $LN2@stbtt__get
; Line 1973
	mov	DWORD PTR bias$[rsp], 32768		; 00008000H
	jmp	SHORT $LN3@stbtt__get
$LN2@stbtt__get:
; Line 1974
	cmp	DWORD PTR count$[rsp], 1240		; 000004d8H
	jl	SHORT $LN4@stbtt__get
; Line 1975
	mov	DWORD PTR bias$[rsp], 1131		; 0000046bH
$LN4@stbtt__get:
$LN3@stbtt__get:
; Line 1976
	mov	eax, DWORD PTR bias$[rsp]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
; Line 1977
	cmp	DWORD PTR n$[rsp], 0
	jl	SHORT $LN6@stbtt__get
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR n$[rsp], eax
	jl	SHORT $LN5@stbtt__get
$LN6@stbtt__get:
; Line 1978
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T4[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__get
$LN5@stbtt__get:
; Line 1979
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR idx$[rsp]
	mov	ecx, 16
	rep movsb
	mov	r8d, DWORD PTR n$[rsp]
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__get:
; Line 1980
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__get_subr@@YA?AUstbtt__buf@@U1@H@Z ENDP		; stbtt__get_subr
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cy2$ = 64
cx2$ = 68
cy1$ = 72
cx1$ = 76
ctx$ = 96
dx1$ = 104
dy1$ = 112
dx2$ = 120
dy2$ = 128
dx3$ = 136
dy3$ = 144
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z PROC ; stbtt__csctx_rccurve_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1958
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1959
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR [rax+16]
	vaddss	xmm0, xmm0, DWORD PTR dx1$[rsp]
	vmovss	DWORD PTR cx1$[rsp], xmm0
; Line 1960
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR [rax+20]
	vaddss	xmm0, xmm0, DWORD PTR dy1$[rsp]
	vmovss	DWORD PTR cy1$[rsp], xmm0
; Line 1961
	vmovss	xmm0, DWORD PTR cx1$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dx2$[rsp]
	vmovss	DWORD PTR cx2$[rsp], xmm0
; Line 1962
	vmovss	xmm0, DWORD PTR cy1$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dy2$[rsp]
	vmovss	DWORD PTR cy2$[rsp], xmm0
; Line 1963
	vmovss	xmm0, DWORD PTR cx2$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dx3$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 1964
	vmovss	xmm0, DWORD PTR cy2$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR dy3$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
; Line 1965
	vcvttss2si eax, DWORD PTR cy2$[rsp]
	vcvttss2si ecx, DWORD PTR cx2$[rsp]
	vcvttss2si edx, DWORD PTR cy1$[rsp]
	vcvttss2si r8d, DWORD PTR cx1$[rsp]
	mov	r9, QWORD PTR ctx$[rsp]
	vcvttss2si r9d, DWORD PTR [r9+20]
	mov	r10, QWORD PTR ctx$[rsp]
	vcvttss2si r10d, DWORD PTR [r10+16]
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	mov	r8d, r10d
	mov	dl, 4
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1966
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__csctx_rccurve_to@@YAXPEAUstbtt__csctx@@MMMMMM@Z ENDP ; stbtt__csctx_rccurve_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
dx$ = 88
dy$ = 96
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rline_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1951
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1952
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR [rax+16]
	vaddss	xmm0, xmm0, DWORD PTR dx$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 1953
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR [rax+20]
	vaddss	xmm0, xmm0, DWORD PTR dy$[rsp]
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
; Line 1954
	mov	rax, QWORD PTR ctx$[rsp]
	vcvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rsp]
	vcvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1955
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__csctx_rline_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rline_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 64
tv72 = 68
ctx$ = 96
dx$ = 104
dy$ = 112
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z PROC	; stbtt__csctx_rmove_to
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1943
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1944
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ; stbtt__csctx_close_shape
; Line 1945
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR [rax+16]
	vaddss	xmm0, xmm0, DWORD PTR dx$[rsp]
	vmovss	DWORD PTR tv68[rsp], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR tv68[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR tv68[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 1946
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR [rax+20]
	vaddss	xmm0, xmm0, DWORD PTR dy$[rsp]
	vmovss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR tv72[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
	mov	rax, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR tv72[rsp]
	vmovss	DWORD PTR [rax+12], xmm0
; Line 1947
	mov	rax, QWORD PTR ctx$[rsp]
	vcvttss2si eax, DWORD PTR [rax+20]
	mov	rcx, QWORD PTR ctx$[rsp]
	vcvttss2si ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 1
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
; Line 1948
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__csctx_rmove_to@@YAXPEAUstbtt__csctx@@MM@Z ENDP	; stbtt__csctx_rmove_to
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ctx$ = 80
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z PROC	; stbtt__csctx_close_shape
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1937
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1938
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vucomiss xmm0, DWORD PTR [rcx+16]
	jp	SHORT $LN3@stbtt__csc
	jne	SHORT $LN3@stbtt__csc
	mov	rax, QWORD PTR ctx$[rsp]
	mov	rcx, QWORD PTR ctx$[rsp]
	vmovss	xmm0, DWORD PTR [rax+12]
	vucomiss xmm0, DWORD PTR [rcx+20]
	jp	SHORT $LN5@stbtt__csc
	je	SHORT $LN2@stbtt__csc
$LN5@stbtt__csc:
$LN3@stbtt__csc:
; Line 1939
	mov	rax, QWORD PTR ctx$[rsp]
	vcvttss2si eax, DWORD PTR [rax+12]
	mov	rcx, QWORD PTR ctx$[rsp]
	vcvttss2si ecx, DWORD PTR [rcx+8]
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 2
	mov	rcx, QWORD PTR ctx$[rsp]
	call	?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ; stbtt__csctx_v
$LN2@stbtt__csc:
; Line 1940
	add	rsp, 72					; 00000048H
	ret	0
?stbtt__csctx_close_shape@@YAXPEAUstbtt__csctx@@@Z ENDP	; stbtt__csctx_close_shape
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 64
type$ = 72
x$ = 80
y$ = 88
cx$ = 96
cy$ = 104
cx1$ = 112
cy1$ = 120
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z PROC	; stbtt__csctx_v
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1921
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1922
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax], 0
	je	SHORT $LN2@stbtt__csc
; Line 1923
	mov	r8d, DWORD PTR y$[rsp]
	mov	edx, DWORD PTR x$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
; Line 1924
	movzx	eax, BYTE PTR type$[rsp]
	cmp	eax, 4
	jne	SHORT $LN4@stbtt__csc
; Line 1925
	mov	r8d, DWORD PTR cy$[rsp]
	mov	edx, DWORD PTR cx$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
; Line 1926
	mov	r8d, DWORD PTR cy1$[rsp]
	mov	edx, DWORD PTR cx1$[rsp]
	mov	rcx, QWORD PTR c$[rsp]
	call	?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ; stbtt__track_vertex
$LN4@stbtt__csc:
; Line 1928
	jmp	SHORT $LN3@stbtt__csc
$LN2@stbtt__csc:
; Line 1929
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	add	rax, QWORD PTR [rcx+40]
	mov	ecx, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR y$[rsp]
	mov	r8d, DWORD PTR x$[rsp]
	movzx	edx, BYTE PTR type$[rsp]
	mov	rcx, rax
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1930
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cx1$[rsp]
	mov	WORD PTR [rcx+rax+8], dx
; Line 1931
	mov	rax, QWORD PTR c$[rsp]
	movsxd	rax, DWORD PTR [rax+48]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR c$[rsp]
	mov	rcx, QWORD PTR [rcx+40]
	movzx	edx, WORD PTR cy1$[rsp]
	mov	WORD PTR [rcx+rax+10], dx
$LN3@stbtt__csc:
; Line 1933
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+48]
	inc	eax
	mov	rcx, QWORD PTR c$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 1934
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__csctx_v@@YAXPEAUstbtt__csctx@@EHHHHHH@Z ENDP	; stbtt__csctx_v
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
c$ = 8
x$ = 16
y$ = 24
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z PROC	; stbtt__track_vertex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1912
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 1913
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+28]
	cmp	DWORD PTR x$[rsp], eax
	jg	SHORT $LN3@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN2@stbtt__tra
$LN3@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax+28], ecx
$LN2@stbtt__tra:
; Line 1914
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR y$[rsp], eax
	jg	SHORT $LN5@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN4@stbtt__tra
$LN5@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax+36], ecx
$LN4@stbtt__tra:
; Line 1915
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+24]
	cmp	DWORD PTR x$[rsp], eax
	jl	SHORT $LN7@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN6@stbtt__tra
$LN7@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR x$[rsp]
	mov	DWORD PTR [rax+24], ecx
$LN6@stbtt__tra:
; Line 1916
	mov	rax, QWORD PTR c$[rsp]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR y$[rsp], eax
	jl	SHORT $LN9@stbtt__tra
	mov	rax, QWORD PTR c$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN8@stbtt__tra
$LN9@stbtt__tra:
	mov	rax, QWORD PTR c$[rsp]
	mov	ecx, DWORD PTR y$[rsp]
	mov	DWORD PTR [rax+32], ecx
$LN8@stbtt__tra:
; Line 1917
	mov	rax, QWORD PTR c$[rsp]
	mov	DWORD PTR [rax+4], 1
; Line 1918
	ret	0
?stbtt__track_vertex@@YAXPEAUstbtt__csctx@@HH@Z ENDP	; stbtt__track_vertex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
flags$1 = 80
i$2 = 84
num_vertices$ = 88
flagcount$3 = 92
comp$4 = 96
vertices$ = 104
numberOfContours$ = 112
flags$5 = 116
off$6 = 120
y$7 = 124
x$8 = 128
x$9 = 132
y$10 = 136
points$11 = 144
tv157 = 152
tv163 = 153
cy$12 = 156
cx$13 = 160
sy$14 = 164
was_off$15 = 168
n$16 = 172
sx$17 = 176
g$ = 180
comp_num_verts$18 = 184
dx$19 = 188
dy$20 = 192
scy$21 = 196
scx$22 = 200
start_off$23 = 204
i$24 = 208
v$25 = 216
j$26 = 224
gidx$27 = 228
tv225 = 232
tv183 = 234
comp_verts$28 = 240
m$29 = 248
tv190 = 252
tv232 = 256
tv321 = 260
next_move$30 = 264
tv495 = 268
m$31 = 272
n$32 = 276
more$33 = 280
data$ = 288
tmp$34 = 296
ins$35 = 304
endPtsOfContours$ = 312
tv374 = 320
tv401 = 328
tv413 = 336
tv424 = 344
mtx$36 = 352
__$ArrayPad$ = 376
info$ = 400
glyph_index$ = 408
pvertices$ = 416
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z PROC ; stbtt__GetGlyphShapeTT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1675
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 392				; 00000188H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1678
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 1679
	mov	QWORD PTR vertices$[rsp], 0
; Line 1680
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1681
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rsp], eax
; Line 1683
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	QWORD PTR [rax], 0
; Line 1685
	cmp	DWORD PTR g$[rsp], 0
	jge	SHORT $LN19@stbtt__Get
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN19@stbtt__Get:
; Line 1687
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR numberOfContours$[rsp], ax
; Line 1689
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jle	$LN20@stbtt__Get
; Line 1690
	mov	BYTE PTR flags$1[rsp], 0
; Line 1691
	mov	DWORD PTR j$26[rsp], 0
	mov	DWORD PTR was_off$15[rsp], 0
	mov	DWORD PTR start_off$23[rsp], 0
; Line 1694
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR endPtsOfContours$[rsp], rax
; Line 1695
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR ins$35[rsp], eax
; Line 1696
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsx	ecx, WORD PTR numberOfContours$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	movsxd	rcx, DWORD PTR ins$35[rsp]
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	QWORD PTR points$11[rsp], rax
; Line 1698
	movsx	eax, WORD PTR numberOfContours$[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rsp]
	lea	rax, QWORD PTR [rcx+rax-2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR n$16[rsp], eax
; Line 1700
	movsx	eax, WORD PTR numberOfContours$[rsp]
	mov	ecx, DWORD PTR n$16[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR m$29[rsp], eax
; Line 1701
	movsxd	rax, DWORD PTR m$29[rsp]
	imul	rax, rax, 14
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR vertices$[rsp], rax
; Line 1702
	cmp	QWORD PTR vertices$[rsp], 0
	jne	SHORT $LN22@stbtt__Get
; Line 1703
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN22@stbtt__Get:
; Line 1705
	mov	DWORD PTR next_move$30[rsp], 0
; Line 1706
	mov	BYTE PTR flagcount$3[rsp], 0
; Line 1712
	mov	eax, DWORD PTR n$16[rsp]
	mov	ecx, DWORD PTR m$29[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR off$6[rsp], eax
; Line 1716
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@stbtt__Get
$LN2@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN3@stbtt__Get
; Line 1717
	movzx	eax, BYTE PTR flagcount$3[rsp]
	test	eax, eax
	jne	SHORT $LN23@stbtt__Get
; Line 1718
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv157[rsp], al
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, BYTE PTR tv157[rsp]
	mov	BYTE PTR flags$1[rsp], al
; Line 1719
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN25@stbtt__Get
; Line 1720
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv163[rsp], al
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, BYTE PTR tv163[rsp]
	mov	BYTE PTR flagcount$3[rsp], al
$LN25@stbtt__Get:
; Line 1721
	jmp	SHORT $LN24@stbtt__Get
$LN23@stbtt__Get:
; Line 1722
	movzx	eax, BYTE PTR flagcount$3[rsp]
	dec	al
	mov	BYTE PTR flagcount$3[rsp], al
$LN24@stbtt__Get:
; Line 1723
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, BYTE PTR flags$1[rsp]
	mov	BYTE PTR [rcx+rax+12], dl
; Line 1724
	jmp	$LN2@stbtt__Get
$LN3@stbtt__Get:
; Line 1727
	mov	DWORD PTR x$8[rsp], 0
; Line 1728
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN7@stbtt__Get
$LN5@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN7@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN6@stbtt__Get
; Line 1729
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1730
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN26@stbtt__Get
; Line 1731
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv183[rsp], ax
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, WORD PTR tv183[rsp]
	mov	WORD PTR dx$19[rsp], ax
; Line 1732
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 16
	test	eax, eax
	je	SHORT $LN62@stbtt__Get
	movsx	eax, WORD PTR dx$19[rsp]
	mov	DWORD PTR tv190[rsp], eax
	jmp	SHORT $LN63@stbtt__Get
$LN62@stbtt__Get:
	movsx	eax, WORD PTR dx$19[rsp]
	neg	eax
	mov	DWORD PTR tv190[rsp], eax
$LN63@stbtt__Get:
	mov	eax, DWORD PTR tv190[rsp]
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$8[rsp], eax
; Line 1733
	jmp	SHORT $LN27@stbtt__Get
$LN26@stbtt__Get:
; Line 1734
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 16
	test	eax, eax
	jne	SHORT $LN28@stbtt__Get
; Line 1735
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$11[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR x$8[rsp], eax
; Line 1736
	mov	rax, QWORD PTR points$11[rsp]
	add	rax, 2
	mov	QWORD PTR points$11[rsp], rax
$LN28@stbtt__Get:
$LN27@stbtt__Get:
; Line 1739
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, WORD PTR x$8[rsp]
	mov	WORD PTR [rcx+rax], dx
; Line 1740
	jmp	$LN5@stbtt__Get
$LN6@stbtt__Get:
; Line 1743
	mov	DWORD PTR y$7[rsp], 0
; Line 1744
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN10@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN10@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN9@stbtt__Get
; Line 1745
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1746
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 4
	test	eax, eax
	je	SHORT $LN29@stbtt__Get
; Line 1747
	mov	rax, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	WORD PTR tv225[rsp], ax
	mov	rax, QWORD PTR points$11[rsp]
	inc	rax
	mov	QWORD PTR points$11[rsp], rax
	movzx	eax, WORD PTR tv225[rsp]
	mov	WORD PTR dy$20[rsp], ax
; Line 1748
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN64@stbtt__Get
	movsx	eax, WORD PTR dy$20[rsp]
	mov	DWORD PTR tv232[rsp], eax
	jmp	SHORT $LN65@stbtt__Get
$LN64@stbtt__Get:
	movsx	eax, WORD PTR dy$20[rsp]
	neg	eax
	mov	DWORD PTR tv232[rsp], eax
$LN65@stbtt__Get:
	mov	eax, DWORD PTR tv232[rsp]
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$7[rsp], eax
; Line 1749
	jmp	SHORT $LN30@stbtt__Get
$LN29@stbtt__Get:
; Line 1750
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN31@stbtt__Get
; Line 1751
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR points$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR points$11[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	cwde
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR y$7[rsp], eax
; Line 1752
	mov	rax, QWORD PTR points$11[rsp]
	add	rax, 2
	mov	QWORD PTR points$11[rsp], rax
$LN31@stbtt__Get:
$LN30@stbtt__Get:
; Line 1755
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	edx, WORD PTR y$7[rsp]
	mov	WORD PTR [rcx+rax+2], dx
; Line 1756
	jmp	$LN8@stbtt__Get
$LN9@stbtt__Get:
; Line 1759
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1760
	mov	DWORD PTR scy$21[rsp], 0
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR scx$22[rsp], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR cy$12[rsp], eax
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR cx$13[rsp], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR sy$14[rsp], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1761
	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN13@stbtt__Get
$LN11@stbtt__Get:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN13@stbtt__Get:
	mov	eax, DWORD PTR n$16[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jge	$LN12@stbtt__Get
; Line 1762
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	mov	BYTE PTR flags$1[rsp], al
; Line 1763
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR x$8[rsp], eax
; Line 1764
	mov	eax, DWORD PTR i$2[rsp]
	mov	ecx, DWORD PTR off$6[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR y$7[rsp], eax
; Line 1766
	mov	eax, DWORD PTR i$2[rsp]
	cmp	DWORD PTR next_move$30[rsp], eax
	jne	$LN32@stbtt__Get
; Line 1767
	cmp	DWORD PTR i$2[rsp], 0
	je	SHORT $LN34@stbtt__Get
; Line 1768
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$17[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$23[rsp]
	mov	r8d, DWORD PTR was_off$15[rsp]
	mov	edx, DWORD PTR num_vertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
	mov	DWORD PTR num_vertices$[rsp], eax
$LN34@stbtt__Get:
; Line 1771
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN66@stbtt__Get
	mov	DWORD PTR tv321[rsp], 1
	jmp	SHORT $LN67@stbtt__Get
$LN66@stbtt__Get:
	mov	DWORD PTR tv321[rsp], 0
$LN67@stbtt__Get:
	mov	eax, DWORD PTR tv321[rsp]
	mov	DWORD PTR start_off$23[rsp], eax
; Line 1772
	cmp	DWORD PTR start_off$23[rsp], 0
	je	$LN35@stbtt__Get
; Line 1775
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR scx$22[rsp], eax
; Line 1776
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR scy$21[rsp], eax
; Line 1777
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN37@stbtt__Get
; Line 1779
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	ecx, DWORD PTR x$8[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sx$17[rsp], eax
; Line 1780
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	ecx, DWORD PTR y$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	DWORD PTR sy$14[rsp], eax
; Line 1781
	jmp	SHORT $LN38@stbtt__Get
$LN37@stbtt__Get:
; Line 1783
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1784
	mov	eax, DWORD PTR off$6[rsp]
	mov	ecx, DWORD PTR i$2[rsp]
	lea	eax, DWORD PTR [rax+rcx+1]
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	mov	DWORD PTR sy$14[rsp], eax
; Line 1785
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN38@stbtt__Get:
; Line 1787
	jmp	SHORT $LN36@stbtt__Get
$LN35@stbtt__Get:
; Line 1788
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR sx$17[rsp], eax
; Line 1789
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR sy$14[rsp], eax
$LN36@stbtt__Get:
; Line 1791
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv374[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$14[rsp]
	mov	r8d, DWORD PTR sx$17[rsp]
	mov	dl, 1
	mov	rcx, QWORD PTR tv374[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1792
	mov	DWORD PTR was_off$15[rsp], 0
; Line 1793
	mov	eax, DWORD PTR j$26[rsp]
	shl	eax, 1
	cdqe
	mov	rcx, QWORD PTR endPtsOfContours$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	inc	eax
	mov	DWORD PTR next_move$30[rsp], eax
; Line 1794
	mov	eax, DWORD PTR j$26[rsp]
	inc	eax
	mov	DWORD PTR j$26[rsp], eax
; Line 1795
	jmp	$LN33@stbtt__Get
$LN32@stbtt__Get:
; Line 1796
	movzx	eax, BYTE PTR flags$1[rsp]
	and	eax, 1
	test	eax, eax
	jne	$LN39@stbtt__Get
; Line 1797
	cmp	DWORD PTR was_off$15[rsp], 0
	je	SHORT $LN41@stbtt__Get
; Line 1798
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv401[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR y$7[rsp]
	mov	ecx, DWORD PTR cy$12[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR x$8[rsp]
	mov	edx, DWORD PTR cx$13[rsp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv401[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN41@stbtt__Get:
; Line 1799
	mov	eax, DWORD PTR x$8[rsp]
	mov	DWORD PTR cx$13[rsp], eax
; Line 1800
	mov	eax, DWORD PTR y$7[rsp]
	mov	DWORD PTR cy$12[rsp], eax
; Line 1801
	mov	DWORD PTR was_off$15[rsp], 1
; Line 1802
	jmp	$LN40@stbtt__Get
$LN39@stbtt__Get:
; Line 1803
	cmp	DWORD PTR was_off$15[rsp], 0
	je	SHORT $LN42@stbtt__Get
; Line 1804
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv413[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR y$7[rsp]
	mov	r8d, DWORD PTR x$8[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv413[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
	jmp	SHORT $LN43@stbtt__Get
$LN42@stbtt__Get:
; Line 1806
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv424[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR y$7[rsp]
	mov	r8d, DWORD PTR x$8[rsp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv424[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN43@stbtt__Get:
; Line 1807
	mov	DWORD PTR was_off$15[rsp], 0
$LN40@stbtt__Get:
$LN33@stbtt__Get:
; Line 1810
	jmp	$LN11@stbtt__Get
$LN12@stbtt__Get:
; Line 1811
	mov	eax, DWORD PTR cy$12[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR cx$13[rsp]
	mov	DWORD PTR [rsp+64], eax
	mov	eax, DWORD PTR scy$21[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR scx$22[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR sy$14[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR sx$17[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR start_off$23[rsp]
	mov	r8d, DWORD PTR was_off$15[rsp]
	mov	edx, DWORD PTR num_vertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ; stbtt__close_shape
	mov	DWORD PTR num_vertices$[rsp], eax
	jmp	$LN21@stbtt__Get
$LN20@stbtt__Get:
; Line 1812
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jge	$LN44@stbtt__Get
; Line 1814
	mov	DWORD PTR more$33[rsp], 1
; Line 1815
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	QWORD PTR comp$4[rsp], rax
; Line 1816
	mov	DWORD PTR num_vertices$[rsp], 0
; Line 1817
	mov	QWORD PTR vertices$[rsp], 0
$LN14@stbtt__Get:
; Line 1818
	cmp	DWORD PTR more$33[rsp], 0
	je	$LN15@stbtt__Get
; Line 1820
	mov	DWORD PTR comp_num_verts$18[rsp], 0
; Line 1821
	mov	QWORD PTR comp_verts$28[rsp], 0
	mov	QWORD PTR tmp$34[rsp], 0
; Line 1822
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR mtx$36[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR mtx$36[rsp+4], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR mtx$36[rsp+8], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR mtx$36[rsp+12], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR mtx$36[rsp+16], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR mtx$36[rsp+20], xmm0
; Line 1824
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR flags$5[rsp], ax
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1825
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR gidx$27[rsp], ax
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1827
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 2
	test	eax, eax
	je	$LN46@stbtt__Get
; Line 1828
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN48@stbtt__Get
; Line 1829
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	mov	eax, 4
	imul	rax, rax, 4
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1830
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	mov	eax, 4
	imul	rax, rax, 5
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1831
	jmp	SHORT $LN49@stbtt__Get
$LN48@stbtt__Get:
; Line 1832
	mov	rax, QWORD PTR comp$4[rsp]
	movsx	eax, BYTE PTR [rax]
	vcvtsi2ss xmm0, xmm0, eax
	mov	eax, 4
	imul	rax, rax, 4
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	inc	rax
	mov	QWORD PTR comp$4[rsp], rax
; Line 1833
	mov	rax, QWORD PTR comp$4[rsp]
	movsx	eax, BYTE PTR [rax]
	vcvtsi2ss xmm0, xmm0, eax
	mov	eax, 4
	imul	rax, rax, 5
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	inc	rax
	mov	QWORD PTR comp$4[rsp], rax
$LN49@stbtt__Get:
; Line 1835
	jmp	SHORT $LN47@stbtt__Get
$LN46@stbtt__Get:
; Line 1838
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN68@stbtt__Get
	mov	r8d, 1838				; 0000072eH
	lea	rdx, OFFSET FLAT:$SG142910
	lea	rcx, OFFSET FLAT:$SG142911
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN68@stbtt__Get:
$LN47@stbtt__Get:
; Line 1840
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 8
	test	eax, eax
	je	$LN50@stbtt__Get
; Line 1841
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@46800000
	vmovss	DWORD PTR tv495[rsp], xmm0
	mov	eax, 4
	imul	rax, rax, 3
	vmovss	xmm0, DWORD PTR tv495[rsp]
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR tv495[rsp]
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1842
	mov	eax, 4
	imul	rax, rax, 2
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	jmp	$LN51@stbtt__Get
$LN50@stbtt__Get:
; Line 1843
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	$LN52@stbtt__Get
; Line 1844
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1845
	mov	eax, 4
	imul	rax, rax, 2
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	eax, 4
	imul	rax, rax, 1
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
; Line 1846
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
	jmp	$LN53@stbtt__Get
$LN52@stbtt__Get:
; Line 1847
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN54@stbtt__Get
; Line 1848
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1849
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1850
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 2
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
; Line 1851
	mov	rcx, QWORD PTR comp$4[rsp]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm0, xmm0, DWORD PTR __real@46800000
	mov	eax, 4
	imul	rax, rax, 3
	vmovss	DWORD PTR mtx$36[rsp+rax], xmm0
	mov	rax, QWORD PTR comp$4[rsp]
	add	rax, 2
	mov	QWORD PTR comp$4[rsp], rax
$LN54@stbtt__Get:
$LN53@stbtt__Get:
$LN51@stbtt__Get:
; Line 1855
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	xmm0, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm0, xmm0, DWORD PTR mtx$36[rsp+rcx]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	xmm1, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm1, xmm1, DWORD PTR mtx$36[rsp+rcx]
	vaddss	xmm0, xmm0, xmm1
	vcvtss2sd xmm0, xmm0, xmm0
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR m$31[rsp], xmm0
; Line 1856
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	xmm0, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm0, xmm0, DWORD PTR mtx$36[rsp+rcx]
	mov	eax, 4
	imul	rax, rax, 3
	mov	ecx, 4
	imul	rcx, rcx, 3
	vmovss	xmm1, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm1, xmm1, DWORD PTR mtx$36[rsp+rcx]
	vaddss	xmm0, xmm0, xmm1
	vcvtss2sd xmm0, xmm0, xmm0
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR n$32[rsp], xmm0
; Line 1859
	movzx	eax, WORD PTR gidx$27[rsp]
	lea	r8, QWORD PTR comp_verts$28[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR comp_num_verts$18[rsp], eax
; Line 1860
	cmp	DWORD PTR comp_num_verts$18[rsp], 0
	jle	$LN55@stbtt__Get
; Line 1862
	mov	DWORD PTR i$24[rsp], 0
	jmp	SHORT $LN18@stbtt__Get
$LN16@stbtt__Get:
	mov	eax, DWORD PTR i$24[rsp]
	inc	eax
	mov	DWORD PTR i$24[rsp], eax
$LN18@stbtt__Get:
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	cmp	DWORD PTR i$24[rsp], eax
	jge	$LN17@stbtt__Get
; Line 1863
	movsxd	rax, DWORD PTR i$24[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR v$25[rsp], rax
; Line 1865
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax]
	mov	WORD PTR x$9[rsp], ax
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+2]
	mov	WORD PTR y$10[rsp], ax
; Line 1866
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$9[rsp]
	vcvtsi2ss xmm0, xmm0, ecx
	vmovss	xmm1, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm0, xmm1, xmm0
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$10[rsp]
	vcvtsi2ss xmm1, xmm1, ecx
	vmovss	xmm2, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm1, xmm2, xmm1
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	vaddss	xmm0, xmm0, DWORD PTR mtx$36[rsp+rax]
	vmovss	xmm1, DWORD PTR m$31[rsp]
	vmulss	xmm0, xmm1, xmm0
	vcvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx], ax
; Line 1867
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$9[rsp]
	vcvtsi2ss xmm0, xmm0, ecx
	vmovss	xmm1, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm0, xmm1, xmm0
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$10[rsp]
	vcvtsi2ss xmm1, xmm1, ecx
	vmovss	xmm2, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm1, xmm2, xmm1
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	vaddss	xmm0, xmm0, DWORD PTR mtx$36[rsp+rax]
	vmovss	xmm1, DWORD PTR n$32[rsp]
	vmulss	xmm0, xmm1, xmm0
	vcvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+2], ax
; Line 1868
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	WORD PTR x$9[rsp], ax
	mov	rax, QWORD PTR v$25[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	WORD PTR y$10[rsp], ax
; Line 1869
	mov	eax, 4
	imul	rax, rax, 0
	movsx	ecx, WORD PTR x$9[rsp]
	vcvtsi2ss xmm0, xmm0, ecx
	vmovss	xmm1, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm0, xmm1, xmm0
	mov	eax, 4
	imul	rax, rax, 2
	movsx	ecx, WORD PTR y$10[rsp]
	vcvtsi2ss xmm1, xmm1, ecx
	vmovss	xmm2, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm1, xmm2, xmm1
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 4
	vaddss	xmm0, xmm0, DWORD PTR mtx$36[rsp+rax]
	vmovss	xmm1, DWORD PTR m$31[rsp]
	vmulss	xmm0, xmm1, xmm0
	vcvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 1870
	mov	eax, 4
	imul	rax, rax, 1
	movsx	ecx, WORD PTR x$9[rsp]
	vcvtsi2ss xmm0, xmm0, ecx
	vmovss	xmm1, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm0, xmm1, xmm0
	mov	eax, 4
	imul	rax, rax, 3
	movsx	ecx, WORD PTR y$10[rsp]
	vcvtsi2ss xmm1, xmm1, ecx
	vmovss	xmm2, DWORD PTR mtx$36[rsp+rax]
	vmulss	xmm1, xmm2, xmm1
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 5
	vaddss	xmm0, xmm0, DWORD PTR mtx$36[rsp+rax]
	vmovss	xmm1, DWORD PTR n$32[rsp]
	vmulss	xmm0, xmm1, xmm0
	vcvttss2si eax, xmm0
	mov	rcx, QWORD PTR v$25[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 1871
	jmp	$LN16@stbtt__Get
$LN17@stbtt__Get:
; Line 1873
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	mov	ecx, DWORD PTR num_vertices$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	imul	rax, rax, 14
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR tmp$34[rsp], rax
; Line 1874
	cmp	QWORD PTR tmp$34[rsp], 0
	jne	SHORT $LN56@stbtt__Get
; Line 1875
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN57@stbtt__Get
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
$LN57@stbtt__Get:
; Line 1876
	cmp	QWORD PTR comp_verts$28[rsp], 0
	je	SHORT $LN58@stbtt__Get
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	call	QWORD PTR __imp_free
$LN58@stbtt__Get:
; Line 1877
	xor	eax, eax
	jmp	$LN1@stbtt__Get
$LN56@stbtt__Get:
; Line 1879
	cmp	DWORD PTR num_vertices$[rsp], 0
	jle	SHORT $LN59@stbtt__Get
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN59@stbtt__Get
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	r8, rax
	mov	rdx, QWORD PTR vertices$[rsp]
	mov	rcx, QWORD PTR tmp$34[rsp]
	call	memcpy
$LN59@stbtt__Get:
; Line 1880
	movsxd	rax, DWORD PTR comp_num_verts$18[rsp]
	imul	rax, rax, 14
	movsxd	rcx, DWORD PTR num_vertices$[rsp]
	imul	rcx, rcx, 14
	mov	rdx, QWORD PTR tmp$34[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR comp_verts$28[rsp]
	call	memcpy
; Line 1881
	cmp	QWORD PTR vertices$[rsp], 0
	je	SHORT $LN60@stbtt__Get
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
$LN60@stbtt__Get:
; Line 1882
	mov	rax, QWORD PTR tmp$34[rsp]
	mov	QWORD PTR vertices$[rsp], rax
; Line 1883
	mov	rcx, QWORD PTR comp_verts$28[rsp]
	call	QWORD PTR __imp_free
; Line 1884
	mov	eax, DWORD PTR comp_num_verts$18[rsp]
	mov	ecx, DWORD PTR num_vertices$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_vertices$[rsp], eax
$LN55@stbtt__Get:
; Line 1887
	movzx	eax, WORD PTR flags$5[rsp]
	and	eax, 32					; 00000020H
	mov	DWORD PTR more$33[rsp], eax
; Line 1888
	jmp	$LN14@stbtt__Get
$LN15@stbtt__Get:
$LN44@stbtt__Get:
$LN21@stbtt__Get:
; Line 1893
	mov	rax, QWORD PTR pvertices$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 1894
	mov	eax, DWORD PTR num_vertices$[rsp]
$LN1@stbtt__Get:
; Line 1895
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 392				; 00000188H
	ret	0
?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ENDP ; stbtt__GetGlyphShapeTT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 48
tv90 = 56
tv134 = 64
tv145 = 72
vertices$ = 96
num_vertices$ = 104
was_off$ = 112
start_off$ = 120
sx$ = 128
sy$ = 136
scx$ = 144
scy$ = 152
cx$ = 160
cy$ = 168
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z PROC ; stbtt__close_shape
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1660
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 1661
	cmp	DWORD PTR start_off$[rsp], 0
	je	$LN2@stbtt__clo
; Line 1662
	cmp	DWORD PTR was_off$[rsp], 0
	je	SHORT $LN4@stbtt__clo
; Line 1663
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv79[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR scy$[rsp]
	mov	ecx, DWORD PTR cy$[rsp]
	add	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR scx$[rsp]
	mov	edx, DWORD PTR cx$[rsp]
	add	edx, ecx
	mov	ecx, edx
	sar	ecx, 1
	mov	edx, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], edx
	mov	edx, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	dl, 3
	mov	rcx, QWORD PTR tv79[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN4@stbtt__clo:
; Line 1664
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv90[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR scy$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR scx$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv90[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
; Line 1665
	jmp	$LN3@stbtt__clo
$LN2@stbtt__clo:
; Line 1666
	cmp	DWORD PTR was_off$[rsp], 0
	je	SHORT $LN5@stbtt__clo
; Line 1667
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv134[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	eax, DWORD PTR cy$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR cx$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 3
	mov	rcx, QWORD PTR tv134[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
	jmp	SHORT $LN6@stbtt__clo
$LN5@stbtt__clo:
; Line 1669
	movsxd	rax, DWORD PTR num_vertices$[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR vertices$[rsp]
	add	rcx, rax
	mov	QWORD PTR tv145[rsp], rcx
	mov	eax, DWORD PTR num_vertices$[rsp]
	inc	eax
	mov	DWORD PTR num_vertices$[rsp], eax
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR sy$[rsp]
	mov	r8d, DWORD PTR sx$[rsp]
	mov	dl, 2
	mov	rcx, QWORD PTR tv145[rsp]
	call	?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ; stbtt_setvertex
$LN6@stbtt__clo:
$LN3@stbtt__clo:
; Line 1671
	mov	eax, DWORD PTR num_vertices$[rsp]
; Line 1672
	add	rsp, 88					; 00000058H
	ret	0
?stbtt__close_shape@@YAHPEAUstbtt_vertex@@HHHHHHHHH@Z ENDP ; stbtt__close_shape
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
tv70 = 36
tv73 = 40
tv76 = 44
tv79 = 48
tv81 = 52
c$ = 56
info$ = 128
glyph_index$ = 136
x0$ = 144
y0$ = 152
x1$ = 160
y1$ = 168
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z PROC ; stbtt__GetGlyphInfoT2
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2287
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 2288
	mov	DWORD PTR c$[rsp], 1
	mov	DWORD PTR c$[rsp+4], 0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR c$[rsp+8], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR c$[rsp+12], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR c$[rsp+16], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR c$[rsp+20], xmm0
	mov	DWORD PTR c$[rsp+24], 0
	mov	DWORD PTR c$[rsp+28], 0
	mov	DWORD PTR c$[rsp+32], 0
	mov	DWORD PTR c$[rsp+36], 0
	mov	QWORD PTR c$[rsp+40], 0
	mov	DWORD PTR c$[rsp+48], 0
; Line 2289
	lea	r8, QWORD PTR c$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__run_charstring@@YAHPEBUstbtt_fontinfo@@HPEAUstbtt__csctx@@@Z ; stbtt__run_charstring
	mov	DWORD PTR r$[rsp], eax
; Line 2290
	cmp	QWORD PTR x0$[rsp], 0
	je	SHORT $LN2@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN7@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+24]
	mov	DWORD PTR tv70[rsp], eax
	jmp	SHORT $LN8@stbtt__Get
$LN7@stbtt__Get:
	mov	DWORD PTR tv70[rsp], 0
$LN8@stbtt__Get:
	mov	rax, QWORD PTR x0$[rsp]
	mov	ecx, DWORD PTR tv70[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@stbtt__Get:
; Line 2291
	cmp	QWORD PTR y0$[rsp], 0
	je	SHORT $LN3@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN9@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+32]
	mov	DWORD PTR tv73[rsp], eax
	jmp	SHORT $LN10@stbtt__Get
$LN9@stbtt__Get:
	mov	DWORD PTR tv73[rsp], 0
$LN10@stbtt__Get:
	mov	rax, QWORD PTR y0$[rsp]
	mov	ecx, DWORD PTR tv73[rsp]
	mov	DWORD PTR [rax], ecx
$LN3@stbtt__Get:
; Line 2292
	cmp	QWORD PTR x1$[rsp], 0
	je	SHORT $LN4@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN11@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+28]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN12@stbtt__Get
$LN11@stbtt__Get:
	mov	DWORD PTR tv76[rsp], 0
$LN12@stbtt__Get:
	mov	rax, QWORD PTR x1$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax], ecx
$LN4@stbtt__Get:
; Line 2293
	cmp	QWORD PTR y1$[rsp], 0
	je	SHORT $LN5@stbtt__Get
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN13@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+36]
	mov	DWORD PTR tv79[rsp], eax
	jmp	SHORT $LN14@stbtt__Get
$LN13@stbtt__Get:
	mov	DWORD PTR tv79[rsp], 0
$LN14@stbtt__Get:
	mov	rax, QWORD PTR y1$[rsp]
	mov	ecx, DWORD PTR tv79[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt__Get:
; Line 2294
	cmp	DWORD PTR r$[rsp], 0
	je	SHORT $LN15@stbtt__Get
	mov	eax, DWORD PTR c$[rsp+48]
	mov	DWORD PTR tv81[rsp], eax
	jmp	SHORT $LN16@stbtt__Get
$LN15@stbtt__Get:
	mov	DWORD PTR tv81[rsp], 0
$LN16@stbtt__Get:
	mov	eax, DWORD PTR tv81[rsp]
; Line 2295
	add	rsp, 120				; 00000078H
	ret	0
?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ENDP ; stbtt__GetGlyphInfoT2
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g1$ = 32
g2$ = 36
tv160 = 40
info$ = 64
glyph_index$ = 72
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z PROC	; stbtt__GetGlyfOffset
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1604
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1607
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN7@stbtt__Get
	mov	r8d, 1607				; 00000647H
	lea	rdx, OFFSET FLAT:$SG142722
	lea	rcx, OFFSET FLAT:$SG142723
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stbtt__Get:
; Line 1609
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+20]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jl	SHORT $LN2@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN2@stbtt__Get:
; Line 1610
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jl	SHORT $LN3@stbtt__Get
	mov	eax, -1
	jmp	$LN1@stbtt__Get
$LN3@stbtt__Get:
; Line 1612
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+60], 0
	jne	$LN4@stbtt__Get
; Line 1613
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g1$[rsp], eax
; Line 1614
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+32]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR g2$[rsp], eax
; Line 1615
	jmp	SHORT $LN5@stbtt__Get
$LN4@stbtt__Get:
; Line 1616
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g1$[rsp], eax
; Line 1617
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+24]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+32]
	mov	DWORD PTR g2$[rsp], eax
$LN5@stbtt__Get:
; Line 1620
	mov	eax, DWORD PTR g2$[rsp]
	cmp	DWORD PTR g1$[rsp], eax
	jne	SHORT $LN8@stbtt__Get
	mov	DWORD PTR tv160[rsp], -1
	jmp	SHORT $LN9@stbtt__Get
$LN8@stbtt__Get:
	mov	eax, DWORD PTR g1$[rsp]
	mov	DWORD PTR tv160[rsp], eax
$LN9@stbtt__Get:
	mov	eax, DWORD PTR tv160[rsp]
$LN1@stbtt__Get:
; Line 1621
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ENDP	; stbtt__GetGlyfOffset
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
v$ = 8
type$ = 16
x$ = 24
y$ = 32
cx$ = 40
cy$ = 48
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z PROC	; stbtt_setvertex
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1595
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	BYTE PTR [rsp+16], dl
	mov	QWORD PTR [rsp+8], rcx
; Line 1596
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, BYTE PTR type$[rsp]
	mov	BYTE PTR [rax+12], cl
; Line 1597
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR x$[rsp]
	mov	WORD PTR [rax], cx
; Line 1598
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR y$[rsp]
	mov	WORD PTR [rax+2], cx
; Line 1599
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR cx$[rsp]
	mov	WORD PTR [rax+4], cx
; Line 1600
	mov	rax, QWORD PTR v$[rsp]
	movzx	ecx, WORD PTR cy$[rsp]
	mov	WORD PTR [rax+6], cx
; Line 1601
	ret	0
?stbtt_setvertex@@YAXPEAUstbtt_vertex@@EHHHH@Z ENDP	; stbtt_setvertex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cmap$ = 32
fdselectoff$1 = 36
i$ = 40
encoding_record$2 = 44
fdarrayoff$3 = 48
charstrings$4 = 52
b$5 = 56
cff$6 = 72
cstype$7 = 76
t$ = 80
tv321 = 84
tv328 = 88
numTables$ = 92
topdict$8 = 96
$T9 = 112
$T10 = 128
$T11 = 144
$T12 = 160
$T13 = 176
topdictidx$14 = 192
$T15 = 208
$T16 = 224
$T17 = 240
$T18 = 256
$T19 = 272
$T20 = 288
$T21 = 304
$T22 = 320
$T23 = 336
$T24 = 352
$T25 = 368
$T26 = 384
$T27 = 400
$T28 = 416
$T29 = 432
$T30 = 448
$T31 = 464
$T32 = 480
$T33 = 496
$T34 = 512
$T35 = 528
$T36 = 544
$T37 = 560
$T38 = 576
info$ = 624
data$ = 632
fontstart$ = 640
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z PROC ; stbtt_InitFont_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1384
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 600				; 00000258H
; Line 1388
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 1389
	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR fontstart$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 1390
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T24[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	lea	rdi, QWORD PTR [rax+64]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1392
	lea	r8, OFFSET FLAT:$SG142598
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR cmap$[rsp], eax
; Line 1393
	lea	r8, OFFSET FLAT:$SG142599
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+24], eax
; Line 1394
	lea	r8, OFFSET FLAT:$SG142600
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+28], eax
; Line 1395
	lea	r8, OFFSET FLAT:$SG142601
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+32], eax
; Line 1396
	lea	r8, OFFSET FLAT:$SG142602
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 1397
	lea	r8, OFFSET FLAT:$SG142603
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 1398
	lea	r8, OFFSET FLAT:$SG142604
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+44], eax
; Line 1399
	lea	r8, OFFSET FLAT:$SG142605
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+48], eax
; Line 1401
	cmp	DWORD PTR cmap$[rsp], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+28], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN10@stbtt_Init
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+40], 0
	jne	SHORT $LN9@stbtt_Init
$LN10@stbtt_Init:
; Line 1402
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN9@stbtt_Init:
; Line 1403
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN11@stbtt_Init
; Line 1405
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN13@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN13@stbtt_Init:
; Line 1406
	jmp	$LN12@stbtt_Init
$LN11@stbtt_Init:
; Line 1409
	mov	DWORD PTR cstype$7[rsp], 2
	mov	DWORD PTR charstrings$4[rsp], 0
	mov	DWORD PTR fdarrayoff$3[rsp], 0
	mov	DWORD PTR fdselectoff$1[rsp], 0
; Line 1412
	lea	r8, OFFSET FLAT:$SG142611
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR cff$6[rsp], eax
; Line 1413
	cmp	DWORD PTR cff$6[rsp], 0
	jne	SHORT $LN14@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN14@stbtt_Init:
; Line 1415
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T25[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1416
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T26[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	lea	rdi, QWORD PTR [rax+144]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1419
	mov	eax, DWORD PTR cff$6[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r8d, 536870912				; 20000000H
	mov	rdx, rax
	lea	rcx, QWORD PTR $T27[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	lea	rdi, QWORD PTR [rax+64]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1420
	lea	rax, QWORD PTR b$5[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+64]
	mov	ecx, 16
	rep movsb
; Line 1423
	mov	edx, 2
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1424
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	edx, eax
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1428
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1429
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR topdictidx$14[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1430
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR topdictidx$14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	xor	r8d, r8d
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ; stbtt__cff_index_get
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR topdict$8[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1431
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T33[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1432
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T17[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	lea	rdi, QWORD PTR [rax+96]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1434
	lea	r9, QWORD PTR charstrings$4[rsp]
	mov	r8d, 1
	mov	edx, 17
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1435
	lea	r9, QWORD PTR cstype$7[rsp]
	mov	r8d, 1
	mov	edx, 262				; 00000106H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1436
	lea	r9, QWORD PTR fdarrayoff$3[rsp]
	mov	r8d, 1
	mov	edx, 292				; 00000124H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1437
	lea	r9, QWORD PTR fdselectoff$1[rsp]
	mov	r8d, 1
	mov	edx, 293				; 00000125H
	lea	rcx, QWORD PTR topdict$8[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1438
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR topdict$8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	r8, QWORD PTR $T18[rsp]
	lea	rdx, QWORD PTR $T19[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ; stbtt__get_subrs
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	lea	rdi, QWORD PTR [rax+112]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1441
	cmp	DWORD PTR cstype$7[rsp], 2
	je	SHORT $LN15@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN15@stbtt_Init:
; Line 1442
	cmp	DWORD PTR charstrings$4[rsp], 0
	jne	SHORT $LN16@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN16@stbtt_Init:
; Line 1444
	cmp	DWORD PTR fdarrayoff$3[rsp], 0
	je	$LN17@stbtt_Init
; Line 1446
	cmp	DWORD PTR fdselectoff$1[rsp], 0
	jne	SHORT $LN18@stbtt_Init
	xor	eax, eax
	jmp	$LN1@stbtt_Init
$LN18@stbtt_Init:
; Line 1447
	mov	edx, DWORD PTR fdarrayoff$3[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1448
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	lea	rdi, QWORD PTR [rax+128]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1449
	mov	eax, DWORD PTR fdselectoff$1[rsp]
	mov	ecx, DWORD PTR b$5[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR fdselectoff$1[rsp]
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T22[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	lea	rdi, QWORD PTR [rax+144]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN17@stbtt_Init:
; Line 1452
	mov	edx, DWORD PTR charstrings$4[rsp]
	lea	rcx, QWORD PTR b$5[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1453
	lea	rdx, QWORD PTR b$5[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR info$[rsp]
	lea	rcx, QWORD PTR $T23[rsp]
	lea	rdi, QWORD PTR [rax+80]
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
$LN12@stbtt_Init:
; Line 1456
	lea	r8, OFFSET FLAT:$SG142617
	mov	edx, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR t$[rsp], eax
; Line 1457
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN19@stbtt_Init
; Line 1458
	mov	eax, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+20], eax
	jmp	SHORT $LN20@stbtt_Init
$LN19@stbtt_Init:
; Line 1460
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+20], 65535		; 0000ffffH
$LN20@stbtt_Init:
; Line 1462
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+52], -1
; Line 1467
	mov	eax, DWORD PTR cmap$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numTables$[rsp], eax
; Line 1468
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+56], 0
; Line 1469
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Init
$LN2@stbtt_Init:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Init:
	mov	eax, DWORD PTR numTables$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Init
; Line 1470
	mov	eax, DWORD PTR cmap$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8+4]
	mov	DWORD PTR encoding_record$2[rsp], eax
; Line 1472
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv321[rsp], eax
	cmp	DWORD PTR tv321[rsp], 0
	je	SHORT $LN24@stbtt_Init
	cmp	DWORD PTR tv321[rsp], 3
	je	SHORT $LN21@stbtt_Init
	jmp	$LN5@stbtt_Init
$LN21@stbtt_Init:
; Line 1474
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR tv328[rsp], eax
	cmp	DWORD PTR tv328[rsp], 1
	je	SHORT $LN22@stbtt_Init
	cmp	DWORD PTR tv328[rsp], 10
	je	SHORT $LN23@stbtt_Init
	jmp	SHORT $LN7@stbtt_Init
$LN22@stbtt_Init:
$LN23@stbtt_Init:
; Line 1478
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	ecx, DWORD PTR cmap$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN7@stbtt_Init:
; Line 1481
	jmp	SHORT $LN5@stbtt_Init
$LN24@stbtt_Init:
; Line 1485
	mov	eax, DWORD PTR encoding_record$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	ecx, DWORD PTR cmap$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN5@stbtt_Init:
; Line 1488
	jmp	$LN2@stbtt_Init
$LN3@stbtt_Init:
; Line 1489
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+56], 0
	jne	SHORT $LN25@stbtt_Init
; Line 1490
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Init
$LN25@stbtt_Init:
; Line 1492
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+50]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+60], eax
; Line 1493
	mov	eax, 1
$LN1@stbtt_Init:
; Line 1494
	add	rsp, 600				; 00000258H
	pop	rdi
	pop	rsi
	ret	0
?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ENDP ; stbtt_InitFont_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
t$ = 32
offset$1 = 36
info$ = 64
?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z PROC		; stbtt__get_svg
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1369
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1371
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+52], 0
	jge	SHORT $LN2@stbtt__get
; Line 1372
	lea	r8, OFFSET FLAT:$SG142554
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR t$[rsp], eax
; Line 1373
	cmp	DWORD PTR t$[rsp], 0
	je	SHORT $LN3@stbtt__get
; Line 1374
	mov	eax, DWORD PTR t$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR offset$1[rsp], eax
; Line 1375
	mov	eax, DWORD PTR offset$1[rsp]
	mov	ecx, DWORD PTR t$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+52], eax
; Line 1376
	jmp	SHORT $LN4@stbtt__get
$LN3@stbtt__get:
; Line 1377
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+52], 0
$LN4@stbtt__get:
$LN2@stbtt__get:
; Line 1380
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+52]
; Line 1381
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z ENDP		; stbtt__get_svg
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
subrsoff$ = 32
private_loc$ = 40
$T1 = 48
$T2 = 64
pdict$ = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
__$ReturnAddress$ = 224
cff$ = 232
fontdict$ = 240
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z PROC		; stbtt__get_subrs
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1355
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 1356
	mov	DWORD PTR subrsoff$[rsp], 0
	mov	DWORD PTR private_loc$[rsp], 0
	mov	DWORD PTR private_loc$[rsp+4], 0
; Line 1358
	lea	r9, QWORD PTR private_loc$[rsp]
	mov	r8d, 2
	mov	edx, 18
	mov	rcx, QWORD PTR fontdict$[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1359
	mov	eax, 4
	imul	rax, rax, 1
	cmp	DWORD PTR private_loc$[rsp+rax], 0
	je	SHORT $LN3@stbtt__get
	mov	eax, 4
	imul	rax, rax, 0
	cmp	DWORD PTR private_loc$[rsp+rax], 0
	jne	SHORT $LN2@stbtt__get
$LN3@stbtt__get:
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T5[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	$LN1@stbtt__get
$LN2@stbtt__get:
; Line 1360
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	r9d, DWORD PTR private_loc$[rsp+rax]
	mov	r8d, DWORD PTR private_loc$[rsp+rcx]
	mov	rdx, QWORD PTR cff$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR pdict$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 1361
	lea	r9, QWORD PTR subrsoff$[rsp]
	mov	r8d, 1
	mov	edx, 19
	lea	rcx, QWORD PTR pdict$[rsp]
	call	?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ; stbtt__dict_get_ints
; Line 1362
	cmp	DWORD PTR subrsoff$[rsp], 0
	jne	SHORT $LN4@stbtt__get
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T7[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__get
$LN4@stbtt__get:
; Line 1363
	mov	eax, 4
	imul	rax, rax, 1
	mov	eax, DWORD PTR private_loc$[rsp+rax]
	add	eax, DWORD PTR subrsoff$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR cff$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1364
	mov	rdx, QWORD PTR cff$[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ; stbtt__cff_get_index
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__get:
; Line 1365
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__get_subrs@@YA?AUstbtt__buf@@U1@0@Z ENDP		; stbtt__get_subrs
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font_collection$ = 48
?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z PROC	; stbtt_GetNumberOfFonts_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1339
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1341
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetN
; Line 1342
	mov	eax, 1
	jmp	$LN1@stbtt_GetN
$LN2@stbtt_GetN:
; Line 1345
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG142528
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG142529
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG142530
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetN
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG142531
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetN
; Line 1347
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetN
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetN
$LN5@stbtt_GetN:
; Line 1348
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttLONG@@YAHPEAE@Z			; ttLONG
	jmp	SHORT $LN1@stbtt_GetN
$LN4@stbtt_GetN:
$LN3@stbtt_GetN:
; Line 1351
	xor	eax, eax
$LN1@stbtt_GetN:
; Line 1352
	add	rsp, 40					; 00000028H
	ret	0
?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z ENDP	; stbtt_GetNumberOfFonts_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 32
n$1 = 36
font_collection$ = 64
index$ = 72
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z PROC	; stbtt_GetFontOffsetForIndex_internal
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1320
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1322
	mov	rcx, QWORD PTR font_collection$[rsp]
	call	?stbtt__isfont@@YAHPEAE@Z		; stbtt__isfont
	test	eax, eax
	je	SHORT $LN2@stbtt_GetF
; Line 1323
	cmp	DWORD PTR index$[rsp], 0
	jne	SHORT $LN8@stbtt_GetF
	mov	DWORD PTR tv68[rsp], 0
	jmp	SHORT $LN9@stbtt_GetF
$LN8@stbtt_GetF:
	mov	DWORD PTR tv68[rsp], -1
$LN9@stbtt_GetF:
	mov	eax, DWORD PTR tv68[rsp]
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 1326
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG142516
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG142517
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG142518
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt_GetF
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font_collection$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG142519
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt_GetF
; Line 1328
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 65536				; 00010000H
	je	SHORT $LN5@stbtt_GetF
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 4
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	cmp	eax, 131072				; 00020000H
	jne	SHORT $LN4@stbtt_GetF
$LN5@stbtt_GetF:
; Line 1329
	mov	rax, QWORD PTR font_collection$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttLONG@@YAHPEAE@Z			; ttLONG
	mov	DWORD PTR n$1[rsp], eax
; Line 1330
	mov	eax, DWORD PTR n$1[rsp]
	cmp	DWORD PTR index$[rsp], eax
	jl	SHORT $LN6@stbtt_GetF
; Line 1331
	mov	eax, -1
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 1332
	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 2
	cdqe
	mov	rcx, QWORD PTR font_collection$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt_GetF
$LN4@stbtt_GetF:
$LN3@stbtt_GetF:
; Line 1335
	mov	eax, -1
$LN1@stbtt_GetF:
; Line 1336
	add	rsp, 56					; 00000038H
	ret	0
?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ENDP	; stbtt_GetFontOffsetForIndex_internal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
i$ = 36
num_tables$ = 40
tabledir$ = 44
data$ = 64
fontstart$ = 72
tag$ = 80
?stbtt__find_table@@YAIPEAEIPEBD@Z PROC			; stbtt__find_table
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1307
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1308
	mov	eax, DWORD PTR fontstart$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR num_tables$[rsp], eax
; Line 1309
	mov	eax, DWORD PTR fontstart$[rsp]
	add	eax, 12
	mov	DWORD PTR tabledir$[rsp], eax
; Line 1311
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__fin
$LN2@stbtt__fin:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__fin:
	mov	eax, DWORD PTR num_tables$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt__fin
; Line 1312
	imul	eax, DWORD PTR i$[rsp], 16
	mov	ecx, DWORD PTR tabledir$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR loc$1[rsp], eax
; Line 1313
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 0
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 1
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 2
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 1
	imul	rcx, rcx, 3
	movzx	eax, BYTE PTR [rax+rcx]
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR tag$[rsp]
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN5@stbtt__fin
; Line 1314
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt__fin
$LN5@stbtt__fin:
; Line 1315
	jmp	$LN2@stbtt__fin
$LN3@stbtt__fin:
; Line 1316
	xor	eax, eax
$LN1@stbtt__fin:
; Line 1317
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__find_table@@YAIPEAEIPEBD@Z ENDP			; stbtt__find_table
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 8
?stbtt__isfont@@YAHPEAE@Z PROC				; stbtt__isfont
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1295
	mov	QWORD PTR [rsp+8], rcx
; Line 1297
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 49					; 00000031H
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN2@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN2@stbtt__isf:
; Line 1298
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG142481
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG142482
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG142483
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG142484
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN3@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN3@stbtt__isf:
; Line 1299
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG142486
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG142487
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG142488
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG142489
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN4@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN4@stbtt__isf:
; Line 1300
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 1
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@stbtt__isf
	mov	eax, 1
	jmp	$LN1@stbtt__isf
$LN5@stbtt__isf:
; Line 1301
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:$SG142492
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	$LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 1
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:$SG142493
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 2
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:$SG142494
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR font$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	ecx, 1
	imul	rcx, rcx, 3
	lea	rdx, OFFSET FLAT:$SG142495
	movsx	ecx, BYTE PTR [rdx+rcx]
	cmp	eax, ecx
	jne	SHORT $LN6@stbtt__isf
	mov	eax, 1
	jmp	SHORT $LN1@stbtt__isf
$LN6@stbtt__isf:
; Line 1302
	xor	eax, eax
$LN1@stbtt__isf:
; Line 1303
	ret	0
?stbtt__isfont@@YAHPEAE@Z ENDP				; stbtt__isfont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttLONG@@YAHPEAE@Z PROC					; ttLONG
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1289
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttLONG@@YAHPEAE@Z ENDP					; ttLONG
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttULONG@@YAIPEAE@Z PROC				; ttULONG
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1288
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	shl	eax, 24
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 16
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	shl	ecx, 8
	add	eax, ecx
	mov	ecx, 1
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttULONG@@YAIPEAE@Z ENDP				; ttULONG
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttSHORT@@YAFPEAE@Z PROC				; ttSHORT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1287
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttSHORT@@YAFPEAE@Z ENDP				; ttSHORT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
p$ = 8
?ttUSHORT@@YAGPEAE@Z PROC				; ttUSHORT
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1286
	mov	QWORD PTR [rsp+8], rcx
	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR p$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	imul	eax, eax, 256				; 00000100H
	mov	ecx, 1
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR p$[rsp]
	movzx	ecx, BYTE PTR [rdx+rcx]
	add	eax, ecx
	ret	0
?ttUSHORT@@YAGPEAE@Z ENDP				; ttUSHORT
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offsize$ = 32
count$ = 36
start$ = 40
end$ = 44
$T1 = 48
$T2 = 64
__$ReturnAddress$ = 112
b$ = 120
i$ = 128
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z PROC	; stbtt__cff_index_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1261
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1263
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1264
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR count$[rsp], eax
; Line 1265
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rsp], eax
; Line 1266
	cmp	DWORD PTR i$[rsp], 0
	jl	SHORT $LN3@stbtt__cff
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN4@stbtt__cff
$LN3@stbtt__cff:
	mov	r8d, 1266				; 000004f2H
	lea	rdx, OFFSET FLAT:$SG142460
	lea	rcx, OFFSET FLAT:$SG142461
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stbtt__cff:
; Line 1267
	cmp	DWORD PTR offsize$[rsp], 1
	jl	SHORT $LN5@stbtt__cff
	cmp	DWORD PTR offsize$[rsp], 4
	jle	SHORT $LN6@stbtt__cff
$LN5@stbtt__cff:
	mov	r8d, 1267				; 000004f3H
	lea	rdx, OFFSET FLAT:$SG142462
	lea	rcx, OFFSET FLAT:$SG142463
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbtt__cff:
; Line 1268
	mov	eax, DWORD PTR i$[rsp]
	imul	eax, DWORD PTR offsize$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1269
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR start$[rsp], eax
; Line 1270
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR end$[rsp], eax
; Line 1271
	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR end$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR count$[rsp]
	inc	ecx
	imul	ecx, DWORD PTR offsize$[rsp]
	mov	edx, DWORD PTR start$[rsp]
	lea	ecx, DWORD PTR [rcx+rdx+2]
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1272
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cff_index_get@@YA?AUstbtt__buf@@U1@H@Z ENDP	; stbtt__cff_index_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z PROC	; stbtt__cff_index_count
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1255
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1256
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1257
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
; Line 1258
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__cff_index_count@@YAHPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_index_count
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
operands$ = 40
$T1 = 56
b$ = 112
key$ = 120
outcount$ = 128
out$ = 136
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z PROC	; stbtt__dict_get_ints
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1247
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1249
	mov	r8d, DWORD PTR key$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ; stbtt__dict_get
	lea	rcx, QWORD PTR operands$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1250
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__dic
$LN2@stbtt__dic:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__dic:
	mov	eax, DWORD PTR outcount$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__dic
	mov	eax, DWORD PTR operands$[rsp+12]
	cmp	DWORD PTR operands$[rsp+8], eax
	jge	SHORT $LN3@stbtt__dic
; Line 1251
	lea	rcx, QWORD PTR operands$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR out$[rsp]
	mov	DWORD PTR [rdx+rcx*4], eax
	jmp	SHORT $LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1252
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__dict_get_ints@@YAXPEAUstbtt__buf@@HHPEAI@Z ENDP	; stbtt__dict_get_ints
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
op$1 = 32
start$2 = 36
end$3 = 40
$T4 = 48
$T5 = 64
$T6 = 80
$T7 = 96
__$ReturnAddress$ = 144
b$ = 152
key$ = 160
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z PROC	; stbtt__dict_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1232
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
; Line 1233
	xor	edx, edx
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
$LN2@stbtt__dic:
; Line 1234
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	$LN3@stbtt__dic
; Line 1235
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$2[rsp], eax
$LN4@stbtt__dic:
; Line 1236
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
	movzx	eax, al
	cmp	eax, 28
	jl	SHORT $LN5@stbtt__dic
; Line 1237
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ; stbtt__cff_skip_operand
	jmp	SHORT $LN4@stbtt__dic
$LN5@stbtt__dic:
; Line 1238
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR end$3[rsp], eax
; Line 1239
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR op$1[rsp], eax
; Line 1240
	cmp	DWORD PTR op$1[rsp], 12
	jne	SHORT $LN6@stbtt__dic
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	bts	eax, 8
	mov	DWORD PTR op$1[rsp], eax
$LN6@stbtt__dic:
; Line 1241
	mov	eax, DWORD PTR key$[rsp]
	cmp	DWORD PTR op$1[rsp], eax
	jne	SHORT $LN7@stbtt__dic
	mov	eax, DWORD PTR start$2[rsp]
	mov	ecx, DWORD PTR end$3[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$2[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__dic
$LN7@stbtt__dic:
; Line 1242
	jmp	$LN2@stbtt__dic
$LN3@stbtt__dic:
; Line 1243
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__dic:
; Line 1244
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__dict_get@@YA?AUstbtt__buf@@PEAU1@H@Z ENDP	; stbtt__dict_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b0$ = 32
v$ = 36
b$ = 64
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z PROC	; stbtt__cff_skip_operand
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1216
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1217
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ; stbtt__buf_peek8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 1218
	cmp	DWORD PTR b0$[rsp], 28
	jge	SHORT $LN9@stbtt__cff
	mov	r8d, 1218				; 000004c2H
	lea	rdx, OFFSET FLAT:$SG142411
	lea	rcx, OFFSET FLAT:$SG142412
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN9@stbtt__cff:
; Line 1219
	cmp	DWORD PTR b0$[rsp], 30
	jne	SHORT $LN4@stbtt__cff
; Line 1220
	mov	edx, 1
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN2@stbtt__cff:
; Line 1221
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jge	SHORT $LN3@stbtt__cff
; Line 1222
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR v$[rsp], eax
; Line 1223
	mov	eax, DWORD PTR v$[rsp]
	and	eax, 15
	cmp	eax, 15
	je	SHORT $LN7@stbtt__cff
	mov	eax, DWORD PTR v$[rsp]
	sar	eax, 4
	cmp	eax, 15
	jne	SHORT $LN6@stbtt__cff
$LN7@stbtt__cff:
; Line 1224
	jmp	SHORT $LN3@stbtt__cff
$LN6@stbtt__cff:
; Line 1225
	jmp	SHORT $LN2@stbtt__cff
$LN3@stbtt__cff:
; Line 1226
	jmp	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
; Line 1227
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z	; stbtt__cff_int
$LN5@stbtt__cff:
; Line 1229
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__cff_skip_operand@@YAXPEAUstbtt__buf@@@Z ENDP	; stbtt__cff_skip_operand
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b0$ = 32
tv73 = 36
tv83 = 40
b$ = 64
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z PROC		; stbtt__cff_int
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1205
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1206
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR b0$[rsp], eax
; Line 1207
	cmp	DWORD PTR b0$[rsp], 32			; 00000020H
	jl	SHORT $LN2@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 246			; 000000f6H
	jg	SHORT $LN2@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 139				; 0000008bH
	jmp	$LN1@stbtt__cff
	jmp	$LN3@stbtt__cff
$LN2@stbtt__cff:
; Line 1208
	cmp	DWORD PTR b0$[rsp], 247			; 000000f7H
	jl	SHORT $LN4@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 250			; 000000faH
	jg	SHORT $LN4@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 247				; 000000f7H
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv73[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv73[rsp]
	lea	eax, DWORD PTR [rcx+rax+108]
	jmp	$LN1@stbtt__cff
	jmp	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
; Line 1209
	cmp	DWORD PTR b0$[rsp], 251			; 000000fbH
	jl	SHORT $LN6@stbtt__cff
	cmp	DWORD PTR b0$[rsp], 254			; 000000feH
	jg	SHORT $LN6@stbtt__cff
	mov	eax, DWORD PTR b0$[rsp]
	sub	eax, 251				; 000000fbH
	neg	eax
	imul	eax, eax, 256				; 00000100H
	mov	DWORD PTR tv83[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv83[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, 108				; 0000006cH
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN7@stbtt__cff
$LN6@stbtt__cff:
; Line 1210
	cmp	DWORD PTR b0$[rsp], 28
	jne	SHORT $LN8@stbtt__cff
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
	jmp	SHORT $LN9@stbtt__cff
$LN8@stbtt__cff:
; Line 1211
	cmp	DWORD PTR b0$[rsp], 29
	jne	SHORT $LN10@stbtt__cff
	mov	edx, 4
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	jmp	SHORT $LN1@stbtt__cff
$LN10@stbtt__cff:
$LN9@stbtt__cff:
$LN7@stbtt__cff:
$LN5@stbtt__cff:
$LN3@stbtt__cff:
; Line 1212
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN12@stbtt__cff
	mov	r8d, 1212				; 000004bcH
	lea	rdx, OFFSET FLAT:$SG142400
	lea	rcx, OFFSET FLAT:$SG142401
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN12@stbtt__cff:
; Line 1213
	xor	eax, eax
$LN1@stbtt__cff:
; Line 1214
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__cff_int@@YAIPEAUstbtt__buf@@@Z ENDP		; stbtt__cff_int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
offsize$ = 32
count$ = 36
start$ = 40
$T1 = 48
$T2 = 64
__$ReturnAddress$ = 112
b$ = 120
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z PROC	; stbtt__cff_get_index
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1191
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
; Line 1193
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR start$[rsp], eax
; Line 1194
	mov	edx, 2
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	mov	DWORD PTR count$[rsp], eax
; Line 1195
	cmp	DWORD PTR count$[rsp], 0
	je	SHORT $LN2@stbtt__cff
; Line 1196
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	DWORD PTR offsize$[rsp], eax
; Line 1197
	cmp	DWORD PTR offsize$[rsp], 1
	jl	SHORT $LN4@stbtt__cff
	cmp	DWORD PTR offsize$[rsp], 4
	jle	SHORT $LN5@stbtt__cff
$LN4@stbtt__cff:
	mov	r8d, 1197				; 000004adH
	lea	rdx, OFFSET FLAT:$SG142383
	lea	rcx, OFFSET FLAT:$SG142384
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stbtt__cff:
; Line 1198
	mov	eax, DWORD PTR offsize$[rsp]
	imul	eax, DWORD PTR count$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
; Line 1199
	mov	edx, DWORD PTR offsize$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z	; stbtt__buf_get
	dec	eax
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_skip
$LN2@stbtt__cff:
; Line 1201
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR start$[rsp]
	mov	eax, DWORD PTR [rax+8]
	sub	eax, ecx
	mov	r9d, eax
	mov	r8d, DWORD PTR start$[rsp]
	mov	rdx, QWORD PTR b$[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ; stbtt__buf_range
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1202
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__cff_get_index@@YA?AUstbtt__buf@@PEAU1@@Z ENDP	; stbtt__cff_get_index
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
$T1 = 48
__$ReturnAddress$ = 96
b$ = 104
o$ = 112
s$ = 120
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z PROC	; stbtt__buf_range
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1182
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 72					; 00000048H
; Line 1183
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T1[rsp]
	call	?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ; stbtt__new_buf
	lea	rcx, QWORD PTR r$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
; Line 1184
	cmp	DWORD PTR o$[rsp], 0
	jl	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR s$[rsp], 0
	jl	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN3@stbtt__buf
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR o$[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	cmp	DWORD PTR s$[rsp], eax
	jle	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1185
	movsxd	rax, DWORD PTR o$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	add	rax, QWORD PTR [rcx]
	mov	QWORD PTR r$[rsp], rax
; Line 1186
	mov	eax, DWORD PTR s$[rsp]
	mov	DWORD PTR r$[rsp+12], eax
; Line 1187
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
$LN1@stbtt__buf:
; Line 1188
	add	rsp, 72					; 00000048H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__buf_range@@YA?AUstbtt__buf@@PEBU1@HH@Z ENDP	; stbtt__buf_range
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
__$ReturnAddress$ = 80
p$ = 88
size$ = 96
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z PROC		; stbtt__new_buf
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1169
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 1171
	cmp	QWORD PTR size$[rsp], 1073741824	; 40000000H
	jb	SHORT $LN3@stbtt__new
	mov	r8d, 1171				; 00000493H
	lea	rdx, OFFSET FLAT:$SG142362
	lea	rcx, OFFSET FLAT:$SG142363
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN3@stbtt__new:
; Line 1172
	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR r$[rsp], rax
; Line 1173
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR r$[rsp+12], eax
; Line 1174
	mov	DWORD PTR r$[rsp+8], 0
; Line 1175
	lea	rax, QWORD PTR r$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 1176
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?stbtt__new_buf@@YA?AUstbtt__buf@@PEBX_K@Z ENDP		; stbtt__new_buf
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
v$ = 36
tv72 = 40
b$ = 64
n$ = 72
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_get
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1159
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1160
	mov	DWORD PTR v$[rsp], 0
; Line 1162
	cmp	DWORD PTR n$[rsp], 1
	jl	SHORT $LN6@stbtt__buf
	cmp	DWORD PTR n$[rsp], 4
	jle	SHORT $LN7@stbtt__buf
$LN6@stbtt__buf:
	mov	r8d, 1162				; 0000048aH
	lea	rdx, OFFSET FLAT:$SG142351
	lea	rcx, OFFSET FLAT:$SG142352
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN7@stbtt__buf:
; Line 1163
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt__buf
$LN2@stbtt__buf:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt__buf:
	mov	eax, DWORD PTR n$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt__buf
; Line 1164
	mov	eax, DWORD PTR v$[rsp]
	shl	eax, 8
	mov	DWORD PTR tv72[rsp], eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z	; stbtt__buf_get8
	movzx	eax, al
	mov	ecx, DWORD PTR tv72[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR v$[rsp], eax
	jmp	SHORT $LN2@stbtt__buf
$LN3@stbtt__buf:
; Line 1165
	mov	eax, DWORD PTR v$[rsp]
; Line 1166
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__buf_get@@YAIPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_get
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 48
o$ = 56
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_skip
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1154
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1155
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	add	eax, DWORD PTR o$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR b$[rsp]
	call	?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ; stbtt__buf_seek
; Line 1156
	add	rsp, 40					; 00000028H
	ret	0
?stbtt__buf_skip@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_skip
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
b$ = 64
o$ = 72
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z PROC		; stbtt__buf_seek
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1148
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1149
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN3@stbtt__buf
	cmp	DWORD PTR o$[rsp], 0
	jge	SHORT $LN4@stbtt__buf
$LN3@stbtt__buf:
	mov	r8d, 1149				; 0000047dH
	lea	rdx, OFFSET FLAT:$SG142334
	lea	rcx, OFFSET FLAT:$SG142335
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN4@stbtt__buf:
; Line 1150
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	cmp	DWORD PTR o$[rsp], eax
	jg	SHORT $LN5@stbtt__buf
	cmp	DWORD PTR o$[rsp], 0
	jl	SHORT $LN5@stbtt__buf
	mov	eax, DWORD PTR o$[rsp]
	mov	DWORD PTR tv76[rsp], eax
	jmp	SHORT $LN6@stbtt__buf
$LN5@stbtt__buf:
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR tv76[rsp], eax
$LN6@stbtt__buf:
	mov	rax, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	mov	DWORD PTR [rax+8], ecx
; Line 1151
	add	rsp, 56					; 00000038H
	ret	0
?stbtt__buf_seek@@YAXPEAUstbtt__buf@@H@Z ENDP		; stbtt__buf_seek
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
b$ = 8
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_peek8
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1141
	mov	QWORD PTR [rsp+8], rcx
; Line 1142
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1143
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1144
	mov	rax, QWORD PTR b$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
$LN1@stbtt__buf:
; Line 1145
	ret	0
?stbtt__buf_peek8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_peek8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 0
b$ = 32
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z PROC		; stbtt__buf_get8
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1134
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 1135
	mov	rax, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	mov	ecx, DWORD PTR [rcx+12]
	cmp	DWORD PTR [rax+8], ecx
	jl	SHORT $LN2@stbtt__buf
; Line 1136
	xor	al, al
	jmp	SHORT $LN1@stbtt__buf
$LN2@stbtt__buf:
; Line 1137
	mov	rax, QWORD PTR b$[rsp]
	movsxd	rax, DWORD PTR [rax+8]
	mov	rcx, QWORD PTR b$[rsp]
	mov	rcx, QWORD PTR [rcx]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tv75[rsp], al
	mov	rax, QWORD PTR b$[rsp]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR b$[rsp]
	mov	DWORD PTR [rcx+8], eax
	movzx	eax, BYTE PTR tv75[rsp]
$LN1@stbtt__buf:
; Line 1138
	add	rsp, 24
	ret	0
?stbtt__buf_get8@@YAEPEAUstbtt__buf@@@Z ENDP		; stbtt__buf_get8
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
loc$1 = 32
nm$ = 36
i$ = 40
offset$ = 44
count$ = 48
stringOffset$ = 52
fc$ = 56
tv155 = 64
font$ = 96
length$ = 104
platformID$ = 112
encodingID$ = 120
languageID$ = 128
nameID$ = 136
stbtt_GetFontNameString PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4823
$LN8:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4825
	mov	rax, QWORD PTR font$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR fc$[rsp], rax
; Line 4826
	mov	rax, QWORD PTR font$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR offset$[rsp], eax
; Line 4827
	lea	r8, OFFSET FLAT:$SG145208
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR nm$[rsp], eax
; Line 4828
	cmp	DWORD PTR nm$[rsp], 0
	jne	SHORT $LN5@stbtt_GetF
	xor	eax, eax
	jmp	$LN1@stbtt_GetF
$LN5@stbtt_GetF:
; Line 4830
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$[rsp], eax
; Line 4831
	mov	eax, DWORD PTR nm$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	ecx, DWORD PTR nm$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR stringOffset$[rsp], eax
; Line 4832
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_GetF
$LN2@stbtt_GetF:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_GetF:
	mov	eax, DWORD PTR count$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_GetF
; Line 4833
	imul	eax, DWORD PTR i$[rsp], 12
	mov	ecx, DWORD PTR nm$[rsp]
	lea	eax, DWORD PTR [rcx+rax+6]
	mov	DWORD PTR loc$1[rsp], eax
; Line 4835
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR platformID$[rsp], eax
	jne	$LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR encodingID$[rsp], eax
	jne	$LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR languageID$[rsp], eax
	jne	SHORT $LN6@stbtt_GetF
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR nameID$[rsp], eax
	jne	SHORT $LN6@stbtt_GetF
; Line 4836
	mov	eax, DWORD PTR loc$1[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR length$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 4837
	movsxd	rax, DWORD PTR stringOffset$[rsp]
	mov	rcx, QWORD PTR fc$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv155[rsp], rax
	mov	ecx, DWORD PTR loc$1[rsp]
	mov	rdx, QWORD PTR fc$[rsp]
	lea	rcx, QWORD PTR [rdx+rcx+10]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	rcx, QWORD PTR tv155[rsp]
	add	rcx, rax
	mov	rax, rcx
	jmp	SHORT $LN1@stbtt_GetF
$LN6@stbtt_GetF:
; Line 4839
	jmp	$LN2@stbtt_GetF
$LN3@stbtt_GetF:
; Line 4840
	xor	eax, eax
$LN1@stbtt_GetF:
; Line 4841
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetFontNameString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
s1$ = 48
len1$ = 56
s2$ = 64
len2$ = 72
stbtt_CompareUTF8toUTF16_bigendian PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4963
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4964
	mov	r9d, DWORD PTR len2$[rsp]
	mov	r8, QWORD PTR s2$[rsp]
	mov	edx, DWORD PTR len1$[rsp]
	mov	rcx, QWORD PTR s1$[rsp]
	call	?stbtt_CompareUTF8toUTF16_bigendian_internal@@YAHPEADH0H@Z ; stbtt_CompareUTF8toUTF16_bigendian_internal
; Line 4965
	add	rsp, 40					; 00000028H
	ret	0
stbtt_CompareUTF8toUTF16_bigendian ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
fontdata$ = 48
name$ = 56
flags$ = 64
stbtt_FindMatchingFont PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4958
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4959
	mov	r8d, DWORD PTR flags$[rsp]
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	?stbtt_FindMatchingFont_internal@@YAHPEAEPEADH@Z ; stbtt_FindMatchingFont_internal
; Line 4960
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FindMatchingFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale$ = 104
codepoint$ = 112
padding$ = 120
onedge_value$ = 128
pixel_dist_scale$ = 136
width$ = 144
height$ = 152
xoff$ = 160
yoff$ = 168
stbtt_GetCodepointSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4761
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4762
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	vmovss	xmm0, DWORD PTR pixel_dist_scale$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	movzx	ecx, BYTE PTR onedge_value$[rsp]
	mov	BYTE PTR [rsp+32], cl
	mov	r9d, DWORD PTR padding$[rsp]
	mov	r8d, eax
	vmovss	xmm1, DWORD PTR scale$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphSDF
; Line 4763
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$1 = 80
min_dist$2 = 84
t$3 = 88
x0$4 = 92
y0$5 = 96
it$6 = 100
sx$7 = 104
sy$8 = 108
x1$9 = 112
y1$10 = 116
scale_y$ = 120
verts$11 = 128
dist2$12 = 136
scale_x$ = 140
num$13 = 144
ax$14 = 148
ay$15 = 152
x2$16 = 156
y2$17 = 160
px$18 = 164
py$19 = 168
ix0$ = 172
iy0$ = 176
b$20 = 180
j$21 = 184
iy1$ = 188
ix1$ = 192
num_verts$22 = 196
val$23 = 200
y$24 = 204
x$25 = 208
bx$26 = 212
by$27 = 216
a$28 = 220
bx$29 = 224
by$30 = 228
mx$31 = 232
my$32 = 236
a_inv$33 = 240
precompute$34 = 248
dx$35 = 256
dy$36 = 260
w$ = 264
x0$37 = 268
y1$38 = 272
y0$39 = 276
dist$40 = 280
tv193 = 284
dist2$41 = 288
x1$42 = 292
y1$43 = 296
t$44 = 300
dist$45 = 304
tv440 = 308
tv443 = 312
tv444 = 316
tv446 = 320
tv481 = 324
tv482 = 328
tv484 = 332
tv487 = 336
tv488 = 340
tv490 = 344
tv493 = 348
tv494 = 352
c$46 = 356
discriminant$47 = 360
root$48 = 364
h$ = 368
x1$49 = 372
x0$50 = 376
x2$51 = 380
y1$52 = 384
y0$53 = 388
y2$54 = 392
len2$55 = 396
y_gspace$56 = 400
x_gspace$57 = 404
px$58 = 408
py$59 = 412
box_x0$60 = 416
box_x1$61 = 420
box_y0$62 = 424
box_y1$63 = 428
d$64 = 432
c$65 = 436
b$66 = 440
winding$67 = 444
tv141 = 448
x1$68 = 452
data$ = 456
res$69 = 464
__$ArrayPad$ = 480
info$ = 512
scale$ = 520
glyph$ = 528
padding$ = 536
onedge_value$ = 544
pixel_dist_scale$ = 552
width$ = 560
height$ = 568
xoff$ = 576
yoff$ = 584
stbtt_GetGlyphSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4576
$LN83:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 504				; 000001f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 4577
	vmovss	xmm0, DWORD PTR scale$[rsp]
	vmovss	DWORD PTR scale_x$[rsp], xmm0
	vmovss	xmm0, DWORD PTR scale$[rsp]
	vmovss	DWORD PTR scale_y$[rsp], xmm0
; Line 4582
	vmovss	xmm0, DWORD PTR scale$[rsp]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN14@stbtt_GetG
	jne	SHORT $LN14@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN14@stbtt_GetG:
; Line 4584
	lea	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+40], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR scale$[rsp]
	vmovss	xmm2, DWORD PTR scale$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 4587
	mov	eax, DWORD PTR ix1$[rsp]
	cmp	DWORD PTR ix0$[rsp], eax
	je	SHORT $LN16@stbtt_GetG
	mov	eax, DWORD PTR iy1$[rsp]
	cmp	DWORD PTR iy0$[rsp], eax
	jne	SHORT $LN15@stbtt_GetG
$LN16@stbtt_GetG:
; Line 4588
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN15@stbtt_GetG:
; Line 4590
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ix0$[rsp], eax
; Line 4591
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR iy0$[rsp], eax
; Line 4592
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ix1$[rsp], eax
; Line 4593
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR iy1$[rsp], eax
; Line 4595
	mov	eax, DWORD PTR ix0$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR w$[rsp], eax
; Line 4596
	mov	eax, DWORD PTR iy0$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR h$[rsp], eax
; Line 4598
	cmp	QWORD PTR width$[rsp], 0
	je	SHORT $LN17@stbtt_GetG
	mov	rax, QWORD PTR width$[rsp]
	mov	ecx, DWORD PTR w$[rsp]
	mov	DWORD PTR [rax], ecx
$LN17@stbtt_GetG:
; Line 4599
	cmp	QWORD PTR height$[rsp], 0
	je	SHORT $LN18@stbtt_GetG
	mov	rax, QWORD PTR height$[rsp]
	mov	ecx, DWORD PTR h$[rsp]
	mov	DWORD PTR [rax], ecx
$LN18@stbtt_GetG:
; Line 4600
	cmp	QWORD PTR xoff$[rsp], 0
	je	SHORT $LN19@stbtt_GetG
	mov	rax, QWORD PTR xoff$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN19@stbtt_GetG:
; Line 4601
	cmp	QWORD PTR yoff$[rsp], 0
	je	SHORT $LN20@stbtt_GetG
	mov	rax, QWORD PTR yoff$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN20@stbtt_GetG:
; Line 4604
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR scale_y$[rsp], xmm0
; Line 4610
	lea	r8, QWORD PTR verts$11[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$22[rsp], eax
; Line 4611
	mov	eax, DWORD PTR w$[rsp]
	imul	eax, DWORD PTR h$[rsp]
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR data$[rsp], rax
; Line 4612
	movsxd	rax, DWORD PTR num_verts$22[rsp]
	shl	rax, 2
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR precompute$34[rsp], rax
; Line 4614
	mov	DWORD PTR i$1[rsp], 0
	mov	eax, DWORD PTR num_verts$22[rsp]
	dec	eax
	mov	DWORD PTR j$21[rsp], eax
	jmp	SHORT $LN4@stbtt_GetG
$LN2@stbtt_GetG:
	mov	eax, DWORD PTR i$1[rsp]
	mov	DWORD PTR tv141[rsp], eax
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
	mov	eax, DWORD PTR tv141[rsp]
	mov	DWORD PTR j$21[rsp], eax
$LN4@stbtt_GetG:
	mov	eax, DWORD PTR num_verts$22[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN3@stbtt_GetG
; Line 4615
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN21@stbtt_GetG
; Line 4616
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x0$37[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y0$39[rsp], xmm0
; Line 4617
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x1$49[rsp], xmm0
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y1$38[rsp], xmm0
; Line 4618
	vmovss	xmm0, DWORD PTR x1$49[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$37[rsp]
	vmovss	xmm1, DWORD PTR x1$49[rsp]
	vsubss	xmm1, xmm1, DWORD PTR x0$37[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR y1$38[rsp]
	vsubss	xmm1, xmm1, DWORD PTR y0$39[rsp]
	vmovss	xmm2, DWORD PTR y1$38[rsp]
	vsubss	xmm2, xmm2, DWORD PTR y0$39[rsp]
	vmulss	xmm1, xmm1, xmm2
	vaddss	xmm0, xmm0, xmm1
	vcvtss2sd xmm0, xmm0, xmm0
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR dist$40[rsp], xmm0
; Line 4619
	vmovss	xmm0, DWORD PTR dist$40[rsp]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN53@stbtt_GetG
	jne	SHORT $LN53@stbtt_GetG
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR tv193[rsp], xmm0
	jmp	SHORT $LN54@stbtt_GetG
$LN53@stbtt_GetG:
	vmovss	xmm0, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm0, DWORD PTR dist$40[rsp]
	vmovss	DWORD PTR tv193[rsp], xmm0
$LN54@stbtt_GetG:
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	vmovss	xmm0, DWORD PTR tv193[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
	jmp	$LN22@stbtt_GetG
$LN21@stbtt_GetG:
; Line 4620
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN23@stbtt_GetG
; Line 4621
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x2$51[rsp], xmm0
	movsxd	rax, DWORD PTR j$21[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y2$54[rsp], xmm0
; Line 4622
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x1$68[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y1$52[rsp], xmm0
; Line 4623
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x0$50[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y0$53[rsp], xmm0
; Line 4624
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR x1$68[rsp]
	vmovss	xmm1, DWORD PTR x0$50[rsp]
	vsubss	xmm0, xmm1, xmm0
	vaddss	xmm0, xmm0, DWORD PTR x2$51[rsp]
	vmovss	DWORD PTR bx$26[rsp], xmm0
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR y1$52[rsp]
	vmovss	xmm1, DWORD PTR y0$53[rsp]
	vsubss	xmm0, xmm1, xmm0
	vaddss	xmm0, xmm0, DWORD PTR y2$54[rsp]
	vmovss	DWORD PTR by$27[rsp], xmm0
; Line 4625
	vmovss	xmm0, DWORD PTR bx$26[rsp]
	vmulss	xmm0, xmm0, DWORD PTR bx$26[rsp]
	vmovss	xmm1, DWORD PTR by$27[rsp]
	vmulss	xmm1, xmm1, DWORD PTR by$27[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR len2$55[rsp], xmm0
; Line 4626
	vmovss	xmm0, DWORD PTR len2$55[rsp]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN82@stbtt_GetG
	je	SHORT $LN25@stbtt_GetG
$LN82@stbtt_GetG:
; Line 4627
	vmovss	xmm0, DWORD PTR bx$26[rsp]
	vmulss	xmm0, xmm0, DWORD PTR bx$26[rsp]
	vmovss	xmm1, DWORD PTR by$27[rsp]
	vmulss	xmm1, xmm1, DWORD PTR by$27[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	vmovss	DWORD PTR [rcx+rax*4], xmm0
	jmp	SHORT $LN26@stbtt_GetG
$LN25@stbtt_GetG:
; Line 4629
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rcx+rax*4], xmm0
$LN26@stbtt_GetG:
; Line 4630
	jmp	SHORT $LN24@stbtt_GetG
$LN23@stbtt_GetG:
; Line 4631
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rcx+rax*4], xmm0
$LN24@stbtt_GetG:
$LN22@stbtt_GetG:
; Line 4632
	jmp	$LN2@stbtt_GetG
$LN3@stbtt_GetG:
; Line 4634
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR y$24[rsp], eax
	jmp	SHORT $LN7@stbtt_GetG
$LN5@stbtt_GetG:
	mov	eax, DWORD PTR y$24[rsp]
	inc	eax
	mov	DWORD PTR y$24[rsp], eax
$LN7@stbtt_GetG:
	mov	eax, DWORD PTR iy1$[rsp]
	cmp	DWORD PTR y$24[rsp], eax
	jge	$LN6@stbtt_GetG
; Line 4635
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR x$25[rsp], eax
	jmp	SHORT $LN10@stbtt_GetG
$LN8@stbtt_GetG:
	mov	eax, DWORD PTR x$25[rsp]
	inc	eax
	mov	DWORD PTR x$25[rsp], eax
$LN10@stbtt_GetG:
	mov	eax, DWORD PTR ix1$[rsp]
	cmp	DWORD PTR x$25[rsp], eax
	jge	$LN9@stbtt_GetG
; Line 4637
	vmovss	xmm0, DWORD PTR __real@497423f0
	vmovss	DWORD PTR min_dist$2[rsp], xmm0
; Line 4638
	vcvtsi2ss xmm0, xmm0, DWORD PTR x$25[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR sx$7[rsp], xmm0
; Line 4639
	vcvtsi2ss xmm0, xmm0, DWORD PTR y$24[rsp]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR sy$8[rsp], xmm0
; Line 4640
	vmovss	xmm0, DWORD PTR sx$7[rsp]
	vdivss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x_gspace$57[rsp], xmm0
; Line 4641
	vmovss	xmm0, DWORD PTR sy$8[rsp]
	vdivss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y_gspace$56[rsp], xmm0
; Line 4643
	mov	r9, QWORD PTR verts$11[rsp]
	mov	r8d, DWORD PTR num_verts$22[rsp]
	vmovss	xmm1, DWORD PTR y_gspace$56[rsp]
	vmovss	xmm0, DWORD PTR x_gspace$57[rsp]
	call	?stbtt__compute_crossings_x@@YAHMMHPEAUstbtt_vertex@@@Z ; stbtt__compute_crossings_x
	mov	DWORD PTR winding$67[rsp], eax
; Line 4645
	mov	DWORD PTR i$1[rsp], 0
	jmp	SHORT $LN13@stbtt_GetG
$LN11@stbtt_GetG:
	mov	eax, DWORD PTR i$1[rsp]
	inc	eax
	mov	DWORD PTR i$1[rsp], eax
$LN13@stbtt_GetG:
	mov	eax, DWORD PTR num_verts$22[rsp]
	cmp	DWORD PTR i$1[rsp], eax
	jge	$LN12@stbtt_GetG
; Line 4646
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x0$4[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y0$5[rsp], xmm0
; Line 4648
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 2
	jne	$LN27@stbtt_GetG
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*4]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN81@stbtt_GetG
	je	$LN27@stbtt_GetG
$LN81@stbtt_GetG:
; Line 4649
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x1$42[rsp], xmm0
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y1$43[rsp], xmm0
; Line 4651
	vmovss	xmm0, DWORD PTR x0$4[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sx$7[rsp]
	vmovss	xmm1, DWORD PTR x0$4[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sx$7[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR y0$5[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sy$8[rsp]
	vmovss	xmm2, DWORD PTR y0$5[rsp]
	vsubss	xmm2, xmm2, DWORD PTR sy$8[rsp]
	vmulss	xmm1, xmm1, xmm2
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR dist2$41[rsp], xmm0
; Line 4652
	vmovss	xmm0, DWORD PTR min_dist$2[rsp]
	vmulss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vcomiss	xmm0, DWORD PTR dist2$41[rsp]
	jbe	SHORT $LN29@stbtt_GetG
; Line 4653
	vcvtss2sd xmm0, xmm0, DWORD PTR dist2$41[rsp]
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR min_dist$2[rsp], xmm0
$LN29@stbtt_GetG:
; Line 4658
	vmovss	xmm0, DWORD PTR x1$42[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$4[rsp]
	vmovss	xmm1, DWORD PTR y0$5[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sy$8[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR y1$43[rsp]
	vsubss	xmm1, xmm1, DWORD PTR y0$5[rsp]
	vmovss	xmm2, DWORD PTR x0$4[rsp]
	vsubss	xmm2, xmm2, DWORD PTR sx$7[rsp]
	vmulss	xmm1, xmm1, xmm2
	vsubss	xmm0, xmm0, xmm1
	vcvtss2sd xmm0, xmm0, xmm0
	call	fabs
	vcvtsd2ss xmm0, xmm0, xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	vmulss	xmm0, xmm0, DWORD PTR [rcx+rax*4]
	vmovss	DWORD PTR dist$45[rsp], xmm0
; Line 4659
	cmp	DWORD PTR i$1[rsp], 0
	jne	SHORT $LN55@stbtt_GetG
	mov	r8d, 4659				; 00001233H
	lea	rdx, OFFSET FLAT:$SG145106
	lea	rcx, OFFSET FLAT:$SG145107
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN55@stbtt_GetG:
; Line 4660
	vmovss	xmm0, DWORD PTR min_dist$2[rsp]
	vcomiss	xmm0, DWORD PTR dist$45[rsp]
	jbe	$LN30@stbtt_GetG
; Line 4664
	vmovss	xmm0, DWORD PTR x1$42[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$4[rsp]
	vmovss	DWORD PTR dx$35[rsp], xmm0
	vmovss	xmm0, DWORD PTR y1$43[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y0$5[rsp]
	vmovss	DWORD PTR dy$36[rsp], xmm0
; Line 4665
	vmovss	xmm0, DWORD PTR x0$4[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sx$7[rsp]
	vmovss	DWORD PTR px$58[rsp], xmm0
	vmovss	xmm0, DWORD PTR y0$5[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sy$8[rsp]
	vmovss	DWORD PTR py$59[rsp], xmm0
; Line 4668
	vmovss	xmm0, DWORD PTR px$58[rsp]
	vmulss	xmm0, xmm0, DWORD PTR dx$35[rsp]
	vmovss	xmm1, DWORD PTR py$59[rsp]
	vmulss	xmm1, xmm1, DWORD PTR dy$36[rsp]
	vaddss	xmm0, xmm0, xmm1
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	xmm1, DWORD PTR dx$35[rsp]
	vmulss	xmm1, xmm1, DWORD PTR dx$35[rsp]
	vmovss	xmm2, DWORD PTR dy$36[rsp]
	vmulss	xmm2, xmm2, DWORD PTR dy$36[rsp]
	vaddss	xmm1, xmm1, xmm2
	vdivss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR t$44[rsp], xmm0
; Line 4669
	vmovss	xmm0, DWORD PTR t$44[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jb	SHORT $LN31@stbtt_GetG
	vmovss	xmm0, DWORD PTR __real@3f800000
	vcomiss	xmm0, DWORD PTR t$44[rsp]
	jb	SHORT $LN31@stbtt_GetG
; Line 4670
	vmovss	xmm0, DWORD PTR dist$45[rsp]
	vmovss	DWORD PTR min_dist$2[rsp], xmm0
$LN31@stbtt_GetG:
$LN30@stbtt_GetG:
; Line 4671
	jmp	$LN28@stbtt_GetG
$LN27@stbtt_GetG:
; Line 4672
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movzx	eax, BYTE PTR [rcx+rax+12]
	cmp	eax, 3
	jne	$LN32@stbtt_GetG
; Line 4673
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x2$16[rsp], xmm0
	mov	eax, DWORD PTR i$1[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y2$17[rsp], xmm0
; Line 4674
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+4]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR x1$9[rsp], xmm0
	movsxd	rax, DWORD PTR i$1[rsp]
	imul	rax, rax, 14
	mov	rcx, QWORD PTR verts$11[rsp]
	movsx	eax, WORD PTR [rcx+rax+6]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR y1$10[rsp], xmm0
; Line 4675
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vcomiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN56@stbtt_GetG
	vmovss	xmm0, DWORD PTR x0$4[rsp]
	vmovss	DWORD PTR tv440[rsp], xmm0
	jmp	SHORT $LN57@stbtt_GetG
$LN56@stbtt_GetG:
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vmovss	DWORD PTR tv440[rsp], xmm0
$LN57@stbtt_GetG:
	vmovss	xmm0, DWORD PTR x2$16[rsp]
	vcomiss	xmm0, DWORD PTR tv440[rsp]
	jbe	SHORT $LN60@stbtt_GetG
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vcomiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN58@stbtt_GetG
	vmovss	xmm0, DWORD PTR x0$4[rsp]
	vmovss	DWORD PTR tv443[rsp], xmm0
	jmp	SHORT $LN59@stbtt_GetG
$LN58@stbtt_GetG:
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vmovss	DWORD PTR tv443[rsp], xmm0
$LN59@stbtt_GetG:
	vmovss	xmm0, DWORD PTR tv443[rsp]
	vmovss	DWORD PTR tv444[rsp], xmm0
	jmp	SHORT $LN61@stbtt_GetG
$LN60@stbtt_GetG:
	vmovss	xmm0, DWORD PTR x2$16[rsp]
	vmovss	DWORD PTR tv444[rsp], xmm0
$LN61@stbtt_GetG:
	vmovss	xmm0, DWORD PTR tv444[rsp]
	vmovss	DWORD PTR box_x0$60[rsp], xmm0
; Line 4676
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vcomiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN62@stbtt_GetG
	vmovss	xmm0, DWORD PTR y0$5[rsp]
	vmovss	DWORD PTR tv446[rsp], xmm0
	jmp	SHORT $LN63@stbtt_GetG
$LN62@stbtt_GetG:
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vmovss	DWORD PTR tv446[rsp], xmm0
$LN63@stbtt_GetG:
	vmovss	xmm0, DWORD PTR y2$17[rsp]
	vcomiss	xmm0, DWORD PTR tv446[rsp]
	jbe	SHORT $LN66@stbtt_GetG
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vcomiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN64@stbtt_GetG
	vmovss	xmm0, DWORD PTR y0$5[rsp]
	vmovss	DWORD PTR tv481[rsp], xmm0
	jmp	SHORT $LN65@stbtt_GetG
$LN64@stbtt_GetG:
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vmovss	DWORD PTR tv481[rsp], xmm0
$LN65@stbtt_GetG:
	vmovss	xmm0, DWORD PTR tv481[rsp]
	vmovss	DWORD PTR tv482[rsp], xmm0
	jmp	SHORT $LN67@stbtt_GetG
$LN66@stbtt_GetG:
	vmovss	xmm0, DWORD PTR y2$17[rsp]
	vmovss	DWORD PTR tv482[rsp], xmm0
$LN67@stbtt_GetG:
	vmovss	xmm0, DWORD PTR tv482[rsp]
	vmovss	DWORD PTR box_y0$62[rsp], xmm0
; Line 4677
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vcomiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN68@stbtt_GetG
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vmovss	DWORD PTR tv484[rsp], xmm0
	jmp	SHORT $LN69@stbtt_GetG
$LN68@stbtt_GetG:
	vmovss	xmm0, DWORD PTR x0$4[rsp]
	vmovss	DWORD PTR tv484[rsp], xmm0
$LN69@stbtt_GetG:
	vmovss	xmm0, DWORD PTR x2$16[rsp]
	vcomiss	xmm0, DWORD PTR tv484[rsp]
	jbe	SHORT $LN72@stbtt_GetG
	vmovss	xmm0, DWORD PTR x2$16[rsp]
	vmovss	DWORD PTR tv488[rsp], xmm0
	jmp	SHORT $LN73@stbtt_GetG
$LN72@stbtt_GetG:
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vcomiss	xmm0, DWORD PTR x0$4[rsp]
	jbe	SHORT $LN70@stbtt_GetG
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vmovss	DWORD PTR tv487[rsp], xmm0
	jmp	SHORT $LN71@stbtt_GetG
$LN70@stbtt_GetG:
	vmovss	xmm0, DWORD PTR x0$4[rsp]
	vmovss	DWORD PTR tv487[rsp], xmm0
$LN71@stbtt_GetG:
	vmovss	xmm0, DWORD PTR tv487[rsp]
	vmovss	DWORD PTR tv488[rsp], xmm0
$LN73@stbtt_GetG:
	vmovss	xmm0, DWORD PTR tv488[rsp]
	vmovss	DWORD PTR box_x1$61[rsp], xmm0
; Line 4678
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vcomiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN74@stbtt_GetG
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vmovss	DWORD PTR tv490[rsp], xmm0
	jmp	SHORT $LN75@stbtt_GetG
$LN74@stbtt_GetG:
	vmovss	xmm0, DWORD PTR y0$5[rsp]
	vmovss	DWORD PTR tv490[rsp], xmm0
$LN75@stbtt_GetG:
	vmovss	xmm0, DWORD PTR y2$17[rsp]
	vcomiss	xmm0, DWORD PTR tv490[rsp]
	jbe	SHORT $LN78@stbtt_GetG
	vmovss	xmm0, DWORD PTR y2$17[rsp]
	vmovss	DWORD PTR tv494[rsp], xmm0
	jmp	SHORT $LN79@stbtt_GetG
$LN78@stbtt_GetG:
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vcomiss	xmm0, DWORD PTR y0$5[rsp]
	jbe	SHORT $LN76@stbtt_GetG
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vmovss	DWORD PTR tv493[rsp], xmm0
	jmp	SHORT $LN77@stbtt_GetG
$LN76@stbtt_GetG:
	vmovss	xmm0, DWORD PTR y0$5[rsp]
	vmovss	DWORD PTR tv493[rsp], xmm0
$LN77@stbtt_GetG:
	vmovss	xmm0, DWORD PTR tv493[rsp]
	vmovss	DWORD PTR tv494[rsp], xmm0
$LN79@stbtt_GetG:
	vmovss	xmm0, DWORD PTR tv494[rsp]
	vmovss	DWORD PTR box_y1$63[rsp], xmm0
; Line 4680
	vmovss	xmm0, DWORD PTR box_x0$60[rsp]
	vsubss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vmovss	xmm1, DWORD PTR sx$7[rsp]
	vcomiss	xmm1, xmm0
	jbe	$LN33@stbtt_GetG
	vmovss	xmm0, DWORD PTR box_x1$61[rsp]
	vaddss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vcomiss	xmm0, DWORD PTR sx$7[rsp]
	jbe	$LN33@stbtt_GetG
	vmovss	xmm0, DWORD PTR box_y0$62[rsp]
	vsubss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vmovss	xmm1, DWORD PTR sy$8[rsp]
	vcomiss	xmm1, xmm0
	jbe	$LN33@stbtt_GetG
	vmovss	xmm0, DWORD PTR box_y1$63[rsp]
	vaddss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vcomiss	xmm0, DWORD PTR sy$8[rsp]
	jbe	$LN33@stbtt_GetG
; Line 4681
	mov	DWORD PTR num$13[rsp], 0
; Line 4682
	vmovss	xmm0, DWORD PTR x1$9[rsp]
	vsubss	xmm0, xmm0, DWORD PTR x0$4[rsp]
	vmovss	DWORD PTR ax$14[rsp], xmm0
	vmovss	xmm0, DWORD PTR y1$10[rsp]
	vsubss	xmm0, xmm0, DWORD PTR y0$5[rsp]
	vmovss	DWORD PTR ay$15[rsp], xmm0
; Line 4683
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR x1$9[rsp]
	vmovss	xmm1, DWORD PTR x0$4[rsp]
	vsubss	xmm0, xmm1, xmm0
	vaddss	xmm0, xmm0, DWORD PTR x2$16[rsp]
	vmovss	DWORD PTR bx$29[rsp], xmm0
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR y1$10[rsp]
	vmovss	xmm1, DWORD PTR y0$5[rsp]
	vsubss	xmm0, xmm1, xmm0
	vaddss	xmm0, xmm0, DWORD PTR y2$17[rsp]
	vmovss	DWORD PTR by$30[rsp], xmm0
; Line 4684
	vmovss	xmm0, DWORD PTR x0$4[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sx$7[rsp]
	vmovss	DWORD PTR mx$31[rsp], xmm0
	vmovss	xmm0, DWORD PTR y0$5[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sy$8[rsp]
	vmovss	DWORD PTR my$32[rsp], xmm0
; Line 4685
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR res$69[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR res$69[rsp+4], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR res$69[rsp+8], xmm0
; Line 4687
	movsxd	rax, DWORD PTR i$1[rsp]
	mov	rcx, QWORD PTR precompute$34[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax*4]
	vmovss	DWORD PTR a_inv$33[rsp], xmm0
; Line 4688
	vcvtss2sd xmm0, xmm0, DWORD PTR a_inv$33[rsp]
	vucomisd xmm0, QWORD PTR __real@0000000000000000
	jp	$LN34@stbtt_GetG
	jne	$LN34@stbtt_GetG
; Line 4689
	vmovss	xmm0, DWORD PTR ax$14[rsp]
	vmulss	xmm0, xmm0, DWORD PTR bx$29[rsp]
	vmovss	xmm1, DWORD PTR ay$15[rsp]
	vmulss	xmm1, xmm1, DWORD PTR by$30[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@40400000
	vmulss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR a$28[rsp], xmm0
; Line 4690
	vmovss	xmm0, DWORD PTR ax$14[rsp]
	vmulss	xmm0, xmm0, DWORD PTR ax$14[rsp]
	vmovss	xmm1, DWORD PTR ay$15[rsp]
	vmulss	xmm1, xmm1, DWORD PTR ay$15[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR mx$31[rsp]
	vmulss	xmm1, xmm1, DWORD PTR bx$29[rsp]
	vmovss	xmm2, DWORD PTR my$32[rsp]
	vmulss	xmm2, xmm2, DWORD PTR by$30[rsp]
	vaddss	xmm1, xmm1, xmm2
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR b$20[rsp], xmm0
; Line 4691
	vmovss	xmm0, DWORD PTR mx$31[rsp]
	vmulss	xmm0, xmm0, DWORD PTR ax$14[rsp]
	vmovss	xmm1, DWORD PTR my$32[rsp]
	vmulss	xmm1, xmm1, DWORD PTR ay$15[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR c$46[rsp], xmm0
; Line 4692
	vcvtss2sd xmm0, xmm0, DWORD PTR a$28[rsp]
	vucomisd xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN36@stbtt_GetG
	jne	SHORT $LN36@stbtt_GetG
; Line 4693
	vcvtss2sd xmm0, xmm0, DWORD PTR b$20[rsp]
	vucomisd xmm0, QWORD PTR __real@0000000000000000
	jp	SHORT $LN80@stbtt_GetG
	je	SHORT $LN38@stbtt_GetG
$LN80@stbtt_GetG:
; Line 4694
	vmovss	xmm0, DWORD PTR c$46[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vdivss	xmm0, xmm0, DWORD PTR b$20[rsp]
	movsxd	rax, DWORD PTR num$13[rsp]
	vmovss	DWORD PTR res$69[rsp+rax*4], xmm0
	mov	eax, DWORD PTR num$13[rsp]
	inc	eax
	mov	DWORD PTR num$13[rsp], eax
$LN38@stbtt_GetG:
; Line 4696
	jmp	$LN37@stbtt_GetG
$LN36@stbtt_GetG:
; Line 4697
	vmovss	xmm0, DWORD PTR b$20[rsp]
	vmulss	xmm0, xmm0, DWORD PTR b$20[rsp]
	vmovss	xmm1, DWORD PTR __real@40800000
	vmulss	xmm1, xmm1, DWORD PTR a$28[rsp]
	vmulss	xmm1, xmm1, DWORD PTR c$46[rsp]
	vsubss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR discriminant$47[rsp], xmm0
; Line 4698
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR discriminant$47[rsp]
	jbe	SHORT $LN39@stbtt_GetG
; Line 4699
	mov	DWORD PTR num$13[rsp], 0
	jmp	$LN40@stbtt_GetG
$LN39@stbtt_GetG:
; Line 4701
	vcvtss2sd xmm0, xmm0, DWORD PTR discriminant$47[rsp]
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR root$48[rsp], xmm0
; Line 4702
	vmovss	xmm0, DWORD PTR b$20[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vsubss	xmm0, xmm0, DWORD PTR root$48[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm1, xmm1, DWORD PTR a$28[rsp]
	vdivss	xmm0, xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	DWORD PTR res$69[rsp+rax], xmm0
; Line 4703
	vmovss	xmm0, DWORD PTR b$20[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vaddss	xmm0, xmm0, DWORD PTR root$48[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm1, xmm1, DWORD PTR a$28[rsp]
	vdivss	xmm0, xmm0, xmm1
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	DWORD PTR res$69[rsp+rax], xmm0
; Line 4704
	mov	DWORD PTR num$13[rsp], 2
$LN40@stbtt_GetG:
$LN37@stbtt_GetG:
; Line 4707
	jmp	$LN35@stbtt_GetG
$LN34@stbtt_GetG:
; Line 4708
	vmovss	xmm0, DWORD PTR ax$14[rsp]
	vmulss	xmm0, xmm0, DWORD PTR bx$29[rsp]
	vmovss	xmm1, DWORD PTR ay$15[rsp]
	vmulss	xmm1, xmm1, DWORD PTR by$30[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@40400000
	vmulss	xmm0, xmm1, xmm0
	vmulss	xmm0, xmm0, DWORD PTR a_inv$33[rsp]
	vmovss	DWORD PTR b$66[rsp], xmm0
; Line 4709
	vmovss	xmm0, DWORD PTR ax$14[rsp]
	vmulss	xmm0, xmm0, DWORD PTR ax$14[rsp]
	vmovss	xmm1, DWORD PTR ay$15[rsp]
	vmulss	xmm1, xmm1, DWORD PTR ay$15[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm0, xmm1, xmm0
	vmovss	xmm1, DWORD PTR mx$31[rsp]
	vmulss	xmm1, xmm1, DWORD PTR bx$29[rsp]
	vmovss	xmm2, DWORD PTR my$32[rsp]
	vmulss	xmm2, xmm2, DWORD PTR by$30[rsp]
	vaddss	xmm1, xmm1, xmm2
	vaddss	xmm0, xmm0, xmm1
	vmulss	xmm0, xmm0, DWORD PTR a_inv$33[rsp]
	vmovss	DWORD PTR c$65[rsp], xmm0
; Line 4710
	vmovss	xmm0, DWORD PTR mx$31[rsp]
	vmulss	xmm0, xmm0, DWORD PTR ax$14[rsp]
	vmovss	xmm1, DWORD PTR my$32[rsp]
	vmulss	xmm1, xmm1, DWORD PTR ay$15[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmulss	xmm0, xmm0, DWORD PTR a_inv$33[rsp]
	vmovss	DWORD PTR d$64[rsp], xmm0
; Line 4711
	lea	r9, QWORD PTR res$69[rsp]
	vmovss	xmm2, DWORD PTR d$64[rsp]
	vmovss	xmm1, DWORD PTR c$65[rsp]
	vmovss	xmm0, DWORD PTR b$66[rsp]
	call	?stbtt__solve_cubic@@YAHMMMPEAM@Z	; stbtt__solve_cubic
	mov	DWORD PTR num$13[rsp], eax
$LN35@stbtt_GetG:
; Line 4713
	vmovss	xmm0, DWORD PTR x0$4[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sx$7[rsp]
	vmovss	xmm1, DWORD PTR x0$4[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sx$7[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR y0$5[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sy$8[rsp]
	vmovss	xmm2, DWORD PTR y0$5[rsp]
	vsubss	xmm2, xmm2, DWORD PTR sy$8[rsp]
	vmulss	xmm1, xmm1, xmm2
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR dist2$12[rsp], xmm0
; Line 4714
	vmovss	xmm0, DWORD PTR min_dist$2[rsp]
	vmulss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vcomiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN41@stbtt_GetG
; Line 4715
	vcvtss2sd xmm0, xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR min_dist$2[rsp], xmm0
$LN41@stbtt_GetG:
; Line 4717
	cmp	DWORD PTR num$13[rsp], 1
	jl	$LN42@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR res$69[rsp+rax]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jb	$LN42@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vcomiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN42@stbtt_GetG
; Line 4718
	mov	eax, 4
	imul	rax, rax, 0
	vmovss	xmm0, DWORD PTR res$69[rsp+rax]
	vmovss	DWORD PTR t$3[rsp], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vsubss	xmm0, xmm0, DWORD PTR t$3[rsp]
	vmovss	DWORD PTR it$6[rsp], xmm0
; Line 4719
	vmovss	xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR x0$4[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR it$6[rsp]
	vmulss	xmm1, xmm1, DWORD PTR x1$9[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR x2$16[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR px$18[rsp], xmm0
; Line 4720
	vmovss	xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR y0$5[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR it$6[rsp]
	vmulss	xmm1, xmm1, DWORD PTR y1$10[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR y2$17[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR py$19[rsp], xmm0
; Line 4721
	vmovss	xmm0, DWORD PTR px$18[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sx$7[rsp]
	vmovss	xmm1, DWORD PTR px$18[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sx$7[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR py$19[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sy$8[rsp]
	vmovss	xmm2, DWORD PTR py$19[rsp]
	vsubss	xmm2, xmm2, DWORD PTR sy$8[rsp]
	vmulss	xmm1, xmm1, xmm2
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR dist2$12[rsp], xmm0
; Line 4722
	vmovss	xmm0, DWORD PTR min_dist$2[rsp]
	vmulss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vcomiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN43@stbtt_GetG
; Line 4723
	vcvtss2sd xmm0, xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR min_dist$2[rsp], xmm0
$LN43@stbtt_GetG:
$LN42@stbtt_GetG:
; Line 4725
	cmp	DWORD PTR num$13[rsp], 2
	jl	$LN44@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	xmm0, DWORD PTR res$69[rsp+rax]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jb	$LN44@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	xmm0, DWORD PTR __real@3f800000
	vcomiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN44@stbtt_GetG
; Line 4726
	mov	eax, 4
	imul	rax, rax, 1
	vmovss	xmm0, DWORD PTR res$69[rsp+rax]
	vmovss	DWORD PTR t$3[rsp], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vsubss	xmm0, xmm0, DWORD PTR t$3[rsp]
	vmovss	DWORD PTR it$6[rsp], xmm0
; Line 4727
	vmovss	xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR x0$4[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR it$6[rsp]
	vmulss	xmm1, xmm1, DWORD PTR x1$9[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR x2$16[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR px$18[rsp], xmm0
; Line 4728
	vmovss	xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR y0$5[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR it$6[rsp]
	vmulss	xmm1, xmm1, DWORD PTR y1$10[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR y2$17[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR py$19[rsp], xmm0
; Line 4729
	vmovss	xmm0, DWORD PTR px$18[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sx$7[rsp]
	vmovss	xmm1, DWORD PTR px$18[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sx$7[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR py$19[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sy$8[rsp]
	vmovss	xmm2, DWORD PTR py$19[rsp]
	vsubss	xmm2, xmm2, DWORD PTR sy$8[rsp]
	vmulss	xmm1, xmm1, xmm2
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR dist2$12[rsp], xmm0
; Line 4730
	vmovss	xmm0, DWORD PTR min_dist$2[rsp]
	vmulss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vcomiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN45@stbtt_GetG
; Line 4731
	vcvtss2sd xmm0, xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR min_dist$2[rsp], xmm0
$LN45@stbtt_GetG:
$LN44@stbtt_GetG:
; Line 4733
	cmp	DWORD PTR num$13[rsp], 3
	jl	$LN46@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 2
	vmovss	xmm0, DWORD PTR res$69[rsp+rax]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jb	$LN46@stbtt_GetG
	mov	eax, 4
	imul	rax, rax, 2
	vmovss	xmm0, DWORD PTR __real@3f800000
	vcomiss	xmm0, DWORD PTR res$69[rsp+rax]
	jb	$LN46@stbtt_GetG
; Line 4734
	mov	eax, 4
	imul	rax, rax, 2
	vmovss	xmm0, DWORD PTR res$69[rsp+rax]
	vmovss	DWORD PTR t$3[rsp], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vsubss	xmm0, xmm0, DWORD PTR t$3[rsp]
	vmovss	DWORD PTR it$6[rsp], xmm0
; Line 4735
	vmovss	xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR x0$4[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR it$6[rsp]
	vmulss	xmm1, xmm1, DWORD PTR x1$9[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR x2$16[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR px$18[rsp], xmm0
; Line 4736
	vmovss	xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR it$6[rsp]
	vmulss	xmm0, xmm0, DWORD PTR y0$5[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR it$6[rsp]
	vmulss	xmm1, xmm1, DWORD PTR y1$10[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR t$3[rsp]
	vmulss	xmm1, xmm1, DWORD PTR y2$17[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR py$19[rsp], xmm0
; Line 4737
	vmovss	xmm0, DWORD PTR px$18[rsp]
	vsubss	xmm0, xmm0, DWORD PTR sx$7[rsp]
	vmovss	xmm1, DWORD PTR px$18[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sx$7[rsp]
	vmulss	xmm0, xmm0, xmm1
	vmovss	xmm1, DWORD PTR py$19[rsp]
	vsubss	xmm1, xmm1, DWORD PTR sy$8[rsp]
	vmovss	xmm2, DWORD PTR py$19[rsp]
	vsubss	xmm2, xmm2, DWORD PTR sy$8[rsp]
	vmulss	xmm1, xmm1, xmm2
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR dist2$12[rsp], xmm0
; Line 4738
	vmovss	xmm0, DWORD PTR min_dist$2[rsp]
	vmulss	xmm0, xmm0, DWORD PTR min_dist$2[rsp]
	vcomiss	xmm0, DWORD PTR dist2$12[rsp]
	jbe	SHORT $LN47@stbtt_GetG
; Line 4739
	vcvtss2sd xmm0, xmm0, DWORD PTR dist2$12[rsp]
	call	sqrt
	vcvtsd2ss xmm0, xmm0, xmm0
	vmovss	DWORD PTR min_dist$2[rsp], xmm0
$LN47@stbtt_GetG:
$LN46@stbtt_GetG:
$LN33@stbtt_GetG:
$LN32@stbtt_GetG:
$LN28@stbtt_GetG:
; Line 4743
	jmp	$LN11@stbtt_GetG
$LN12@stbtt_GetG:
; Line 4744
	cmp	DWORD PTR winding$67[rsp], 0
	jne	SHORT $LN48@stbtt_GetG
; Line 4745
	vmovss	xmm0, DWORD PTR min_dist$2[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR min_dist$2[rsp], xmm0
$LN48@stbtt_GetG:
; Line 4746
	movzx	eax, BYTE PTR onedge_value$[rsp]
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	xmm1, DWORD PTR pixel_dist_scale$[rsp]
	vmulss	xmm1, xmm1, DWORD PTR min_dist$2[rsp]
	vaddss	xmm0, xmm0, xmm1
	vmovss	DWORD PTR val$23[rsp], xmm0
; Line 4747
	vxorps	xmm0, xmm0, xmm0
	vcomiss	xmm0, DWORD PTR val$23[rsp]
	jbe	SHORT $LN49@stbtt_GetG
; Line 4748
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR val$23[rsp], xmm0
	jmp	SHORT $LN50@stbtt_GetG
$LN49@stbtt_GetG:
; Line 4749
	vmovss	xmm0, DWORD PTR val$23[rsp]
	vcomiss	xmm0, DWORD PTR __real@437f0000
	jbe	SHORT $LN51@stbtt_GetG
; Line 4750
	vmovss	xmm0, DWORD PTR __real@437f0000
	vmovss	DWORD PTR val$23[rsp], xmm0
$LN51@stbtt_GetG:
$LN50@stbtt_GetG:
; Line 4751
	vcvttss2si eax, DWORD PTR val$23[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	edx, DWORD PTR y$24[rsp]
	sub	edx, ecx
	mov	ecx, edx
	imul	ecx, DWORD PTR w$[rsp]
	mov	edx, DWORD PTR ix0$[rsp]
	mov	r8d, DWORD PTR x$25[rsp]
	sub	r8d, edx
	mov	edx, r8d
	add	ecx, edx
	movsxd	rcx, ecx
	mov	rdx, QWORD PTR data$[rsp]
	mov	BYTE PTR [rdx+rcx], al
; Line 4752
	jmp	$LN8@stbtt_GetG
$LN9@stbtt_GetG:
; Line 4753
	jmp	$LN5@stbtt_GetG
$LN6@stbtt_GetG:
; Line 4754
	mov	rcx, QWORD PTR precompute$34[rsp]
	call	QWORD PTR __imp_free
; Line 4755
	mov	rcx, QWORD PTR verts$11[rsp]
	call	QWORD PTR __imp_free
; Line 4757
	mov	rax, QWORD PTR data$[rsp]
$LN1@stbtt_GetG:
; Line 4758
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 504				; 000001f8H
	ret	0
stbtt_GetGlyphSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitmap$ = 48
userdata$ = 56
stbtt_FreeSDF PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4766
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4767
	mov	rcx, QWORD PTR bitmap$[rsp]
	call	QWORD PTR __imp_free
; Line 4768
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeSDF ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv65 = 96
winding_count$ = 100
scale$ = 104
winding_lengths$ = 112
windings$ = 120
result$ = 144
flatness_in_pixels$ = 152
vertices$ = 160
num_verts$ = 168
scale_x$ = 176
scale_y$ = 184
shift_x$ = 192
shift_y$ = 200
x_off$ = 208
y_off$ = 216
invert$ = 224
userdata$ = 232
stbtt_Rasterize PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3696
$LN6:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 136				; 00000088H
; Line 3697
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vcomiss	xmm0, DWORD PTR scale_y$[rsp]
	jbe	SHORT $LN4@stbtt_Rast
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN5@stbtt_Rast
$LN4@stbtt_Rast:
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR tv65[rsp], xmm0
$LN5@stbtt_Rast:
	vmovss	xmm0, DWORD PTR tv65[rsp]
	vmovss	DWORD PTR scale$[rsp], xmm0
; Line 3698
	mov	DWORD PTR winding_count$[rsp], 0
; Line 3699
	mov	QWORD PTR winding_lengths$[rsp], 0
; Line 3700
	vmovss	xmm0, DWORD PTR flatness_in_pixels$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR winding_count$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR winding_lengths$[rsp]
	vmovups	xmm2, xmm0
	mov	edx, DWORD PTR num_verts$[rsp]
	mov	rcx, QWORD PTR vertices$[rsp]
	call	?stbtt_FlattenCurves@@YAPEAUstbtt__point@@PEAUstbtt_vertex@@HMPEAPEAHPEAHPEAX@Z ; stbtt_FlattenCurves
	mov	QWORD PTR windings$[rsp], rax
; Line 3701
	cmp	QWORD PTR windings$[rsp], 0
	je	$LN2@stbtt_Rast
; Line 3702
	mov	rax, QWORD PTR userdata$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR invert$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR y_off$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR x_off$[rsp]
	mov	DWORD PTR [rsp+64], eax
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR winding_count$[rsp]
	mov	r8, QWORD PTR winding_lengths$[rsp]
	mov	rdx, QWORD PTR windings$[rsp]
	mov	rcx, QWORD PTR result$[rsp]
	call	?stbtt__rasterize@@YAXPEAUstbtt__bitmap@@PEAUstbtt__point@@PEAHHMMMMHHHPEAX@Z ; stbtt__rasterize
; Line 3703
	mov	rcx, QWORD PTR winding_lengths$[rsp]
	call	QWORD PTR __imp_free
; Line 3704
	mov	rcx, QWORD PTR windings$[rsp]
	call	QWORD PTR __imp_free
$LN2@stbtt_Rast:
; Line 3706
	add	rsp, 136				; 00000088H
	ret	0
stbtt_Rasterize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x0$ = 48
y0$ = 52
y1$ = 56
x1$ = 60
font$ = 80
glyph$ = 88
scale_x$ = 96
scale_y$ = 104
shift_x$ = 112
shift_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetGlyphBitmapBoxSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2722
$LN13:
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2723
	mov	DWORD PTR x0$[rsp], 0
	mov	DWORD PTR y0$[rsp], 0
; Line 2724
	lea	rax, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR y0$[rsp]
	lea	r8, QWORD PTR x0$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBox
	test	eax, eax
	jne	SHORT $LN2@stbtt_GetG
; Line 2726
	cmp	QWORD PTR ix0$[rsp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], 0
$LN4@stbtt_GetG:
; Line 2727
	cmp	QWORD PTR iy0$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], 0
$LN5@stbtt_GetG:
; Line 2728
	cmp	QWORD PTR ix1$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR ix1$[rsp]
	mov	DWORD PTR [rax], 0
$LN6@stbtt_GetG:
; Line 2729
	cmp	QWORD PTR iy1$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR iy1$[rsp]
	mov	DWORD PTR [rax], 0
$LN7@stbtt_GetG:
; Line 2730
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2732
	cmp	QWORD PTR ix0$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	vcvtsi2ss xmm0, xmm0, DWORD PTR x0$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR shift_x$[rsp]
	vcvtss2sd xmm0, xmm0, xmm0
	call	QWORD PTR __imp_floor
	vcvttsd2si eax, xmm0
	mov	rcx, QWORD PTR ix0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
; Line 2733
	cmp	QWORD PTR iy0$[rsp], 0
	je	SHORT $LN9@stbtt_GetG
	mov	eax, DWORD PTR y1$[rsp]
	neg	eax
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR shift_y$[rsp]
	vcvtss2sd xmm0, xmm0, xmm0
	call	QWORD PTR __imp_floor
	vcvttsd2si eax, xmm0
	mov	rcx, QWORD PTR iy0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN9@stbtt_GetG:
; Line 2734
	cmp	QWORD PTR ix1$[rsp], 0
	je	SHORT $LN10@stbtt_GetG
	vcvtsi2ss xmm0, xmm0, DWORD PTR x1$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR scale_x$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR shift_x$[rsp]
	vcvtss2sd xmm0, xmm0, xmm0
	call	QWORD PTR __imp_ceil
	vcvttsd2si eax, xmm0
	mov	rcx, QWORD PTR ix1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN10@stbtt_GetG:
; Line 2735
	cmp	QWORD PTR iy1$[rsp], 0
	je	SHORT $LN11@stbtt_GetG
	mov	eax, DWORD PTR y0$[rsp]
	neg	eax
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR scale_y$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR shift_y$[rsp]
	vcvtss2sd xmm0, xmm0, xmm0
	call	QWORD PTR __imp_ceil
	vcvttsd2si eax, xmm0
	mov	rcx, QWORD PTR iy1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN11@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2737
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
glyph$ = 104
scale_x$ = 112
scale_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetGlyphBitmapBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2740
$LN3:
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2741
	mov	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+40], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR scale_y$[rsp]
	vmovss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2742
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetGlyphBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
shift_x$ = 152
shift_y$ = 160
prefilter_x$ = 168
prefilter_y$ = 176
sub_x$ = 184
sub_y$ = 192
glyph$ = 200
stbtt_MakeGlyphBitmapSubpixelPrefilter PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4185
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4186
	mov	eax, DWORD PTR prefilter_y$[rsp]
	dec	eax
	mov	ecx, DWORD PTR out_h$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR prefilter_x$[rsp]
	dec	ecx
	mov	edx, DWORD PTR out_w$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+72], edx
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+64], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	mov	edx, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, eax
	mov	r8d, ecx
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4197
	cmp	DWORD PTR prefilter_x$[rsp], 1
	jle	SHORT $LN2@stbtt_Make
; Line 4198
	mov	eax, DWORD PTR prefilter_x$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_stride$[rsp]
	mov	r8d, DWORD PTR out_h$[rsp]
	mov	edx, DWORD PTR out_w$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stbtt__h_prefilter@@YAXPEAEHHHI@Z	; stbtt__h_prefilter
$LN2@stbtt_Make:
; Line 4200
	cmp	DWORD PTR prefilter_y$[rsp], 1
	jle	SHORT $LN3@stbtt_Make
; Line 4201
	mov	eax, DWORD PTR prefilter_y$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_stride$[rsp]
	mov	r8d, DWORD PTR out_h$[rsp]
	mov	edx, DWORD PTR out_w$[rsp]
	mov	rcx, QWORD PTR output$[rsp]
	call	?stbtt__v_prefilter@@YAXPEAEHHHI@Z	; stbtt__v_prefilter
$LN3@stbtt_Make:
; Line 4203
	mov	ecx, DWORD PTR prefilter_x$[rsp]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	mov	rax, QWORD PTR sub_x$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 4204
	mov	ecx, DWORD PTR prefilter_y$[rsp]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	mov	rax, QWORD PTR sub_y$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 4205
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeGlyphBitmapSubpixelPrefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
iy0$ = 96
ix0$ = 100
num_verts$ = 104
vertices$ = 112
gbm$ = 120
info$ = 160
output$ = 168
out_w$ = 176
out_h$ = 184
out_stride$ = 192
scale_x$ = 200
scale_y$ = 208
shift_x$ = 216
shift_y$ = 224
glyph$ = 232
stbtt_MakeGlyphBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3759
$LN4:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 3762
	lea	r8, QWORD PTR vertices$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rsp], eax
; Line 3765
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR scale_y$[rsp]
	vmovss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3766
	mov	rax, QWORD PTR output$[rsp]
	mov	QWORD PTR gbm$[rsp+16], rax
; Line 3767
	mov	eax, DWORD PTR out_w$[rsp]
	mov	DWORD PTR gbm$[rsp], eax
; Line 3768
	mov	eax, DWORD PTR out_h$[rsp]
	mov	DWORD PTR gbm$[rsp+4], eax
; Line 3769
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR gbm$[rsp+8], eax
; Line 3771
	cmp	DWORD PTR gbm$[rsp], 0
	je	$LN2@stbtt_Make
	cmp	DWORD PTR gbm$[rsp+4], 0
	je	$LN2@stbtt_Make
; Line 3772
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rsp+64], eax
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rsp]
	mov	r8, QWORD PTR vertices$[rsp]
	vmovss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rsp]
	call	stbtt_Rasterize
$LN2@stbtt_Make:
; Line 3774
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
; Line 3775
	add	rsp, 152				; 00000098H
	ret	0
stbtt_MakeGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
glyph$ = 152
stbtt_MakeGlyphBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3778
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3779
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+72], eax
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+64], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 3780
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeGlyphBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
iy0$ = 96
ix0$ = 100
ix1$ = 104
iy1$ = 108
num_verts$ = 112
vertices$ = 120
gbm$ = 128
info$ = 176
scale_x$ = 184
scale_y$ = 192
shift_x$ = 200
shift_y$ = 208
glyph$ = 216
width$ = 224
height$ = 232
xoff$ = 240
yoff$ = 248
stbtt_GetGlyphBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3714
$LN12:
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 168				; 000000a8H
; Line 3718
	lea	r8, QWORD PTR vertices$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
	mov	DWORD PTR num_verts$[rsp], eax
; Line 3720
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN2@stbtt_GetG
	jne	SHORT $LN2@stbtt_GetG
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR scale_x$[rsp], xmm0
$LN2@stbtt_GetG:
; Line 3721
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN3@stbtt_GetG
	jne	SHORT $LN3@stbtt_GetG
; Line 3722
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN4@stbtt_GetG
	jne	SHORT $LN4@stbtt_GetG
; Line 3723
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
; Line 3724
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 3726
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR scale_y$[rsp], xmm0
$LN3@stbtt_GetG:
; Line 3729
	lea	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR scale_y$[rsp]
	vmovss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR glyph$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 3732
	mov	eax, DWORD PTR ix0$[rsp]
	mov	ecx, DWORD PTR ix1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gbm$[rsp], eax
; Line 3733
	mov	eax, DWORD PTR iy0$[rsp]
	mov	ecx, DWORD PTR iy1$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR gbm$[rsp+4], eax
; Line 3734
	mov	QWORD PTR gbm$[rsp+16], 0
; Line 3736
	cmp	QWORD PTR width$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR width$[rsp]
	mov	ecx, DWORD PTR gbm$[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@stbtt_GetG:
; Line 3737
	cmp	QWORD PTR height$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR height$[rsp]
	mov	ecx, DWORD PTR gbm$[rsp+4]
	mov	DWORD PTR [rax], ecx
$LN6@stbtt_GetG:
; Line 3738
	cmp	QWORD PTR xoff$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR xoff$[rsp]
	mov	ecx, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN7@stbtt_GetG:
; Line 3739
	cmp	QWORD PTR yoff$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	mov	rax, QWORD PTR yoff$[rsp]
	mov	ecx, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rax], ecx
$LN8@stbtt_GetG:
; Line 3741
	cmp	DWORD PTR gbm$[rsp], 0
	je	$LN9@stbtt_GetG
	cmp	DWORD PTR gbm$[rsp+4], 0
	je	$LN9@stbtt_GetG
; Line 3742
	mov	eax, DWORD PTR gbm$[rsp]
	imul	eax, DWORD PTR gbm$[rsp+4]
	cdqe
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR gbm$[rsp+16], rax
; Line 3743
	cmp	QWORD PTR gbm$[rsp+16], 0
	je	$LN10@stbtt_GetG
; Line 3744
	mov	eax, DWORD PTR gbm$[rsp]
	mov	DWORD PTR gbm$[rsp+8], eax
; Line 3746
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR [rsp+88], rax
	mov	DWORD PTR [rsp+80], 1
	mov	eax, DWORD PTR iy0$[rsp]
	mov	DWORD PTR [rsp+72], eax
	mov	eax, DWORD PTR ix0$[rsp]
	mov	DWORD PTR [rsp+64], eax
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	mov	r9d, DWORD PTR num_verts$[rsp]
	mov	r8, QWORD PTR vertices$[rsp]
	vmovss	xmm1, DWORD PTR __real@3eb33333
	lea	rcx, QWORD PTR gbm$[rsp]
	call	stbtt_Rasterize
$LN10@stbtt_GetG:
$LN9@stbtt_GetG:
; Line 3749
	mov	rcx, QWORD PTR vertices$[rsp]
	call	QWORD PTR __imp_free
; Line 3750
	mov	rax, QWORD PTR gbm$[rsp+16]
$LN1@stbtt_GetG:
; Line 3751
	add	rsp, 168				; 000000a8H
	ret	0
stbtt_GetGlyphBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
glyph$ = 120
width$ = 128
height$ = 136
xoff$ = 144
yoff$ = 152
stbtt_GetGlyphBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3754
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3755
	mov	rax, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR glyph$[rsp]
	mov	DWORD PTR [rsp+40], eax
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+32], xmm0
	vxorps	xmm3, xmm3, xmm3
	vmovss	xmm2, DWORD PTR scale_y$[rsp]
	vmovss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapSubpixel
; Line 3756
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetGlyphBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
codepoint$ = 104
scale_x$ = 112
scale_y$ = 120
shift_x$ = 128
shift_y$ = 136
ix0$ = 144
iy0$ = 152
ix1$ = 160
iy1$ = 168
stbtt_GetCodepointBitmapBoxSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2745
$LN3:
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2746
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR scale_y$[rsp]
	vmovss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 2747
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapBoxSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
font$ = 96
codepoint$ = 104
scale_x$ = 112
scale_y$ = 120
ix0$ = 128
iy0$ = 136
ix1$ = 144
iy1$ = 152
stbtt_GetCodepointBitmapBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2750
$LN3:
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2751
	mov	rax, QWORD PTR iy1$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR ix1$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR iy0$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR ix0$[rsp]
	mov	QWORD PTR [rsp+48], rax
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+40], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR scale_y$[rsp]
	vmovss	xmm2, DWORD PTR scale_x$[rsp]
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR font$[rsp]
	call	stbtt_GetCodepointBitmapBoxSubpixel
; Line 2752
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 128
output$ = 136
out_w$ = 144
out_h$ = 152
out_stride$ = 160
scale_x$ = 168
scale_y$ = 176
shift_x$ = 184
shift_y$ = 192
oversample_x$ = 200
oversample_y$ = 208
sub_x$ = 216
sub_y$ = 224
codepoint$ = 232
stbtt_MakeCodepointBitmapSubpixelPrefilter PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3788
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 120				; 00000078H
; Line 3789
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR [rsp+104], eax
	mov	rax, QWORD PTR sub_y$[rsp]
	mov	QWORD PTR [rsp+96], rax
	mov	rax, QWORD PTR sub_x$[rsp]
	mov	QWORD PTR [rsp+88], rax
	mov	eax, DWORD PTR oversample_y$[rsp]
	mov	DWORD PTR [rsp+80], eax
	mov	eax, DWORD PTR oversample_x$[rsp]
	mov	DWORD PTR [rsp+72], eax
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+64], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixelPrefilter
; Line 3790
	add	rsp, 120				; 00000078H
	ret	0
stbtt_MakeCodepointBitmapSubpixelPrefilter ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
shift_x$ = 152
shift_y$ = 160
codepoint$ = 168
stbtt_MakeCodepointBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3793
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3794
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR [rsp+72], eax
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+64], xmm0
	vmovss	xmm0, DWORD PTR shift_x$[rsp]
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 3795
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeCodepointBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
output$ = 104
out_w$ = 112
out_h$ = 120
out_stride$ = 128
scale_x$ = 136
scale_y$ = 144
codepoint$ = 152
stbtt_MakeCodepointBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3803
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3804
	mov	eax, DWORD PTR codepoint$[rsp]
	mov	DWORD PTR [rsp+72], eax
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+64], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+56], xmm0
	vmovss	xmm0, DWORD PTR scale_y$[rsp]
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	xmm0, DWORD PTR scale_x$[rsp]
	vmovss	DWORD PTR [rsp+40], xmm0
	mov	eax, DWORD PTR out_stride$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR out_h$[rsp]
	mov	r8d, DWORD PTR out_w$[rsp]
	mov	rdx, QWORD PTR output$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeCodepointBitmapSubpixel
; Line 3805
	add	rsp, 88					; 00000058H
	ret	0
stbtt_MakeCodepointBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
shift_x$ = 120
shift_y$ = 128
codepoint$ = 136
width$ = 144
height$ = 152
xoff$ = 160
yoff$ = 168
stbtt_GetCodepointBitmapSubpixel PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3783
$LN3:
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3784
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	rcx, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	mov	rcx, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	rcx, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	DWORD PTR [rsp+40], eax
	vmovss	xmm0, DWORD PTR shift_y$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR shift_x$[rsp]
	vmovss	xmm2, DWORD PTR scale_y$[rsp]
	vmovss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapSubpixel
; Line 3785
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmapSubpixel ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 96
scale_x$ = 104
scale_y$ = 112
codepoint$ = 120
width$ = 128
height$ = 136
xoff$ = 144
yoff$ = 152
stbtt_GetCodepointBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3798
$LN3:
	mov	DWORD PTR [rsp+32], r9d
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3799
	mov	rax, QWORD PTR yoff$[rsp]
	mov	QWORD PTR [rsp+72], rax
	mov	rax, QWORD PTR xoff$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	rax, QWORD PTR height$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	rax, QWORD PTR width$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	eax, DWORD PTR codepoint$[rsp]
	mov	DWORD PTR [rsp+40], eax
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rsp+32], xmm0
	vxorps	xmm3, xmm3, xmm3
	vmovss	xmm2, DWORD PTR scale_y$[rsp]
	vmovss	xmm1, DWORD PTR scale_x$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetCodepointBitmapSubpixel
; Line 3800
	add	rsp, 88					; 00000058H
	ret	0
stbtt_GetCodepointBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
bitmap$ = 48
userdata$ = 56
stbtt_FreeBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3709
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3710
	mov	rcx, QWORD PTR bitmap$[rsp]
	call	QWORD PTR __imp_free
; Line 3711
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
svg_doc$ = 32
data$ = 40
tv73 = 48
info$ = 80
gl$ = 88
svg$ = 96
stbtt_GetGlyphSVG PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2695
$LN6:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 2696
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2699
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+52], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2700
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2702
	mov	edx, DWORD PTR gl$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindSVGDoc
	mov	QWORD PTR svg_doc$[rsp], rax
; Line 2703
	cmp	QWORD PTR svg_doc$[rsp], 0
	je	SHORT $LN3@stbtt_GetG
; Line 2704
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+52]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv73[rsp], rax
	mov	rcx, QWORD PTR svg_doc$[rsp]
	add	rcx, 4
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	eax, eax
	mov	rcx, QWORD PTR tv73[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR svg$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 2705
	mov	rax, QWORD PTR svg_doc$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	jmp	SHORT $LN1@stbtt_GetG
; Line 2706
	jmp	SHORT $LN4@stbtt_GetG
$LN3@stbtt_GetG:
; Line 2707
	xor	eax, eax
$LN4@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2709
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphSVG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
unicode_codepoint$ = 56
svg$ = 64
stbtt_GetCodepointSVG PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2712
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2713
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r8, QWORD PTR svg$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphSVG
; Line 2714
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointSVG ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 32
numEntries$ = 36
svg_doc$1 = 40
svg_doc_list$ = 48
data$ = 56
svg_docs$ = 64
info$ = 96
gl$ = 104
stbtt_FindSVGDoc PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2678
$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 2680
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2681
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__get_svg@@YAHPEAUstbtt_fontinfo@@@Z ; stbtt__get_svg
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR svg_doc_list$[rsp], rax
; Line 2683
	mov	rcx, QWORD PTR svg_doc_list$[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR numEntries$[rsp], eax
; Line 2684
	mov	rax, QWORD PTR svg_doc_list$[rsp]
	add	rax, 2
	mov	QWORD PTR svg_docs$[rsp], rax
; Line 2686
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Find
$LN2@stbtt_Find:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Find:
	mov	eax, DWORD PTR numEntries$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN3@stbtt_Find
; Line 2687
	imul	eax, DWORD PTR i$[rsp], 12
	cdqe
	mov	rcx, QWORD PTR svg_docs$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR svg_doc$1[rsp], rax
; Line 2688
	mov	rcx, QWORD PTR svg_doc$1[rsp]
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR gl$[rsp], eax
	jl	SHORT $LN5@stbtt_Find
	mov	rax, QWORD PTR svg_doc$1[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR gl$[rsp], eax
	jg	SHORT $LN5@stbtt_Find
; Line 2689
	mov	rax, QWORD PTR svg_doc$1[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN5@stbtt_Find:
; Line 2690
	jmp	SHORT $LN2@stbtt_Find
$LN3@stbtt_Find:
; Line 2691
	xor	eax, eax
$LN1@stbtt_Find:
; Line 2692
	add	rsp, 88					; 00000058H
	ret	0
stbtt_FindSVGDoc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
v$ = 56
stbtt_FreeShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2673
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2674
	mov	rcx, QWORD PTR v$[rsp]
	call	QWORD PTR __imp_free
; Line 2675
	add	rsp, 40					; 00000028H
	ret	0
stbtt_FreeShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
glyph_index$ = 56
pvertices$ = 64
stbtt_GetGlyphShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2298
$LN5:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2299
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	jne	SHORT $LN2@stbtt_GetG
; Line 2300
	mov	r8, QWORD PTR pvertices$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphShapeTT@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeTT
	jmp	SHORT $LN1@stbtt_GetG
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2302
	mov	r8, QWORD PTR pvertices$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphShapeT2@@YAHPEBUstbtt_fontinfo@@HPEAPEAUstbtt_vertex@@@Z ; stbtt__GetGlyphShapeT2
$LN3@stbtt_GetG:
$LN1@stbtt_GetG:
; Line 2303
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetGlyphShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
unicode_codepoint$ = 56
vertices$ = 64
stbtt_GetCodepointShape PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1590
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 1591
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r8, QWORD PTR vertices$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphShape
; Line 1592
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointShape ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numberOfContours$ = 48
tv75 = 52
g$ = 56
tv87 = 60
info$ = 80
glyph_index$ = 88
stbtt_IsGlyphEmpty PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1647
$LN9:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1650
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_IsGl
; Line 1651
	mov	QWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ; stbtt__GetGlyphInfoT2
	test	eax, eax
	jne	SHORT $LN5@stbtt_IsGl
	mov	DWORD PTR tv75[rsp], 1
	jmp	SHORT $LN6@stbtt_IsGl
$LN5@stbtt_IsGl:
	mov	DWORD PTR tv75[rsp], 0
$LN6@stbtt_IsGl:
	mov	eax, DWORD PTR tv75[rsp]
	jmp	SHORT $LN1@stbtt_IsGl
$LN2@stbtt_IsGl:
; Line 1652
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$[rsp], eax
; Line 1653
	cmp	DWORD PTR g$[rsp], 0
	jge	SHORT $LN3@stbtt_IsGl
	mov	eax, 1
	jmp	SHORT $LN1@stbtt_IsGl
$LN3@stbtt_IsGl:
; Line 1654
	movsxd	rax, DWORD PTR g$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	mov	WORD PTR numberOfContours$[rsp], ax
; Line 1655
	movsx	eax, WORD PTR numberOfContours$[rsp]
	test	eax, eax
	jne	SHORT $LN7@stbtt_IsGl
	mov	DWORD PTR tv87[rsp], 1
	jmp	SHORT $LN8@stbtt_IsGl
$LN7@stbtt_IsGl:
	mov	DWORD PTR tv87[rsp], 0
$LN8@stbtt_IsGl:
	mov	eax, DWORD PTR tv87[rsp]
$LN1@stbtt_IsGl:
; Line 1656
	add	rsp, 72					; 00000048H
	ret	0
stbtt_IsGlyphEmpty ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
k$ = 32
length$ = 36
data$ = 40
info$ = 64
table$ = 72
table_length$ = 80
stbtt_GetKerningTable PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2333
$LN10:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2334
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2338
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN5@stbtt_GetK
; Line 2339
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN5@stbtt_GetK:
; Line 2340
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN6@stbtt_GetK
; Line 2341
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN6@stbtt_GetK:
; Line 2342
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN7@stbtt_GetK
; Line 2343
	xor	eax, eax
	jmp	$LN1@stbtt_GetK
$LN7@stbtt_GetK:
; Line 2345
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR length$[rsp], eax
; Line 2346
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR table_length$[rsp], eax
	jge	SHORT $LN8@stbtt_GetK
; Line 2347
	mov	eax, DWORD PTR table_length$[rsp]
	mov	DWORD PTR length$[rsp], eax
$LN8@stbtt_GetK:
; Line 2349
	mov	DWORD PTR k$[rsp], 0
	jmp	SHORT $LN4@stbtt_GetK
$LN2@stbtt_GetK:
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
$LN4@stbtt_GetK:
	mov	eax, DWORD PTR length$[rsp]
	cmp	DWORD PTR k$[rsp], eax
	jge	$LN3@stbtt_GetK
; Line 2351
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 2352
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+20]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx+4], eax
; Line 2353
	imul	eax, DWORD PTR k$[rsp], 6
	cdqe
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+22]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR table$[rsp]
	mov	DWORD PTR [rdx+rcx+8], eax
; Line 2354
	jmp	$LN2@stbtt_GetK
$LN3@stbtt_GetK:
; Line 2356
	mov	eax, DWORD PTR length$[rsp]
$LN1@stbtt_GetK:
; Line 2357
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetKerningTable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 32
info$ = 64
stbtt_GetKerningTableLength PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2318
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2319
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+44]
	mov	rcx, QWORD PTR info$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	QWORD PTR data$[rsp], rax
; Line 2322
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN2@stbtt_GetK
; Line 2323
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN2@stbtt_GetK:
; Line 2324
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 2
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	jge	SHORT $LN3@stbtt_GetK
; Line 2325
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN3@stbtt_GetK:
; Line 2326
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	eax, 1
	je	SHORT $LN4@stbtt_GetK
; Line 2327
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetK
$LN4@stbtt_GetK:
; Line 2329
	mov	rax, QWORD PTR data$[rsp]
	add	rax, 10
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
$LN1@stbtt_GetK:
; Line 2330
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetKerningTableLength ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
g$1 = 48
info$ = 80
glyph_index$ = 88
x0$ = 96
y0$ = 104
x1$ = 112
y1$ = 120
stbtt_GetGlyphBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1626
$LN10:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1627
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN2@stbtt_GetG
; Line 1628
	mov	rax, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR y0$[rsp]
	mov	r8, QWORD PTR x0$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphInfoT2@@YAHPEBUstbtt_fontinfo@@HPEAH111@Z ; stbtt__GetGlyphInfoT2
; Line 1629
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 1630
	mov	edx, DWORD PTR glyph_index$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyfOffset@@YAHPEBUstbtt_fontinfo@@H@Z ; stbtt__GetGlyfOffset
	mov	DWORD PTR g$1[rsp], eax
; Line 1631
	cmp	DWORD PTR g$1[rsp], 0
	jge	SHORT $LN4@stbtt_GetG
	xor	eax, eax
	jmp	$LN1@stbtt_GetG
$LN4@stbtt_GetG:
; Line 1633
	cmp	QWORD PTR x0$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 1634
	cmp	QWORD PTR y0$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 1635
	cmp	QWORD PTR x1$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
; Line 1636
	cmp	QWORD PTR y1$[rsp], 0
	je	SHORT $LN8@stbtt_GetG
	movsxd	rax, DWORD PTR g$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rsp]
	mov	DWORD PTR [rcx], eax
$LN8@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 1638
	mov	eax, 1
$LN1@stbtt_GetG:
; Line 1639
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetGlyphBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
xAdvance$ = 32
info$ = 64
g1$ = 72
g2$ = 80
stbtt_GetGlyphKernAdvance PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2611
$LN6:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2612
	mov	DWORD PTR xAdvance$[rsp], 0
; Line 2614
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	je	SHORT $LN2@stbtt_GetG
; Line 2615
	mov	r8d, DWORD PTR g2$[rsp]
	mov	edx, DWORD PTR g1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphGPOSInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ; stbtt__GetGlyphGPOSInfoAdvance
	mov	ecx, DWORD PTR xAdvance$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR xAdvance$[rsp], eax
	jmp	SHORT $LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2616
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	je	SHORT $LN4@stbtt_GetG
; Line 2617
	mov	r8d, DWORD PTR g2$[rsp]
	mov	edx, DWORD PTR g1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt__GetGlyphKernInfoAdvance@@YAHPEBUstbtt_fontinfo@@HH@Z ; stbtt__GetGlyphKernInfoAdvance
	mov	ecx, DWORD PTR xAdvance$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR xAdvance$[rsp], eax
$LN4@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2619
	mov	eax, DWORD PTR xAdvance$[rsp]
; Line 2620
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetGlyphKernAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
numOfLongHorMetrics$ = 32
info$ = 64
glyph_index$ = 72
advanceWidth$ = 80
leftSideBearing$ = 88
stbtt_GetGlyphHMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2306
$LN9:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2307
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+34]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR numOfLongHorMetrics$[rsp], ax
; Line 2308
	movzx	eax, WORD PTR numOfLongHorMetrics$[rsp]
	cmp	DWORD PTR glyph_index$[rsp], eax
	jge	$LN2@stbtt_GetG
; Line 2309
	cmp	QWORD PTR advanceWidth$[rsp], 0
	je	SHORT $LN4@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetG:
; Line 2310
	cmp	QWORD PTR leftSideBearing$[rsp], 0
	je	SHORT $LN5@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR glyph_index$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetG:
; Line 2311
	jmp	$LN3@stbtt_GetG
$LN2@stbtt_GetG:
; Line 2312
	cmp	QWORD PTR advanceWidth$[rsp], 0
	je	SHORT $LN6@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	lea	ecx, DWORD PTR [rcx*4-4]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR advanceWidth$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@stbtt_GetG:
; Line 2313
	cmp	QWORD PTR leftSideBearing$[rsp], 0
	je	SHORT $LN7@stbtt_GetG
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+40]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	add	rax, rcx
	movzx	ecx, WORD PTR numOfLongHorMetrics$[rsp]
	mov	edx, DWORD PTR glyph_index$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR leftSideBearing$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@stbtt_GetG:
$LN3@stbtt_GetG:
; Line 2315
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetGlyphHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 64
codepoint$ = 72
x0$ = 80
y0$ = 88
x1$ = 96
y1$ = 104
stbtt_GetCodepointBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1642
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1643
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	rcx, QWORD PTR y1$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR x1$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR y0$[rsp]
	mov	r8, QWORD PTR x0$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBox
; Line 1644
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetCodepointBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv81 = 32
tv79 = 36
info$ = 64
ch1$ = 72
ch2$ = 80
stbtt_GetCodepointKernAdvance PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2623
$LN4:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2624
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+44], 0
	jne	SHORT $LN2@stbtt_GetC
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+48], 0
	jne	SHORT $LN2@stbtt_GetC
; Line 2625
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_GetC
$LN2@stbtt_GetC:
; Line 2626
	mov	edx, DWORD PTR ch2$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR tv81[rsp], eax
	mov	edx, DWORD PTR ch1$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR tv79[rsp], eax
	mov	r8d, DWORD PTR tv81[rsp]
	mov	edx, DWORD PTR tv79[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphKernAdvance
$LN1@stbtt_GetC:
; Line 2627
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetCodepointKernAdvance ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
codepoint$ = 56
advanceWidth$ = 64
leftSideBearing$ = 72
stbtt_GetCodepointHMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2630
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2631
	mov	edx, DWORD PTR codepoint$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	r9, QWORD PTR leftSideBearing$[rsp]
	mov	r8, QWORD PTR advanceWidth$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 2632
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetCodepointHMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
x0$ = 56
y0$ = 64
x1$ = 72
y1$ = 80
stbtt_GetFontBoundingBox PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2653
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2654
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+36]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x0$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2655
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+38]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y0$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2656
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+40]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR x1$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2657
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+42]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR y1$[rsp]
	mov	DWORD PTR [rcx], eax
; Line 2658
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontBoundingBox ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tab$ = 32
info$ = 64
typoAscent$ = 72
typoDescent$ = 80
typoLineGap$ = 88
stbtt_GetFontVMetricsOS2 PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2642
$LN7:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2643
	lea	r8, OFFSET FLAT:$SG143478
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+16]
	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbtt__find_table@@YAIPEAEIPEBD@Z	; stbtt__find_table
	mov	DWORD PTR tab$[rsp], eax
; Line 2644
	cmp	DWORD PTR tab$[rsp], 0
	jne	SHORT $LN2@stbtt_GetF
; Line 2645
	xor	eax, eax
	jmp	$LN1@stbtt_GetF
$LN2@stbtt_GetF:
; Line 2646
	cmp	QWORD PTR typoAscent$[rsp], 0
	je	SHORT $LN3@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+68]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoAscent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2647
	cmp	QWORD PTR typoDescent$[rsp], 0
	je	SHORT $LN4@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+70]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoDescent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2648
	cmp	QWORD PTR typoLineGap$[rsp], 0
	je	SHORT $LN5@stbtt_GetF
	movsxd	rax, DWORD PTR tab$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+72]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR typoLineGap$[rsp]
	mov	DWORD PTR [rcx], eax
$LN5@stbtt_GetF:
; Line 2649
	mov	eax, 1
$LN1@stbtt_GetF:
; Line 2650
	add	rsp, 56					; 00000038H
	ret	0
stbtt_GetFontVMetricsOS2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
ascent$ = 56
descent$ = 64
lineGap$ = 72
stbtt_GetFontVMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2635
$LN6:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 2636
	cmp	QWORD PTR ascent$[rsp], 0
	je	SHORT $LN2@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR ascent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN2@stbtt_GetF:
; Line 2637
	cmp	QWORD PTR descent$[rsp], 0
	je	SHORT $LN3@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR descent$[rsp]
	mov	DWORD PTR [rcx], eax
$LN3@stbtt_GetF:
; Line 2638
	cmp	QWORD PTR lineGap$[rsp], 0
	je	SHORT $LN4@stbtt_GetF
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	rcx, QWORD PTR lineGap$[rsp]
	mov	DWORD PTR [rcx], eax
$LN4@stbtt_GetF:
; Line 2639
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
unitsPerEm$ = 32
info$ = 64
pixels$ = 72
stbtt_ScaleForMappingEmToPixels PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2667
$LN3:
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2668
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+28]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+18]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR unitsPerEm$[rsp], eax
; Line 2669
	vcvtsi2ss xmm0, xmm0, DWORD PTR unitsPerEm$[rsp]
	vmovss	xmm1, DWORD PTR pixels$[rsp]
	vdivss	xmm0, xmm1, xmm0
; Line 2670
	add	rsp, 56					; 00000038H
	ret	0
stbtt_ScaleForMappingEmToPixels ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv71 = 32
fheight$ = 36
info$ = 64
height$ = 72
stbtt_ScaleForPixelHeight PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 2661
$LN3:
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 2662
	mov	rax, QWORD PTR info$[rsp]
	movsxd	rax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	lea	rax, QWORD PTR [rcx+rax+4]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	DWORD PTR tv71[rsp], eax
	mov	rcx, QWORD PTR info$[rsp]
	movsxd	rcx, DWORD PTR [rcx+36]
	mov	rdx, QWORD PTR info$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, QWORD PTR [rdx+rcx+6]
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	ecx, DWORD PTR tv71[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fheight$[rsp], eax
; Line 2663
	vcvtsi2ss xmm0, xmm0, DWORD PTR fheight$[rsp]
	vmovss	xmm1, DWORD PTR height$[rsp]
	vdivss	xmm0, xmm1, xmm0
; Line 2664
	add	rsp, 56					; 00000038H
	ret	0
stbtt_ScaleForPixelHeight ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
index_map$ = 32
format$ = 36
item$1 = 40
search$2 = 44
data$ = 48
searchRange$3 = 56
segcount$4 = 60
entrySelector$5 = 64
rangeShift$6 = 68
offset$7 = 72
start$8 = 76
mid$9 = 80
low$10 = 84
end$11 = 88
last$12 = 92
first$13 = 96
endCount$14 = 100
high$15 = 104
start_char$16 = 108
start_glyph$17 = 112
bytes$18 = 116
count$19 = 120
ngroups$20 = 124
end_char$21 = 128
info$ = 160
unicode_codepoint$ = 168
stbtt_FindGlyphIndex PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 1497
$LN33:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 1498
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR data$[rsp], rax
; Line 1499
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR index_map$[rsp], eax
; Line 1501
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR format$[rsp], ax
; Line 1502
	movzx	eax, WORD PTR format$[rsp]
	test	eax, eax
	jne	SHORT $LN6@stbtt_Find
; Line 1503
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR bytes$18[rsp], eax
; Line 1504
	mov	eax, DWORD PTR bytes$18[rsp]
	sub	eax, 6
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jge	SHORT $LN8@stbtt_Find
; Line 1505
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR unicode_codepoint$[rsp]
	movzx	eax, BYTE PTR [rax+rcx+6]
	jmp	$LN1@stbtt_Find
$LN8@stbtt_Find:
; Line 1506
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN7@stbtt_Find
$LN6@stbtt_Find:
; Line 1507
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 6
	jne	$LN9@stbtt_Find
; Line 1508
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR first$13[rsp], eax
; Line 1509
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	mov	DWORD PTR count$19[rsp], eax
; Line 1510
	mov	eax, DWORD PTR first$13[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jb	SHORT $LN11@stbtt_Find
	mov	eax, DWORD PTR count$19[rsp]
	mov	ecx, DWORD PTR first$13[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jae	SHORT $LN11@stbtt_Find
; Line 1511
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR first$13[rsp]
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	mov	ecx, ecx
	lea	rax, QWORD PTR [rax+rcx+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN11@stbtt_Find:
; Line 1512
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN10@stbtt_Find
$LN9@stbtt_Find:
; Line 1513
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 2
	jne	SHORT $LN12@stbtt_Find
; Line 1514
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN31@stbtt_Find
	mov	r8d, 1514				; 000005eaH
	lea	rdx, OFFSET FLAT:$SG142677
	lea	rcx, OFFSET FLAT:$SG142678
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN31@stbtt_Find:
; Line 1515
	xor	eax, eax
	jmp	$LN1@stbtt_Find
	jmp	$LN13@stbtt_Find
$LN12@stbtt_Find:
; Line 1516
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 4
	jne	$LN14@stbtt_Find
; Line 1517
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+6]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR segcount$4[rsp], ax
; Line 1518
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR searchRange$3[rsp], ax
; Line 1519
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+10]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR entrySelector$5[rsp], ax
; Line 1520
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	sar	eax, 1
	mov	WORD PTR rangeShift$6[rsp], ax
; Line 1523
	mov	eax, DWORD PTR index_map$[rsp]
	add	eax, 14
	mov	DWORD PTR endCount$14[rsp], eax
; Line 1524
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	DWORD PTR search$2[rsp], eax
; Line 1526
	cmp	DWORD PTR unicode_codepoint$[rsp], 65535 ; 0000ffffH
	jle	SHORT $LN16@stbtt_Find
; Line 1527
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN16@stbtt_Find:
; Line 1531
	mov	eax, DWORD PTR search$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR rangeShift$6[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jl	SHORT $LN17@stbtt_Find
; Line 1532
	movzx	eax, WORD PTR rangeShift$6[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$2[rsp], eax
$LN17@stbtt_Find:
; Line 1535
	mov	eax, DWORD PTR search$2[rsp]
	sub	eax, 2
	mov	DWORD PTR search$2[rsp], eax
$LN2@stbtt_Find:
; Line 1536
	movzx	eax, WORD PTR entrySelector$5[rsp]
	test	eax, eax
	je	SHORT $LN3@stbtt_Find
; Line 1538
	movzx	eax, WORD PTR searchRange$3[rsp]
	shr	ax, 1
	mov	WORD PTR searchRange$3[rsp], ax
; Line 1539
	mov	eax, DWORD PTR search$2[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR searchRange$3[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR end$11[rsp], ax
; Line 1540
	movzx	eax, WORD PTR end$11[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jle	SHORT $LN18@stbtt_Find
; Line 1541
	movzx	eax, WORD PTR searchRange$3[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	lea	eax, DWORD PTR [rcx+rax*2]
	mov	DWORD PTR search$2[rsp], eax
$LN18@stbtt_Find:
; Line 1542
	movzx	eax, WORD PTR entrySelector$5[rsp]
	dec	ax
	mov	WORD PTR entrySelector$5[rsp], ax
; Line 1543
	jmp	SHORT $LN2@stbtt_Find
$LN3@stbtt_Find:
; Line 1544
	mov	eax, DWORD PTR search$2[rsp]
	add	eax, 2
	mov	DWORD PTR search$2[rsp], eax
; Line 1548
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	ecx, DWORD PTR search$2[rsp]
	sub	ecx, eax
	mov	eax, ecx
	shr	eax, 1
	mov	WORD PTR item$1[rsp], ax
; Line 1550
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR start$8[rsp], ax
; Line 1551
	mov	eax, DWORD PTR endCount$14[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR last$12[rsp], ax
; Line 1552
	movzx	eax, WORD PTR start$8[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jl	SHORT $LN20@stbtt_Find
	movzx	eax, WORD PTR last$12[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jle	SHORT $LN19@stbtt_Find
$LN20@stbtt_Find:
; Line 1553
	xor	eax, eax
	jmp	$LN1@stbtt_Find
$LN19@stbtt_Find:
; Line 1555
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	mov	WORD PTR offset$7[rsp], ax
; Line 1556
	movzx	eax, WORD PTR offset$7[rsp]
	test	eax, eax
	jne	SHORT $LN21@stbtt_Find
; Line 1557
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	shl	ecx, 2
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttSHORT@@YAFPEAE@Z			; ttSHORT
	cwde
	mov	ecx, DWORD PTR unicode_codepoint$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
$LN21@stbtt_Find:
; Line 1559
	movzx	eax, WORD PTR offset$7[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	movzx	ecx, WORD PTR start$8[rsp]
	mov	edx, DWORD PTR unicode_codepoint$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	shl	ecx, 1
	movsxd	rcx, ecx
	add	rax, rcx
	mov	ecx, DWORD PTR index_map$[rsp]
	add	rax, rcx
	movzx	ecx, WORD PTR segcount$4[rsp]
	imul	ecx, ecx, 6
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+14]
	movzx	ecx, WORD PTR item$1[rsp]
	shl	ecx, 1
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+2]
	mov	rcx, rax
	call	?ttUSHORT@@YAGPEAE@Z			; ttUSHORT
	movzx	eax, ax
	jmp	$LN1@stbtt_Find
	jmp	$LN15@stbtt_Find
$LN14@stbtt_Find:
; Line 1561
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 12
	je	SHORT $LN23@stbtt_Find
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 13
	jne	$LN22@stbtt_Find
$LN23@stbtt_Find:
; Line 1562
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	lea	rax, QWORD PTR [rcx+rax+12]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR ngroups$20[rsp], eax
; Line 1564
	mov	DWORD PTR low$10[rsp], 0
	mov	eax, DWORD PTR ngroups$20[rsp]
	mov	DWORD PTR high$15[rsp], eax
$LN4@stbtt_Find:
; Line 1566
	mov	eax, DWORD PTR high$15[rsp]
	cmp	DWORD PTR low$10[rsp], eax
	jge	$LN5@stbtt_Find
; Line 1567
	mov	eax, DWORD PTR low$10[rsp]
	mov	ecx, DWORD PTR high$15[rsp]
	sub	ecx, eax
	mov	eax, ecx
	sar	eax, 1
	mov	ecx, DWORD PTR low$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR mid$9[rsp], eax
; Line 1568
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+16]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR start_char$16[rsp], eax
; Line 1569
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+20]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR end_char$21[rsp], eax
; Line 1570
	mov	eax, DWORD PTR start_char$16[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jae	SHORT $LN24@stbtt_Find
; Line 1571
	mov	eax, DWORD PTR mid$9[rsp]
	mov	DWORD PTR high$15[rsp], eax
	jmp	SHORT $LN25@stbtt_Find
$LN24@stbtt_Find:
; Line 1572
	mov	eax, DWORD PTR end_char$21[rsp]
	cmp	DWORD PTR unicode_codepoint$[rsp], eax
	jbe	SHORT $LN26@stbtt_Find
; Line 1573
	mov	eax, DWORD PTR mid$9[rsp]
	inc	eax
	mov	DWORD PTR low$10[rsp], eax
	jmp	SHORT $LN27@stbtt_Find
$LN26@stbtt_Find:
; Line 1575
	mov	eax, DWORD PTR index_map$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	add	rcx, rax
	mov	rax, rcx
	imul	ecx, DWORD PTR mid$9[rsp], 12
	movsxd	rcx, ecx
	lea	rax, QWORD PTR [rax+rcx+24]
	mov	rcx, rax
	call	?ttULONG@@YAIPEAE@Z			; ttULONG
	mov	DWORD PTR start_glyph$17[rsp], eax
; Line 1576
	movzx	eax, WORD PTR format$[rsp]
	cmp	eax, 12
	jne	SHORT $LN28@stbtt_Find
; Line 1577
	mov	eax, DWORD PTR unicode_codepoint$[rsp]
	mov	ecx, DWORD PTR start_glyph$17[rsp]
	add	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR start_char$16[rsp]
	jmp	SHORT $LN1@stbtt_Find
	jmp	SHORT $LN29@stbtt_Find
$LN28@stbtt_Find:
; Line 1579
	mov	eax, DWORD PTR start_glyph$17[rsp]
	jmp	SHORT $LN1@stbtt_Find
$LN29@stbtt_Find:
$LN27@stbtt_Find:
$LN25@stbtt_Find:
; Line 1581
	jmp	$LN4@stbtt_Find
$LN5@stbtt_Find:
; Line 1582
	xor	eax, eax
	jmp	SHORT $LN1@stbtt_Find
$LN22@stbtt_Find:
$LN15@stbtt_Find:
$LN13@stbtt_Find:
$LN10@stbtt_Find:
$LN7@stbtt_Find:
; Line 1585
	xor	eax, eax
	test	eax, eax
	jne	SHORT $LN32@stbtt_Find
	mov	r8d, 1585				; 00000631H
	lea	rdx, OFFSET FLAT:$SG142695
	lea	rcx, OFFSET FLAT:$SG142696
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN32@stbtt_Find:
; Line 1586
	xor	eax, eax
$LN1@stbtt_Find:
; Line 1587
	add	rsp, 152				; 00000098H
	ret	0
stbtt_FindGlyphIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
info$ = 48
data$ = 56
offset$ = 64
stbtt_InitFont PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4953
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4954
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rdx, QWORD PTR data$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	?stbtt_InitFont_internal@@YAHPEAUstbtt_fontinfo@@PEAEH@Z ; stbtt_InitFont_internal
; Line 4955
	add	rsp, 40					; 00000028H
	ret	0
stbtt_InitFont ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
index$ = 56
stbtt_GetFontOffsetForIndex PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4943
$LN3:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4944
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_GetFontOffsetForIndex_internal@@YAHPEAEH@Z ; stbtt_GetFontOffsetForIndex_internal
; Line 4945
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetFontOffsetForIndex ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 48
stbtt_GetNumberOfFonts PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4948
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4949
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_GetNumberOfFonts_internal@@YAHPEAE@Z ; stbtt_GetNumberOfFonts_internal
; Line 4950
	add	rsp, 40					; 00000028H
	ret	0
stbtt_GetNumberOfFonts ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$1 = 80
i$ = 88
j$ = 92
scale$2 = 96
pad$3 = 100
glyph$4 = 104
bc$5 = 112
fh$6 = 120
missing_glyph$ = 124
k$ = 128
return_value$ = 132
tv80 = 136
tv176 = 140
x0$7 = 144
recip_h$8 = 148
sub_x$9 = 152
y0$10 = 156
recip_v$11 = 160
sub_y$12 = 164
codepoint$13 = 168
advance$14 = 172
old_h_over$ = 176
old_v_over$ = 180
lsb$15 = 184
y1$16 = 188
x1$17 = 192
spc$ = 240
info$ = 248
ranges$ = 256
num_ranges$ = 264
rects$ = 272
stbtt_PackFontRangesRenderIntoRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4209
$LN22:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 4210
	mov	DWORD PTR missing_glyph$[rsp], -1
	mov	DWORD PTR return_value$[rsp], 1
; Line 4213
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR old_h_over$[rsp], eax
; Line 4214
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	mov	DWORD PTR old_v_over$[rsp], eax
; Line 4216
	mov	DWORD PTR k$[rsp], 0
; Line 4217
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4218
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmovss	DWORD PTR fh$6[rsp], xmm0
; Line 4219
	vmovss	xmm0, DWORD PTR fh$6[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN18@stbtt_Pack
	vmovss	xmm1, DWORD PTR fh$6[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	vmovss	DWORD PTR tv80[rsp], xmm0
	jmp	SHORT $LN19@stbtt_Pack
$LN18@stbtt_Pack:
	vmovss	xmm0, DWORD PTR fh$6[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovups	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	vmovss	DWORD PTR tv80[rsp], xmm0
$LN19@stbtt_Pack:
	vmovss	xmm0, DWORD PTR tv80[rsp]
	vmovss	DWORD PTR scale$2[rsp], xmm0
; Line 4221
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+32]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rcx+36], eax
; Line 4222
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+33]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rcx+40], eax
; Line 4223
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	vcvtsi2ss xmm0, xmm0, rax
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR recip_h$8[rsp], xmm0
; Line 4224
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	vcvtsi2ss xmm0, xmm0, rax
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR recip_v$11[rsp], xmm0
; Line 4225
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	vmovss	DWORD PTR sub_x$9[rsp], xmm0
; Line 4226
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rax+40]
	call	?stbtt__oversample_shift@@YAMH@Z	; stbtt__oversample_shift
	vmovss	DWORD PTR sub_y$12[rsp], xmm0
; Line 4227
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4228
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR r$1[rsp], rax
; Line 4229
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+12], 0
	je	$LN8@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+16], 0
	je	$LN8@stbtt_Pack
; Line 4230
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	add	rcx, QWORD PTR [rdx+rax+24]
	mov	rax, rcx
	mov	QWORD PTR bc$5[rsp], rax
; Line 4232
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN20@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv176[rsp], eax
	jmp	SHORT $LN21@stbtt_Pack
$LN20@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv176[rsp], eax
$LN21@stbtt_Pack:
	mov	eax, DWORD PTR tv176[rsp]
	mov	DWORD PTR codepoint$13[rsp], eax
; Line 4233
	mov	edx, DWORD PTR codepoint$13[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$4[rsp], eax
; Line 4234
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+28]
	mov	DWORD PTR pad$3[rsp], eax
; Line 4237
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax]
	add	eax, DWORD PTR pad$3[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx], eax
; Line 4238
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	add	eax, DWORD PTR pad$3[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+4], eax
; Line 4239
	mov	rax, QWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR pad$3[rsp]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+12], eax
; Line 4240
	mov	rax, QWORD PTR r$1[rsp]
	mov	ecx, DWORD PTR pad$3[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	DWORD PTR [rcx+16], eax
; Line 4241
	lea	r9, QWORD PTR lsb$15[rsp]
	lea	r8, QWORD PTR advance$14[rsp]
	mov	edx, DWORD PTR glyph$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphHMetrics
; Line 4242
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	vcvtsi2ss xmm0, xmm0, rax
	vmovss	xmm1, DWORD PTR scale$2[rsp]
	vmulss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	vcvtsi2ss xmm1, xmm1, rax
	vmovss	xmm2, DWORD PTR scale$2[rsp]
	vmulss	xmm1, xmm2, xmm1
	lea	rax, QWORD PTR y1$16[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x1$17[rsp]
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR y0$10[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR x0$7[rsp]
	mov	QWORD PTR [rsp+32], rax
	vmovups	xmm3, xmm0
	vmovups	xmm2, xmm1
	mov	edx, DWORD PTR glyph$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBox
; Line 4246
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	vcvtsi2ss xmm0, xmm0, rax
	vmovss	xmm1, DWORD PTR scale$2[rsp]
	vmulss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	vcvtsi2ss xmm1, xmm1, rax
	vmovss	xmm2, DWORD PTR scale$2[rsp]
	vmulss	xmm1, xmm2, xmm1
	mov	rax, QWORD PTR r$1[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	inc	eax
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	edx, DWORD PTR [rdx+36]
	mov	ecx, DWORD PTR [rcx+12]
	sub	ecx, edx
	inc	ecx
	mov	rdx, QWORD PTR r$1[rsp]
	movsxd	rdx, DWORD PTR [rdx]
	mov	r8, QWORD PTR spc$[rsp]
	mov	r8, QWORD PTR [r8+48]
	add	r8, rdx
	mov	rdx, r8
	mov	r8, QWORD PTR r$1[rsp]
	mov	r9, QWORD PTR spc$[rsp]
	mov	r8d, DWORD PTR [r8+4]
	imul	r8d, DWORD PTR [r9+24]
	movsxd	r8, r8d
	add	rdx, r8
	mov	r8d, DWORD PTR glyph$4[rsp]
	mov	DWORD PTR [rsp+72], r8d
	vxorps	xmm2, xmm2, xmm2
	vmovss	DWORD PTR [rsp+64], xmm2
	vxorps	xmm2, xmm2, xmm2
	vmovss	DWORD PTR [rsp+56], xmm2
	vmovss	DWORD PTR [rsp+48], xmm0
	vmovss	DWORD PTR [rsp+40], xmm1
	mov	r8, QWORD PTR spc$[rsp]
	mov	r8d, DWORD PTR [r8+24]
	mov	DWORD PTR [rsp+32], r8d
	mov	r9d, eax
	mov	r8d, ecx
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_MakeGlyphBitmapSubpixel
; Line 4256
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+36], 1
	jbe	SHORT $LN10@stbtt_Pack
; Line 4257
	mov	rax, QWORD PTR r$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+24]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	r8d, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	edx, DWORD PTR [rcx+12]
	mov	rcx, rax
	call	?stbtt__h_prefilter@@YAXPEAEHHHI@Z	; stbtt__h_prefilter
$LN10@stbtt_Pack:
; Line 4261
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+40], 1
	jbe	SHORT $LN11@stbtt_Pack
; Line 4262
	mov	rax, QWORD PTR r$1[rsp]
	movsxd	rax, DWORD PTR [rax]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	add	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR r$1[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+4]
	imul	ecx, DWORD PTR [rdx+24]
	movsxd	rcx, ecx
	add	rax, rcx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	mov	DWORD PTR [rsp+32], ecx
	mov	rcx, QWORD PTR spc$[rsp]
	mov	r9d, DWORD PTR [rcx+24]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	r8d, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR r$1[rsp]
	mov	edx, DWORD PTR [rcx+12]
	mov	rcx, rax
	call	?stbtt__v_prefilter@@YAXPEAEHHHI@Z	; stbtt__v_prefilter
$LN11@stbtt_Pack:
; Line 4266
	mov	rax, QWORD PTR bc$5[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	movzx	ecx, WORD PTR [rcx]
	mov	WORD PTR [rax], cx
; Line 4267
	mov	rax, QWORD PTR bc$5[rsp]
	mov	rcx, QWORD PTR r$1[rsp]
	movzx	ecx, WORD PTR [rcx+4]
	mov	WORD PTR [rax+2], cx
; Line 4268
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR r$1[rsp]
	add	eax, DWORD PTR [rcx+12]
	mov	rcx, QWORD PTR bc$5[rsp]
	mov	WORD PTR [rcx+4], ax
; Line 4269
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	rcx, QWORD PTR r$1[rsp]
	add	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR bc$5[rsp]
	mov	WORD PTR [rcx+6], ax
; Line 4270
	vcvtsi2ss xmm0, xmm0, DWORD PTR advance$14[rsp]
	vmovss	xmm1, DWORD PTR scale$2[rsp]
	vmulss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR bc$5[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 4271
	vcvtsi2ss xmm0, xmm0, DWORD PTR x0$7[rsp]
	vmulss	xmm0, xmm0, DWORD PTR recip_h$8[rsp]
	vaddss	xmm0, xmm0, DWORD PTR sub_x$9[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 4272
	vcvtsi2ss xmm0, xmm0, DWORD PTR y0$10[rsp]
	vmulss	xmm0, xmm0, DWORD PTR recip_v$11[rsp]
	vaddss	xmm0, xmm0, DWORD PTR sub_y$12[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	vmovss	DWORD PTR [rax+12], xmm0
; Line 4273
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, DWORD PTR x0$7[rsp]
	add	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR recip_h$8[rsp]
	vaddss	xmm0, xmm0, DWORD PTR sub_x$9[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
; Line 4274
	mov	rax, QWORD PTR r$1[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	ecx, DWORD PTR y0$10[rsp]
	add	ecx, eax
	mov	eax, ecx
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR recip_v$11[rsp]
	vaddss	xmm0, xmm0, DWORD PTR sub_y$12[rsp]
	mov	rax, QWORD PTR bc$5[rsp]
	vmovss	DWORD PTR [rax+24], xmm0
; Line 4276
	cmp	DWORD PTR glyph$4[rsp], 0
	jne	SHORT $LN12@stbtt_Pack
; Line 4277
	mov	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR missing_glyph$[rsp], eax
$LN12@stbtt_Pack:
	jmp	$LN9@stbtt_Pack
$LN8@stbtt_Pack:
; Line 4278
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN13@stbtt_Pack
; Line 4279
	mov	DWORD PTR return_value$[rsp], 0
	jmp	$LN14@stbtt_Pack
$LN13@stbtt_Pack:
; Line 4280
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+20], 0
	je	SHORT $LN15@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+12], 0
	jne	SHORT $LN15@stbtt_Pack
	mov	rax, QWORD PTR r$1[rsp]
	cmp	DWORD PTR [rax+16], 0
	jne	SHORT $LN15@stbtt_Pack
	cmp	DWORD PTR missing_glyph$[rsp], 0
	jl	SHORT $LN15@stbtt_Pack
; Line 4281
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR missing_glyph$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 40				; 00000028H
	movsxd	r8, DWORD PTR j$[rsp]
	imul	r8, r8, 28
	mov	r9, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR [r9+rdx+24]
	lea	rdi, QWORD PTR [rdx+r8]
	lea	rsi, QWORD PTR [rax+rcx]
	mov	ecx, 28
	rep movsb
; Line 4282
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
; Line 4283
	mov	DWORD PTR return_value$[rsp], 0
$LN16@stbtt_Pack:
$LN14@stbtt_Pack:
$LN9@stbtt_Pack:
; Line 4286
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4287
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4288
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4291
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR old_h_over$[rsp]
	mov	DWORD PTR [rax+36], ecx
; Line 4292
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR old_v_over$[rsp]
	mov	DWORD PTR [rax+40], ecx
; Line 4294
	mov	eax, DWORD PTR return_value$[rsp]
; Line 4295
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
stbtt_PackFontRangesRenderIntoRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
rects$ = 56
num_rects$ = 64
stbtt_PackFontRangesPackRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4298
$LN3:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 4299
	mov	r8d, DWORD PTR num_rects$[rsp]
	mov	rdx, QWORD PTR rects$[rsp]
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	?stbrp_pack_rects@@YAXPEAUstbrp_context@@PEAUstbrp_rect@@H@Z ; stbrp_pack_rects
; Line 4300
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackFontRangesPackRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 80
k$ = 84
j$ = 88
fh$1 = 92
glyph$2 = 96
tv78 = 100
tv144 = 104
scale$3 = 108
missing_glyph_added$ = 112
codepoint$4 = 116
x0$5 = 120
x1$6 = 124
y0$7 = 128
y1$8 = 132
spc$ = 160
info$ = 168
ranges$ = 176
num_ranges$ = 184
rects$ = 192
stbtt_PackFontRangesGatherRects PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4150
$LN17:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 152				; 00000098H
; Line 4152
	mov	DWORD PTR missing_glyph_added$[rsp], 0
; Line 4154
	mov	DWORD PTR k$[rsp], 0
; Line 4155
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4156
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vmovss	DWORD PTR fh$1[rsp], xmm0
; Line 4157
	vmovss	xmm0, DWORD PTR fh$1[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN13@stbtt_Pack
	vmovss	xmm1, DWORD PTR fh$1[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	vmovss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN14@stbtt_Pack
$LN13@stbtt_Pack:
	vmovss	xmm0, DWORD PTR fh$1[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovups	xmm1, xmm0
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	vmovss	DWORD PTR tv78[rsp], xmm0
$LN14@stbtt_Pack:
	vmovss	xmm0, DWORD PTR tv78[rsp]
	vmovss	DWORD PTR scale$3[rsp], xmm0
; Line 4158
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	movzx	edx, BYTE PTR [rdx+36]
	mov	BYTE PTR [rcx+rax+32], dl
; Line 4159
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	rdx, QWORD PTR spc$[rsp]
	movzx	edx, BYTE PTR [rdx+40]
	mov	BYTE PTR [rcx+rax+33], dl
; Line 4160
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4162
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	cmp	QWORD PTR [rcx+rax+8], 0
	jne	SHORT $LN15@stbtt_Pack
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+4]
	add	eax, DWORD PTR j$[rsp]
	mov	DWORD PTR tv144[rsp], eax
	jmp	SHORT $LN16@stbtt_Pack
$LN15@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+8]
	mov	eax, DWORD PTR [rax+rcx*4]
	mov	DWORD PTR tv144[rsp], eax
$LN16@stbtt_Pack:
	mov	eax, DWORD PTR tv144[rsp]
	mov	DWORD PTR codepoint$4[rsp], eax
; Line 4163
	mov	edx, DWORD PTR codepoint$4[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_FindGlyphIndex
	mov	DWORD PTR glyph$2[rsp], eax
; Line 4164
	cmp	DWORD PTR glyph$2[rsp], 0
	jne	SHORT $LN8@stbtt_Pack
	mov	rax, QWORD PTR spc$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN10@stbtt_Pack
	cmp	DWORD PTR missing_glyph_added$[rsp], 0
	je	SHORT $LN8@stbtt_Pack
$LN10@stbtt_Pack:
; Line 4165
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+16], 0
	movsxd	rax, DWORD PTR k$[rsp]
	imul	rax, rax, 24
	mov	rcx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rcx+rax+12], 0
; Line 4166
	jmp	$LN9@stbtt_Pack
$LN8@stbtt_Pack:
; Line 4167
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+40]
	vcvtsi2ss xmm0, xmm0, rax
	vmovss	xmm1, DWORD PTR scale$3[rsp]
	vmulss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR spc$[rsp]
	mov	eax, DWORD PTR [rax+36]
	vcvtsi2ss xmm1, xmm1, rax
	vmovss	xmm2, DWORD PTR scale$3[rsp]
	vmulss	xmm1, xmm2, xmm1
	lea	rax, QWORD PTR y1$8[rsp]
	mov	QWORD PTR [rsp+72], rax
	lea	rax, QWORD PTR x1$6[rsp]
	mov	QWORD PTR [rsp+64], rax
	lea	rax, QWORD PTR y0$7[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR x0$5[rsp]
	mov	QWORD PTR [rsp+48], rax
	vxorps	xmm2, xmm2, xmm2
	vmovss	DWORD PTR [rsp+40], xmm2
	vxorps	xmm2, xmm2, xmm2
	vmovss	DWORD PTR [rsp+32], xmm2
	vmovups	xmm3, xmm0
	vmovups	xmm2, xmm1
	mov	edx, DWORD PTR glyph$2[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetGlyphBitmapBoxSubpixel
; Line 4172
	mov	eax, DWORD PTR x0$5[rsp]
	mov	ecx, DWORD PTR x1$6[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR spc$[rsp]
	add	eax, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rdx+rcx+12], eax
; Line 4173
	mov	eax, DWORD PTR y0$7[rsp]
	mov	ecx, DWORD PTR y1$8[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR spc$[rsp]
	add	eax, DWORD PTR [rcx+28]
	mov	rcx, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR [rcx+40]
	lea	eax, DWORD PTR [rax+rcx-1]
	movsxd	rcx, DWORD PTR k$[rsp]
	imul	rcx, rcx, 24
	mov	rdx, QWORD PTR rects$[rsp]
	mov	DWORD PTR [rdx+rcx+16], eax
; Line 4174
	cmp	DWORD PTR glyph$2[rsp], 0
	jne	SHORT $LN11@stbtt_Pack
; Line 4175
	mov	DWORD PTR missing_glyph_added$[rsp], 1
$LN11@stbtt_Pack:
$LN9@stbtt_Pack:
; Line 4177
	mov	eax, DWORD PTR k$[rsp]
	inc	eax
	mov	DWORD PTR k$[rsp], eax
; Line 4178
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
; Line 4179
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4181
	mov	eax, DWORD PTR k$[rsp]
; Line 4182
	add	rsp, 152				; 00000098H
	ret	0
stbtt_PackFontRangesGatherRects ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
x$1 = 32
y$2 = 36
ipw$ = 40
iph$ = 44
b$ = 48
chardata$ = 80
pw$ = 88
ph$ = 96
char_index$ = 104
xpos$ = 112
ypos$ = 120
q$ = 128
align_to_integer$ = 136
stbtt_GetPackedQuad PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4364
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 4365
	vcvtsi2ss xmm0, xmm0, DWORD PTR pw$[rsp]
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR ipw$[rsp], xmm0
	vcvtsi2ss xmm0, xmm0, DWORD PTR ph$[rsp]
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR iph$[rsp], xmm0
; Line 4366
	movsxd	rax, DWORD PTR char_index$[rsp]
	imul	rax, rax, 28
	mov	rcx, QWORD PTR chardata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rsp], rax
; Line 4368
	cmp	DWORD PTR align_to_integer$[rsp], 0
	je	$LN2@stbtt_GetP
; Line 4369
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+8]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vcvtss2sd xmm0, xmm0, xmm0
	call	QWORD PTR __imp_floor
	vcvttsd2si eax, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR x$1[rsp], xmm0
; Line 4370
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+12]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vcvtss2sd xmm0, xmm0, xmm0
	call	QWORD PTR __imp_floor
	vcvttsd2si eax, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	DWORD PTR y$2[rsp], xmm0
; Line 4371
	mov	rax, QWORD PTR q$[rsp]
	vmovss	xmm0, DWORD PTR x$1[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 4372
	mov	rax, QWORD PTR q$[rsp]
	vmovss	xmm0, DWORD PTR y$2[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 4373
	mov	rax, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR x$1[rsp]
	vaddss	xmm0, xmm0, DWORD PTR [rax+20]
	mov	rax, QWORD PTR b$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR [rax+8]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 4374
	mov	rax, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR y$2[rsp]
	vaddss	xmm0, xmm0, DWORD PTR [rax+24]
	mov	rax, QWORD PTR b$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR [rax+12]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
; Line 4375
	jmp	SHORT $LN3@stbtt_GetP
$LN2@stbtt_GetP:
; Line 4376
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 4377
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 4378
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+20]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 4379
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+24]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
$LN3@stbtt_GetP:
; Line 4382
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 4383
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+12], xmm0
; Line 4384
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+24], xmm0
; Line 4385
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+28], xmm0
; Line 4387
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 4388
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetPackedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 8
skip$ = 16
stbtt_PackSetSkipMissingCodepoints PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4006
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 4007
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR skip$[rsp]
	mov	DWORD PTR [rax+32], ecx
; Line 4008
	ret	0
stbtt_PackSetSkipMissingCodepoints ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
h_oversample$ = 56
v_oversample$ = 64
stbtt_PackSetOversampling PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3996
$LN7:
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3997
	cmp	DWORD PTR h_oversample$[rsp], 8
	jbe	SHORT $LN5@stbtt_Pack
	mov	r8d, 3997				; 00000f9dH
	lea	rdx, OFFSET FLAT:$SG144511
	lea	rcx, OFFSET FLAT:$SG144512
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN5@stbtt_Pack:
; Line 3998
	cmp	DWORD PTR v_oversample$[rsp], 8
	jbe	SHORT $LN6@stbtt_Pack
	mov	r8d, 3998				; 00000f9eH
	lea	rdx, OFFSET FLAT:$SG144513
	lea	rcx, OFFSET FLAT:$SG144514
	call	QWORD PTR __imp__wassert
	xor	eax, eax
$LN6@stbtt_Pack:
; Line 3999
	cmp	DWORD PTR h_oversample$[rsp], 8
	ja	SHORT $LN2@stbtt_Pack
; Line 4000
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR h_oversample$[rsp]
	mov	DWORD PTR [rax+36], ecx
$LN2@stbtt_Pack:
; Line 4001
	cmp	DWORD PTR v_oversample$[rsp], 8
	ja	SHORT $LN3@stbtt_Pack
; Line 4002
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR v_oversample$[rsp]
	mov	DWORD PTR [rax+40], ecx
$LN3@stbtt_Pack:
; Line 4003
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackSetOversampling ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
i$ = 48
j$ = 52
n$ = 56
return_value$ = 60
rects$ = 64
info$ = 80
spc$ = 256
fontdata$ = 264
font_index$ = 272
ranges$ = 280
num_ranges$ = 288
stbtt_PackFontRanges PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4303
$LN13:
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 248				; 000000f8H
; Line 4305
	mov	DWORD PTR return_value$[rsp], 1
; Line 4310
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@stbtt_Pack
$LN2@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	$LN3@stbtt_Pack
; Line 4311
	mov	DWORD PTR j$[rsp], 0
	jmp	SHORT $LN7@stbtt_Pack
$LN5@stbtt_Pack:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@stbtt_Pack:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	cmp	DWORD PTR j$[rsp], eax
	jge	$LN6@stbtt_Pack
; Line 4312
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+6], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+4], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx+2], dx
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	movsxd	rcx, DWORD PTR j$[rsp]
	imul	rcx, rcx, 28
	mov	rdx, QWORD PTR ranges$[rsp]
	mov	rax, QWORD PTR [rdx+rax+24]
	xor	edx, edx
	mov	WORD PTR [rax+rcx], dx
	jmp	$LN5@stbtt_Pack
$LN6@stbtt_Pack:
	jmp	$LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 4317
	mov	DWORD PTR n$[rsp], 0
; Line 4318
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN10@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@stbtt_Pack:
	mov	eax, DWORD PTR num_ranges$[rsp]
	cmp	DWORD PTR i$[rsp], eax
	jge	SHORT $LN9@stbtt_Pack
; Line 4319
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 40				; 00000028H
	mov	rcx, QWORD PTR ranges$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	ecx, DWORD PTR n$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR n$[rsp], eax
	jmp	SHORT $LN8@stbtt_Pack
$LN9@stbtt_Pack:
; Line 4321
	movsxd	rax, DWORD PTR n$[rsp]
	imul	rax, rax, 24
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR rects$[rsp], rax
; Line 4322
	cmp	QWORD PTR rects$[rsp], 0
	jne	SHORT $LN11@stbtt_Pack
; Line 4323
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN11@stbtt_Pack:
; Line 4325
	mov	rax, QWORD PTR spc$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR info$[rsp], rax
; Line 4326
	mov	edx, DWORD PTR font_index$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR fontdata$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont
; Line 4328
	mov	rax, QWORD PTR rects$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR num_ranges$[rsp]
	mov	r8, QWORD PTR ranges$[rsp]
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesGatherRects
	mov	DWORD PTR n$[rsp], eax
; Line 4330
	mov	r8d, DWORD PTR n$[rsp]
	mov	rdx, QWORD PTR rects$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesPackRects
; Line 4332
	mov	rax, QWORD PTR rects$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR num_ranges$[rsp]
	mov	r8, QWORD PTR ranges$[rsp]
	lea	rdx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRangesRenderIntoRects
	mov	DWORD PTR return_value$[rsp], eax
; Line 4334
	mov	rcx, QWORD PTR rects$[rsp]
	call	QWORD PTR __imp_free
; Line 4335
	mov	eax, DWORD PTR return_value$[rsp]
$LN1@stbtt_Pack:
; Line 4336
	add	rsp, 248				; 000000f8H
	ret	0
stbtt_PackFontRanges ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
range$ = 48
spc$ = 112
fontdata$ = 120
font_index$ = 128
font_size$ = 136
first_unicode_codepoint_in_range$ = 144
num_chars_in_range$ = 152
chardata_for_range$ = 160
stbtt_PackFontRange PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4340
$LN3:
	vmovss	DWORD PTR [rsp+32], xmm3
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 4342
	mov	eax, DWORD PTR first_unicode_codepoint_in_range$[rsp]
	mov	DWORD PTR range$[rsp+4], eax
; Line 4343
	mov	QWORD PTR range$[rsp+8], 0
; Line 4344
	mov	eax, DWORD PTR num_chars_in_range$[rsp]
	mov	DWORD PTR range$[rsp+16], eax
; Line 4345
	mov	rax, QWORD PTR chardata_for_range$[rsp]
	mov	QWORD PTR range$[rsp+24], rax
; Line 4346
	vmovss	xmm0, DWORD PTR font_size$[rsp]
	vmovss	DWORD PTR range$[rsp], xmm0
; Line 4347
	mov	DWORD PTR [rsp+32], 1
	lea	r9, QWORD PTR range$[rsp]
	mov	r8d, DWORD PTR font_index$[rsp]
	mov	rdx, QWORD PTR fontdata$[rsp]
	mov	rcx, QWORD PTR spc$[rsp]
	call	stbtt_PackFontRanges
; Line 4348
	add	rsp, 104				; 00000068H
	ret	0
stbtt_PackFontRange ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
spc$ = 48
stbtt_PackEnd PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3990
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 3991
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+56]
	call	QWORD PTR __imp_free
; Line 3992
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR __imp_free
; Line 3993
	add	rsp, 40					; 00000028H
	ret	0
stbtt_PackEnd ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv91 = 48
num_nodes$ = 52
nodes$ = 56
context$ = 64
spc$ = 96
pixels$ = 104
pw$ = 112
ph$ = 120
stride_in_bytes$ = 128
padding$ = 136
alloc_context$ = 144
stbtt_PackBegin PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3958
$LN10:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 3959
	mov	ecx, 20
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR context$[rsp], rax
; Line 3960
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR num_nodes$[rsp], eax
; Line 3961
	movsxd	rax, DWORD PTR num_nodes$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR nodes$[rsp], rax
; Line 3963
	cmp	QWORD PTR context$[rsp], 0
	je	SHORT $LN3@stbtt_Pack
	cmp	QWORD PTR nodes$[rsp], 0
	jne	SHORT $LN2@stbtt_Pack
$LN3@stbtt_Pack:
; Line 3964
	cmp	QWORD PTR context$[rsp], 0
	je	SHORT $LN4@stbtt_Pack
	mov	rcx, QWORD PTR context$[rsp]
	call	QWORD PTR __imp_free
$LN4@stbtt_Pack:
; Line 3965
	cmp	QWORD PTR nodes$[rsp], 0
	je	SHORT $LN5@stbtt_Pack
	mov	rcx, QWORD PTR nodes$[rsp]
	call	QWORD PTR __imp_free
$LN5@stbtt_Pack:
; Line 3966
	xor	eax, eax
	jmp	$LN1@stbtt_Pack
$LN2@stbtt_Pack:
; Line 3969
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR alloc_context$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 3970
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rax+16], ecx
; Line 3971
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rax+20], ecx
; Line 3972
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR pixels$[rsp]
	mov	QWORD PTR [rax+48], rcx
; Line 3973
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR context$[rsp]
	mov	QWORD PTR [rax+8], rcx
; Line 3974
	mov	rax, QWORD PTR spc$[rsp]
	mov	rcx, QWORD PTR nodes$[rsp]
	mov	QWORD PTR [rax+56], rcx
; Line 3975
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR padding$[rsp]
	mov	DWORD PTR [rax+28], ecx
; Line 3976
	cmp	DWORD PTR stride_in_bytes$[rsp], 0
	je	SHORT $LN8@stbtt_Pack
	mov	eax, DWORD PTR stride_in_bytes$[rsp]
	mov	DWORD PTR tv91[rsp], eax
	jmp	SHORT $LN9@stbtt_Pack
$LN8@stbtt_Pack:
	mov	eax, DWORD PTR pw$[rsp]
	mov	DWORD PTR tv91[rsp], eax
$LN9@stbtt_Pack:
	mov	rax, QWORD PTR spc$[rsp]
	mov	ecx, DWORD PTR tv91[rsp]
	mov	DWORD PTR [rax+24], ecx
; Line 3977
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+36], 1
; Line 3978
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+40], 1
; Line 3979
	mov	rax, QWORD PTR spc$[rsp]
	mov	DWORD PTR [rax+32], 0
; Line 3981
	mov	eax, DWORD PTR padding$[rsp]
	mov	ecx, DWORD PTR ph$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR padding$[rsp]
	mov	edx, DWORD PTR pw$[rsp]
	sub	edx, ecx
	mov	ecx, edx
	mov	edx, DWORD PTR num_nodes$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9, QWORD PTR nodes$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	mov	rcx, QWORD PTR context$[rsp]
	call	?stbrp_init_target@@YAXPEAUstbrp_context@@HHPEAUstbrp_node@@H@Z ; stbrp_init_target
; Line 3983
	cmp	QWORD PTR pixels$[rsp], 0
	je	SHORT $LN6@stbtt_Pack
; Line 3984
	mov	eax, DWORD PTR pw$[rsp]
	imul	eax, DWORD PTR ph$[rsp]
	cdqe
	mov	r8, rax
	xor	edx, edx
	mov	rcx, QWORD PTR pixels$[rsp]
	call	memset
$LN6@stbtt_Pack:
; Line 3986
	mov	eax, 1
$LN1@stbtt_Pack:
; Line 3987
	add	rsp, 88					; 00000058H
	ret	0
stbtt_PackBegin ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
scale$ = 32
tv78 = 36
i_ascent$ = 40
i_descent$ = 44
i_lineGap$ = 48
info$ = 64
fontdata$ = 240
index$ = 248
size$ = 256
ascent$ = 264
descent$ = 272
lineGap$ = 280
stbtt_GetScaledFontVMetrics PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4351
$LN5:
	mov	QWORD PTR [rsp+32], r9
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 232				; 000000e8H
; Line 4355
	mov	edx, DWORD PTR index$[rsp]
	mov	rcx, QWORD PTR fontdata$[rsp]
	call	stbtt_GetFontOffsetForIndex
	mov	r8d, eax
	mov	rdx, QWORD PTR fontdata$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_InitFont
; Line 4356
	vmovss	xmm0, DWORD PTR size$[rsp]
	vcomiss	xmm0, DWORD PTR __real@00000000
	jbe	SHORT $LN3@stbtt_GetS
	vmovss	xmm1, DWORD PTR size$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForPixelHeight
	vmovss	DWORD PTR tv78[rsp], xmm0
	jmp	SHORT $LN4@stbtt_GetS
$LN3@stbtt_GetS:
	vmovss	xmm0, DWORD PTR size$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovups	xmm1, xmm0
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_ScaleForMappingEmToPixels
	vmovss	DWORD PTR tv78[rsp], xmm0
$LN4@stbtt_GetS:
	vmovss	xmm0, DWORD PTR tv78[rsp]
	vmovss	DWORD PTR scale$[rsp], xmm0
; Line 4357
	lea	r9, QWORD PTR i_lineGap$[rsp]
	lea	r8, QWORD PTR i_descent$[rsp]
	lea	rdx, QWORD PTR i_ascent$[rsp]
	lea	rcx, QWORD PTR info$[rsp]
	call	stbtt_GetFontVMetrics
; Line 4358
	vcvtsi2ss xmm0, xmm0, DWORD PTR i_ascent$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR ascent$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 4359
	vcvtsi2ss xmm0, xmm0, DWORD PTR i_descent$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR descent$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 4360
	vcvtsi2ss xmm0, xmm0, DWORD PTR i_lineGap$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR scale$[rsp]
	mov	rax, QWORD PTR lineGap$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 4361
	add	rsp, 232				; 000000e8H
	ret	0
stbtt_GetScaledFontVMetrics ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
d3d_bias$ = 32
tv65 = 36
round_x$ = 40
round_y$ = 44
ipw$ = 48
iph$ = 52
b$ = 56
chardata$ = 80
pw$ = 88
ph$ = 96
char_index$ = 104
xpos$ = 112
ypos$ = 120
q$ = 128
opengl_fillrule$ = 136
stbtt_GetBakedQuad PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 3860
$LN5:
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 3861
	cmp	DWORD PTR opengl_fillrule$[rsp], 0
	je	SHORT $LN3@stbtt_GetB
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR tv65[rsp], xmm0
	jmp	SHORT $LN4@stbtt_GetB
$LN3@stbtt_GetB:
	vmovss	xmm0, DWORD PTR __real@bf000000
	vmovss	DWORD PTR tv65[rsp], xmm0
$LN4@stbtt_GetB:
	vmovss	xmm0, DWORD PTR tv65[rsp]
	vmovss	DWORD PTR d3d_bias$[rsp], xmm0
; Line 3862
	vcvtsi2ss xmm0, xmm0, DWORD PTR pw$[rsp]
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR ipw$[rsp], xmm0
	vcvtsi2ss xmm0, xmm0, DWORD PTR ph$[rsp]
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR iph$[rsp], xmm0
; Line 3863
	movsxd	rax, DWORD PTR char_index$[rsp]
	imul	rax, rax, 20
	mov	rcx, QWORD PTR chardata$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR b$[rsp], rax
; Line 3864
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+8]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vcvtss2sd xmm0, xmm0, xmm0
	call	QWORD PTR __imp_floor
	vcvttsd2si eax, xmm0
	mov	DWORD PTR round_x$[rsp], eax
; Line 3865
	mov	rax, QWORD PTR ypos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+12]
	vaddss	xmm0, xmm0, DWORD PTR __real@3f000000
	vcvtss2sd xmm0, xmm0, xmm0
	call	QWORD PTR __imp_floor
	vcvttsd2si eax, xmm0
	mov	DWORD PTR round_y$[rsp], eax
; Line 3867
	vcvtsi2ss xmm0, xmm0, DWORD PTR round_x$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 3868
	vcvtsi2ss xmm0, xmm0, DWORD PTR round_y$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 3869
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	mov	ecx, DWORD PTR round_x$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR b$[rsp]
	movzx	ecx, WORD PTR [rcx]
	sub	eax, ecx
	vcvtsi2ss xmm0, xmm0, eax
	vaddss	xmm0, xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+16], xmm0
; Line 3870
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	mov	ecx, DWORD PTR round_y$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR b$[rsp]
	movzx	ecx, WORD PTR [rcx+2]
	sub	eax, ecx
	vcvtsi2ss xmm0, xmm0, eax
	vaddss	xmm0, xmm0, DWORD PTR d3d_bias$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
; Line 3872
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 3873
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+2]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+12], xmm0
; Line 3874
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+4]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR ipw$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+24], xmm0
; Line 3875
	mov	rax, QWORD PTR b$[rsp]
	movzx	eax, WORD PTR [rax+6]
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm0, xmm0, DWORD PTR iph$[rsp]
	mov	rax, QWORD PTR q$[rsp]
	vmovss	DWORD PTR [rax+28], xmm0
; Line 3877
	mov	rax, QWORD PTR xpos$[rsp]
	mov	rcx, QWORD PTR b$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+16]
	mov	rax, QWORD PTR xpos$[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 3878
	add	rsp, 72					; 00000048H
	ret	0
stbtt_GetBakedQuad ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
data$ = 96
offset$ = 104
pixel_height$ = 112
pixels$ = 120
pw$ = 128
ph$ = 136
first_char$ = 144
num_chars$ = 152
chardata$ = 160
stbtt_BakeFontBitmap PROC
; File W:\cpp\void\vendor\stb\stb_truetype.h
; Line 4938
$LN3:
	mov	QWORD PTR [rsp+32], r9
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 4939
	mov	rax, QWORD PTR chardata$[rsp]
	mov	QWORD PTR [rsp+64], rax
	mov	eax, DWORD PTR num_chars$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	eax, DWORD PTR first_char$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR ph$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR pw$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR pixels$[rsp]
	vmovss	xmm2, DWORD PTR pixel_height$[rsp]
	mov	edx, DWORD PTR offset$[rsp]
	mov	rcx, QWORD PTR data$[rsp]
	call	?stbtt_BakeFontBitmap_internal@@YAHPEAEHM0HHHHPEAUstbtt_bakedchar@@@Z ; stbtt_BakeFontBitmap_internal
; Line 4940
	add	rsp, 88					; 00000058H
	ret	0
stbtt_BakeFontBitmap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
LayoutH$ = 64
LayoutW$ = 68
VertexCount$ = 72
GlyphFont$ = 80
Graphics$ = 112
FontIndex$ = 120
FontHeightInPixels$ = 128
TextString$ = 136
?ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z PROC ; ID3D11Graphics_DrawText
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1823
	mov	QWORD PTR [rsp+32], r9
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
; Line 1827
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4672]
	vcvtsi2ss xmm0, xmm0, DWORD PTR [rax+520]
	vmovss	DWORD PTR LayoutW$[rsp], xmm0
; Line 1828
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4672]
	vcvtsi2ss xmm0, xmm0, DWORD PTR [rax+524]
	vmovss	DWORD PTR LayoutH$[rsp], xmm0
; Line 1829
	mov	edx, DWORD PTR FontIndex$[rsp]
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_AcquireGlyphFont@@YAPEAUID3D11_FONT_ENTRY@@PEAUID3D11_GRAPHICS@@H@Z ; ID3D11Graphics_AcquireGlyphFont
	mov	QWORD PTR GlyphFont$[rsp], rax
; Line 1830
	mov	rcx, QWORD PTR TextString$[rsp]
	call	strlen
	mov	rcx, QWORD PTR GlyphFont$[rsp]
	mov	rdx, QWORD PTR TextString$[rsp]
	mov	QWORD PTR [rsp+48], rdx
	mov	DWORD PTR [rsp+40], eax
	vmovss	xmm0, DWORD PTR LayoutH$[rsp]
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR LayoutW$[rsp]
	vmovss	xmm2, DWORD PTR FontHeightInPixels$[rsp]
	lea	rdx, OFFSET FLAT:?VertexArray@?1??ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z@4PAUGLYPH_VERTEX@@A
	call	?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z ; D3D11LayoutTextVertices
	mov	DWORD PTR VertexCount$[rsp], eax
; Line 1831
	lea	rax, OFFSET FLAT:?VertexArray@?1??ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z@4PAUGLYPH_VERTEX@@A
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR VertexCount$[rsp]
	vmovss	xmm2, DWORD PTR FontHeightInPixels$[rsp]
	mov	rdx, QWORD PTR GlyphFont$[rsp]
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_DrawGlyphFontVertices@@YAXPEAUID3D11_GRAPHICS@@PEAUID3D11_FONT_ENTRY@@MHPEAUGLYPH_VERTEX@@@Z ; ID3D11Graphics_DrawGlyphFontVertices
; Line 1832
	add	rsp, 104				; 00000068H
	ret	0
?ID3D11Graphics_DrawText@@YAXPEAUID3D11_GRAPHICS@@HMPEBD@Z ENDP ; ID3D11Graphics_DrawText
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 32
CurX$ = 36
CurY$ = 40
VertexCount$ = 44
FontScale$ = 48
AdvX$2 = 52
tv83 = 56
AdvY$ = 60
Cells$ = 64
Cell$3 = 72
__$ArrayPad$ = 104
Info$ = 144
Vertices$ = 152
HeightInPixels$ = 160
LayoutW$ = 168
LayoutH$ = 176
TextLen$ = 184
TextStr$ = 192
?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z PROC ; D3D11LayoutTextVertices
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1784
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1785
	mov	rax, QWORD PTR Info$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR Cells$[rsp], rax
; Line 1787
	mov	rax, QWORD PTR Info$[rsp]
	vmovss	xmm0, DWORD PTR HeightInPixels$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR [rax+4]
	vmovss	DWORD PTR FontScale$[rsp], xmm0
; Line 1788
	mov	rax, QWORD PTR Info$[rsp]
	mov	rcx, QWORD PTR Info$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vsubss	xmm0, xmm0, DWORD PTR [rcx+12]
	mov	rax, QWORD PTR Info$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR [rax+16]
	vmovss	xmm1, DWORD PTR FontScale$[rsp]
	vmulss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR AdvY$[rsp], xmm0
; Line 1789
	mov	rax, QWORD PTR Info$[rsp]
	vmovss	xmm0, DWORD PTR [rax+16]
	vmovss	DWORD PTR CurY$[rsp], xmm0
; Line 1790
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR CurX$[rsp], xmm0
; Line 1792
	mov	DWORD PTR VertexCount$[rsp], 0
; Line 1794
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@D3D11Layou
$LN2@D3D11Layou:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@D3D11Layou:
	mov	eax, DWORD PTR TextLen$[rsp]
	cmp	DWORD PTR I$1[rsp], eax
	jge	$LN3@D3D11Layou
; Line 1796
	mov	rax, QWORD PTR TextStr$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	DWORD PTR tv83[rsp], eax
	mov	rax, QWORD PTR TextStr$[rsp]
	inc	rax
	mov	QWORD PTR TextStr$[rsp], rax
	mov	ecx, DWORD PTR tv83[rsp]
	call	?GetCharIndex@@YAHH@Z			; GetCharIndex
	movsxd	rcx, DWORD PTR I$1[rsp]
	imul	rcx, rcx, 12
	mov	rdx, QWORD PTR Vertices$[rsp]
	mov	DWORD PTR [rdx+rcx], eax
; Line 1797
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Vertices$[rsp]
	movsxd	rax, DWORD PTR [rcx+rax]
	imul	rax, rax, 28
	lea	rcx, QWORD PTR Cell$3[rsp]
	mov	rdx, QWORD PTR Cells$[rsp]
	mov	rdi, rcx
	lea	rsi, QWORD PTR [rdx+rax]
	mov	ecx, 28
	rep movsb
; Line 1798
	vmovss	xmm0, DWORD PTR Cell$3[rsp+24]
	vsubss	xmm0, xmm0, DWORD PTR Cell$3[rsp+16]
	vmulss	xmm0, xmm0, DWORD PTR FontScale$[rsp]
	vmovss	DWORD PTR AdvX$2[rsp], xmm0
; Line 1800
	vmovss	xmm0, DWORD PTR CurX$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR AdvX$2[rsp]
	vcomiss	xmm0, DWORD PTR LayoutW$[rsp]
	jbe	SHORT $LN5@D3D11Layou
; Line 1801
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR CurX$[rsp], xmm0
; Line 1802
	vmovss	xmm0, DWORD PTR CurY$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR AdvY$[rsp]
	vmovss	DWORD PTR CurY$[rsp], xmm0
$LN5@D3D11Layou:
; Line 1805
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Vertices$[rsp]
	vmovss	xmm0, DWORD PTR CurX$[rsp]
	vmovss	DWORD PTR [rcx+rax+4], xmm0
; Line 1806
	movsxd	rax, DWORD PTR I$1[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR Vertices$[rsp]
	vmovss	xmm0, DWORD PTR CurY$[rsp]
	vmovss	DWORD PTR [rcx+rax+8], xmm0
; Line 1808
	vmovss	xmm0, DWORD PTR CurX$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR AdvX$2[rsp]
	vmovss	DWORD PTR CurX$[rsp], xmm0
; Line 1810
	mov	eax, DWORD PTR VertexCount$[rsp]
	inc	eax
	mov	DWORD PTR VertexCount$[rsp], eax
; Line 1811
	jmp	$LN2@D3D11Layou
$LN3@D3D11Layou:
; Line 1814
	mov	eax, DWORD PTR VertexCount$[rsp]
; Line 1815
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?D3D11LayoutTextVertices@@YAHPEAUGLYPH_FONT_INFO@@PEAUGLYPH_VERTEX@@MMMHPEBD@Z ENDP ; D3D11LayoutTextVertices
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Offset$ = 48
Stride$ = 52
InstanceCount$ = 56
VertexCountPerInstance$ = 60
ViewW$ = 64
ViewH$ = 68
tv130 = 72
tv136 = 80
tv161 = 88
tv159 = 96
tv181 = 104
tv218 = 112
tv252 = 120
tv254 = 128
InputLayout$ = 136
tv264 = 144
tv266 = 152
VertexBuffer$ = 160
tv280 = 168
tv282 = 176
tv296 = 184
tv298 = 192
CellsView$ = 200
tv310 = 208
tv312 = 216
VertexShader$ = 224
tv324 = 232
tv326 = 240
AtlasView$ = 248
tv338 = 256
tv340 = 264
PixelShader$ = 272
tv352 = 280
tv354 = 288
tv367 = 296
tv369 = 304
Graphics$ = 336
GlyphFont$ = 344
FontHeightInPixels$ = 352
VertexCount$ = 360
VertexArray$ = 368
?ID3D11Graphics_DrawGlyphFontVertices@@YAXPEAUID3D11_GRAPHICS@@PEAUID3D11_FONT_ENTRY@@MHPEAUGLYPH_VERTEX@@@Z PROC ; ID3D11Graphics_DrawGlyphFontVertices
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1708
	mov	DWORD PTR [rsp+32], r9d
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 328				; 00000148H
; Line 1709
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4672]
	mov	eax, DWORD PTR [rax+520]
	mov	DWORD PTR ViewW$[rsp], eax
; Line 1710
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4672]
	mov	eax, DWORD PTR [rax+524]
	mov	DWORD PTR ViewH$[rsp], eax
; Line 1712
	mov	rax, QWORD PTR Graphics$[rsp]
	cmp	QWORD PTR [rax+5720], 0
	je	SHORT $LN4@ID3D11Grap
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	ecx, DWORD PTR VertexCount$[rsp]
	cmp	DWORD PTR [rax+5716], ecx
	jge	$LN2@ID3D11Grap
$LN4@ID3D11Grap:
; Line 1714
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	ecx, DWORD PTR VertexCount$[rsp]
	mov	DWORD PTR [rax+5716], ecx
; Line 1715
	mov	rax, QWORD PTR Graphics$[rsp]
	cmp	QWORD PTR [rax+5720], 0
	je	SHORT $LN5@ID3D11Grap
; Line 1716
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+5720]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv130[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR [rax+5720]
	call	QWORD PTR tv130[rsp]
$LN5@ID3D11Grap:
; Line 1718
	movsxd	rax, DWORD PTR VertexCount$[rsp]
	imul	rax, rax, 12
	mov	QWORD PTR tv136[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDevice@@YAPEAUID3D11Device@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDevice
	mov	rcx, QWORD PTR VertexArray$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	rcx, QWORD PTR tv136[rsp]
	mov	r9d, ecx
	mov	r8d, 65536				; 00010000H
	mov	edx, 2
	mov	rcx, rax
	call	?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z ; ID3D11Device_CreateVertexBuffer
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+5720], rax
; Line 1721
	jmp	SHORT $LN3@ID3D11Grap
$LN2@ID3D11Grap:
; Line 1723
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+5720]
	mov	QWORD PTR tv161[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv159[rsp], rax
	movsxd	rax, DWORD PTR VertexCount$[rsp]
	imul	rax, rax, 12
	mov	rcx, QWORD PTR VertexArray$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, eax
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv161[rsp]
	mov	rcx, QWORD PTR tv159[rsp]
	call	?ID3D11DeviceContext_UpdateDynamicVertexBuffer@@YAHPEAUID3D11DeviceContext@@PEAUID3D11Buffer@@IIPEAX@Z ; ID3D11DeviceContext_UpdateDynamicVertexBuffer
$LN3@ID3D11Grap:
; Line 1729
	mov	rax, QWORD PTR Graphics$[rsp]
	cmp	QWORD PTR [rax+6584], 0
	je	SHORT $LN7@ID3D11Grap
	mov	rax, QWORD PTR Graphics$[rsp]
	vcvtsi2ss xmm0, xmm0, DWORD PTR [rax+5712]
	vucomiss xmm0, DWORD PTR FontHeightInPixels$[rsp]
	jp	SHORT $LN10@ID3D11Grap
	je	$LN6@ID3D11Grap
$LN10@ID3D11Grap:
$LN7@ID3D11Grap:
; Line 1732
	mov	rax, QWORD PTR Graphics$[rsp]
	cmp	QWORD PTR [rax+6584], 0
	je	SHORT $LN8@ID3D11Grap
; Line 1733
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+6584]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv181[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR [rax+6584]
	call	QWORD PTR tv181[rsp]
$LN8@ID3D11Grap:
; Line 1736
	vcvttss2si eax, DWORD PTR FontHeightInPixels$[rsp]
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	DWORD PTR [rcx+5712], eax
; Line 1737
	mov	rax, QWORD PTR GlyphFont$[rsp]
	vcvtsi2ss xmm0, xmm0, DWORD PTR [rax+40]
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR Graphics$[rsp]
	vmovss	DWORD PTR [rax+6736], xmm0
; Line 1738
	mov	rax, QWORD PTR GlyphFont$[rsp]
	vcvtsi2ss xmm0, xmm0, DWORD PTR [rax+44]
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	mov	rax, QWORD PTR Graphics$[rsp]
	vmovss	DWORD PTR [rax+6740], xmm0
; Line 1739
	mov	rax, QWORD PTR GlyphFont$[rsp]
	vmovss	xmm0, DWORD PTR FontHeightInPixels$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR [rax+4]
	mov	rax, QWORD PTR Graphics$[rsp]
	vmovss	DWORD PTR [rax+6744], xmm0
; Line 1740
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	DWORD PTR [rax+6748], 0
; Line 1742
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6592				; 000019c0H
	mov	QWORD PTR tv218[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDevice@@YAPEAUID3D11Device@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDevice
	mov	rcx, QWORD PTR tv218[rsp]
	mov	r8, rcx
	mov	edx, 16
	mov	rcx, rax
	call	?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z ; ID3D11Device_CreateDefaultCB
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+6584], rax
$LN6@ID3D11Grap:
; Line 1748
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+5720]
	mov	QWORD PTR VertexBuffer$[rsp], rax
; Line 1749
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+6384]
	mov	QWORD PTR InputLayout$[rsp], rax
; Line 1750
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+6352]
	mov	QWORD PTR VertexShader$[rsp], rax
; Line 1751
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+6504]
	mov	QWORD PTR PixelShader$[rsp], rax
; Line 1752
	mov	rax, QWORD PTR GlyphFont$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR CellsView$[rsp], rax
; Line 1753
	mov	rax, QWORD PTR GlyphFont$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR AtlasView$[rsp], rax
; Line 1755
	mov	DWORD PTR Stride$[rsp], 12
; Line 1756
	mov	DWORD PTR Offset$[rsp], 0
; Line 1757
	mov	eax, DWORD PTR VertexCount$[rsp]
	mov	DWORD PTR InstanceCount$[rsp], eax
; Line 1758
	mov	DWORD PTR VertexCountPerInstance$[rsp], 4
; Line 1759
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR tv254[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv252[rsp], rax
	mov	edx, 5
	mov	rcx, QWORD PTR tv252[rsp]
	call	QWORD PTR tv254[rsp]
; Line 1760
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR tv266[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv264[rsp], rax
	mov	rdx, QWORD PTR InputLayout$[rsp]
	mov	rcx, QWORD PTR tv264[rsp]
	call	QWORD PTR tv266[rsp]
; Line 1761
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+144]
	mov	QWORD PTR tv282[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv280[rsp], rax
	lea	rax, QWORD PTR Offset$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR Stride$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR VertexBuffer$[rsp]
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv280[rsp]
	call	QWORD PTR tv282[rsp]
; Line 1763
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv298[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv296[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6576				; 000019b0H
	mov	r9, rax
	mov	r8d, 2
	xor	edx, edx
	mov	rcx, QWORD PTR tv296[rsp]
	call	QWORD PTR tv298[rsp]
; Line 1767
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+200]
	mov	QWORD PTR tv312[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv310[rsp], rax
	lea	r9, QWORD PTR CellsView$[rsp]
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv310[rsp]
	call	QWORD PTR tv312[rsp]
; Line 1768
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv326[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv324[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR VertexShader$[rsp]
	mov	rcx, QWORD PTR tv324[rsp]
	call	QWORD PTR tv326[rsp]
; Line 1769
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv340[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv338[rsp], rax
	lea	r9, QWORD PTR AtlasView$[rsp]
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv338[rsp]
	call	QWORD PTR tv340[rsp]
; Line 1770
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv354[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv352[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR PixelShader$[rsp]
	mov	rcx, QWORD PTR tv352[rsp]
	call	QWORD PTR tv354[rsp]
; Line 1771
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+168]
	mov	QWORD PTR tv369[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv367[rsp], rax
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, DWORD PTR InstanceCount$[rsp]
	mov	edx, DWORD PTR VertexCountPerInstance$[rsp]
	mov	rcx, QWORD PTR tv367[rsp]
	call	QWORD PTR tv369[rsp]
; Line 1772
	add	rsp, 328				; 00000148H
	ret	0
?ID3D11Graphics_DrawGlyphFontVertices@@YAXPEAUID3D11_GRAPHICS@@PEAUID3D11_FONT_ENTRY@@MHPEAUGLYPH_VERTEX@@@Z ENDP ; ID3D11Graphics_DrawGlyphFontVertices
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
SlotIndex$ = 48
Font$1 = 56
tv80 = 64
Device$ = 72
$T2 = 80
$T3 = 112
$T4 = 144
$T5 = 176
Graphics$ = 240
I$ = 248
?ID3D11Graphics_CreateGlyphFont@@YAHPEAUID3D11_GRAPHICS@@PEAUGLYPH_FONT@@@Z PROC ; ID3D11Graphics_CreateGlyphFont
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1678
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 216				; 000000d8H
; Line 1679
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4664]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR Device$[rsp], rax
; Line 1681
	mov	DWORD PTR SlotIndex$[rsp], -1
; Line 1683
	mov	rax, QWORD PTR Graphics$[rsp]
	movsxd	rax, DWORD PTR [rax+5704]
	cmp	rax, 15
	jae	$LN2@ID3D11Grap
; Line 1685
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	eax, DWORD PTR [rax+5704]
	inc	eax
	mov	DWORD PTR tv80[rsp], eax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	eax, DWORD PTR [rax+5704]
	inc	eax
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	DWORD PTR [rcx+5704], eax
	mov	eax, DWORD PTR tv80[rsp]
	mov	DWORD PTR SlotIndex$[rsp], eax
; Line 1687
	movsxd	rax, DWORD PTR SlotIndex$[rsp]
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR Graphics$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4680]
	mov	QWORD PTR Font$1[rsp], rax
; Line 1688
	mov	rdi, QWORD PTR Font$1[rsp]
	mov	rsi, QWORD PTR I$[rsp]
	mov	ecx, 40					; 00000028H
	rep movsb
; Line 1689
	mov	rax, QWORD PTR Font$1[rsp]
	mov	rcx, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rcx+44]
	mov	DWORD PTR [rax+40], ecx
; Line 1690
	mov	rax, QWORD PTR Font$1[rsp]
	mov	rcx, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rcx+48]
	mov	DWORD PTR [rax+44], ecx
; Line 1691
	lea	rax, QWORD PTR $T2[rsp]
	mov	rcx, QWORD PTR I$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+40]
	mov	ecx, 24
	rep movsb
	lea	r9, QWORD PTR $T2[rsp]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, QWORD PTR Device$[rsp]
	call	?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z ; ID3D11Device_CreateSRV
	mov	rcx, QWORD PTR Font$1[rsp]
	mov	QWORD PTR [rcx+48], rax
; Line 1692
	mov	rax, QWORD PTR I$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 28
	mov	rax, QWORD PTR I$[rsp]
	mov	r8d, DWORD PTR [rax+28]
	xor	edx, edx
	mov	rcx, QWORD PTR Device$[rsp]
	call	?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z ; ID3D11Device_CreateImmutableStructBufferSRV
	mov	rcx, QWORD PTR Font$1[rsp]
	mov	QWORD PTR [rcx+56], rax
; Line 1694
	jmp	SHORT $LN3@ID3D11Grap
$LN2@ID3D11Grap:
; Line 1696
	mov	DWORD PTR [rsp+32], 71			; 00000047H
	mov	r9d, 1696				; 000006a0H
	lea	r8, OFFSET FLAT:$SG141179
	lea	rdx, OFFSET FLAT:$SG141180
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG141178
	mov	edx, 6
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ID3D11Grap:
; Line 1698
	mov	eax, DWORD PTR SlotIndex$[rsp]
; Line 1699
	add	rsp, 216				; 000000d8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_CreateGlyphFont@@YAHPEAUID3D11_GRAPHICS@@PEAUGLYPH_FONT@@@Z ENDP ; ID3D11Graphics_CreateGlyphFont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Char$ = 8
?GetCharIndex@@YAHH@Z PROC				; GetCharIndex
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1660
	mov	DWORD PTR [rsp+8], ecx
	cmp	DWORD PTR Char$[rsp], 32		; 00000020H
	jl	SHORT $LN2@GetCharInd
	cmp	DWORD PTR Char$[rsp], 127		; 0000007fH
	jg	SHORT $LN2@GetCharInd
; Line 1661
	mov	eax, DWORD PTR Char$[rsp]
	sub	eax, 32					; 00000020H
	jmp	SHORT $LN1@GetCharInd
; Line 1662
	jmp	SHORT $LN3@GetCharInd
$LN2@GetCharInd:
; Line 1663
	cmp	DWORD PTR Char$[rsp], 128		; 00000080H
	jl	SHORT $LN4@GetCharInd
	cmp	DWORD PTR Char$[rsp], 255		; 000000ffH
	jg	SHORT $LN4@GetCharInd
; Line 1664
	mov	eax, DWORD PTR Char$[rsp]
	sub	eax, 128				; 00000080H
	jmp	SHORT $LN1@GetCharInd
; Line 1665
	jmp	SHORT $LN5@GetCharInd
$LN4@GetCharInd:
; Line 1666
	mov	eax, -1
$LN5@GetCharInd:
$LN3@GetCharInd:
$LN1@GetCharInd:
; Line 1668
	ret	0
?GetCharIndex@@YAHH@Z ENDP				; GetCharIndex
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 48
CurrentFont$ = 56
$T1 = 64
$T2 = 96
$T3 = 128
Graphics$ = 192
SlotIndex$ = 200
?ID3D11Graphics_AcquireGlyphFont@@YAPEAUID3D11_FONT_ENTRY@@PEAUID3D11_GRAPHICS@@H@Z PROC ; ID3D11Graphics_AcquireGlyphFont
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1650
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 1651
	movsxd	rax, DWORD PTR SlotIndex$[rsp]
	imul	rax, rax, 64				; 00000040H
	mov	rcx, QWORD PTR Graphics$[rsp]
	lea	rax, QWORD PTR [rcx+rax+4680]
	mov	QWORD PTR CurrentFont$[rsp], rax
; Line 1653
	mov	DWORD PTR [rsp+32], 70			; 00000046H
	mov	r9d, 1653				; 00000675H
	lea	r8, OFFSET FLAT:$SG141149
	lea	rdx, OFFSET FLAT:$SG141150
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	cmp	QWORD PTR CurrentFont$[rsp], 0
	je	SHORT $LN3@ID3D11Grap
	mov	DWORD PTR tv72[rsp], 1
	jmp	SHORT $LN4@ID3D11Grap
$LN3@ID3D11Grap:
	mov	DWORD PTR tv72[rsp], 0
$LN4@ID3D11Grap:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG141147
	mov	r8d, DWORD PTR tv72[rsp]
	lea	rdx, OFFSET FLAT:$SG141148
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 1655
	mov	rax, QWORD PTR CurrentFont$[rsp]
; Line 1656
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_AcquireGlyphFont@@YAPEAUID3D11_FONT_ENTRY@@PEAUID3D11_GRAPHICS@@H@Z ENDP ; ID3D11Graphics_AcquireGlyphFont
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Offset$ = 48
Stride$ = 52
View$ = 56
tv94 = 64
tv192 = 72
tv206 = 80
tv208 = 88
tv226 = 96
tv224 = 104
tv228 = 112
tv246 = 120
tv244 = 128
tv248 = 136
tv258 = 144
tv260 = 152
tv276 = 160
tv274 = 168
tv278 = 176
tv290 = 184
tv292 = 192
tv306 = 200
tv308 = 208
tv319 = 216
tv321 = 224
Buffer$ = 232
$T1 = 256
Vertices$2 = 288
__$ArrayPad$ = 432
Graphics$ = 480
F$ = 488
W$ = 496
H$ = 504
D$ = 512
?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z PROC ; ID3D11Graphics_DrawImageData
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1606
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 456				; 000001c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1609
	mov	eax, DWORD PTR F$[rsp]
	mov	DWORD PTR Buffer$[rsp], eax
	mov	eax, DWORD PTR W$[rsp]
	mov	DWORD PTR Buffer$[rsp+4], eax
	mov	eax, DWORD PTR H$[rsp]
	mov	DWORD PTR Buffer$[rsp+8], eax
	mov	rax, QWORD PTR D$[rsp]
	mov	QWORD PTR Buffer$[rsp+16], rax
; Line 1610
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR Buffer$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDevice@@YAPEAUID3D11Device@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDevice
	lea	r9, QWORD PTR $T1[rsp]
	xor	r8d, r8d
	mov	edx, 1
	mov	rcx, rax
	call	?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z ; ID3D11Device_CreateSRV
	mov	QWORD PTR View$[rsp], rax
; Line 1613
	cmp	QWORD PTR ?VertexBuffer@?1??ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z@4PEAUID3D11Buffer@@EA, 0
	jne	$LN2@ID3D11Grap
; Line 1618
	vmovss	xmm0, DWORD PTR __real@bf000000
	vmovss	DWORD PTR Vertices$2[rsp], xmm0
	vmovss	xmm0, DWORD PTR __real@bf000000
	vmovss	DWORD PTR Vertices$2[rsp+4], xmm0
	vmovss	xmm0, DWORD PTR __real@80000000
	vmovss	DWORD PTR Vertices$2[rsp+8], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+12], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Vertices$2[rsp+16], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+20], xmm0
; Line 1619
	vmovss	xmm0, DWORD PTR __real@bf000000
	vmovss	DWORD PTR Vertices$2[rsp+24], xmm0
	vmovss	xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR Vertices$2[rsp+28], xmm0
	vmovss	xmm0, DWORD PTR __real@80000000
	vmovss	DWORD PTR Vertices$2[rsp+32], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+36], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Vertices$2[rsp+40], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Vertices$2[rsp+44], xmm0
; Line 1620
	vmovss	xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR Vertices$2[rsp+48], xmm0
	vmovss	xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR Vertices$2[rsp+52], xmm0
	vmovss	xmm0, DWORD PTR __real@80000000
	vmovss	DWORD PTR Vertices$2[rsp+56], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+60], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+64], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Vertices$2[rsp+68], xmm0
; Line 1621
	vmovss	xmm0, DWORD PTR __real@bf000000
	vmovss	DWORD PTR Vertices$2[rsp+72], xmm0
	vmovss	xmm0, DWORD PTR __real@bf000000
	vmovss	DWORD PTR Vertices$2[rsp+76], xmm0
	vmovss	xmm0, DWORD PTR __real@80000000
	vmovss	DWORD PTR Vertices$2[rsp+80], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+84], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Vertices$2[rsp+88], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+92], xmm0
; Line 1622
	vmovss	xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR Vertices$2[rsp+96], xmm0
	vmovss	xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR Vertices$2[rsp+100], xmm0
	vmovss	xmm0, DWORD PTR __real@80000000
	vmovss	DWORD PTR Vertices$2[rsp+104], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+108], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+112], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Vertices$2[rsp+116], xmm0
; Line 1623
	vmovss	xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR Vertices$2[rsp+120], xmm0
	vmovss	xmm0, DWORD PTR __real@bf000000
	vmovss	DWORD PTR Vertices$2[rsp+124], xmm0
	vmovss	xmm0, DWORD PTR __real@80000000
	vmovss	DWORD PTR Vertices$2[rsp+128], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+132], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+136], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Vertices$2[rsp+140], xmm0
; Line 1625
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDevice@@YAPEAUID3D11Device@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDevice
	lea	rcx, QWORD PTR Vertices$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, 144				; 00000090H
	xor	r8d, r8d
	xor	edx, edx
	mov	rcx, rax
	call	?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z ; ID3D11Device_CreateVertexBuffer
	mov	QWORD PTR ?VertexBuffer@?1??ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z@4PEAUID3D11Buffer@@EA, rax
$LN2@ID3D11Grap:
; Line 1628
	mov	DWORD PTR Stride$[rsp], 24
; Line 1629
	mov	DWORD PTR Offset$[rsp], 0
; Line 1630
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_UpdateTransformData
; Line 1631
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+144]
	mov	QWORD PTR tv192[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv94[rsp], rax
	lea	rax, QWORD PTR Offset$[rsp]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR Stride$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, OFFSET FLAT:?VertexBuffer@?1??ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z@4PEAUID3D11Buffer@@EA
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv94[rsp]
	call	QWORD PTR tv192[rsp]
; Line 1633
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv208[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv206[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6576				; 000019b0H
	mov	r9, rax
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv206[rsp]
	call	QWORD PTR tv208[rsp]
; Line 1635
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv228[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+6456]
	mov	QWORD PTR tv226[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv224[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv226[rsp]
	mov	rcx, QWORD PTR tv224[rsp]
	call	QWORD PTR tv228[rsp]
; Line 1636
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv248[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+6304]
	mov	QWORD PTR tv246[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv244[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv246[rsp]
	mov	rcx, QWORD PTR tv244[rsp]
	call	QWORD PTR tv248[rsp]
; Line 1637
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR tv260[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv258[rsp], rax
	mov	edx, 4
	mov	rcx, QWORD PTR tv258[rsp]
	call	QWORD PTR tv260[rsp]
; Line 1638
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR tv278[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+6336]
	mov	QWORD PTR tv276[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv274[rsp], rax
	mov	rdx, QWORD PTR tv276[rsp]
	mov	rcx, QWORD PTR tv274[rsp]
	call	QWORD PTR tv278[rsp]
; Line 1639
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv292[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv290[rsp], rax
	lea	r9, QWORD PTR View$[rsp]
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv290[rsp]
	call	QWORD PTR tv292[rsp]
; Line 1640
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv308[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv306[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6544				; 00001990H
	mov	r9, rax
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR tv306[rsp]
	call	QWORD PTR tv308[rsp]
; Line 1641
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR tv321[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv319[rsp], rax
	xor	r8d, r8d
	mov	edx, 6
	mov	rcx, QWORD PTR tv319[rsp]
	call	QWORD PTR tv321[rsp]
; Line 1644
	mov	rcx, QWORD PTR View$[rsp]
	call	?ID3D11ShaderResourceView_ReleaseAll@@YAXPEAUID3D11ShaderResourceView@@@Z ; ID3D11ShaderResourceView_ReleaseAll
; Line 1645
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 456				; 000001c8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z ENDP ; ID3D11Graphics_DrawImageData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
DeviceFeatureLevel$ = 48
tv84 = 56
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 216
Driver$ = 272
ShaderKind$ = 280
CompilationFlags$ = 288
CompilationModel$ = 296
CompilationEntryPoint$ = 304
?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4D3D11_SHADER_KIND@@PEAHPEAPEBD3@Z PROC ; ID3D11Driver_GetShaderCompilationInfo
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1369
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
; Line 1371
	mov	rax, QWORD PTR CompilationFlags$[rsp]
	mov	DWORD PTR [rax], -1
; Line 1372
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG140946
	mov	QWORD PTR [rax], rcx
; Line 1373
	mov	rax, QWORD PTR CompilationEntryPoint$[rsp]
	lea	rcx, OFFSET FLAT:$SG140947
	mov	QWORD PTR [rax], rcx
; Line 1375
	mov	rax, QWORD PTR CompilationFlags$[rsp]
	mov	DWORD PTR [rax], 5
; Line 1377
	cmp	DWORD PTR ShaderKind$[rsp], 1
	jne	SHORT $LN2@ID3D11Driv
	mov	rax, QWORD PTR CompilationEntryPoint$[rsp]
	lea	rcx, OFFSET FLAT:$SG140950
	mov	QWORD PTR [rax], rcx
	jmp	$LN3@ID3D11Driv
$LN2@ID3D11Driv:
; Line 1378
	cmp	DWORD PTR ShaderKind$[rsp], 2
	jne	SHORT $LN4@ID3D11Driv
	mov	rax, QWORD PTR CompilationEntryPoint$[rsp]
	lea	rcx, OFFSET FLAT:$SG140953
	mov	QWORD PTR [rax], rcx
	jmp	$LN5@ID3D11Driv
$LN4@ID3D11Driv:
; Line 1379
	cmp	DWORD PTR ShaderKind$[rsp], 3
	jne	SHORT $LN6@ID3D11Driv
	mov	rax, QWORD PTR CompilationEntryPoint$[rsp]
	lea	rcx, OFFSET FLAT:$SG140956
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN7@ID3D11Driv
$LN6@ID3D11Driv:
; Line 1380
	mov	DWORD PTR [rsp+32], 60			; 0000003cH
	mov	r9d, 1380				; 00000564H
	lea	r8, OFFSET FLAT:$SG140958
	lea	rdx, OFFSET FLAT:$SG140959
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140957
	mov	edx, 7
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
	xor	eax, eax
	jmp	$LN1@ID3D11Driv
$LN7@ID3D11Driv:
$LN5@ID3D11Driv:
$LN3@ID3D11Driv:
; Line 1382
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+296]
	mov	QWORD PTR tv84[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	QWORD PTR tv84[rsp]
	mov	DWORD PTR DeviceFeatureLevel$[rsp], eax
; Line 1384
	cmp	DWORD PTR DeviceFeatureLevel$[rsp], 40960 ; 0000a000H
	je	SHORT $LN10@ID3D11Driv
	cmp	DWORD PTR DeviceFeatureLevel$[rsp], 41216 ; 0000a100H
	jne	SHORT $LN8@ID3D11Driv
$LN10@ID3D11Driv:
; Line 1387
	cmp	DWORD PTR ShaderKind$[rsp], 1
	jne	SHORT $LN11@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG140965
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN12@ID3D11Driv
$LN11@ID3D11Driv:
; Line 1388
	cmp	DWORD PTR ShaderKind$[rsp], 2
	jne	SHORT $LN13@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG140968
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN14@ID3D11Driv
$LN13@ID3D11Driv:
; Line 1389
	cmp	DWORD PTR ShaderKind$[rsp], 3
	jne	SHORT $LN15@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG140970
	mov	QWORD PTR [rax], rcx
$LN15@ID3D11Driv:
$LN14@ID3D11Driv:
$LN12@ID3D11Driv:
; Line 1390
	jmp	$LN9@ID3D11Driv
$LN8@ID3D11Driv:
; Line 1391
	cmp	DWORD PTR DeviceFeatureLevel$[rsp], 45056 ; 0000b000H
	je	SHORT $LN18@ID3D11Driv
	cmp	DWORD PTR DeviceFeatureLevel$[rsp], 45312 ; 0000b100H
	jne	SHORT $LN16@ID3D11Driv
$LN18@ID3D11Driv:
; Line 1394
	cmp	DWORD PTR ShaderKind$[rsp], 1
	jne	SHORT $LN19@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG140976
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN20@ID3D11Driv
$LN19@ID3D11Driv:
; Line 1395
	cmp	DWORD PTR ShaderKind$[rsp], 2
	jne	SHORT $LN21@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG140979
	mov	QWORD PTR [rax], rcx
	jmp	SHORT $LN22@ID3D11Driv
$LN21@ID3D11Driv:
; Line 1396
	cmp	DWORD PTR ShaderKind$[rsp], 3
	jne	SHORT $LN23@ID3D11Driv
	mov	rax, QWORD PTR CompilationModel$[rsp]
	lea	rcx, OFFSET FLAT:$SG140981
	mov	QWORD PTR [rax], rcx
$LN23@ID3D11Driv:
$LN22@ID3D11Driv:
$LN20@ID3D11Driv:
	jmp	SHORT $LN17@ID3D11Driv
$LN16@ID3D11Driv:
; Line 1398
	mov	DWORD PTR [rsp+32], 61			; 0000003dH
	mov	r9d, 1398				; 00000576H
	lea	r8, OFFSET FLAT:$SG140983
	lea	rdx, OFFSET FLAT:$SG140984
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140982
	mov	edx, 7
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
	xor	eax, eax
	jmp	SHORT $LN1@ID3D11Driv
$LN17@ID3D11Driv:
$LN9@ID3D11Driv:
; Line 1400
	mov	eax, 1
$LN1@ID3D11Driv:
; Line 1401
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4D3D11_SHADER_KIND@@PEAHPEAPEBD3@Z ENDP ; ID3D11Driver_GetShaderCompilationInfo
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
DXGIFactory$ = 96
tv285 = 104
tv288 = 108
DXGIAdapter$1 = 112
DXGIDevice$2 = 120
WindowClassName$ = 128
tv244 = 136
tv252 = 144
tv261 = 152
tv278 = 160
tv283 = 168
tv302 = 176
tv312 = 184
tv356 = 192
tv363 = 200
tv378 = 208
WindowClass$ = 224
$T3 = 304
$T4 = 336
$T5 = 368
$T6 = 400
$T7 = 432
$T8 = 464
$T9 = 496
$T10 = 528
$T11 = 560
$T12 = 592
$T13 = 624
$T14 = 656
$T15 = 688
$T16 = 720
$T17 = 744
$T18 = 768
$T19 = 792
$T20 = 816
$T21 = 840
$T22 = 864
$T23 = 888
WindowRect$24 = 912
FD$ = 928
D$ = 952
__$ArrayPad$ = 1000
Device$ = 1040
Window$ = 1048
ControlFiber$ = 1056
WindowX$ = 1064
WindowY$ = 1072
WindowSizeX$ = 1080
WindowSizeY$ = 1088
WindowTitle$ = 1096
?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z PROC ; ID3D11Device_CreateWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1035
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1016				; 000003f8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1040
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR [rax+520], ecx
; Line 1041
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR [rax+524], ecx
; Line 1043
	lea	rax, OFFSET FLAT:$SG140827
	mov	QWORD PTR WindowClassName$[rsp], rax
; Line 1045
	mov	DWORD PTR [rsp+32], 49			; 00000031H
	mov	r9d, 1046				; 00000416H
	lea	r8, OFFSET FLAT:$SG140829
	lea	rdx, OFFSET FLAT:$SG140830
	lea	rcx, QWORD PTR $T17[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	eax, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR WindowSizeX$[rsp]
	lea	r8, OFFSET FLAT:$SG140828
	mov	edx, 2
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1049
	mov	DWORD PTR WindowClass$[rsp], 0
	lea	rax, OFFSET FLAT:?D3D11_WINDOW_WndProc@@YA_JPEAUHWND__@@I_K_J@Z ; D3D11_WINDOW_WndProc
	mov	QWORD PTR WindowClass$[rsp+8], rax
	mov	DWORD PTR WindowClass$[rsp+16], 0
	mov	DWORD PTR WindowClass$[rsp+20], 0
; Line 1050
	xor	ecx, ecx
	call	QWORD PTR __imp_GetModuleHandleW
	mov	QWORD PTR WindowClass$[rsp+24], rax
; Line 1049
	mov	QWORD PTR WindowClass$[rsp+32], 0
	mov	QWORD PTR WindowClass$[rsp+40], 0
	mov	QWORD PTR WindowClass$[rsp+48], 0
	mov	QWORD PTR WindowClass$[rsp+56], 0
; Line 1051
	mov	rax, QWORD PTR WindowClassName$[rsp]
	mov	QWORD PTR WindowClass$[rsp+64], rax
; Line 1054
	lea	rcx, QWORD PTR WindowClass$[rsp]
	call	QWORD PTR __imp_RegisterClassW
	movzx	eax, ax
	test	eax, eax
	je	$LN2@ID3D11Devi
; Line 1056
	mov	DWORD PTR WindowRect$24[rsp], 0
; Line 1057
	mov	DWORD PTR WindowRect$24[rsp+4], 0
; Line 1058
	mov	eax, DWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR WindowRect$24[rsp+8], eax
; Line 1059
	mov	eax, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR WindowRect$24[rsp+12], eax
; Line 1061
	xor	r8d, r8d
	mov	edx, 13565952				; 00cf0000H
	lea	rcx, QWORD PTR WindowRect$24[rsp]
	call	QWORD PTR __imp_AdjustWindowRect
	test	eax, eax
	je	$LN4@ID3D11Devi
; Line 1062
	cmp	DWORD PTR WindowX$[rsp], -1
	jne	SHORT $LN6@ID3D11Devi
	mov	DWORD PTR WindowX$[rsp], -2147483648	; ffffffff80000000H
$LN6@ID3D11Devi:
; Line 1063
	cmp	DWORD PTR WindowY$[rsp], -1
	jne	SHORT $LN7@ID3D11Devi
	mov	DWORD PTR WindowY$[rsp], -2147483648	; ffffffff80000000H
$LN7@ID3D11Devi:
; Line 1065
	mov	eax, DWORD PTR WindowRect$24[rsp+4]
	mov	ecx, DWORD PTR WindowRect$24[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR WindowRect$24[rsp]
	mov	edx, DWORD PTR WindowRect$24[rsp+8]
	sub	edx, ecx
	mov	ecx, edx
	mov	QWORD PTR [rsp+88], 0
	mov	rdx, QWORD PTR WindowClass$[rsp+24]
	mov	QWORD PTR [rsp+80], rdx
	mov	QWORD PTR [rsp+72], 0
	mov	QWORD PTR [rsp+64], 0
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], ecx
	mov	eax, DWORD PTR WindowY$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR WindowX$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, 13565952				; 00cf0000H
	mov	r8, QWORD PTR WindowTitle$[rsp]
	mov	rdx, QWORD PTR WindowClass$[rsp+64]
	mov	ecx, 2097152				; 00200000H
	call	QWORD PTR __imp_CreateWindowExW
	mov	rcx, QWORD PTR Window$[rsp]
	mov	QWORD PTR [rcx+528], rax
; Line 1070
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+528]
	call	QWORD PTR __imp_IsWindow
	test	eax, eax
	je	$LN8@ID3D11Devi
; Line 1072
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR ControlFiber$[rsp]
	mov	QWORD PTR [rax+768], rcx
; Line 1073
	mov	r8, QWORD PTR Window$[rsp]
	lea	rdx, OFFSET FLAT:?ID3D11_WINDOW_MessageFiberRoutine@@YAXPEAX@Z ; ID3D11_WINDOW_MessageFiberRoutine
	xor	ecx, ecx
	call	QWORD PTR __imp_CreateFiber
	mov	rcx, QWORD PTR Window$[rsp]
	mov	QWORD PTR [rcx+776], rax
; Line 1074
	mov	r8, QWORD PTR Window$[rsp]
	mov	edx, -21
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+528]
	call	QWORD PTR __imp_SetWindowLongPtrA
; Line 1076
	mov	DWORD PTR [rsp+48], 3
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, -1
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+528]
	call	QWORD PTR __imp_SetWindowPos
	test	eax, eax
	jne	SHORT $LN10@ID3D11Devi
; Line 1078
	mov	DWORD PTR [rsp+32], 50			; 00000032H
	mov	r9d, 1078				; 00000436H
	lea	r8, OFFSET FLAT:$SG140841
	lea	rdx, OFFSET FLAT:$SG140842
	lea	rcx, QWORD PTR $T18[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140840
	mov	edx, 4
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1079
	xor	eax, eax
	jmp	$LN1@ID3D11Devi
$LN10@ID3D11Devi:
; Line 1082
	jmp	SHORT $LN9@ID3D11Devi
$LN8@ID3D11Devi:
; Line 1083
	mov	DWORD PTR [rsp+32], 51			; 00000033H
	mov	r9d, 1083				; 0000043bH
	lea	r8, OFFSET FLAT:$SG140844
	lea	rdx, OFFSET FLAT:$SG140845
	lea	rcx, QWORD PTR $T19[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140843
	mov	edx, 6
	lea	rcx, QWORD PTR $T7[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN9@ID3D11Devi:
; Line 1085
	jmp	SHORT $LN5@ID3D11Devi
$LN4@ID3D11Devi:
; Line 1086
	mov	DWORD PTR [rsp+32], 52			; 00000034H
	mov	r9d, 1086				; 0000043eH
	lea	r8, OFFSET FLAT:$SG140847
	lea	rdx, OFFSET FLAT:$SG140848
	lea	rcx, QWORD PTR $T20[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140846
	mov	edx, 6
	lea	rcx, QWORD PTR $T9[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@ID3D11Devi:
; Line 1088
	jmp	SHORT $LN3@ID3D11Devi
$LN2@ID3D11Devi:
; Line 1089
	mov	DWORD PTR [rsp+32], 53			; 00000035H
	mov	r9d, 1089				; 00000441H
	lea	r8, OFFSET FLAT:$SG140850
	lea	rdx, OFFSET FLAT:$SG140851
	lea	rcx, QWORD PTR $T21[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T10[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140849
	mov	edx, 6
	lea	rcx, QWORD PTR $T11[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ID3D11Devi:
; Line 1093
	mov	QWORD PTR DXGIFactory$[rsp], 0
; Line 1095
	mov	QWORD PTR DXGIDevice$2[rsp], 0
; Line 1096
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv244[rsp], rax
	lea	r8, QWORD PTR DXGIDevice$2[rsp]
	lea	rdx, OFFSET FLAT:IID_IDXGIDevice
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv244[rsp]
	test	eax, eax
	jl	$LN11@ID3D11Devi
; Line 1097
	mov	QWORD PTR DXGIAdapter$1[rsp], 0
; Line 1098
	mov	rax, QWORD PTR DXGIDevice$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv252[rsp], rax
	lea	rdx, QWORD PTR DXGIAdapter$1[rsp]
	mov	rcx, QWORD PTR DXGIDevice$2[rsp]
	call	QWORD PTR tv252[rsp]
	test	eax, eax
	jl	$LN12@ID3D11Devi
; Line 1100
	mov	rax, QWORD PTR DXGIAdapter$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv261[rsp], rax
	lea	r8, QWORD PTR DXGIFactory$[rsp]
	lea	rdx, OFFSET FLAT:IID_IDXGIFactory2
	mov	rcx, QWORD PTR DXGIAdapter$1[rsp]
	call	QWORD PTR tv261[rsp]
	test	eax, eax
	jge	SHORT $LN13@ID3D11Devi
; Line 1101
	mov	DWORD PTR [rsp+32], 54			; 00000036H
	mov	r9d, 1101				; 0000044dH
	lea	r8, OFFSET FLAT:$SG140856
	lea	rdx, OFFSET FLAT:$SG140857
	lea	rcx, QWORD PTR $T22[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T13[rsp]
	lea	rcx, QWORD PTR $T12[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140855
	mov	edx, 7
	lea	rcx, QWORD PTR $T13[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN13@ID3D11Devi:
; Line 1103
	mov	rax, QWORD PTR DXGIAdapter$1[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv278[rsp], rax
	mov	rcx, QWORD PTR DXGIAdapter$1[rsp]
	call	QWORD PTR tv278[rsp]
$LN12@ID3D11Devi:
; Line 1105
	mov	rax, QWORD PTR DXGIDevice$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv283[rsp], rax
	mov	rcx, QWORD PTR DXGIDevice$2[rsp]
	call	QWORD PTR tv283[rsp]
$LN11@ID3D11Devi:
; Line 1110
	cmp	DWORD PTR WindowSizeX$[rsp], 0
	jge	SHORT $LN18@ID3D11Devi
	mov	eax, DWORD PTR WindowSizeX$[rsp]
	neg	eax
	mov	DWORD PTR tv285[rsp], eax
	jmp	SHORT $LN19@ID3D11Devi
$LN18@ID3D11Devi:
	mov	eax, DWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR tv285[rsp], eax
$LN19@ID3D11Devi:
	mov	eax, DWORD PTR tv285[rsp]
	mov	DWORD PTR D$[rsp], eax
; Line 1111
	cmp	DWORD PTR WindowSizeY$[rsp], 0
	jge	SHORT $LN20@ID3D11Devi
	mov	eax, DWORD PTR WindowSizeY$[rsp]
	neg	eax
	mov	DWORD PTR tv288[rsp], eax
	jmp	SHORT $LN21@ID3D11Devi
$LN20@ID3D11Devi:
	mov	eax, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR tv288[rsp], eax
$LN21@ID3D11Devi:
	mov	eax, DWORD PTR tv288[rsp]
	mov	DWORD PTR D$[rsp+4], eax
; Line 1112
	mov	DWORD PTR D$[rsp+8], 28
; Line 1110
	mov	DWORD PTR D$[rsp+12], 0
; Line 1114
	mov	DWORD PTR D$[rsp+16], 1
; Line 1115
	mov	DWORD PTR D$[rsp+20], 0
; Line 1117
	mov	DWORD PTR D$[rsp+24], 1056		; 00000420H
; Line 1118
	mov	DWORD PTR D$[rsp+28], 2
	mov	DWORD PTR D$[rsp+32], 0
; Line 1119
	mov	DWORD PTR D$[rsp+36], 3
	mov	DWORD PTR D$[rsp+40], 0
; Line 1120
	mov	DWORD PTR D$[rsp+44], 66		; 00000042H
; Line 1123
	mov	DWORD PTR FD$[rsp], 1
	mov	DWORD PTR FD$[rsp+4], 0
	mov	DWORD PTR FD$[rsp+8], 0
	mov	DWORD PTR FD$[rsp+12], 0
; Line 1124
	mov	DWORD PTR FD$[rsp+16], 1
; Line 1127
	mov	rax, QWORD PTR DXGIFactory$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv302[rsp], rax
	mov	rax, QWORD PTR Window$[rsp]
	add	rax, 784				; 00000310H
	mov	QWORD PTR [rsp+48], rax
	mov	QWORD PTR [rsp+40], 0
	lea	rax, QWORD PTR FD$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR D$[rsp]
	mov	rax, QWORD PTR Window$[rsp]
	mov	r8, QWORD PTR [rax+528]
	mov	rdx, QWORD PTR Device$[rsp]
	mov	rcx, QWORD PTR DXGIFactory$[rsp]
	call	QWORD PTR tv302[rsp]
	test	eax, eax
	jl	$LN14@ID3D11Devi
; Line 1129
	mov	rax, QWORD PTR Window$[rsp]
	mov	rax, QWORD PTR [rax+784]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR tv312[rsp], rax
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+784]
	call	QWORD PTR tv312[rsp]
	mov	rcx, QWORD PTR Window$[rsp]
	mov	QWORD PTR [rcx+800], rax
; Line 1131
	mov	rax, QWORD PTR Window$[rsp]
	mov	rax, QWORD PTR [rax+784]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv356[rsp], rax
	mov	rax, QWORD PTR Window$[rsp]
	add	rax, 792				; 00000318H
	mov	r9, rax
	lea	r8, OFFSET FLAT:IID_ID3D11Texture2D
	xor	edx, edx
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+784]
	call	QWORD PTR tv356[rsp]
	test	eax, eax
	jl	SHORT $LN16@ID3D11Devi
; Line 1135
	mov	rax, QWORD PTR DXGIFactory$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv363[rsp], rax
	mov	rcx, QWORD PTR DXGIFactory$[rsp]
	call	QWORD PTR tv363[rsp]
; Line 1136
	mov	eax, 1
	jmp	$LN1@ID3D11Devi
$LN16@ID3D11Devi:
; Line 1138
	jmp	SHORT $LN15@ID3D11Devi
$LN14@ID3D11Devi:
; Line 1140
	mov	DWORD PTR [rsp+32], 55			; 00000037H
	mov	r9d, 1140				; 00000474H
	lea	r8, OFFSET FLAT:$SG140862
	lea	rdx, OFFSET FLAT:$SG140863
	lea	rcx, QWORD PTR $T23[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T14[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140861
	mov	edx, 6
	lea	rcx, QWORD PTR $T15[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN15@ID3D11Devi:
; Line 1143
	mov	rax, QWORD PTR DXGIFactory$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv378[rsp], rax
	mov	rcx, QWORD PTR DXGIFactory$[rsp]
	call	QWORD PTR tv378[rsp]
; Line 1145
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 1146
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1016				; 000003f8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z ENDP ; ID3D11Device_CreateWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 32
AppWindow$ = 40
Window$ = 64
Message$ = 72
WParam$ = 80
LParam$ = 88
?D3D11_WINDOW_WndProc@@YA_JPEAUHWND__@@I_K_J@Z PROC	; D3D11_WINDOW_WndProc
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 992
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 993
	mov	edx, -21
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_GetWindowLongPtrA
	mov	QWORD PTR AppWindow$[rsp], rax
; Line 995
	mov	eax, DWORD PTR Message$[rsp]
	mov	DWORD PTR tv67[rsp], eax
	cmp	DWORD PTR tv67[rsp], 529		; 00000211H
	ja	SHORT $LN13@D3D11_WIND
	cmp	DWORD PTR tv67[rsp], 529		; 00000211H
	je	SHORT $LN7@D3D11_WIND
	cmp	DWORD PTR tv67[rsp], 15
	je	SHORT $LN4@D3D11_WIND
	cmp	DWORD PTR tv67[rsp], 16
	je	SHORT $LN10@D3D11_WIND
	cmp	DWORD PTR tv67[rsp], 18
	je	SHORT $LN11@D3D11_WIND
	cmp	DWORD PTR tv67[rsp], 275		; 00000113H
	je	SHORT $LN5@D3D11_WIND
	jmp	SHORT $LN2@D3D11_WIND
$LN13@D3D11_WIND:
	cmp	DWORD PTR tv67[rsp], 530		; 00000212H
	je	SHORT $LN9@D3D11_WIND
	cmp	DWORD PTR tv67[rsp], 561		; 00000231H
	je	SHORT $LN6@D3D11_WIND
	cmp	DWORD PTR tv67[rsp], 562		; 00000232H
	je	SHORT $LN8@D3D11_WIND
	jmp	SHORT $LN2@D3D11_WIND
$LN4@D3D11_WIND:
$LN5@D3D11_WIND:
; Line 1000
	mov	rax, QWORD PTR AppWindow$[rsp]
	mov	rcx, QWORD PTR [rax+768]
	call	QWORD PTR __imp_SwitchToFiber
; Line 1001
	xor	eax, eax
	jmp	SHORT $LN1@D3D11_WIND
$LN6@D3D11_WIND:
$LN7@D3D11_WIND:
; Line 1006
	xor	r9d, r9d
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_SetTimer
; Line 1007
	xor	eax, eax
	jmp	SHORT $LN1@D3D11_WIND
$LN8@D3D11_WIND:
$LN9@D3D11_WIND:
; Line 1013
	xor	edx, edx
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_KillTimer
; Line 1014
	xor	eax, eax
	jmp	SHORT $LN1@D3D11_WIND
$LN10@D3D11_WIND:
$LN11@D3D11_WIND:
; Line 1018
	xor	ecx, ecx
	call	QWORD PTR __imp_PostQuitMessage
; Line 1019
	xor	eax, eax
	jmp	SHORT $LN1@D3D11_WIND
$LN2@D3D11_WIND:
; Line 1021
	mov	r9, QWORD PTR LParam$[rsp]
	mov	r8, QWORD PTR WParam$[rsp]
	mov	edx, DWORD PTR Message$[rsp]
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_DefWindowProcW
$LN1@D3D11_WIND:
; Line 1022
	add	rsp, 56					; 00000038H
	ret	0
?D3D11_WINDOW_WndProc@@YA_JPEAUHWND__@@I_K_J@Z ENDP	; D3D11_WINDOW_WndProc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv79 = 48
IsDown$1 = 52
Window$ = 56
tv137 = 64
tv139 = 68
tv140 = 72
WindowSizeX$2 = 80
WindowSizeY$3 = 84
InvWindowSizeX$4 = 88
InvWindowSizeY$5 = 92
NormalizedMouseX$6 = 96
NormalizedMouseY$7 = 100
M$8 = 104
$T9 = 152
__$ArrayPad$ = 168
lpWindow$ = 208
?ID3D11_WINDOW_MessageFiberRoutine@@YAXPEAX@Z PROC	; ID3D11_WINDOW_MessageFiberRoutine
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 908
$LN35:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 909
	mov	rax, QWORD PTR lpWindow$[rsp]
	mov	QWORD PTR Window$[rsp], rax
$LN2@ID3D11_WIN:
; Line 914
	mov	rax, QWORD PTR Window$[rsp]
	vcvtsi2ss xmm0, xmm0, DWORD PTR [rax+520]
	vmovss	DWORD PTR WindowSizeX$2[rsp], xmm0
; Line 915
	mov	rax, QWORD PTR Window$[rsp]
	vcvtsi2ss xmm0, xmm0, DWORD PTR [rax+524]
	vmovss	DWORD PTR WindowSizeY$3[rsp], xmm0
; Line 916
	vmovss	xmm0, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm0, DWORD PTR WindowSizeX$2[rsp]
	vmovss	DWORD PTR InvWindowSizeX$4[rsp], xmm0
; Line 917
	vmovss	xmm0, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm0, DWORD PTR WindowSizeY$3[rsp]
	vmovss	DWORD PTR InvWindowSizeY$5[rsp], xmm0
$LN5@ID3D11_WIN:
; Line 920
	mov	DWORD PTR [rsp+32], 1
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR M$8[rsp]
	call	QWORD PTR __imp_PeekMessageA
	test	eax, eax
	je	$LN6@ID3D11_WIN
; Line 921
	lea	rcx, QWORD PTR M$8[rsp]
	call	QWORD PTR __imp_TranslateMessage
; Line 923
	mov	eax, DWORD PTR M$8[rsp+8]
	mov	DWORD PTR tv79[rsp], eax
	cmp	DWORD PTR tv79[rsp], 257		; 00000101H
	ja	SHORT $LN32@ID3D11_WIN
	cmp	DWORD PTR tv79[rsp], 257		; 00000101H
	je	$LN16@ID3D11_WIN
	cmp	DWORD PTR tv79[rsp], 16
	je	SHORT $LN11@ID3D11_WIN
	cmp	DWORD PTR tv79[rsp], 18
	je	SHORT $LN12@ID3D11_WIN
	cmp	DWORD PTR tv79[rsp], 256		; 00000100H
	je	$LN17@ID3D11_WIN
	jmp	$LN26@ID3D11_WIN
$LN32@ID3D11_WIN:
	cmp	DWORD PTR tv79[rsp], 512		; 00000200H
	je	SHORT $LN13@ID3D11_WIN
	cmp	DWORD PTR tv79[rsp], 513		; 00000201H
	je	$LN15@ID3D11_WIN
	cmp	DWORD PTR tv79[rsp], 514		; 00000202H
	je	$LN14@ID3D11_WIN
	jmp	$LN26@ID3D11_WIN
$LN11@ID3D11_WIN:
$LN12@ID3D11_WIN:
; Line 928
	mov	rax, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rax+760], 1
; Line 929
	jmp	$LN7@ID3D11_WIN
$LN13@ID3D11_WIN:
; Line 934
	mov	rax, QWORD PTR M$8[rsp+24]
	and	rax, 65535				; 0000ffffH
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	xmm1, DWORD PTR InvWindowSizeX$4[rsp]
	vmulss	xmm0, xmm1, xmm0
	vsubss	xmm0, xmm0, DWORD PTR __real@3f000000
	vmovss	DWORD PTR NormalizedMouseX$6[rsp], xmm0
; Line 935
	mov	rax, QWORD PTR M$8[rsp+24]
	shr	rax, 16
	and	rax, 65535				; 0000ffffH
	cwde
	vcvtsi2ss xmm0, xmm0, eax
	vmovss	xmm1, DWORD PTR InvWindowSizeY$5[rsp]
	vmulss	xmm0, xmm1, xmm0
	vsubss	xmm0, xmm0, DWORD PTR __real@3f000000
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR NormalizedMouseY$7[rsp], xmm0
; Line 937
	vmovss	xmm0, DWORD PTR NormalizedMouseX$6[rsp]
	vmovss	DWORD PTR $T9[rsp], xmm0
	vmovss	xmm0, DWORD PTR NormalizedMouseY$7[rsp]
	vmovss	DWORD PTR $T9[rsp+4], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR $T9[rsp+8], xmm0
	mov	rax, QWORD PTR Window$[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	lea	rdi, QWORD PTR [rax+536]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 942
	jmp	$LN7@ID3D11_WIN
$LN14@ID3D11_WIN:
$LN15@ID3D11_WIN:
; Line 945
	cmp	DWORD PTR M$8[rsp+8], 513		; 00000201H
	jne	SHORT $LN28@ID3D11_WIN
	mov	DWORD PTR tv137[rsp], 1
	jmp	SHORT $LN29@ID3D11_WIN
$LN28@ID3D11_WIN:
	mov	DWORD PTR tv137[rsp], 0
$LN29@ID3D11_WIN:
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR tv137[rsp]
	mov	DWORD PTR [rax+552], ecx
; Line 946
	jmp	$LN7@ID3D11_WIN
$LN16@ID3D11_WIN:
$LN17@ID3D11_WIN:
; Line 949
	cmp	DWORD PTR M$8[rsp+8], 256		; 00000100H
	jne	SHORT $LN30@ID3D11_WIN
	mov	DWORD PTR tv139[rsp], 1
	jmp	SHORT $LN31@ID3D11_WIN
$LN30@ID3D11_WIN:
	mov	DWORD PTR tv139[rsp], 0
$LN31@ID3D11_WIN:
	mov	eax, DWORD PTR tv139[rsp]
	mov	DWORD PTR IsDown$1[rsp], eax
; Line 950
	mov	rax, QWORD PTR M$8[rsp+16]
	mov	QWORD PTR tv140[rsp], rax
	mov	rax, QWORD PTR tv140[rsp]
	sub	rax, 16
	mov	QWORD PTR tv140[rsp], rax
	cmp	QWORD PTR tv140[rsp], 71		; 00000047H
	ja	$LN9@ID3D11_WIN
	lea	rax, OFFSET FLAT:__ImageBase
	mov	rcx, QWORD PTR tv140[rsp]
	movzx	ecx, BYTE PTR $LN33@ID3D11_WIN[rax+rcx]
	mov	ecx, DWORD PTR $LN34@ID3D11_WIN[rax+rcx*4]
	add	rcx, rax
	jmp	rcx
$LN18@ID3D11_WIN:
; Line 952
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR IsDown$1[rsp]
	mov	DWORD PTR [rax+692], ecx
; Line 953
	jmp	SHORT $LN9@ID3D11_WIN
$LN19@ID3D11_WIN:
; Line 955
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR IsDown$1[rsp]
	mov	DWORD PTR [rax+732], ecx
; Line 956
	jmp	SHORT $LN9@ID3D11_WIN
$LN20@ID3D11_WIN:
; Line 958
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR IsDown$1[rsp]
	mov	DWORD PTR [rax+632], ecx
; Line 959
	jmp	SHORT $LN9@ID3D11_WIN
$LN21@ID3D11_WIN:
; Line 961
	mov	rax, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rax+760], 1
; Line 962
	jmp	SHORT $LN9@ID3D11_WIN
$LN22@ID3D11_WIN:
; Line 964
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR IsDown$1[rsp]
	mov	DWORD PTR [rax+652], ecx
; Line 965
	jmp	SHORT $LN9@ID3D11_WIN
$LN23@ID3D11_WIN:
; Line 967
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR IsDown$1[rsp]
	mov	DWORD PTR [rax+672], ecx
; Line 968
	jmp	SHORT $LN9@ID3D11_WIN
$LN24@ID3D11_WIN:
; Line 970
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR IsDown$1[rsp]
	mov	DWORD PTR [rax+752], ecx
; Line 971
	jmp	SHORT $LN9@ID3D11_WIN
$LN25@ID3D11_WIN:
; Line 973
	mov	rax, QWORD PTR Window$[rsp]
	mov	ecx, DWORD PTR IsDown$1[rsp]
	mov	DWORD PTR [rax+712], ecx
$LN9@ID3D11_WIN:
; Line 976
	jmp	SHORT $LN7@ID3D11_WIN
$LN26@ID3D11_WIN:
; Line 978
	lea	rcx, QWORD PTR M$8[rsp]
	call	QWORD PTR __imp_DispatchMessageW
$LN7@ID3D11_WIN:
; Line 981
	jmp	$LN5@ID3D11_WIN
$LN6@ID3D11_WIN:
; Line 983
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+768]
	call	QWORD PTR __imp_SwitchToFiber
; Line 984
	jmp	$LN2@ID3D11_WIN
; Line 986
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
	npad	2
$LN34@ID3D11_WIN:
	DD	$LN19@ID3D11_WIN
	DD	$LN20@ID3D11_WIN
	DD	$LN18@ID3D11_WIN
	DD	$LN24@ID3D11_WIN
	DD	$LN25@ID3D11_WIN
	DD	$LN21@ID3D11_WIN
	DD	$LN23@ID3D11_WIN
	DD	$LN22@ID3D11_WIN
	DD	$LN9@ID3D11_WIN
$LN33@ID3D11_WIN:
	DB	0
	DB	1
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	2
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	3
	DB	8
	DB	8
	DB	4
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	8
	DB	5
	DB	8
	DB	6
	DB	8
	DB	8
	DB	8
	DB	7
?ID3D11_WINDOW_MessageFiberRoutine@@YAXPEAX@Z ENDP	; ID3D11_WINDOW_MessageFiberRoutine
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
BindFlags$ = 48
RenderTargetView$1 = 56
tv76 = 64
$T2 = 72
$T3 = 96
$T4 = 128
$T5 = 160
$T6 = 192
$T7 = 216
Device$ = 272
Texture$ = 280
?ID3D11Device_CreateRenderTargetViewFromTexture2D@@YAPEAUID3D11RenderTargetView@@PEAUID3D11Device@@PEAUID3D11Texture2D@@@Z PROC ; ID3D11Device_CreateRenderTargetViewFromTexture2D
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 723
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
; Line 725
	lea	rdx, QWORD PTR BindFlags$[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z ; ID3D11Texture2D_GetBindFlags
; Line 727
	mov	eax, DWORD PTR BindFlags$[rsp]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN2@ID3D11Devi
; Line 728
	mov	QWORD PTR RenderTargetView$1[rsp], 0
; Line 729
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv76[rsp], rax
	lea	r9, QWORD PTR RenderTargetView$1[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv76[rsp]
	test	eax, eax
	jl	SHORT $LN4@ID3D11Devi
; Line 730
	mov	rax, QWORD PTR RenderTargetView$1[rsp]
	jmp	$LN1@ID3D11Devi
$LN4@ID3D11Devi:
; Line 732
	jmp	SHORT $LN3@ID3D11Devi
$LN2@ID3D11Devi:
; Line 734
	mov	DWORD PTR [rsp+32], 47			; 0000002fH
	mov	r9d, 734				; 000002deH
	lea	r8, OFFSET FLAT:$SG140650
	lea	rdx, OFFSET FLAT:$SG140651
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140649
	mov	edx, 7
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 735
	xor	eax, eax
	jmp	SHORT $LN1@ID3D11Devi
$LN3@ID3D11Devi:
; Line 737
	mov	DWORD PTR [rsp+32], 48			; 00000030H
	mov	r9d, 737				; 000002e1H
	lea	r8, OFFSET FLAT:$SG140653
	lea	rdx, OFFSET FLAT:$SG140654
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140652
	mov	edx, 7
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 738
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 739
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Device_CreateRenderTargetViewFromTexture2D@@YAPEAUID3D11RenderTargetView@@PEAUID3D11Device@@PEAUID3D11Texture2D@@@Z ENDP ; ID3D11Device_CreateRenderTargetViewFromTexture2D
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Texture$ = 32
State$ = 40
View$ = 48
tv71 = 56
tv81 = 64
tv91 = 72
S$ = 80
T$ = 136
__$ArrayPad$ = 184
Device$ = 208
SizeX$ = 216
SizeY$ = 224
TheState$ = 232
TheView$ = 240
?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z PROC ; ID3D11Device_CreateDefaultDepthStencil
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 656
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 657
	mov	QWORD PTR State$[rsp], 0
; Line 658
	mov	QWORD PTR Texture$[rsp], 0
; Line 659
	mov	QWORD PTR View$[rsp], 0
; Line 664
	mov	DWORD PTR S$[rsp], 1
; Line 665
	mov	DWORD PTR S$[rsp+4], 1
; Line 666
	mov	DWORD PTR S$[rsp+8], 2
; Line 667
	mov	DWORD PTR S$[rsp+12], 1
; Line 668
	mov	BYTE PTR S$[rsp+16], 255		; 000000ffH
; Line 669
	mov	BYTE PTR S$[rsp+17], 255		; 000000ffH
; Line 671
	mov	DWORD PTR S$[rsp+20], 1
; Line 672
	mov	DWORD PTR S$[rsp+24], 7
; Line 673
	mov	DWORD PTR S$[rsp+28], 1
; Line 674
	mov	DWORD PTR S$[rsp+32], 8
; Line 677
	mov	DWORD PTR S$[rsp+36], 1
; Line 678
	mov	DWORD PTR S$[rsp+40], 8
; Line 679
	mov	DWORD PTR S$[rsp+44], 1
; Line 680
	mov	DWORD PTR S$[rsp+48], 8
; Line 684
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+168]
	mov	QWORD PTR tv71[rsp], rax
	lea	r8, QWORD PTR State$[rsp]
	lea	rdx, QWORD PTR S$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv71[rsp]
	test	eax, eax
	jge	SHORT $LN2@ID3D11Devi
; Line 686
	xor	eax, eax
	jmp	$LN1@ID3D11Devi
$LN2@ID3D11Devi:
; Line 690
	mov	eax, DWORD PTR SizeX$[rsp]
	mov	DWORD PTR T$[rsp], eax
; Line 691
	mov	eax, DWORD PTR SizeY$[rsp]
	mov	DWORD PTR T$[rsp+4], eax
; Line 692
	mov	DWORD PTR T$[rsp+8], 1
; Line 693
	mov	DWORD PTR T$[rsp+12], 1
; Line 694
	mov	DWORD PTR T$[rsp+16], 40		; 00000028H
; Line 696
	mov	DWORD PTR T$[rsp+20], 1
; Line 697
	mov	DWORD PTR T$[rsp+24], 0
; Line 699
	mov	DWORD PTR T$[rsp+28], 0
; Line 700
	mov	DWORD PTR T$[rsp+32], 64		; 00000040H
; Line 701
	mov	DWORD PTR T$[rsp+36], 0
; Line 702
	mov	DWORD PTR T$[rsp+40], 0
; Line 705
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv81[rsp], rax
	lea	r9, QWORD PTR Texture$[rsp]
	xor	r8d, r8d
	lea	rdx, QWORD PTR T$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv81[rsp]
	test	eax, eax
	jge	SHORT $LN3@ID3D11Devi
; Line 707
	xor	eax, eax
	jmp	SHORT $LN1@ID3D11Devi
$LN3@ID3D11Devi:
; Line 710
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv91[rsp], rax
	lea	r9, QWORD PTR View$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR Texture$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv91[rsp]
	test	eax, eax
	jge	SHORT $LN4@ID3D11Devi
; Line 713
	xor	eax, eax
	jmp	SHORT $LN1@ID3D11Devi
$LN4@ID3D11Devi:
; Line 716
	mov	rax, QWORD PTR TheState$[rsp]
	mov	rcx, QWORD PTR State$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 717
	mov	rax, QWORD PTR TheView$[rsp]
	mov	rcx, QWORD PTR View$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 718
	mov	eax, 1
$LN1@ID3D11Devi:
; Line 719
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 200				; 000000c8H
	ret	0
?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z ENDP ; ID3D11Device_CreateDefaultDepthStencil
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 48
tv75 = 52
ImageW$ = 56
ImageH$ = 60
ImageP$ = 64
View$ = 72
tv92 = 80
Texture$ = 88
Resource$1 = 96
tv170 = 104
D$ = 112
I$2 = 128
$T3 = 152
$T4 = 176
$T5 = 208
T$ = 232
__$ArrayPad$ = 280
Device$ = 320
Usage$ = 328
Flags$ = 336
I$ = 344
?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z PROC ; ID3D11Device_CreateSRV
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 596
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 604
	mov	QWORD PTR View$[rsp], 0
; Line 606
	mov	rax, QWORD PTR I$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jge	SHORT $LN5@ID3D11Devi
	mov	rax, QWORD PTR I$[rsp]
	mov	eax, DWORD PTR [rax+4]
	neg	eax
	mov	DWORD PTR tv69[rsp], eax
	jmp	SHORT $LN6@ID3D11Devi
$LN5@ID3D11Devi:
	mov	rax, QWORD PTR I$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR tv69[rsp], eax
$LN6@ID3D11Devi:
	mov	eax, DWORD PTR tv69[rsp]
	mov	DWORD PTR ImageW$[rsp], eax
; Line 607
	mov	rax, QWORD PTR I$[rsp]
	cmp	DWORD PTR [rax+8], 0
	jge	SHORT $LN7@ID3D11Devi
	mov	rax, QWORD PTR I$[rsp]
	mov	eax, DWORD PTR [rax+8]
	neg	eax
	mov	DWORD PTR tv75[rsp], eax
	jmp	SHORT $LN8@ID3D11Devi
$LN7@ID3D11Devi:
	mov	rax, QWORD PTR I$[rsp]
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR tv75[rsp], eax
$LN8@ID3D11Devi:
	mov	eax, DWORD PTR tv75[rsp]
	mov	DWORD PTR ImageH$[rsp], eax
; Line 608
	mov	rax, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?PIXEL_FORMAT_SIZE@@YAHH@Z		; PIXEL_FORMAT_SIZE
	mov	ecx, DWORD PTR ImageW$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ImageP$[rsp], eax
; Line 611
	mov	eax, DWORD PTR ImageW$[rsp]
	mov	DWORD PTR T$[rsp], eax
; Line 612
	mov	eax, DWORD PTR ImageH$[rsp]
	mov	DWORD PTR T$[rsp+4], eax
; Line 613
	mov	DWORD PTR T$[rsp+8], 1
; Line 614
	mov	DWORD PTR T$[rsp+12], 1
; Line 615
	mov	rax, QWORD PTR I$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z ; PIXEL_FORMAT_DXGIF
	mov	DWORD PTR T$[rsp+16], eax
; Line 617
	mov	DWORD PTR T$[rsp+20], 1
; Line 618
	mov	DWORD PTR T$[rsp+24], 0
; Line 620
	mov	eax, DWORD PTR Usage$[rsp]
	mov	DWORD PTR T$[rsp+28], eax
; Line 621
	mov	DWORD PTR T$[rsp+32], 8
; Line 622
	mov	eax, DWORD PTR Flags$[rsp]
	mov	DWORD PTR T$[rsp+36], eax
; Line 623
	mov	DWORD PTR T$[rsp+40], 0
; Line 626
	mov	rax, QWORD PTR I$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR D$[rsp], rax
; Line 627
	mov	eax, DWORD PTR ImageP$[rsp]
	mov	DWORD PTR D$[rsp+8], eax
; Line 626
	mov	DWORD PTR D$[rsp+12], 0
; Line 631
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv92[rsp], rax
	lea	r9, QWORD PTR Texture$[rsp]
	lea	r8, QWORD PTR D$[rsp]
	lea	rdx, QWORD PTR T$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv92[rsp]
	test	eax, eax
	jl	$LN2@ID3D11Devi
; Line 634
	mov	DWORD PTR I$2[rsp], 0
; Line 635
	mov	DWORD PTR I$2[rsp+4], 4
; Line 637
	mov	DWORD PTR I$2[rsp+8], 0
; Line 638
	mov	DWORD PTR I$2[rsp+12], 1
	lea	rax, QWORD PTR I$2[rsp+16]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
; Line 642
	mov	rax, QWORD PTR Texture$[rsp]
	mov	QWORD PTR Resource$1[rsp], rax
; Line 644
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv170[rsp], rax
	lea	r9, QWORD PTR View$[rsp]
	lea	r8, QWORD PTR I$2[rsp]
	mov	rdx, QWORD PTR Resource$1[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv170[rsp]
	test	eax, eax
	jge	SHORT $LN3@ID3D11Devi
; Line 645
	mov	QWORD PTR View$[rsp], 0
; Line 647
	mov	DWORD PTR [rsp+32], 46			; 0000002eH
	mov	r9d, 647				; 00000287H
	lea	r8, OFFSET FLAT:$SG140615
	lea	rdx, OFFSET FLAT:$SG140616
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140614
	mov	edx, 7
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@ID3D11Devi:
$LN2@ID3D11Devi:
; Line 650
	mov	rax, QWORD PTR View$[rsp]
; Line 651
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Device_CreateSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@W4D3D11_USAGE@@IU_PIXEL_BUFFER@@@Z ENDP ; ID3D11Device_CreateSRV
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
R$ = 40
T$ = 48
D$ = 80
__$ArrayPad$ = 352
Device$ = 400
?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z PROC ; ID3D11Device_CreateDefaultBlendState
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 513
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 376				; 00000178H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 514
	mov	DWORD PTR T$[rsp], 1
; Line 515
	mov	DWORD PTR T$[rsp+4], 5
; Line 516
	mov	DWORD PTR T$[rsp+8], 6
; Line 517
	mov	DWORD PTR T$[rsp+12], 1
; Line 518
	mov	DWORD PTR T$[rsp+16], 1
; Line 519
	mov	DWORD PTR T$[rsp+20], 1
; Line 520
	mov	DWORD PTR T$[rsp+24], 1
; Line 521
	mov	BYTE PTR T$[rsp+28], 15
; Line 523
	lea	rax, QWORD PTR D$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 264				; 00000108H
	rep stosb
; Line 524
	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	lea	rcx, QWORD PTR T$[rsp]
	lea	rdi, QWORD PTR D$[rsp+rax+8]
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 527
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+160]
	mov	QWORD PTR tv77[rsp], rax
	lea	r8, QWORD PTR R$[rsp]
	lea	rdx, QWORD PTR D$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv77[rsp]
	test	eax, eax
	jl	SHORT $LN2@ID3D11Devi
; Line 528
	mov	rax, QWORD PTR R$[rsp]
	jmp	SHORT $LN1@ID3D11Devi
$LN2@ID3D11Devi:
; Line 530
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 531
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 376				; 00000178H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z ENDP ; ID3D11Device_CreateDefaultBlendState
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
View$ = 48
?ID3D11ShaderResourceView_ReleaseAll@@YAXPEAUID3D11ShaderResourceView@@@Z PROC ; ID3D11ShaderResourceView_ReleaseAll
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 492
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rcx, QWORD PTR View$[rsp]
	call	?ID3D11View_ReleaseAll@@YAXPEAUID3D11View@@@Z ; ID3D11View_ReleaseAll
; Line 493
	add	rsp, 40					; 00000028H
	ret	0
?ID3D11ShaderResourceView_ReleaseAll@@YAXPEAUID3D11ShaderResourceView@@@Z ENDP ; ID3D11ShaderResourceView_ReleaseAll
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
View$ = 64
?ID3D11View_ReleaseAll@@YAXPEAUID3D11View@@@Z PROC	; ID3D11View_ReleaseAll
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 486
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	rcx, QWORD PTR View$[rsp]
	call	?ID3D11View_ReleaseResouce@@YAXPEAUID3D11View@@@Z ; ID3D11View_ReleaseResouce
; Line 487
	mov	rax, QWORD PTR View$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv70[rsp], rax
	mov	rcx, QWORD PTR View$[rsp]
	call	QWORD PTR tv70[rsp]
; Line 488
	add	rsp, 56					; 00000038H
	ret	0
?ID3D11View_ReleaseAll@@YAXPEAUID3D11View@@@Z ENDP	; ID3D11View_ReleaseAll
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Resource$ = 32
tv69 = 40
tv76 = 48
View$ = 80
?ID3D11View_ReleaseResouce@@YAXPEAUID3D11View@@@Z PROC	; ID3D11View_ReleaseResouce
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 477
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR Resource$[rsp], 0
; Line 478
	mov	rax, QWORD PTR View$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv69[rsp], rax
	lea	rdx, QWORD PTR Resource$[rsp]
	mov	rcx, QWORD PTR View$[rsp]
	call	QWORD PTR tv69[rsp]
; Line 479
	cmp	QWORD PTR Resource$[rsp], 0
	je	SHORT $LN2@ID3D11View
; Line 480
	mov	rax, QWORD PTR Resource$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv76[rsp], rax
	mov	rcx, QWORD PTR Resource$[rsp]
	call	QWORD PTR tv76[rsp]
$LN2@ID3D11View:
; Line 482
	add	rsp, 72					; 00000048H
	ret	0
?ID3D11View_ReleaseResouce@@YAXPEAUID3D11View@@@Z ENDP	; ID3D11View_ReleaseResouce
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
GreatInfo$1 = 40
__$ArrayPad$ = 88
Texture$ = 112
BindFlags$ = 120
?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z PROC ; ID3D11Texture2D_GetBindFlags
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 460
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 461
	cmp	QWORD PTR Texture$[rsp], 0
	je	SHORT $LN2@ID3D11Text
; Line 464
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv70[rsp], rax
	lea	rdx, QWORD PTR GreatInfo$1[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	QWORD PTR tv70[rsp]
; Line 466
	mov	rax, QWORD PTR BindFlags$[rsp]
	mov	ecx, DWORD PTR GreatInfo$1[rsp+32]
	mov	DWORD PTR [rax], ecx
; Line 467
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Text
; Line 468
	jmp	SHORT $LN3@ID3D11Text
$LN2@ID3D11Text:
; Line 470
	mov	rax, QWORD PTR BindFlags$[rsp]
	mov	DWORD PTR [rax], -1
; Line 471
	xor	eax, eax
$LN3@ID3D11Text:
$LN1@ID3D11Text:
; Line 473
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?ID3D11Texture2D_GetBindFlags@@YAHPEAUID3D11Texture2D@@PEAH@Z ENDP ; ID3D11Texture2D_GetBindFlags
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 32
GreatInfo$1 = 40
__$ArrayPad$ = 88
Texture$ = 112
SizeX$ = 120
SizeY$ = 128
?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z PROC ; ID3D11Texture2D_GetSize
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 441
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 442
	cmp	QWORD PTR Texture$[rsp], 0
	je	SHORT $LN2@ID3D11Text
; Line 445
	mov	rax, QWORD PTR Texture$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv70[rsp], rax
	lea	rdx, QWORD PTR GreatInfo$1[rsp]
	mov	rcx, QWORD PTR Texture$[rsp]
	call	QWORD PTR tv70[rsp]
; Line 447
	mov	rax, QWORD PTR SizeX$[rsp]
	mov	ecx, DWORD PTR GreatInfo$1[rsp]
	mov	DWORD PTR [rax], ecx
; Line 448
	mov	rax, QWORD PTR SizeY$[rsp]
	mov	ecx, DWORD PTR GreatInfo$1[rsp+4]
	mov	DWORD PTR [rax], ecx
; Line 449
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Text
; Line 450
	jmp	SHORT $LN3@ID3D11Text
$LN2@ID3D11Text:
; Line 452
	mov	rax, QWORD PTR SizeX$[rsp]
	mov	DWORD PTR [rax], -1
; Line 453
	mov	rax, QWORD PTR SizeY$[rsp]
	mov	DWORD PTR [rax], -1
; Line 454
	xor	eax, eax
$LN3@ID3D11Text:
$LN1@ID3D11Text:
; Line 456
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z ENDP ; ID3D11Texture2D_GetSize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv74 = 48
tv88 = 56
MappedResource$ = 64
Context$ = 96
Buffer$ = 104
ByteOffset$ = 112
ByteSize$ = 120
ByteData$ = 128
?ID3D11DeviceContext_UpdateDynamicVertexBuffer@@YAHPEAUID3D11DeviceContext@@PEAUID3D11Buffer@@IIPEAX@Z PROC ; ID3D11DeviceContext_UpdateDynamicVertexBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 384
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 389
	mov	rax, QWORD PTR Context$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR tv74[rsp], rax
	lea	rax, QWORD PTR MappedResource$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	rdx, QWORD PTR Buffer$[rsp]
	mov	rcx, QWORD PTR Context$[rsp]
	call	QWORD PTR tv74[rsp]
	test	eax, eax
	jl	SHORT $LN2@ID3D11Devi
; Line 392
	mov	eax, DWORD PTR ByteSize$[rsp]
	mov	ecx, DWORD PTR ByteOffset$[rsp]
	mov	rdx, QWORD PTR MappedResource$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8d, eax
	mov	rdx, QWORD PTR ByteData$[rsp]
	call	memcpy
; Line 394
	mov	rax, QWORD PTR Context$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv88[rsp], rax
	xor	r8d, r8d
	mov	rdx, QWORD PTR Buffer$[rsp]
	mov	rcx, QWORD PTR Context$[rsp]
	call	QWORD PTR tv88[rsp]
; Line 396
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Devi
$LN2@ID3D11Devi:
; Line 399
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 400
	add	rsp, 88					; 00000058H
	ret	0
?ID3D11DeviceContext_UpdateDynamicVertexBuffer@@YAHPEAUID3D11DeviceContext@@PEAUID3D11Buffer@@IIPEAX@Z ENDP ; ID3D11DeviceContext_UpdateDynamicVertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv72 = 32
Result$ = 40
I$ = 48
D$ = 64
__$ArrayPad$ = 88
Device$ = 112
Usage$ = 120
AccessFlags$ = 128
ByteSize$ = 136
ByteData$ = 144
?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z PROC ; ID3D11Device_CreateVertexBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 350
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 366
	mov	eax, DWORD PTR ByteSize$[rsp]
	mov	DWORD PTR D$[rsp], eax
; Line 367
	mov	eax, DWORD PTR Usage$[rsp]
	mov	DWORD PTR D$[rsp+4], eax
; Line 368
	mov	DWORD PTR D$[rsp+8], 1
; Line 369
	mov	eax, DWORD PTR AccessFlags$[rsp]
	mov	DWORD PTR D$[rsp+12], eax
; Line 366
	mov	DWORD PTR D$[rsp+16], 0
	mov	DWORD PTR D$[rsp+20], 0
; Line 372
	mov	rax, QWORD PTR ByteData$[rsp]
	mov	QWORD PTR I$[rsp], rax
	mov	DWORD PTR I$[rsp+8], 0
	mov	DWORD PTR I$[rsp+12], 0
; Line 375
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv72[rsp], rax
	lea	r9, QWORD PTR Result$[rsp]
	lea	r8, QWORD PTR I$[rsp]
	lea	rdx, QWORD PTR D$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv72[rsp]
	test	eax, eax
	jl	SHORT $LN2@ID3D11Devi
; Line 376
	mov	rax, QWORD PTR Result$[rsp]
	jmp	SHORT $LN1@ID3D11Devi
$LN2@ID3D11Devi:
; Line 378
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 379
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?ID3D11Device_CreateVertexBuffer@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@W4D3D11_USAGE@@IIPEAX@Z ENDP ; ID3D11Device_CreateVertexBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Buffer$ = 48
tv73 = 56
Resource$1 = 64
tv88 = 72
Result$2 = 80
I$ = 88
S$3 = 104
$T4 = 128
$T5 = 160
$T6 = 192
D$ = 216
__$ArrayPad$ = 240
Device$ = 288
ResultBuffer$ = 296
ItemCount$ = 304
ItemSize$ = 312
ByteData$ = 320
?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z PROC ; ID3D11Device_CreateImmutableStructBufferSRV
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 305
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 307
	mov	eax, DWORD PTR ItemSize$[rsp]
	imul	eax, DWORD PTR ItemCount$[rsp]
	mov	DWORD PTR D$[rsp], eax
; Line 308
	mov	DWORD PTR D$[rsp+4], 1
; Line 309
	mov	DWORD PTR D$[rsp+8], 8
; Line 310
	mov	DWORD PTR D$[rsp+12], 0
; Line 311
	mov	DWORD PTR D$[rsp+16], 64		; 00000040H
; Line 312
	mov	eax, DWORD PTR ItemSize$[rsp]
	mov	DWORD PTR D$[rsp+20], eax
; Line 316
	mov	rax, QWORD PTR ByteData$[rsp]
	mov	QWORD PTR I$[rsp], rax
	mov	DWORD PTR I$[rsp+8], 0
	mov	DWORD PTR I$[rsp+12], 0
; Line 320
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv73[rsp], rax
	lea	r9, QWORD PTR Buffer$[rsp]
	lea	r8, QWORD PTR I$[rsp]
	lea	rdx, QWORD PTR D$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv73[rsp]
	test	eax, eax
	jl	$LN2@ID3D11Devi
; Line 322
	cmp	QWORD PTR ResultBuffer$[rsp], 0
	je	SHORT $LN3@ID3D11Devi
	mov	rax, QWORD PTR ResultBuffer$[rsp]
	mov	rcx, QWORD PTR Buffer$[rsp]
	mov	QWORD PTR [rax], rcx
$LN3@ID3D11Devi:
; Line 324
	mov	DWORD PTR S$3[rsp], 0
; Line 325
	mov	DWORD PTR S$3[rsp+4], 1
; Line 327
	mov	DWORD PTR S$3[rsp+8], 0
; Line 328
	mov	eax, DWORD PTR ItemCount$[rsp]
	mov	DWORD PTR S$3[rsp+12], eax
	lea	rax, QWORD PTR S$3[rsp+16]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 8
	rep stosb
; Line 332
	mov	rax, QWORD PTR Buffer$[rsp]
	mov	QWORD PTR Resource$1[rsp], rax
; Line 335
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv88[rsp], rax
	lea	r9, QWORD PTR Result$2[rsp]
	lea	r8, QWORD PTR S$3[rsp]
	mov	rdx, QWORD PTR Resource$1[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv88[rsp]
	test	eax, eax
	jl	SHORT $LN4@ID3D11Devi
; Line 337
	mov	rax, QWORD PTR Result$2[rsp]
	jmp	$LN1@ID3D11Devi
$LN4@ID3D11Devi:
$LN2@ID3D11Devi:
; Line 341
	cmp	QWORD PTR ResultBuffer$[rsp], 0
	je	SHORT $LN5@ID3D11Devi
	mov	rax, QWORD PTR ResultBuffer$[rsp]
	mov	QWORD PTR [rax], 0
$LN5@ID3D11Devi:
; Line 343
	mov	DWORD PTR [rsp+32], 40			; 00000028H
	mov	r9d, 343				; 00000157H
	lea	r8, OFFSET FLAT:$SG140402
	lea	rdx, OFFSET FLAT:$SG140403
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140401
	mov	edx, 6
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 345
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 346
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Device_CreateImmutableStructBufferSRV@@YAPEAUID3D11ShaderResourceView@@PEAUID3D11Device@@PEAPEAUID3D11Buffer@@IIPEAX@Z ENDP ; ID3D11Device_CreateImmutableStructBufferSRV
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
D$ = 0
__$ArrayPad$ = 24
__$ReturnAddress$ = 64
ByteWidth$ = 72
Usage$ = 80
BindFlags$ = 88
CPUAccessFlags$ = 96
MiscFlags$ = 104
StructureByteStride$ = 112
?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z PROC ; D3D11DescribeBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 278
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 280
	mov	eax, DWORD PTR ByteWidth$[rsp]
	mov	DWORD PTR D$[rsp], eax
; Line 281
	mov	eax, DWORD PTR Usage$[rsp]
	mov	DWORD PTR D$[rsp+4], eax
; Line 282
	mov	eax, DWORD PTR BindFlags$[rsp]
	mov	DWORD PTR D$[rsp+8], eax
; Line 283
	mov	eax, DWORD PTR CPUAccessFlags$[rsp]
	mov	DWORD PTR D$[rsp+12], eax
; Line 284
	mov	eax, DWORD PTR MiscFlags$[rsp]
	mov	DWORD PTR D$[rsp+16], eax
; Line 285
	mov	eax, DWORD PTR StructureByteStride$[rsp]
	mov	DWORD PTR D$[rsp+20], eax
; Line 286
	lea	rax, QWORD PTR D$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 287
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z ENDP ; D3D11DescribeBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
F$ = 32
?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z PROC	; PIXEL_FORMAT_DXGIF
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 255
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	eax, DWORD PTR F$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN5@PIXEL_FORM
	cmp	DWORD PTR tv64[rsp], 4
	je	SHORT $LN4@PIXEL_FORM
	jmp	SHORT $LN6@PIXEL_FORM
$LN4@PIXEL_FORM:
; Line 257
	mov	eax, 28
	jmp	SHORT $LN1@PIXEL_FORM
$LN5@PIXEL_FORM:
; Line 258
	mov	eax, 61					; 0000003dH
	jmp	SHORT $LN1@PIXEL_FORM
$LN6@PIXEL_FORM:
; Line 259
	xor	eax, eax
$LN1@PIXEL_FORM:
; Line 261
	add	rsp, 24
	ret	0
?PIXEL_FORMAT_DXGIF@@YA?AW4DXGI_FORMAT@@H@Z ENDP	; PIXEL_FORMAT_DXGIF
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 48
?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_PushWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 244
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
; Line 245
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveWindow@@YAPEAUID3D11_WINDOW@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveWindow
	mov	rcx, rax
	call	?ID3D11Window_Present@@YAXPEAUID3D11_WINDOW@@@Z ; ID3D11Window_Present
; Line 246
	add	rsp, 40					; 00000028H
	ret	0
?ID3D11Graphics_PushWindow@@YAXPEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_PushWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Camera$ = 32
Input$ = 40
tv69 = 48
$T1 = 64
$T2 = 80
$T3 = 96
$T4 = 112
$T5 = 128
$T6 = 144
$T7 = 160
$T8 = 176
$T9 = 192
$T10 = 208
$T11 = 224
$T12 = 240
$T13 = 256
$T14 = 272
$T15 = 288
$T16 = 304
$T17 = 320
$T18 = 336
$T19 = 352
$T20 = 368
$T21 = 384
$T22 = 400
$T23 = 416
$T24 = 432
$T25 = 448
$T26 = 464
$T27 = 480
$T28 = 496
$T29 = 512
$T30 = 528
$T31 = 544
$T32 = 560
$T33 = 576
$T34 = 592
$T35 = 608
$T36 = 624
$T37 = 640
$T38 = 656
$T39 = 672
$T40 = 688
$T41 = 704
$T42 = 720
$T43 = 784
$T44 = 848
$T45 = 912
$T46 = 976
$T47 = 1040
$T48 = 1104
$T49 = 1168
Speed$ = 1232
$T50 = 1248
$T51 = 1264
BasisZ$ = 1280
MouseTravelTotal$ = 1296
MouseButton$ = 1312
BasisX$ = 1336
$T52 = 1352
$T53 = 1368
$T54 = 1384
$T55 = 1400
$T56 = 1416
$T57 = 1432
$T58 = 1448
$T59 = 1464
$T60 = 1480
$T61 = 1496
$T62 = 1512
$T63 = 1528
$T64 = 1544
BasisY$ = 1560
RotationMatrix$ = 1584
$T65 = 1648
$T66 = 1712
__$ArrayPad$ = 1776
Graphics$ = 1824
FlushColor$ = 1832
?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z PROC ; ID3D11Graphics_PullWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 163
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1800				; 00000708H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 164
	lea	rax, QWORD PTR $T26[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR FlushColor$[rsp]
	mov	ecx, 16
	rep movsb
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	QWORD PTR tv69[rsp], rax
	lea	rax, QWORD PTR $T27[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	lea	rdx, QWORD PTR $T27[rsp]
	mov	rcx, QWORD PTR tv69[rsp]
	call	?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Urx_f32x4@@@Z ; ID3D11Driver_ClearRenderTargetViews
; Line 166
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveDriver
	mov	rcx, rax
	call	?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z ; ID3D11Driver_CommitContextState
; Line 168
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveWindow@@YAPEAUID3D11_WINDOW@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveWindow
	mov	rcx, rax
	call	?ID3D11Window_Update@@YAHPEAUID3D11_WINDOW@@@Z ; ID3D11Window_Update
	test	eax, eax
	je	SHORT $LN2@ID3D11Grap
; Line 170
	mov	eax, 1
	jmp	$LN1@ID3D11Grap
$LN2@ID3D11Grap:
; Line 175
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR Camera$[rsp], rax
; Line 176
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4672]
	add	rax, 536				; 00000218H
	mov	QWORD PTR Input$[rsp], rax
; Line 178
	lea	rax, QWORD PTR MouseButton$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Input$[rsp]
	mov	ecx, 20
	rep movsb
; Line 179
	cmp	DWORD PTR MouseButton$[rsp+16], 0
	je	$LN3@ID3D11Grap
; Line 180
	mov	rax, QWORD PTR Camera$[rsp]
	cmp	DWORD PTR [rax+4], 0
	jne	SHORT $LN5@ID3D11Grap
; Line 181
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR MouseButton$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
$LN5@ID3D11Grap:
; Line 183
	lea	rax, QWORD PTR $T7[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+8]
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR MouseButton$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T7[rsp]
	lea	rdx, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	call	??G@YA?AUf32x3@@U0@0@Z			; operator-
	lea	rcx, QWORD PTR $T64[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T64[rsp]
	lea	rdi, QWORD PTR [rax+20]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 184
	jmp	$LN4@ID3D11Grap
$LN3@ID3D11Grap:
; Line 186
	mov	rax, QWORD PTR Camera$[rsp]
	cmp	DWORD PTR [rax+4], 0
	je	SHORT $LN6@ID3D11Grap
; Line 187
	lea	rax, QWORD PTR $T4[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+20]
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+32]
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T4[rsp]
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	call	??H@YA?AUf32x3@@U0@0@Z			; operator+
	lea	rcx, QWORD PTR $T63[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T63[rsp]
	lea	rdi, QWORD PTR [rax+32]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
$LN6@ID3D11Grap:
; Line 189
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR $T51[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR $T51[rsp+4], xmm0
	lea	rax, QWORD PTR $T51[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 4
	rep stosb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T51[rsp]
	lea	rdi, QWORD PTR [rax+20]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 190
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR $T50[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR $T50[rsp+4], xmm0
	lea	rax, QWORD PTR $T50[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 4
	rep stosb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
$LN4@ID3D11Grap:
; Line 195
	mov	rax, QWORD PTR Camera$[rsp]
	mov	ecx, DWORD PTR MouseButton$[rsp+16]
	mov	DWORD PTR [rax+4], ecx
; Line 197
	lea	rax, QWORD PTR $T13[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+20]
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T14[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+32]
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T13[rsp]
	lea	rdx, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	call	??H@YA?AUf32x3@@U0@0@Z			; operator+
	lea	rcx, QWORD PTR MouseTravelTotal$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
; Line 201
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR MouseTravelTotal$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	vmovss	xmm2, DWORD PTR __real@40490fdb
	lea	rdx, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T33[rsp]
	call	??D@YA?AUf32x3@@U0@M@Z			; operator*
	lea	rcx, QWORD PTR $T62[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	vmovss	xmm0, DWORD PTR $T62[rsp+4]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR Camera$[rsp]
	vmovss	DWORD PTR [rax+72], xmm0
; Line 202
	lea	rax, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR MouseTravelTotal$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	vmovss	xmm2, DWORD PTR __real@40490fdb
	lea	rdx, QWORD PTR $T17[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	call	??D@YA?AUf32x3@@U0@M@Z			; operator*
	lea	rcx, QWORD PTR $T60[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	vmovss	xmm0, DWORD PTR $T60[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	rax, QWORD PTR Camera$[rsp]
	vmovss	DWORD PTR [rax+76], xmm0
; Line 204
	mov	rax, QWORD PTR Camera$[rsp]
	vmovss	xmm1, DWORD PTR [rax+76]
	lea	rcx, QWORD PTR $T48[rsp]
	call	?MatrixRY@@YA?AUrx_f32_4x4@@M@Z		; MatrixRY
	lea	rcx, QWORD PTR $T66[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	vmovss	xmm1, DWORD PTR [rax+72]
	lea	rcx, QWORD PTR $T49[rsp]
	call	?MatrixRX@@YA?AUrx_f32_4x4@@M@Z		; MatrixRX
	lea	rcx, QWORD PTR $T65[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR $T66[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR $T65[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T42[rsp]
	lea	rdx, QWORD PTR $T43[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	call	?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z	; MatrixMult
	lea	rcx, QWORD PTR RotationMatrix$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 208
	lea	rax, QWORD PTR $T19[rsp]
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_X@@3Uf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T44[rsp]
	lea	rcx, QWORD PTR RotationMatrix$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T19[rsp]
	lea	rdx, QWORD PTR $T44[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	call	?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z ; MatrixMult
	lea	rcx, QWORD PTR $T57[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T57[rsp]
	lea	rdi, QWORD PTR [rax+80]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR BasisX$[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+80]
	mov	ecx, 12
	rep movsb
; Line 209
	lea	rax, QWORD PTR $T21[rsp]
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_Y@@3Uf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T45[rsp]
	lea	rcx, QWORD PTR RotationMatrix$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T21[rsp]
	lea	rdx, QWORD PTR $T45[rsp]
	lea	rcx, QWORD PTR $T34[rsp]
	call	?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z ; MatrixMult
	lea	rcx, QWORD PTR $T56[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T56[rsp]
	lea	rdi, QWORD PTR [rax+92]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR BasisY$[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+92]
	mov	ecx, 12
	rep movsb
; Line 210
	lea	rax, QWORD PTR $T23[rsp]
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_Z@@3Uf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T46[rsp]
	lea	rcx, QWORD PTR RotationMatrix$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T23[rsp]
	lea	rdx, QWORD PTR $T46[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	call	?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z ; MatrixMult
	lea	rcx, QWORD PTR $T55[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T55[rsp]
	lea	rdi, QWORD PTR [rax+104]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR BasisZ$[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+104]
	mov	ecx, 12
	rep movsb
; Line 212
	lea	rax, QWORD PTR Speed$[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+44]
	mov	ecx, 12
	rep movsb
; Line 214
	mov	rax, QWORD PTR Input$[rsp]
	cmp	DWORD PTR [rax+96], 0
	je	SHORT $LN7@ID3D11Grap
; Line 215
	vmovss	xmm1, DWORD PTR __real@3e4ccccd
	lea	rcx, QWORD PTR Speed$[rsp]
	call	??X@YAAEAUf32x3@@AEAU0@M@Z		; operator*=
$LN7@ID3D11Grap:
; Line 220
	mov	rax, QWORD PTR Input$[rsp]
	cmp	DWORD PTR [rax+116], 0
	je	$LN8@ID3D11Grap
; Line 221
	lea	rax, QWORD PTR $T25[rsp]
	lea	rcx, QWORD PTR Speed$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR BasisZ$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T25[rsp]
	lea	rdx, QWORD PTR $T1[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	call	??D@YA?AUf32x3@@U0@0@Z			; operator*
	lea	rcx, QWORD PTR $T58[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T22[rsp]
	lea	rcx, QWORD PTR $T58[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+56]
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T22[rsp]
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	call	??H@YA?AUf32x3@@U0@0@Z			; operator+
	lea	rcx, QWORD PTR $T53[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T53[rsp]
	lea	rdi, QWORD PTR [rax+56]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
$LN8@ID3D11Grap:
; Line 223
	mov	rax, QWORD PTR Input$[rsp]
	cmp	DWORD PTR [rax+136], 0
	je	$LN9@ID3D11Grap
; Line 224
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR Speed$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR BasisZ$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T5[rsp]
	lea	rdx, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	call	??D@YA?AUf32x3@@U0@0@Z			; operator*
	lea	rcx, QWORD PTR $T52[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T52[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	mov	rcx, QWORD PTR Camera$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+56]
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T10[rsp]
	lea	rdx, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T39[rsp]
	call	??G@YA?AUf32x3@@U0@0@Z			; operator-
	lea	rcx, QWORD PTR $T61[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	lea	rcx, QWORD PTR $T61[rsp]
	lea	rdi, QWORD PTR [rax+56]
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
$LN9@ID3D11Grap:
; Line 226
	mov	rax, QWORD PTR Input$[rsp]
	cmp	DWORD PTR [rax+156], 0
	je	SHORT $LN10@ID3D11Grap
; Line 227
	mov	rax, QWORD PTR Camera$[rsp]
	vmovss	xmm0, DWORD PTR [rax+60]
	vaddss	xmm0, xmm0, DWORD PTR Speed$[rsp+4]
	mov	rax, QWORD PTR Camera$[rsp]
	vmovss	DWORD PTR [rax+60], xmm0
$LN10@ID3D11Grap:
; Line 229
	mov	rax, QWORD PTR Input$[rsp]
	cmp	DWORD PTR [rax+196], 0
	je	SHORT $LN11@ID3D11Grap
; Line 230
	mov	rax, QWORD PTR Camera$[rsp]
	vmovss	xmm0, DWORD PTR [rax+60]
	vsubss	xmm0, xmm0, DWORD PTR Speed$[rsp+4]
	mov	rax, QWORD PTR Camera$[rsp]
	vmovss	DWORD PTR [rax+60], xmm0
$LN11@ID3D11Grap:
; Line 232
	mov	rax, QWORD PTR Input$[rsp]
	cmp	DWORD PTR [rax+216], 0
	je	$LN12@ID3D11Grap
; Line 233
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR Speed$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR BasisX$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T9[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T40[rsp]
	call	??D@YA?AUf32x3@@U0@0@Z			; operator*
	lea	rcx, QWORD PTR $T54[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR $T54[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	add	rax, 56					; 00000038H
	lea	rdx, QWORD PTR $T24[rsp]
	mov	rcx, rax
	call	??Z@YAAEAUf32x3@@AEAU0@U0@@Z		; operator-=
$LN12@ID3D11Grap:
; Line 235
	mov	rax, QWORD PTR Input$[rsp]
	cmp	DWORD PTR [rax+176], 0
	je	$LN13@ID3D11Grap
; Line 236
	lea	rax, QWORD PTR $T16[rsp]
	lea	rcx, QWORD PTR Speed$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR BasisX$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	r8, QWORD PTR $T16[rsp]
	lea	rdx, QWORD PTR $T20[rsp]
	lea	rcx, QWORD PTR $T41[rsp]
	call	??D@YA?AUf32x3@@U0@0@Z			; operator*
	lea	rcx, QWORD PTR $T59[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T18[rsp]
	lea	rcx, QWORD PTR $T59[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR Camera$[rsp]
	add	rax, 56					; 00000038H
	lea	rdx, QWORD PTR $T18[rsp]
	mov	rcx, rax
	call	??Y@YAAEAUf32x3@@AEAU0@U0@@Z		; operator+=
$LN13@ID3D11Grap:
; Line 239
	xor	eax, eax
$LN1@ID3D11Grap:
; Line 240
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1800				; 00000708H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_PullWindow@@YAHPEAUID3D11_GRAPHICS@@Urx_f32x4@@@Z ENDP ; ID3D11Graphics_PullWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv75 = 32
R$ = 40
I$ = 48
__$ArrayPad$ = 104
Device$ = 128
F$ = 136
A$ = 144
?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z PROC ; ID3D11Device_CreateSymmetricSamplerState
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 497
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 499
	mov	eax, DWORD PTR F$[rsp]
	mov	DWORD PTR I$[rsp], eax
; Line 500
	mov	eax, DWORD PTR A$[rsp]
	mov	DWORD PTR I$[rsp+4], eax
; Line 501
	mov	eax, DWORD PTR A$[rsp]
	mov	DWORD PTR I$[rsp+8], eax
; Line 502
	mov	eax, DWORD PTR A$[rsp]
	mov	DWORD PTR I$[rsp+12], eax
; Line 499
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR I$[rsp+16], xmm0
	mov	DWORD PTR I$[rsp+20], 0
	mov	DWORD PTR I$[rsp+24], 0
	lea	rax, QWORD PTR I$[rsp+28]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR I$[rsp+44], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR I$[rsp+48], xmm0
; Line 505
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+184]
	mov	QWORD PTR tv75[rsp], rax
	lea	r8, QWORD PTR R$[rsp]
	lea	rdx, QWORD PTR I$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv75[rsp]
	test	eax, eax
	jl	SHORT $LN2@ID3D11Devi
; Line 506
	mov	rax, QWORD PTR R$[rsp]
	jmp	SHORT $LN1@ID3D11Devi
$LN2@ID3D11Devi:
; Line 508
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 509
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z ENDP ; ID3D11Device_CreateSymmetricSamplerState
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv78 = 64
tv83 = 72
Result$ = 80
I$ = 88
$T1 = 104
D$ = 128
__$ArrayPad$ = 152
Device$ = 192
ByteSize$ = 200
ByteData$ = 208
?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z PROC ; ID3D11Device_CreateDefaultCB
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 292
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 4
	xor	r8d, r8d
	mov	edx, DWORD PTR ByteSize$[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	call	?D3D11DescribeBuffer@@YA?AUD3D11_BUFFER_DESC@@IW4D3D11_USAGE@@IIII@Z ; D3D11DescribeBuffer
	lea	rcx, QWORD PTR D$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
; Line 294
	mov	rax, QWORD PTR ByteData$[rsp]
	mov	QWORD PTR I$[rsp], rax
	mov	DWORD PTR I$[rsp+8], 0
	mov	DWORD PTR I$[rsp+12], 0
; Line 297
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv83[rsp], rax
	cmp	QWORD PTR ByteData$[rsp], 0
	je	SHORT $LN4@ID3D11Devi
	lea	rax, QWORD PTR I$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	jmp	SHORT $LN5@ID3D11Devi
$LN4@ID3D11Devi:
	mov	QWORD PTR tv78[rsp], 0
$LN5@ID3D11Devi:
	lea	r9, QWORD PTR Result$[rsp]
	mov	r8, QWORD PTR tv78[rsp]
	lea	rdx, QWORD PTR D$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv83[rsp]
	test	eax, eax
	jl	SHORT $LN2@ID3D11Devi
; Line 298
	mov	rax, QWORD PTR Result$[rsp]
	jmp	SHORT $LN1@ID3D11Devi
$LN2@ID3D11Devi:
; Line 300
	xor	eax, eax
$LN1@ID3D11Devi:
; Line 301
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z ENDP ; ID3D11Device_CreateDefaultCB
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ElementCount$ = 0
ElementList$ = 8
tv81 = 16
$T1 = 24
$T2 = 32
__$ReturnAddress$ = 80
Ignored$ = 88
?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ PROC ; D3D11DescribeInputLayoutInternal
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 425
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 427
	lea	rax, QWORD PTR Ignored$[rsp+8]
	mov	QWORD PTR ElementList$[rsp], rax
; Line 428
	mov	DWORD PTR ElementCount$[rsp], 0
$LN2@D3D11Descr:
; Line 430
	xor	eax, eax
	cmp	eax, 1
	je	SHORT $LN8@D3D11Descr
	mov	rax, QWORD PTR ElementList$[rsp]
	add	rax, 8
	mov	QWORD PTR ElementList$[rsp], rax
	mov	rax, QWORD PTR ElementList$[rsp]
	mov	rax, QWORD PTR [rax-8]
	mov	QWORD PTR tv81[rsp], rax
	jmp	SHORT $LN9@D3D11Descr
$LN8@D3D11Descr:
	mov	rax, QWORD PTR ElementList$[rsp]
	add	rax, 8
	mov	QWORD PTR ElementList$[rsp], rax
	mov	rax, QWORD PTR ElementList$[rsp]
	sub	rax, 8
	mov	QWORD PTR tv81[rsp], rax
$LN9@D3D11Descr:
	mov	rax, QWORD PTR tv81[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	eax, OFFSET FLAT:?ElementArray@?1??D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ@4PAU3@A
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR ElementCount$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	lea	rdi, QWORD PTR [rax+rcx]
	mov	rsi, QWORD PTR $T1[rsp]
	mov	ecx, 32					; 00000020H
	rep movsb
; Line 431
	mov	eax, OFFSET FLAT:?ElementArray@?1??D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ@4PAU3@A
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	movsxd	rcx, DWORD PTR ElementCount$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	cmp	QWORD PTR [rax+rcx], 0
	je	SHORT $LN5@D3D11Descr
; Line 432
	mov	eax, DWORD PTR ElementCount$[rsp]
	inc	eax
	mov	DWORD PTR ElementCount$[rsp], eax
; Line 433
	jmp	SHORT $LN6@D3D11Descr
$LN5@D3D11Descr:
	jmp	SHORT $LN3@D3D11Descr
$LN6@D3D11Descr:
; Line 434
	jmp	$LN2@D3D11Descr
$LN3@D3D11Descr:
; Line 435
	mov	QWORD PTR ElementList$[rsp], 0
; Line 436
	mov	eax, DWORD PTR ElementCount$[rsp]
	mov	DWORD PTR $T2[rsp], eax
	mov	eax, OFFSET FLAT:?ElementArray@?1??D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ@4PAU3@A
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	add	rax, QWORD PTR [rdx+rcx*8]
	mov	QWORD PTR $T2[rsp+8], rax
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 437
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ENDP ; D3D11DescribeInputLayoutInternal
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$ = 0
__$ReturnAddress$ = 64
SemanticName$ = 72
SemanticIndex$ = 80
Format$ = 88
InputSlot$ = 96
AlignedByteOffset$ = 104
InputSlotClass$ = 112
InstanceDataStepRate$ = 120
?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z PROC ; D3D11DescribeInputElement
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 411
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 413
	mov	rax, QWORD PTR SemanticName$[rsp]
	mov	QWORD PTR I$[rsp], rax
; Line 414
	mov	eax, DWORD PTR SemanticIndex$[rsp]
	mov	DWORD PTR I$[rsp+8], eax
; Line 415
	mov	eax, DWORD PTR Format$[rsp]
	mov	DWORD PTR I$[rsp+12], eax
; Line 416
	mov	eax, DWORD PTR InputSlot$[rsp]
	mov	DWORD PTR I$[rsp+16], eax
; Line 417
	mov	eax, DWORD PTR AlignedByteOffset$[rsp]
	mov	DWORD PTR I$[rsp+20], eax
; Line 418
	mov	eax, DWORD PTR InputSlotClass$[rsp]
	mov	DWORD PTR I$[rsp+24], eax
; Line 419
	mov	eax, DWORD PTR InstanceDataStepRate$[rsp]
	mov	DWORD PTR I$[rsp+28], eax
; Line 420
	lea	rax, QWORD PTR I$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 421
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ENDP ; D3D11DescribeInputElement
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Prev$ = 0
Graphics$ = 32
Mode$ = 40
?ID3D11Graphics_SetCameraMode@@YA?AW4DET_CAMERA_MODE@@PEAUID3D11_GRAPHICS@@W41@@Z PROC ; ID3D11Graphics_SetCameraMode
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1991
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR Prev$[rsp], eax
; Line 1992
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	ecx, DWORD PTR Mode$[rsp]
	mov	DWORD PTR [rax], ecx
; Line 1993
	mov	eax, DWORD PTR Prev$[rsp]
; Line 1994
	add	rsp, 24
	ret	0
?ID3D11Graphics_SetCameraMode@@YA?AW4DET_CAMERA_MODE@@PEAUID3D11_GRAPHICS@@W41@@Z ENDP ; ID3D11Graphics_SetCameraMode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
X$ = 16
Y$ = 24
Z$ = 32
?ID3D11Graphics_SetCameraSpeed@@YAXPEAUID3D11_GRAPHICS@@MMM@Z PROC ; ID3D11Graphics_SetCameraSpeed
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1986
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	mov	rax, QWORD PTR Graphics$[rsp]
	vmovss	xmm0, DWORD PTR X$[rsp]
	vmovss	DWORD PTR [rax+44], xmm0
; Line 1987
	mov	rax, QWORD PTR Graphics$[rsp]
	vmovss	xmm0, DWORD PTR Y$[rsp]
	vmovss	DWORD PTR [rax+48], xmm0
; Line 1988
	mov	rax, QWORD PTR Graphics$[rsp]
	vmovss	xmm0, DWORD PTR Z$[rsp]
	vmovss	DWORD PTR [rax+52], xmm0
; Line 1989
	ret	0
?ID3D11Graphics_SetCameraSpeed@@YAXPEAUID3D11_GRAPHICS@@MMM@Z ENDP ; ID3D11Graphics_SetCameraSpeed
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
X$ = 16
Y$ = 24
Z$ = 32
?ID3D11Graphics_Scale@@YAXPEAUID3D11_GRAPHICS@@MMM@Z PROC ; ID3D11Graphics_Scale
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1949
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
; Line 1950
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	mov	ecx, 16
	imul	rcx, rcx, 0
	add	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	xmm0, DWORD PTR [rax+rcx]
	vmulss	xmm0, xmm0, DWORD PTR X$[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 16
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR Graphics$[rsp]
	mov	rdx, QWORD PTR [rdx+120]
	mov	rdx, QWORD PTR [rdx+1024]
	add	rdx, rcx
	mov	rcx, rdx
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 1951
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	mov	ecx, 16
	imul	rcx, rcx, 1
	add	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	xmm0, DWORD PTR [rax+rcx]
	vmulss	xmm0, xmm0, DWORD PTR Y$[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 16
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR Graphics$[rsp]
	mov	rdx, QWORD PTR [rdx+120]
	mov	rdx, QWORD PTR [rdx+1024]
	add	rdx, rcx
	mov	rcx, rdx
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 1952
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	mov	ecx, 16
	imul	rcx, rcx, 2
	add	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	xmm0, DWORD PTR [rax+rcx]
	vmulss	xmm0, xmm0, DWORD PTR Z$[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 16
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR Graphics$[rsp]
	mov	rdx, QWORD PTR [rdx+120]
	mov	rdx, QWORD PTR [rdx+1024]
	add	rdx, rcx
	mov	rcx, rdx
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 1953
	ret	0
?ID3D11Graphics_Scale@@YAXPEAUID3D11_GRAPHICS@@MMM@Z ENDP ; ID3D11Graphics_Scale
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
X$ = 16
Y$ = 24
Z$ = 32
?ID3D11Graphics_Translate@@YAXPEAUID3D11_GRAPHICS@@MMM@Z PROC ; ID3D11Graphics_Translate
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1943
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
; Line 1944
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	mov	ecx, 16
	imul	rcx, rcx, 3
	add	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	xmm0, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, DWORD PTR X$[rsp]
	mov	eax, 4
	imul	rax, rax, 0
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR Graphics$[rsp]
	mov	rdx, QWORD PTR [rdx+120]
	mov	rdx, QWORD PTR [rdx+1024]
	add	rdx, rcx
	mov	rcx, rdx
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 1945
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	mov	ecx, 16
	imul	rcx, rcx, 3
	add	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	xmm0, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, DWORD PTR Y$[rsp]
	mov	eax, 4
	imul	rax, rax, 1
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR Graphics$[rsp]
	mov	rdx, QWORD PTR [rdx+120]
	mov	rdx, QWORD PTR [rdx+1024]
	add	rdx, rcx
	mov	rcx, rdx
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 1946
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	mov	ecx, 16
	imul	rcx, rcx, 3
	add	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	xmm0, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, DWORD PTR Z$[rsp]
	mov	eax, 4
	imul	rax, rax, 2
	mov	ecx, 16
	imul	rcx, rcx, 3
	mov	rdx, QWORD PTR Graphics$[rsp]
	mov	rdx, QWORD PTR [rdx+120]
	mov	rdx, QWORD PTR [rdx+1024]
	add	rdx, rcx
	mov	rcx, rdx
	vmovss	DWORD PTR [rcx+rax], xmm0
; Line 1947
	ret	0
?ID3D11Graphics_Translate@@YAXPEAUID3D11_GRAPHICS@@MMM@Z ENDP ; ID3D11Graphics_Translate
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 96
$T3 = 160
$T4 = 224
__$ArrayPad$ = 288
Graphics$ = 336
M$ = 344
?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z PROC ; ID3D11Graphics_MultMatrix
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1938
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 312				; 00000138H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1939
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR M$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	lea	rdx, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z	; MatrixMult
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1941
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 312				; 00000138H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z ENDP ; ID3D11Graphics_MultMatrix
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 96
__$ArrayPad$ = 160
Graphics$ = 208
?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_LoadMatrix
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1934
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1935
	lea	rcx, QWORD PTR $T1[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+120]
	mov	rax, QWORD PTR [rax+1024]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1936
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_LoadMatrix
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
Kind$ = 16
?ID3D11Graphics_PickMatrix@@YAXPEAUID3D11_GRAPHICS@@H@Z PROC ; ID3D11Graphics_PickMatrix
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1910
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
; Line 1911
	cmp	DWORD PTR Kind$[rsp], 1
	jne	SHORT $LN2@ID3D11Grap
; Line 1912
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 128				; 00000080H
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+120], rax
; Line 1913
	jmp	SHORT $LN3@ID3D11Grap
$LN2@ID3D11Grap:
; Line 1914
	cmp	DWORD PTR Kind$[rsp], 2
	jne	SHORT $LN4@ID3D11Grap
; Line 1915
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 1160				; 00000488H
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+120], rax
$LN4@ID3D11Grap:
$LN3@ID3D11Grap:
; Line 1917
	ret	0
?ID3D11Graphics_PickMatrix@@YAXPEAUID3D11_GRAPHICS@@H@Z ENDP ; ID3D11Graphics_PickMatrix
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv69 = 32
tv78 = 40
$T1 = 48
$T2 = 112
$T3 = 176
$T4 = 240
__$ArrayPad$ = 304
Graphics$ = 352
?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_InitializeMatrixStack
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1901
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1902
	lea	rcx, QWORD PTR $T1[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 128				; 00000080H
	mov	QWORD PTR tv69[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR tv69[rsp]
	mov	QWORD PTR [rax+1152], rcx
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, QWORD PTR tv69[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1903
	lea	rcx, QWORD PTR $T2[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 1160				; 00000488H
	mov	QWORD PTR tv78[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR tv78[rsp]
	mov	QWORD PTR [rax+2184], rcx
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR tv78[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 1904
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_InitializeMatrixStack
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_GetActiveContext
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 95
	mov	QWORD PTR [rsp+8], rcx
; Line 96
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4664]
	mov	rax, QWORD PTR [rax+272]
; Line 97
	ret	0
?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_GetActiveContext
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
?ID3D11Graphics_GetActiveDevice@@YAPEAUID3D11Device@@PEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_GetActiveDevice
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 89
	mov	QWORD PTR [rsp+8], rcx
; Line 90
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4664]
	mov	rax, QWORD PTR [rax+264]
; Line 91
	ret	0
?ID3D11Graphics_GetActiveDevice@@YAPEAUID3D11Device@@PEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_GetActiveDevice
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_GetActiveDriver
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 83
	mov	QWORD PTR [rsp+8], rcx
; Line 84
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4664]
; Line 85
	ret	0
?ID3D11Graphics_GetActiveDriver@@YAPEAUID3D11_DRIVER@@PEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_GetActiveDriver
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Graphics$ = 8
?ID3D11Graphics_GetActiveWindow@@YAPEAUID3D11_WINDOW@@PEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_GetActiveWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 77
	mov	QWORD PTR [rsp+8], rcx
; Line 78
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+4672]
; Line 79
	ret	0
?ID3D11Graphics_GetActiveWindow@@YAPEAUID3D11_WINDOW@@PEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_GetActiveWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 64
tv90 = 72
$T1 = 80
$T2 = 88
tv195 = 96
tv193 = 104
tv197 = 112
$T3 = 128
$T4 = 144
$T5 = 160
$T6 = 176
$T7 = 240
$T8 = 304
$T9 = 368
$T10 = 432
$T11 = 496
$T12 = 560
$T13 = 624
$T14 = 688
$T15 = 752
$T16 = 816
$T17 = 880
$T18 = 944
$T19 = 1008
$T20 = 1072
M$ = 1088
$T21 = 1152
$T22 = 1216
$T23 = 1280
$T24 = 1344
$T25 = 1408
$T26 = 1472
ViewMatrix$27 = 1536
$T28 = 1600
$T29 = 1664
$T30 = 1728
P$ = 1792
__$ArrayPad$ = 1856
Graphics$ = 1904
?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z PROC ; ID3D11Graphics_UpdateTransformData
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1996
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1880				; 00000758H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 2000
	mov	rax, QWORD PTR Graphics$[rsp]
	cmp	QWORD PTR [rax+2184], 0
	je	SHORT $LN4@ID3D11Grap
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+2184]
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T21[rsp]
	mov	QWORD PTR tv76[rsp], rax
	jmp	SHORT $LN5@ID3D11Grap
$LN4@ID3D11Grap:
	lea	rcx, QWORD PTR $T12[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR $T22[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T22[rsp]
	mov	QWORD PTR tv76[rsp], rax
$LN5@ID3D11Grap:
	mov	rax, QWORD PTR tv76[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rax, QWORD PTR P$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T1[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 2001
	mov	rax, QWORD PTR Graphics$[rsp]
	cmp	QWORD PTR [rax+1152], 0
	je	SHORT $LN6@ID3D11Grap
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+1152]
	lea	rcx, QWORD PTR $T23[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T23[rsp]
	mov	QWORD PTR tv90[rsp], rax
	jmp	SHORT $LN7@ID3D11Grap
$LN6@ID3D11Grap:
	lea	rcx, QWORD PTR $T13[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR $T24[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T24[rsp]
	mov	QWORD PTR tv90[rsp], rax
$LN7@ID3D11Grap:
	mov	rax, QWORD PTR tv90[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rax, QWORD PTR M$[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR $T2[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 2002
	mov	rax, QWORD PTR Graphics$[rsp]
	cmp	DWORD PTR [rax], 2
	jne	$LN2@ID3D11Grap
; Line 2005
	mov	rax, QWORD PTR Graphics$[rsp]
	vmovss	xmm0, DWORD PTR [rax+72]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovups	xmm1, xmm0
	lea	rcx, QWORD PTR $T14[rsp]
	call	?MatrixRX@@YA?AUrx_f32_4x4@@M@Z		; MatrixRX
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	vmovss	xmm0, DWORD PTR [rax+76]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovups	xmm1, xmm0
	lea	rcx, QWORD PTR $T15[rsp]
	call	?MatrixRY@@YA?AUrx_f32_4x4@@M@Z		; MatrixRY
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T8[rsp]
	lea	rdx, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z	; MatrixMult
	lea	rcx, QWORD PTR $T28[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+56]
	mov	ecx, 12
	rep movsb
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	call	??G@YA?AUf32x3@@U0@@Z			; operator-
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	lea	rdx, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z	; MatrixD
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T28[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T29[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T10[rsp]
	lea	rdx, QWORD PTR $T11[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z	; MatrixMult
	lea	rcx, QWORD PTR ViewMatrix$27[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 2008
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR ViewMatrix$27[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR M$[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T6[rsp]
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z	; MatrixMult
	lea	rcx, QWORD PTR $T30[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR M$[rsp]
	lea	rcx, QWORD PTR $T30[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
$LN2@ID3D11Grap:
; Line 2010
	mov	rax, QWORD PTR Graphics$[rsp]
	lea	rcx, QWORD PTR P$[rsp]
	lea	rdi, QWORD PTR [rax+6656]
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 2011
	mov	rax, QWORD PTR Graphics$[rsp]
	lea	rcx, QWORD PTR M$[rsp]
	lea	rdi, QWORD PTR [rax+6592]
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 2012
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+384]
	mov	QWORD PTR tv197[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rax, QWORD PTR [rax+6576]
	mov	QWORD PTR tv195[rsp], rax
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_GetActiveContext@@YAPEAUID3D11DeviceContext@@PEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_GetActiveContext
	mov	QWORD PTR tv193[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6592				; 000019c0H
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rdx, QWORD PTR tv195[rsp]
	mov	rcx, QWORD PTR tv193[rsp]
	call	QWORD PTR tv197[rsp]
; Line 2014
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1880				; 00000758H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_UpdateTransformData@@YAXPEAUID3D11_GRAPHICS@@@Z ENDP ; ID3D11Graphics_UpdateTransformData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileSize$1 = 64
MainDriver$ = 72
FileData$2 = 80
tv67 = 88
tv71 = 96
MainWindow$ = 104
$T3 = 112
$T4 = 128
$T5 = 144
$T6 = 160
$T7 = 176
$T8 = 192
$T9 = 208
$T10 = 224
$T11 = 240
$T12 = 256
$T13 = 272
$T14 = 288
$T15 = 304
$T16 = 320
$T17 = 336
$T18 = 352
$T19 = 368
$T20 = 384
$T21 = 400
$T22 = 432
$T23 = 464
$T24 = 496
$T25 = 528
$T26 = 560
$T27 = 592
$T28 = 624
$T29 = 656
$T30 = 688
$T31 = 720
$T32 = 752
$T33 = 784
$T34 = 816
$T35 = 848
$T36 = 880
$T37 = 912
$T38 = 944
$T39 = 976
$T40 = 1008
$T41 = 1040
$T42 = 1072
$T43 = 1104
$T44 = 1136
$T45 = 1168
$T46 = 1200
$T47 = 1232
$T48 = 1264
$T49 = 1296
$T50 = 1328
$T51 = 1360
$T52 = 1392
$T53 = 1424
$T54 = 1456
$T55 = 1488
$T56 = 1520
$T57 = 1552
$T58 = 1584
$T59 = 1616
$T60 = 1648
$T61 = 1680
$T62 = 1712
$T63 = 1744
$T64 = 1776
$T65 = 1808
$T66 = 1840
$T67 = 1872
$T68 = 1904
$T69 = 1936
$T70 = 1968
$T71 = 2000
Graphics$ = 2064
ControlFiber$ = 2072
WindowX$ = 2080
WindowY$ = 2088
WindowSizeX$ = 2096
WindowSizeY$ = 2104
WindowTitle$ = 2112
?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAXHHHHPEB_W@Z PROC ; ID3D11Graphics_Initialize
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 108
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 2040				; 000007f8H
; Line 109
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 2192				; 00000890H
	mov	QWORD PTR tv67[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR tv67[rsp]
	mov	QWORD PTR [rax+4664], rcx
	mov	rax, QWORD PTR tv67[rsp]
	mov	QWORD PTR MainDriver$[rsp], rax
; Line 110
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 2192				; 00000890H
	add	rax, 1664				; 00000680H
	mov	QWORD PTR tv71[rsp], rax
	mov	rax, QWORD PTR Graphics$[rsp]
	mov	rcx, QWORD PTR tv71[rsp]
	mov	QWORD PTR [rax+4672], rcx
	mov	rax, QWORD PTR tv71[rsp]
	mov	QWORD PTR MainWindow$[rsp], rax
; Line 112
	mov	rcx, QWORD PTR Graphics$[rsp]
	call	?ID3D11Graphics_InitializeMatrixStack@@YAXPEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_InitializeMatrixStack
; Line 114
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z ; ID3D11Driver_InitializeCompatible
	test	eax, eax
	je	$LN2@ID3D11Grap
; Line 116
	mov	rax, QWORD PTR WindowTitle$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR WindowY$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR WindowX$[rsp]
	mov	r8, QWORD PTR ControlFiber$[rsp]
	mov	rdx, QWORD PTR MainWindow$[rsp]
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateWindow@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z ; ID3D11Driver_CreateWindow
	test	eax, eax
	je	$LN3@ID3D11Grap
; Line 118
	mov	rax, QWORD PTR MainWindow$[rsp]
	mov	rdx, QWORD PTR [rax+792]
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ; ID3D11Driver_ConfigureForBackBuffer
	test	eax, eax
	je	$LN4@ID3D11Grap
; Line 120
	mov	r8d, 3
	xor	edx, edx
	mov	rax, QWORD PTR MainDriver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z ; ID3D11Device_CreateSymmetricSamplerState
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+6544], rax
; Line 121
	mov	r8d, 3
	mov	edx, 21
	mov	rax, QWORD PTR MainDriver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z ; ID3D11Device_CreateSymmetricSamplerState
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+6536], rax
; Line 123
	xor	r8d, r8d
	mov	edx, 144				; 00000090H
	mov	rax, QWORD PTR MainDriver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateDefaultCB@@YAPEAUID3D11Buffer@@PEAUID3D11Device@@IPEAX@Z ; ID3D11Device_CreateDefaultCB
	mov	rcx, QWORD PTR Graphics$[rsp]
	mov	QWORD PTR [rcx+6576], rax
; Line 129
	lea	rdx, OFFSET FLAT:$SG140263
	lea	rcx, QWORD PTR FileSize$1[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$2[rsp], rax
; Line 130
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T55[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T56[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T22[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T23[rsp]
	lea	rcx, QWORD PTR $T21[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR $T22[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T23[rsp]
	lea	rdx, QWORD PTR $T24[rsp]
	lea	rcx, QWORD PTR $T15[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6392				; 000018f8H
	lea	rcx, QWORD PTR $T4[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG140264
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 132
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T57[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 2
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG140265
	lea	rcx, QWORD PTR $T58[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T59[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T28[rsp]
	lea	rcx, QWORD PTR $T25[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T29[rsp]
	lea	rcx, QWORD PTR $T26[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR $T27[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r9, QWORD PTR $T28[rsp]
	lea	r8, QWORD PTR $T29[rsp]
	lea	rdx, QWORD PTR $T30[rsp]
	lea	rcx, QWORD PTR $T16[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6248				; 00001868H
	lea	rcx, QWORD PTR $T6[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG140266
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8d, 1
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 135
	mov	rcx, QWORD PTR FileData$2[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 136
	lea	rdx, OFFSET FLAT:$SG140267
	lea	rcx, QWORD PTR FileSize$1[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$2[rsp], rax
; Line 137
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T60[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T31[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T61[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T32[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T33[rsp]
	lea	rcx, QWORD PTR $T31[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T34[rsp]
	lea	rcx, QWORD PTR $T32[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T33[rsp]
	lea	rdx, QWORD PTR $T34[rsp]
	lea	rcx, QWORD PTR $T17[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6440				; 00001928H
	lea	rcx, QWORD PTR $T8[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG140268
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 139
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T62[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T35[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG140269
	lea	rcx, QWORD PTR $T63[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T36[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 2
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG140270
	lea	rcx, QWORD PTR $T64[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T37[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T65[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T38[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T39[rsp]
	lea	rcx, QWORD PTR $T35[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T40[rsp]
	lea	rcx, QWORD PTR $T36[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T41[rsp]
	lea	rcx, QWORD PTR $T37[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR $T38[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T39[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T40[rsp]
	lea	r8, QWORD PTR $T41[rsp]
	lea	rdx, QWORD PTR $T42[rsp]
	lea	rcx, QWORD PTR $T18[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6296				; 00001898H
	lea	rcx, QWORD PTR $T10[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG140271
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8d, 1
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 143
	mov	rcx, QWORD PTR FileData$2[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 144
	lea	rdx, OFFSET FLAT:$SG140272
	lea	rcx, QWORD PTR FileSize$1[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR FileData$2[rsp], rax
; Line 145
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T66[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T43[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T67[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T44[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T45[rsp]
	lea	rcx, QWORD PTR $T43[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T46[rsp]
	lea	rcx, QWORD PTR $T44[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	r8, QWORD PTR $T45[rsp]
	lea	rdx, QWORD PTR $T46[rsp]
	lea	rcx, QWORD PTR $T19[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6488				; 00001958H
	lea	rcx, QWORD PTR $T12[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG140273
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8d, 2
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 147
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T68[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T47[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 1
	mov	DWORD PTR [rsp+48], 1
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 16
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG140274
	lea	rcx, QWORD PTR $T69[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T48[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 1
	mov	DWORD PTR [rsp+48], 1
	mov	DWORD PTR [rsp+40], -1			; ffffffffH
	mov	DWORD PTR [rsp+32], 0
	mov	r9d, 43					; 0000002bH
	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG140275
	lea	rcx, QWORD PTR $T70[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T49[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	mov	DWORD PTR [rsp+56], 0
	mov	DWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	xor	r8d, r8d
	xor	edx, edx
	lea	rcx, QWORD PTR $T71[rsp]
	call	?D3D11DescribeInputElement@@YA?AUD3D11_INPUT_ELEMENT_DESC@@PEBDIW4DXGI_FORMAT@@IIW4D3D11_INPUT_CLASSIFICATION@@I@Z ; D3D11DescribeInputElement
	lea	rcx, QWORD PTR $T50[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T51[rsp]
	lea	rcx, QWORD PTR $T47[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T52[rsp]
	lea	rcx, QWORD PTR $T48[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T53[rsp]
	lea	rcx, QWORD PTR $T49[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T54[rsp]
	lea	rcx, QWORD PTR $T50[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 32					; 00000020H
	rep movsb
	lea	rax, QWORD PTR $T51[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR $T52[rsp]
	lea	r8, QWORD PTR $T53[rsp]
	lea	rdx, QWORD PTR $T54[rsp]
	lea	rcx, QWORD PTR $T20[rsp]
	call	?D3D11DescribeInputLayoutInternal@@YA?AUD3D11_INPUT_LAYOUT@@UD3D11_INPUT_ELEMENT_DESC@@ZZ ; D3D11DescribeInputLayoutInternal
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 16
	rep movsb
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	mov	rax, QWORD PTR Graphics$[rsp]
	add	rax, 6344				; 000018c8H
	lea	rcx, QWORD PTR $T14[rsp]
	mov	QWORD PTR [rsp+48], rcx
	lea	rcx, OFFSET FLAT:$SG140276
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR FileData$2[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR FileSize$1[rsp]
	mov	r8d, 1
	mov	rdx, rax
	mov	rcx, QWORD PTR MainDriver$[rsp]
	call	?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ; ID3D11Driver_CreateShaderFromData
; Line 151
	mov	rcx, QWORD PTR FileData$2[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 153
	mov	eax, 1
	jmp	SHORT $LN1@ID3D11Grap
$LN4@ID3D11Grap:
$LN3@ID3D11Grap:
$LN2@ID3D11Grap:
; Line 158
	xor	eax, eax
$LN1@ID3D11Grap:
; Line 159
	add	rsp, 2040				; 000007f8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Graphics_Initialize@@YAHPEAUID3D11_GRAPHICS@@PEAXHHHHPEB_W@Z ENDP ; ID3D11Graphics_Initialize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 48
FloatColor$ = 56
tv85 = 64
tv131 = 72
Driver$ = 96
Color$ = 104
?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Urx_f32x4@@@Z PROC ; ID3D11Driver_ClearRenderTargetViews
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 745
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 88					; 00000058H
; Line 746
	mov	rax, QWORD PTR Color$[rsp]
	mov	QWORD PTR FloatColor$[rsp], rax
; Line 748
	mov	DWORD PTR I$1[rsp], 0
	jmp	SHORT $LN4@ID3D11Driv
$LN2@ID3D11Driv:
	mov	eax, DWORD PTR I$1[rsp]
	inc	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@ID3D11Driv:
	mov	rax, QWORD PTR Driver$[rsp]
	mov	eax, DWORD PTR [rax+392]
	cmp	DWORD PTR I$1[rsp], eax
	jae	SHORT $LN3@ID3D11Driv
; Line 749
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+400]
	mov	QWORD PTR tv85[rsp], rax
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	r8, QWORD PTR FloatColor$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rcx+rax*8+400]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv85[rsp]
; Line 751
	jmp	SHORT $LN2@ID3D11Driv
$LN3@ID3D11Driv:
; Line 753
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+424]
	mov	QWORD PTR tv131[rsp], rax
	mov	BYTE PTR [rsp+32], 0
	vmovss	xmm3, DWORD PTR __real@3f800000
	mov	r8d, 3
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+440]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv131[rsp]
; Line 755
	add	rsp, 88					; 00000058H
	ret	0
?ID3D11Driver_ClearRenderTargetViews@@YAXPEAUID3D11_DRIVER@@Urx_f32x4@@@Z ENDP ; ID3D11Driver_ClearRenderTargetViews
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 48
tv133 = 56
tv145 = 64
tv158 = 72
tv169 = 80
tv180 = 88
tv193 = 96
tv213 = 104
tv233 = 112
tv253 = 120
tv274 = 128
tv287 = 136
tv307 = 144
tv327 = 152
tv347 = 160
tv360 = 168
tv380 = 176
tv400 = 184
tv420 = 192
Driver$ = 224
?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z PROC ; ID3D11Driver_CommitContextState
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 760
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 216				; 000000d8H
; Line 761
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+352]
	mov	QWORD PTR tv80[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 288				; 00000120H
	mov	r8, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	edx, DWORD PTR [rax+284]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv80[rsp]
; Line 765
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR tv133[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 400				; 00000190H
	mov	rcx, QWORD PTR Driver$[rsp]
	mov	r9, QWORD PTR [rcx+440]
	mov	r8, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	edx, DWORD PTR [rax+392]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv133[rsp]
; Line 770
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+288]
	mov	QWORD PTR tv145[rsp], rax
	mov	r8d, 1
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+432]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv145[rsp]
; Line 774
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+280]
	mov	QWORD PTR tv158[rsp], rax
	mov	r9d, 268435455				; 0fffffffH
	xor	r8d, r8d
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+384]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv158[rsp]
; Line 779
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+192]
	mov	QWORD PTR tv169[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	edx, DWORD PTR [rax+448]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv169[rsp]
; Line 781
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+136]
	mov	QWORD PTR tv180[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+456]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv180[rsp]
; Line 787
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+552]
	mov	QWORD PTR tv193[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+736]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv193[rsp]
; Line 791
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+568]
	mov	QWORD PTR tv213[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 760				; 000002f8H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+752]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv213[rsp]
; Line 795
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+560]
	mov	QWORD PTR tv233[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 800				; 00000320H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+792]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv233[rsp]
; Line 799
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+536]
	mov	QWORD PTR tv253[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 872				; 00000368H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+864]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv253[rsp]
; Line 804
	mov	rax, QWORD PTR Driver$[rsp]
	cmp	DWORD PTR [rax+1128], 0
	je	SHORT $LN2@ID3D11Driv
; Line 805
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+544]
	mov	QWORD PTR tv274[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1000				; 000003e8H
	mov	QWORD PTR [rsp+32], 0
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1128]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv274[rsp]
$LN2@ID3D11Driv:
; Line 814
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv287[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+1136]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv287[rsp]
; Line 818
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+56]
	mov	QWORD PTR tv307[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1160				; 00000488H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1152]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv307[rsp]
; Line 822
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+208]
	mov	QWORD PTR tv327[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1200				; 000004b0H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1192]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv327[rsp]
; Line 826
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+200]
	mov	QWORD PTR tv347[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1272				; 000004f8H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1264]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv347[rsp]
; Line 833
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+72]
	mov	QWORD PTR tv360[rsp], rax
	xor	r9d, r9d
	xor	r8d, r8d
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rdx, QWORD PTR [rax+1400]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv360[rsp]
; Line 837
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+128]
	mov	QWORD PTR tv380[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1424				; 00000590H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1416]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv380[rsp]
; Line 841
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv400[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1464				; 000005b8H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1456]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv400[rsp]
; Line 845
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+272]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv420[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 1536				; 00000600H
	mov	r9, rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	r8d, DWORD PTR [rax+1528]
	xor	edx, edx
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+272]
	call	QWORD PTR tv420[rsp]
; Line 849
	add	rsp, 216				; 000000d8H
	ret	0
?ID3D11Driver_CommitContextState@@YAXPEAUID3D11_DRIVER@@@Z ENDP ; ID3D11Driver_CommitContextState
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Success$ = 96
ShaderBlob$ = 104
tv133 = 112
tv212 = 116
tv246 = 120
tv280 = 124
tv323 = 128
MessageBlob$ = 136
CompilationFlags$ = 144
tv319 = 148
ShaderModel$ = 152
ShaderEntry$ = 160
tv151 = 168
tv167 = 176
tv192 = 184
tv199 = 192
tv208 = 200
tv206 = 208
tv204 = 216
tv210 = 224
tv226 = 232
tv233 = 240
tv242 = 248
tv240 = 256
tv238 = 264
tv244 = 272
tv260 = 280
tv267 = 288
tv276 = 296
tv274 = 304
tv272 = 312
tv278 = 320
tv295 = 328
tv302 = 336
tv315 = 344
tv313 = 352
tv317 = 360
tv311 = 368
tv321 = 376
tv333 = 384
tv341 = 392
tv349 = 400
CompilationMacros$ = 408
$T1 = 440
$T2 = 464
$T3 = 496
$T4 = 528
$T5 = 560
$T6 = 584
$T7 = 608
$T8 = 640
$T9 = 672
$T10 = 704
$T11 = 736
$T12 = 768
$T13 = 800
$T14 = 832
$T15 = 864
$T16 = 896
$T17 = 920
$T18 = 944
$T19 = 968
$T20 = 992
$T21 = 1016
$T22 = 1040
Driver$ = 1104
Shader$ = 1112
ShaderKind$ = 1120
ShaderFileSize$ = 1128
ShaderFileData$ = 1136
ShaderDebugName$ = 1144
ShaderLayout$ = 1152
?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z PROC ; ID3D11Driver_CreateShaderFromData
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1412
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 1080				; 00000438H
; Line 1413
	mov	DWORD PTR Success$[rsp], 0
; Line 1415
	cmp	QWORD PTR ShaderFileData$[rsp], 0
	je	SHORT $LN3@ID3D11Driv
	cmp	DWORD PTR ShaderFileSize$[rsp], 0
	jne	SHORT $LN2@ID3D11Driv
$LN3@ID3D11Driv:
; Line 1418
	mov	DWORD PTR [rsp+32], 62			; 0000003eH
	mov	r9d, 1418				; 0000058aH
	lea	r8, OFFSET FLAT:$SG141017
	lea	rdx, OFFSET FLAT:$SG141018
	lea	rcx, QWORD PTR $T16[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG141016
	mov	edx, 7
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1419
	mov	eax, DWORD PTR Success$[rsp]
	jmp	$LN1@ID3D11Driv
$LN2@ID3D11Driv:
; Line 1423
	lea	rax, OFFSET FLAT:$SG141019
	mov	QWORD PTR CompilationMacros$[rsp], rax
	lea	rax, OFFSET FLAT:$SG141020
	mov	QWORD PTR CompilationMacros$[rsp+8], rax
	lea	rax, QWORD PTR CompilationMacros$[rsp+16]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
; Line 1428
	mov	QWORD PTR ShaderBlob$[rsp], 0
	mov	QWORD PTR MessageBlob$[rsp], 0
; Line 1432
	lea	rax, QWORD PTR ShaderEntry$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	r9, QWORD PTR ShaderModel$[rsp]
	lea	r8, QWORD PTR CompilationFlags$[rsp]
	mov	edx, DWORD PTR ShaderKind$[rsp]
	mov	rcx, QWORD PTR Driver$[rsp]
	call	?ID3D11Driver_GetShaderCompilationInfo@@YAHPEAUID3D11_DRIVER@@W4D3D11_SHADER_KIND@@PEAHPEAPEBD3@Z ; ID3D11Driver_GetShaderCompilationInfo
	test	eax, eax
	je	$LN4@ID3D11Driv
; Line 1434
	mov	eax, DWORD PTR ShaderFileSize$[rsp]
	lea	rcx, QWORD PTR MessageBlob$[rsp]
	mov	QWORD PTR [rsp+80], rcx
	lea	rcx, QWORD PTR ShaderBlob$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	mov	DWORD PTR [rsp+64], 0
	mov	ecx, DWORD PTR CompilationFlags$[rsp]
	mov	DWORD PTR [rsp+56], ecx
	mov	rcx, QWORD PTR ShaderModel$[rsp]
	mov	QWORD PTR [rsp+48], rcx
	mov	rcx, QWORD PTR ShaderEntry$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR CompilationMacros$[rsp]
	mov	r8, QWORD PTR ShaderDebugName$[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR ShaderFileData$[rsp]
	call	D3DCompile
	test	eax, eax
	jl	SHORT $LN23@ID3D11Driv
	mov	DWORD PTR tv133[rsp], 1
	jmp	SHORT $LN24@ID3D11Driv
$LN23@ID3D11Driv:
	mov	DWORD PTR tv133[rsp], 0
$LN24@ID3D11Driv:
	mov	eax, DWORD PTR tv133[rsp]
	mov	DWORD PTR Success$[rsp], eax
; Line 1437
	cmp	QWORD PTR MessageBlob$[rsp], 0
	je	$LN5@ID3D11Driv
; Line 1439
	mov	DWORD PTR [rsp+32], 63			; 0000003fH
	mov	r9d, 1439				; 0000059fH
	lea	r8, OFFSET FLAT:$SG141024
	lea	rdx, OFFSET FLAT:$SG141025
	lea	rcx, QWORD PTR $T17[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG141023
	mov	edx, 4
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1440
	mov	DWORD PTR [rsp+32], 64			; 00000040H
	mov	r9d, 1440				; 000005a0H
	lea	r8, OFFSET FLAT:$SG141027
	lea	rdx, OFFSET FLAT:$SG141028
	lea	rcx, QWORD PTR $T18[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR MessageBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv151[rsp], rax
	mov	rcx, QWORD PTR MessageBlob$[rsp]
	call	QWORD PTR tv151[rsp]
	mov	rdx, rax
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv167[rsp], rax
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T14[rsp]
	lea	rcx, QWORD PTR $T6[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv167[rsp]
	lea	r8, OFFSET FLAT:$SG141026
	mov	edx, 4
	lea	rcx, QWORD PTR $T14[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1441
	mov	DWORD PTR [rsp+32], 65			; 00000041H
	mov	r9d, 1441				; 000005a1H
	lea	r8, OFFSET FLAT:$SG141030
	lea	rdx, OFFSET FLAT:$SG141031
	lea	rcx, QWORD PTR $T19[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG141029
	mov	edx, 4
	lea	rcx, QWORD PTR $T8[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@ID3D11Driv:
$LN4@ID3D11Driv:
; Line 1445
	cmp	DWORD PTR Success$[rsp], 0
	je	$LN6@ID3D11Driv
; Line 1448
	cmp	DWORD PTR ShaderKind$[rsp], 1
	jne	$LN8@ID3D11Driv
; Line 1449
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR tv210[rsp], rax
	mov	rax, QWORD PTR ShaderBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv192[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$[rsp]
	call	QWORD PTR tv192[rsp]
	mov	QWORD PTR tv208[rsp], rax
	mov	rax, QWORD PTR ShaderBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv199[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$[rsp]
	call	QWORD PTR tv199[rsp]
	mov	QWORD PTR tv206[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR tv204[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	add	rax, 8
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv208[rsp]
	mov	rdx, QWORD PTR tv206[rsp]
	mov	rcx, QWORD PTR tv204[rsp]
	call	QWORD PTR tv210[rsp]
	test	eax, eax
	jl	SHORT $LN25@ID3D11Driv
	mov	DWORD PTR tv212[rsp], 1
	jmp	SHORT $LN26@ID3D11Driv
$LN25@ID3D11Driv:
	mov	DWORD PTR tv212[rsp], 0
$LN26@ID3D11Driv:
	mov	eax, DWORD PTR tv212[rsp]
	mov	DWORD PTR Success$[rsp], eax
; Line 1451
	jmp	$LN9@ID3D11Driv
$LN8@ID3D11Driv:
; Line 1452
	cmp	DWORD PTR ShaderKind$[rsp], 2
	jne	$LN10@ID3D11Driv
; Line 1453
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+120]
	mov	QWORD PTR tv244[rsp], rax
	mov	rax, QWORD PTR ShaderBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv226[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$[rsp]
	call	QWORD PTR tv226[rsp]
	mov	QWORD PTR tv242[rsp], rax
	mov	rax, QWORD PTR ShaderBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv233[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$[rsp]
	call	QWORD PTR tv233[rsp]
	mov	QWORD PTR tv240[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR tv238[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	add	rax, 16
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv242[rsp]
	mov	rdx, QWORD PTR tv240[rsp]
	mov	rcx, QWORD PTR tv238[rsp]
	call	QWORD PTR tv244[rsp]
	test	eax, eax
	jl	SHORT $LN27@ID3D11Driv
	mov	DWORD PTR tv246[rsp], 1
	jmp	SHORT $LN28@ID3D11Driv
$LN27@ID3D11Driv:
	mov	DWORD PTR tv246[rsp], 0
$LN28@ID3D11Driv:
	mov	eax, DWORD PTR tv246[rsp]
	mov	DWORD PTR Success$[rsp], eax
; Line 1455
	jmp	$LN11@ID3D11Driv
$LN10@ID3D11Driv:
; Line 1456
	cmp	DWORD PTR ShaderKind$[rsp], 3
	jne	$LN12@ID3D11Driv
; Line 1457
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+144]
	mov	QWORD PTR tv278[rsp], rax
	mov	rax, QWORD PTR ShaderBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv260[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$[rsp]
	call	QWORD PTR tv260[rsp]
	mov	QWORD PTR tv276[rsp], rax
	mov	rax, QWORD PTR ShaderBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv267[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$[rsp]
	call	QWORD PTR tv267[rsp]
	mov	QWORD PTR tv274[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR tv272[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	add	rax, 24
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv276[rsp]
	mov	rdx, QWORD PTR tv274[rsp]
	mov	rcx, QWORD PTR tv272[rsp]
	call	QWORD PTR tv278[rsp]
	test	eax, eax
	jl	SHORT $LN29@ID3D11Driv
	mov	DWORD PTR tv280[rsp], 1
	jmp	SHORT $LN30@ID3D11Driv
$LN29@ID3D11Driv:
	mov	DWORD PTR tv280[rsp], 0
$LN30@ID3D11Driv:
	mov	eax, DWORD PTR tv280[rsp]
	mov	DWORD PTR Success$[rsp], eax
$LN12@ID3D11Driv:
$LN11@ID3D11Driv:
$LN9@ID3D11Driv:
; Line 1461
	cmp	DWORD PTR Success$[rsp], 0
	je	$LN13@ID3D11Driv
; Line 1463
	mov	rax, QWORD PTR ShaderLayout$[rsp]
	cmp	DWORD PTR [rax], 0
	je	$LN15@ID3D11Driv
; Line 1465
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR tv321[rsp], rax
	mov	rax, QWORD PTR ShaderBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR tv295[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$[rsp]
	call	QWORD PTR tv295[rsp]
	mov	QWORD PTR tv315[rsp], rax
	mov	rax, QWORD PTR ShaderBlob$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv302[rsp], rax
	mov	rcx, QWORD PTR ShaderBlob$[rsp]
	call	QWORD PTR tv302[rsp]
	mov	QWORD PTR tv313[rsp], rax
	mov	rax, QWORD PTR ShaderLayout$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR tv319[rsp], eax
	mov	rax, QWORD PTR ShaderLayout$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv317[rsp], rax
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rax, QWORD PTR [rax+264]
	mov	QWORD PTR tv311[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	add	rax, 40					; 00000028H
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv315[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv313[rsp]
	mov	r8d, DWORD PTR tv319[rsp]
	mov	rdx, QWORD PTR tv317[rsp]
	mov	rcx, QWORD PTR tv311[rsp]
	call	QWORD PTR tv321[rsp]
	test	eax, eax
	jl	SHORT $LN31@ID3D11Driv
	mov	DWORD PTR tv323[rsp], 1
	jmp	SHORT $LN32@ID3D11Driv
$LN31@ID3D11Driv:
	mov	DWORD PTR tv323[rsp], 0
$LN32@ID3D11Driv:
	mov	eax, DWORD PTR tv323[rsp]
	mov	DWORD PTR Success$[rsp], eax
; Line 1468
	cmp	DWORD PTR Success$[rsp], 0
	jne	$LN16@ID3D11Driv
; Line 1471
	cmp	DWORD PTR ShaderKind$[rsp], 1
	jne	SHORT $LN17@ID3D11Driv
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv333[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR tv333[rsp]
	jmp	SHORT $LN18@ID3D11Driv
$LN17@ID3D11Driv:
; Line 1472
	cmp	DWORD PTR ShaderKind$[rsp], 2
	jne	SHORT $LN19@ID3D11Driv
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv341[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	QWORD PTR tv341[rsp]
	jmp	SHORT $LN20@ID3D11Driv
$LN19@ID3D11Driv:
; Line 1473
	cmp	DWORD PTR ShaderKind$[rsp], 3
	jne	SHORT $LN21@ID3D11Driv
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR tv349[rsp], rax
	mov	rax, QWORD PTR Shader$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	QWORD PTR tv349[rsp]
$LN21@ID3D11Driv:
$LN20@ID3D11Driv:
$LN18@ID3D11Driv:
; Line 1475
	mov	DWORD PTR [rsp+32], 66			; 00000042H
	mov	r9d, 1475				; 000005c3H
	lea	r8, OFFSET FLAT:$SG141049
	lea	rdx, OFFSET FLAT:$SG141050
	lea	rcx, QWORD PTR $T20[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T10[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG141048
	mov	edx, 7
	lea	rcx, QWORD PTR $T10[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN16@ID3D11Driv:
$LN15@ID3D11Driv:
; Line 1478
	jmp	SHORT $LN14@ID3D11Driv
$LN13@ID3D11Driv:
; Line 1480
	mov	DWORD PTR [rsp+32], 67			; 00000043H
	mov	r9d, 1480				; 000005c8H
	lea	r8, OFFSET FLAT:$SG141052
	lea	rdx, OFFSET FLAT:$SG141053
	lea	rcx, QWORD PTR $T21[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T12[rsp]
	lea	rcx, QWORD PTR $T11[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG141051
	mov	edx, 7
	lea	rcx, QWORD PTR $T12[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN14@ID3D11Driv:
; Line 1482
	jmp	SHORT $LN7@ID3D11Driv
$LN6@ID3D11Driv:
; Line 1484
	mov	DWORD PTR [rsp+32], 68			; 00000044H
	mov	r9d, 1484				; 000005ccH
	lea	r8, OFFSET FLAT:$SG141055
	lea	rdx, OFFSET FLAT:$SG141056
	lea	rcx, QWORD PTR $T22[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T15[rsp]
	lea	rcx, QWORD PTR $T13[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG141054
	mov	edx, 7
	lea	rcx, QWORD PTR $T15[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN7@ID3D11Driv:
; Line 1486
	mov	eax, DWORD PTR Success$[rsp]
$LN1@ID3D11Driv:
; Line 1487
	add	rsp, 1080				; 00000438H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_CreateShaderFromData@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_SHADER@@W4D3D11_SHADER_KIND@@IPEAXPEBDUD3D11_INPUT_LAYOUT@@@Z ENDP ; ID3D11Driver_CreateShaderFromData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
SamplerState$ = 48
BackBufferWidth$ = 56
BackBufferHeight$ = 60
tv143 = 64
tv148 = 72
Viewport$ = 80
__$ArrayPad$ = 104
Driver$ = 144
BackBuffer$ = 152
?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z PROC ; ID3D11Driver_ConfigureForBackBuffer
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1324
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1326
	lea	r8, QWORD PTR BackBufferHeight$[rsp]
	lea	rdx, QWORD PTR BackBufferWidth$[rsp]
	mov	rcx, QWORD PTR BackBuffer$[rsp]
	call	?ID3D11Texture2D_GetSize@@YAHPEAUID3D11Texture2D@@PEAH1@Z ; ID3D11Texture2D_GetSize
; Line 1328
	mov	rdx, QWORD PTR BackBuffer$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateRenderTargetViewFromTexture2D@@YAPEAUID3D11RenderTargetView@@PEAUID3D11Device@@PEAUID3D11Texture2D@@@Z ; ID3D11Device_CreateRenderTargetViewFromTexture2D
	mov	rcx, QWORD PTR Driver$[rsp]
	mov	QWORD PTR [rcx+400], rax
; Line 1329
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+392], 1
; Line 1331
	mov	rax, QWORD PTR Driver$[rsp]
	add	rax, 440				; 000001b8H
	mov	rcx, QWORD PTR Driver$[rsp]
	add	rcx, 432				; 000001b0H
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8d, DWORD PTR BackBufferHeight$[rsp]
	mov	edx, DWORD PTR BackBufferWidth$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateDefaultDepthStencil@@YAHPEAUID3D11Device@@IIPEAPEAUID3D11DepthStencilState@@PEAPEAUID3D11DepthStencilView@@@Z ; ID3D11Device_CreateDefaultDepthStencil
; Line 1336
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Viewport$[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Viewport$[rsp+4], xmm0
	vcvtsi2ss xmm0, xmm0, DWORD PTR BackBufferWidth$[rsp]
	vmovss	DWORD PTR Viewport$[rsp+8], xmm0
; Line 1337
	vcvtsi2ss xmm0, xmm0, DWORD PTR BackBufferHeight$[rsp]
	vmovss	DWORD PTR Viewport$[rsp+12], xmm0
; Line 1338
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR Viewport$[rsp+16], xmm0
; Line 1339
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR Viewport$[rsp+20], xmm0
; Line 1341
	mov	rax, QWORD PTR Driver$[rsp]
	lea	rcx, QWORD PTR Viewport$[rsp]
	lea	rdi, QWORD PTR [rax+288]
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 1342
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+284], 1
; Line 1344
	mov	r8d, 3
	mov	edx, 21
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateSymmetricSamplerState@@YAPEAUID3D11SamplerState@@PEAUID3D11Device@@W4D3D11_FILTER@@W4D3D11_TEXTURE_ADDRESS_MODE@@@Z ; ID3D11Device_CreateSymmetricSamplerState
	mov	QWORD PTR SamplerState$[rsp], rax
; Line 1345
	mov	rax, QWORD PTR SamplerState$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv143[rsp], rax
	mov	rcx, QWORD PTR SamplerState$[rsp]
	call	QWORD PTR tv143[rsp]
; Line 1346
	mov	rax, QWORD PTR SamplerState$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv148[rsp], rax
	mov	rcx, QWORD PTR SamplerState$[rsp]
	call	QWORD PTR tv148[rsp]
; Line 1348
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateDefaultBlendState@@YAPEAUID3D11BlendState@@PEAUID3D11Device@@@Z ; ID3D11Device_CreateDefaultBlendState
	mov	rcx, QWORD PTR Driver$[rsp]
	mov	QWORD PTR [rcx+384], rax
; Line 1350
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR SamplerState$[rsp]
	mov	QWORD PTR [rax+1464], rcx
; Line 1351
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+1456], 1
; Line 1353
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR SamplerState$[rsp]
	mov	QWORD PTR [rax+1200], rcx
; Line 1354
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+1192], 1
; Line 1356
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR SamplerState$[rsp]
	mov	QWORD PTR [rax+800], rcx
; Line 1357
	mov	rax, QWORD PTR Driver$[rsp]
	mov	DWORD PTR [rax+792], 1
; Line 1359
	mov	eax, 1
; Line 1360
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_ConfigureForBackBuffer@@YAHPEAUID3D11_DRIVER@@PEAUID3D11Texture2D@@@Z ENDP ; ID3D11Driver_ConfigureForBackBuffer
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Driver$ = 80
Window$ = 88
ControlFiber$ = 96
WindowX$ = 104
WindowY$ = 112
WindowSizeX$ = 120
WindowSizeY$ = 128
WindowTitle$ = 136
?ID3D11Driver_CreateWindow@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z PROC ; ID3D11Driver_CreateWindow
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1156
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1157
	mov	rax, QWORD PTR WindowTitle$[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	eax, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR WindowY$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR WindowX$[rsp]
	mov	r8, QWORD PTR ControlFiber$[rsp]
	mov	rdx, QWORD PTR Window$[rsp]
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR [rax+264]
	call	?ID3D11Device_CreateWindow@@YAHPEAUID3D11Device@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z ; ID3D11Device_CreateWindow
; Line 1159
	add	rsp, 72					; 00000048H
	ret	0
?ID3D11Driver_CreateWindow@@YAHPEAUID3D11_DRIVER@@PEAUID3D11_WINDOW@@PEAXHHHHPEB_W@Z ENDP ; ID3D11Driver_CreateWindow
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
InfoQueue$ = 80
Flags$ = 88
Device$ = 96
Feature$ = 104
Context$ = 112
tv153 = 120
tv162 = 128
tv169 = 136
tv176 = 144
$T1 = 152
$T2 = 176
$T3 = 208
$T4 = 240
$T5 = 272
$T6 = 296
FeatureMenu$ = 320
__$ArrayPad$ = 336
Driver$ = 384
?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z PROC ; ID3D11Driver_InitializeCompatible
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1278
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 360				; 00000168H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 1279
	mov	DWORD PTR Flags$[rsp], 35		; 00000023H
; Line 1285
	mov	DWORD PTR FeatureMenu$[rsp], 45312	; 0000b100H
	mov	DWORD PTR FeatureMenu$[rsp+4], 45056	; 0000b000H
; Line 1286
	mov	DWORD PTR FeatureMenu$[rsp+8], 41216	; 0000a100H
	mov	DWORD PTR FeatureMenu$[rsp+12], 40960	; 0000a000H
; Line 1293
	mov	eax, 8
	imul	rax, rax, 0
	lea	rax, QWORD PTR FeatureMenu$[rsp+rax]
	lea	rcx, QWORD PTR Context$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR Feature$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, QWORD PTR Device$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 2
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR Flags$[rsp]
	xor	r8d, r8d
	mov	edx, 1
	xor	ecx, ecx
	call	D3D11CreateDevice
	test	eax, eax
	jge	$LN2@ID3D11Driv
; Line 1296
	mov	DWORD PTR [rsp+32], 58			; 0000003aH
	mov	r9d, 1296				; 00000510H
	lea	r8, OFFSET FLAT:$SG140918
	lea	rdx, OFFSET FLAT:$SG140919
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140917
	mov	edx, 4
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1297
	mov	eax, 8
	imul	rax, rax, 1
	lea	rax, QWORD PTR FeatureMenu$[rsp+rax]
	lea	rcx, QWORD PTR Context$[rsp]
	mov	QWORD PTR [rsp+72], rcx
	lea	rcx, QWORD PTR Feature$[rsp]
	mov	QWORD PTR [rsp+64], rcx
	lea	rcx, QWORD PTR Device$[rsp]
	mov	QWORD PTR [rsp+56], rcx
	mov	DWORD PTR [rsp+48], 7
	mov	DWORD PTR [rsp+40], 2
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR Flags$[rsp]
	xor	r8d, r8d
	mov	edx, 5
	xor	ecx, ecx
	call	D3D11CreateDevice
	test	eax, eax
	jge	SHORT $LN3@ID3D11Driv
; Line 1300
	mov	DWORD PTR [rsp+32], 59			; 0000003bH
	mov	r9d, 1300				; 00000514H
	lea	r8, OFFSET FLAT:$SG140922
	lea	rdx, OFFSET FLAT:$SG140923
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140921
	mov	edx, 6
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 1301
	xor	eax, eax
	jmp	$LN1@ID3D11Driv
$LN3@ID3D11Driv:
$LN2@ID3D11Driv:
; Line 1305
	mov	QWORD PTR InfoQueue$[rsp], 0
; Line 1306
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 2
	test	eax, eax
	je	$LN4@ID3D11Driv
; Line 1307
	mov	rax, QWORD PTR Device$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR tv153[rsp], rax
	lea	r8, QWORD PTR InfoQueue$[rsp]
	lea	rdx, OFFSET FLAT:IID_ID3D11InfoQueue
	mov	rcx, QWORD PTR Device$[rsp]
	call	QWORD PTR tv153[rsp]
	test	eax, eax
	jl	$LN5@ID3D11Driv
; Line 1308
	mov	rax, QWORD PTR InfoQueue$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+248]
	mov	QWORD PTR tv162[rsp], rax
	mov	r8d, 1
	xor	edx, edx
	mov	rcx, QWORD PTR InfoQueue$[rsp]
	call	QWORD PTR tv162[rsp]
; Line 1309
	mov	rax, QWORD PTR InfoQueue$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+248]
	mov	QWORD PTR tv169[rsp], rax
	mov	r8d, 1
	mov	edx, 1
	mov	rcx, QWORD PTR InfoQueue$[rsp]
	call	QWORD PTR tv169[rsp]
; Line 1310
	mov	rax, QWORD PTR InfoQueue$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+248]
	mov	QWORD PTR tv176[rsp], rax
	mov	r8d, 1
	mov	edx, 2
	mov	rcx, QWORD PTR InfoQueue$[rsp]
	call	QWORD PTR tv176[rsp]
$LN5@ID3D11Driv:
$LN4@ID3D11Driv:
; Line 1313
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR Device$[rsp]
	mov	QWORD PTR [rax+264], rcx
; Line 1314
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR InfoQueue$[rsp]
	mov	QWORD PTR [rax+256], rcx
; Line 1315
	mov	rax, QWORD PTR Driver$[rsp]
	mov	rcx, QWORD PTR Context$[rsp]
	mov	QWORD PTR [rax+272], rcx
; Line 1317
	mov	eax, 1
$LN1@ID3D11Driv:
; Line 1318
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 360				; 00000168H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Driver_InitializeCompatible@@YAHPEAUID3D11_DRIVER@@@Z ENDP ; ID3D11Driver_InitializeCompatible
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 48
tv86 = 56
$T1 = 64
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 216
Window$ = 272
?ID3D11Window_Present@@YAXPEAUID3D11_WINDOW@@@Z PROC	; ID3D11Window_Present
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1164
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
; Line 1166
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+528]
	call	QWORD PTR __imp_IsWindow
	test	eax, eax
	je	$LN2@ID3D11Wind
; Line 1168
	mov	rax, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rax+756]
	mov	DWORD PTR tv73[rsp], eax
	mov	rax, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rax+756]
	inc	eax
	mov	rcx, QWORD PTR Window$[rsp]
	mov	DWORD PTR [rcx+756], eax
	cmp	DWORD PTR tv73[rsp], 0
	jne	SHORT $LN3@ID3D11Wind
; Line 1169
	mov	edx, 5
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+528]
	call	QWORD PTR __imp_ShowWindow
$LN3@ID3D11Wind:
; Line 1172
	mov	rax, QWORD PTR Window$[rsp]
	mov	rax, QWORD PTR [rax+784]
	mov	rax, QWORD PTR [rax]
	mov	rax, QWORD PTR [rax+64]
	mov	QWORD PTR tv86[rsp], rax
	xor	r8d, r8d
	mov	edx, 1
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+784]
	call	QWORD PTR tv86[rsp]
	test	eax, eax
	jl	$LN4@ID3D11Wind
; Line 1174
	mov	r8d, 1
	mov	edx, 33					; 00000021H
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+800]
	call	QWORD PTR __imp_WaitForSingleObjectEx
	test	eax, eax
	jge	SHORT $LN6@ID3D11Wind
; Line 1175
	mov	ecx, 33					; 00000021H
	call	QWORD PTR __imp_Sleep
; Line 1177
	mov	DWORD PTR [rsp+32], 56			; 00000038H
	mov	r9d, 1177				; 00000499H
	lea	r8, OFFSET FLAT:$SG140887
	lea	rdx, OFFSET FLAT:$SG140888
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140886
	mov	edx, 7
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN6@ID3D11Wind:
; Line 1179
	jmp	SHORT $LN5@ID3D11Wind
$LN4@ID3D11Wind:
; Line 1181
	mov	DWORD PTR [rsp+32], 57			; 00000039H
	mov	r9d, 1181				; 0000049dH
	lea	r8, OFFSET FLAT:$SG140890
	lea	rdx, OFFSET FLAT:$SG140891
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG140889
	mov	edx, 7
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@ID3D11Wind:
$LN2@ID3D11Wind:
; Line 1184
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?ID3D11Window_Present@@YAXPEAUID3D11_WINDOW@@@Z ENDP	; ID3D11Window_Present
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv80 = 48
Window$ = 80
?ID3D11Window_Update@@YAHPEAUID3D11_WINDOW@@@Z PROC	; ID3D11Window_Update
; File W:\cpp\void\detroit\detroit-d3d11.c
; Line 1189
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1190
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+776]
	call	QWORD PTR __imp_SwitchToFiber
; Line 1194
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+528]
	call	QWORD PTR __imp_IsWindow
	test	eax, eax
	je	SHORT $LN2@ID3D11Wind
; Line 1195
	mov	rax, QWORD PTR Window$[rsp]
	add	rax, 524				; 0000020cH
	mov	rcx, QWORD PTR Window$[rsp]
	add	rcx, 520				; 00000208H
	mov	rdx, QWORD PTR Window$[rsp]
	add	rdx, 516				; 00000204H
	mov	r8, QWORD PTR Window$[rsp]
	add	r8, 512					; 00000200H
	mov	QWORD PTR tv80[rsp], r8
	mov	QWORD PTR [rsp+32], rax
	mov	r9, rcx
	mov	r8, rdx
	mov	rax, QWORD PTR tv80[rsp]
	mov	rdx, rax
	mov	rax, QWORD PTR Window$[rsp]
	mov	rcx, QWORD PTR [rax+528]
	call	?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z ; GetWindowDimensions
$LN2@ID3D11Wind:
; Line 1198
	mov	rax, QWORD PTR Window$[rsp]
	mov	eax, DWORD PTR [rax+760]
; Line 1199
	add	rsp, 72					; 00000048H
	ret	0
?ID3D11Window_Update@@YAHPEAUID3D11_WINDOW@@@Z ENDP	; ID3D11Window_Update
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
F$ = 32
?PIXEL_FORMAT_SIZE@@YAHH@Z PROC				; PIXEL_FORMAT_SIZE
; File W:\cpp\void\detroit\detroit-shared.h
; Line 292
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	eax, DWORD PTR F$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN4@PIXEL_FORM
	cmp	DWORD PTR tv64[rsp], 3
	je	SHORT $LN5@PIXEL_FORM
	cmp	DWORD PTR tv64[rsp], 4
	je	SHORT $LN6@PIXEL_FORM
	jmp	SHORT $LN7@PIXEL_FORM
$LN4@PIXEL_FORM:
; Line 293
	mov	eax, 1
	jmp	SHORT $LN1@PIXEL_FORM
$LN5@PIXEL_FORM:
; Line 294
	mov	eax, 3
	jmp	SHORT $LN1@PIXEL_FORM
$LN6@PIXEL_FORM:
; Line 295
	mov	eax, 4
	jmp	SHORT $LN1@PIXEL_FORM
$LN7@PIXEL_FORM:
; Line 296
	mov	eax, -1
$LN1@PIXEL_FORM:
; Line 298
	add	rsp, 24
	ret	0
?PIXEL_FORMAT_SIZE@@YAHH@Z ENDP				; PIXEL_FORMAT_SIZE
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__ESTANDARD_BASIS_COLOR@@YAXXZ
text$di	SEGMENT
??__ESTANDARD_BASIS_COLOR@@YAXXZ PROC			; `dynamic initializer for 'STANDARD_BASIS_COLOR'', COMDAT
; File W:\cpp\void\detroit\detroit-shared.h
; Line 287
	push	rsi
	push	rdi
; Line 284
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBUrx_f32x4@@B
	lea	rcx, OFFSET FLAT:?COLOR_RED@@3Urx_f32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 285
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBUrx_f32x4@@B+16
	lea	rcx, OFFSET FLAT:?COLOR_GREEN@@3Urx_f32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
; Line 286
	lea	rax, OFFSET FLAT:?STANDARD_BASIS_COLOR@@3QBUrx_f32x4@@B+32
	lea	rcx, OFFSET FLAT:?COLOR_BLUE@@3Urx_f32x4@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 16
	rep movsb
	pop	rdi
	pop	rsi
	ret	0
??__ESTANDARD_BASIS_COLOR@@YAXXZ ENDP			; `dynamic initializer for 'STANDARD_BASIS_COLOR''
text$di	ENDS
; Function compile flags: /Odtp
;	COMDAT ??__ESTANDARD_BASIS@@YAXXZ
text$di	SEGMENT
??__ESTANDARD_BASIS@@YAXXZ PROC				; `dynamic initializer for 'STANDARD_BASIS'', COMDAT
; File W:\cpp\void\detroit\detroit-shared.h
; Line 281
	push	rsi
	push	rdi
; Line 278
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3Trx_f32_3x3@@B
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_X@@3Uf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 279
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3Trx_f32_3x3@@B+12
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_Y@@3Uf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
; Line 280
	lea	rax, OFFSET FLAT:?STANDARD_BASIS@@3Trx_f32_3x3@@B+24
	lea	rcx, OFFSET FLAT:?STANDARD_BASIS_Z@@3Uf32x3@@B
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 12
	rep movsb
	pop	rdi
	pop	rsi
	ret	0
??__ESTANDARD_BASIS@@YAXXZ ENDP				; `dynamic initializer for 'STANDARD_BASIS''
text$di	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv64 = 0
Kind$ = 32
?TraceMessageKindToString@@YAPEB_WH@Z PROC		; TraceMessageKindToString
; File W:\cpp\void\dr\trace.c
; Line 6
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	mov	eax, DWORD PTR Kind$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 7
	ja	SHORT $LN2@TraceMessa
	movsxd	rax, DWORD PTR tv64[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN13@TraceMessa[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN4@TraceMessa:
; Line 7
	lea	rax, OFFSET FLAT:$SG81254
	jmp	SHORT $LN1@TraceMessa
$LN5@TraceMessa:
; Line 8
	lea	rax, OFFSET FLAT:$SG81256
	jmp	SHORT $LN1@TraceMessa
$LN6@TraceMessa:
; Line 9
	lea	rax, OFFSET FLAT:$SG81258
	jmp	SHORT $LN1@TraceMessa
$LN7@TraceMessa:
; Line 10
	lea	rax, OFFSET FLAT:$SG81260
	jmp	SHORT $LN1@TraceMessa
$LN8@TraceMessa:
; Line 11
	lea	rax, OFFSET FLAT:$SG81262
	jmp	SHORT $LN1@TraceMessa
$LN9@TraceMessa:
; Line 12
	lea	rax, OFFSET FLAT:$SG81264
	jmp	SHORT $LN1@TraceMessa
$LN10@TraceMessa:
; Line 13
	lea	rax, OFFSET FLAT:$SG81266
	jmp	SHORT $LN1@TraceMessa
$LN11@TraceMessa:
; Line 14
	lea	rax, OFFSET FLAT:$SG81268
	jmp	SHORT $LN1@TraceMessa
$LN2@TraceMessa:
; Line 16
	lea	rax, OFFSET FLAT:$SG81269
$LN1@TraceMessa:
; Line 17
	add	rsp, 24
	ret	0
$LN13@TraceMessa:
	DD	$LN4@TraceMessa
	DD	$LN5@TraceMessa
	DD	$LN6@TraceMessa
	DD	$LN10@TraceMessa
	DD	$LN7@TraceMessa
	DD	$LN11@TraceMessa
	DD	$LN8@TraceMessa
	DD	$LN9@TraceMessa
?TraceMessageKindToString@@YAPEB_WH@Z ENDP		; TraceMessageKindToString
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Str$ = 48
?CStrW@@YAPEB_WPEBD@Z PROC				; CStrW
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	rdx, QWORD PTR Str$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 516
	add	rsp, 40					; 00000028H
	ret	0
?CStrW@@YAPEB_WPEBD@Z ENDP				; CStrW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?PlatformDeinitialize@@YAXXZ PROC			; PlatformDeinitialize
; File W:\cpp\void\dr\plat-win32.c
; Line 425
	sub	rsp, 40					; 00000028H
; Line 426
	cmp	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 0
	je	SHORT $LN2@PlatformDe
; Line 427
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	call	QWORD PTR __imp_timeEndPeriod
$LN2@PlatformDe:
; Line 429
	add	rsp, 40					; 00000028H
	ret	0
?PlatformDeinitialize@@YAXXZ ENDP			; PlatformDeinitialize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
User32$1 = 32
XXX$2 = 40
YYY$3 = 48
tv92 = 56
?PlatformInitialize@@YAXXZ PROC				; PlatformInitialize
; File W:\cpp\void\dr\plat-win32.c
; Line 383
	sub	rsp, 72					; 00000048H
; Line 384
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+128
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN2@PlatformIn
; Line 385
	call	QWORD PTR __imp_AllocConsole
$LN2@PlatformIn:
; Line 387
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+96, rax
; Line 388
	mov	ecx, -10				; fffffff6H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+64, rax
; Line 389
	mov	ecx, -12				; fffffff4H
	call	QWORD PTR __imp_GetStdHandle
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+120, rax
; Line 391
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 1
; Line 393
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	call	QWORD PTR __imp_timeBeginPeriod
	test	eax, eax
	je	SHORT $LN3@PlatformIn
; Line 394
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 0
$LN3@PlatformIn:
; Line 397
	call	?GetPerformanceFrequency@@YA_KXZ	; GetPerformanceFrequency
	mov	QWORD PTR ?SYSTEM@@3U_SYSTEM@@A+64, rax
; Line 399
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+128
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	je	SHORT $LN4@PlatformIn
; Line 405
	lea	rcx, OFFSET FLAT:$SG79952
	call	QWORD PTR __imp_LoadLibraryA
	mov	QWORD PTR User32$1[rsp], rax
; Line 407
	lea	rdx, OFFSET FLAT:$SG79953
	mov	rcx, QWORD PTR User32$1[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR XXX$2[rsp], rax
; Line 409
	lea	rdx, OFFSET FLAT:$SG79954
	mov	rcx, QWORD PTR User32$1[rsp]
	call	QWORD PTR __imp_GetProcAddress
	mov	QWORD PTR YYY$3[rsp], rax
; Line 412
	cmp	QWORD PTR XXX$2[rsp], 0
	je	SHORT $LN5@PlatformIn
; Line 413
	mov	rax, QWORD PTR XXX$2[rsp]
	mov	QWORD PTR tv92[rsp], rax
	mov	rcx, -3
	call	QWORD PTR tv92[rsp]
; Line 414
	jmp	SHORT $LN6@PlatformIn
$LN5@PlatformIn:
; Line 415
	cmp	QWORD PTR YYY$3[rsp], 0
	je	SHORT $LN7@PlatformIn
; Line 416
	call	QWORD PTR YYY$3[rsp]
$LN7@PlatformIn:
$LN6@PlatformIn:
; Line 419
	mov	rcx, QWORD PTR User32$1[rsp]
	call	QWORD PTR __imp_FreeLibrary
$LN4@PlatformIn:
; Line 421
	add	rsp, 72					; 00000048H
	ret	0
?PlatformInitialize@@YAXXZ ENDP				; PlatformInitialize
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
WindowClient$ = 32
Placement$ = 48
__$ArrayPad$ = 96
Window$ = 128
WindowX$ = 136
WindowY$ = 144
WindowSizeX$ = 152
WindowSizeY$ = 160
?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z PROC	; GetWindowDimensions
; File W:\cpp\void\dr\plat-win32.c
; Line 359
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 360
	mov	DWORD PTR Placement$[rsp], 44		; 0000002cH
	lea	rax, QWORD PTR Placement$[rsp+4]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 40					; 00000028H
	rep stosb
; Line 361
	lea	rdx, QWORD PTR Placement$[rsp]
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_GetWindowPlacement
	test	eax, eax
	je	SHORT $LN2@GetWindowD
; Line 362
	cmp	QWORD PTR WindowX$[rsp], 0
	je	SHORT $LN3@GetWindowD
	mov	rax, QWORD PTR WindowX$[rsp]
	mov	ecx, DWORD PTR Placement$[rsp+28]
	mov	DWORD PTR [rax], ecx
$LN3@GetWindowD:
; Line 363
	cmp	QWORD PTR WindowY$[rsp], 0
	je	SHORT $LN4@GetWindowD
	mov	rax, QWORD PTR WindowY$[rsp]
	mov	ecx, DWORD PTR Placement$[rsp+32]
	mov	DWORD PTR [rax], ecx
$LN4@GetWindowD:
$LN2@GetWindowD:
; Line 367
	lea	rdx, QWORD PTR WindowClient$[rsp]
	mov	rcx, QWORD PTR Window$[rsp]
	call	QWORD PTR __imp_GetClientRect
	test	eax, eax
	je	SHORT $LN5@GetWindowD
; Line 369
	cmp	QWORD PTR WindowSizeX$[rsp], 0
	je	SHORT $LN6@GetWindowD
	mov	eax, DWORD PTR WindowClient$[rsp]
	mov	ecx, DWORD PTR WindowClient$[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR [rcx], eax
$LN6@GetWindowD:
; Line 370
	cmp	QWORD PTR WindowSizeY$[rsp], 0
	je	SHORT $LN7@GetWindowD
	mov	eax, DWORD PTR WindowClient$[rsp+4]
	mov	ecx, DWORD PTR WindowClient$[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR [rcx], eax
$LN7@GetWindowD:
$LN5@GetWindowD:
; Line 372
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
?GetWindowDimensions@@YAXPEAUHWND__@@PEAH111@Z ENDP	; GetWindowDimensions
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Flags$ = 64
WindowRect$1 = 72
__$ArrayPad$ = 88
WindowX$ = 112
WindowY$ = 120
WindowSizeX$ = 128
WindowSizeY$ = 136
?SetConsoleWindowDimensions@@YAKKKKK@Z PROC		; SetConsoleWindowDimensions
; File W:\cpp\void\dr\plat-win32.c
; Line 332
	mov	DWORD PTR [rsp+32], r9d
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 333
	mov	DWORD PTR Flags$[rsp], 48		; 00000030H
; Line 335
	cmp	DWORD PTR WindowX$[rsp], -1		; ffffffffH
	je	SHORT $LN3@SetConsole
	cmp	DWORD PTR WindowY$[rsp], -1		; ffffffffH
	jne	SHORT $LN2@SetConsole
$LN3@SetConsole:
	mov	eax, DWORD PTR Flags$[rsp]
	or	eax, 2
	mov	DWORD PTR Flags$[rsp], eax
$LN2@SetConsole:
; Line 337
	cmp	DWORD PTR WindowSizeX$[rsp], -1		; ffffffffH
	je	SHORT $LN4@SetConsole
	cmp	DWORD PTR WindowSizeY$[rsp], -1		; ffffffffH
	je	SHORT $LN4@SetConsole
; Line 339
	mov	DWORD PTR WindowRect$1[rsp], 0
; Line 340
	mov	DWORD PTR WindowRect$1[rsp+4], 0
; Line 341
	mov	eax, DWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR WindowRect$1[rsp+8], eax
; Line 342
	mov	eax, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR WindowRect$1[rsp+12], eax
; Line 343
	xor	r8d, r8d
	mov	edx, 13565952				; 00cf0000H
	lea	rcx, QWORD PTR WindowRect$1[rsp]
	call	QWORD PTR __imp_AdjustWindowRect
	test	eax, eax
	je	SHORT $LN6@SetConsole
; Line 345
	mov	eax, DWORD PTR WindowRect$1[rsp]
	mov	ecx, DWORD PTR WindowRect$1[rsp+8]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR WindowSizeX$[rsp], eax
; Line 346
	mov	eax, DWORD PTR WindowRect$1[rsp+4]
	mov	ecx, DWORD PTR WindowRect$1[rsp+12]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR WindowSizeY$[rsp], eax
$LN6@SetConsole:
; Line 348
	jmp	SHORT $LN5@SetConsole
$LN4@SetConsole:
; Line 349
	mov	eax, DWORD PTR Flags$[rsp]
	or	eax, 1
	mov	DWORD PTR Flags$[rsp], eax
$LN5@SetConsole:
; Line 352
	call	QWORD PTR __imp_GetConsoleWindow
	mov	ecx, DWORD PTR Flags$[rsp]
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR WindowSizeY$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR WindowSizeX$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR WindowY$[rsp]
	mov	r8d, DWORD PTR WindowX$[rsp]
	mov	rdx, -2
	mov	rcx, rax
	call	QWORD PTR __imp_SetWindowPos
; Line 355
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	ret	0
?SetConsoleWindowDimensions@@YAKKKKK@Z ENDP		; SetConsoleWindowDimensions
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv83 = 32
Read$ = 40
Spaces$ = 48
Write$ = 56
ArgString$ = 64
ArgBuffer$ = 72
$T1 = 80
$T2 = 104
Inst$ = 160
PrevInst$ = 168
Cmd$ = 176
CmdShow$ = 184
WinMain	PROC
; File W:\cpp\void\dr\plat-win32.c
; Line 444
$LN9:
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 136				; 00000088H
; Line 445
	mov	edx, 256				; 00000100H
	xor	ecx, ecx
	call	?HeapAlloc@@YAPEAXH_K@Z			; HeapAlloc
	mov	QWORD PTR ArgBuffer$[rsp], rax
; Line 446
	mov	edx, 1024				; 00000400H
	xor	ecx, ecx
	call	?HeapAlloc@@YAPEAXH_K@Z			; HeapAlloc
	mov	QWORD PTR ArgString$[rsp], rax
; Line 448
	mov	DWORD PTR Spaces$[rsp], 0
; Line 449
	mov	rax, QWORD PTR Cmd$[rsp]
	mov	QWORD PTR Read$[rsp], rax
; Line 450
	mov	rax, QWORD PTR ArgBuffer$[rsp]
	mov	QWORD PTR Write$[rsp], rax
$LN2@WinMain:
; Line 452
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@WinMain
; Line 454
	movsxd	rax, DWORD PTR Spaces$[rsp]
	mov	rcx, QWORD PTR ArgString$[rsp]
	mov	rdx, QWORD PTR Write$[rsp]
	mov	QWORD PTR [rcx+rax*8], rdx
	mov	eax, DWORD PTR Spaces$[rsp]
	inc	eax
	mov	DWORD PTR Spaces$[rsp], eax
$LN4@WinMain:
; Line 456
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN5@WinMain
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN5@WinMain
; Line 457
	mov	rax, QWORD PTR Read$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	BYTE PTR tv83[rsp], al
	mov	rax, QWORD PTR Read$[rsp]
	inc	rax
	mov	QWORD PTR Read$[rsp], rax
	mov	rax, QWORD PTR Write$[rsp]
	movzx	ecx, BYTE PTR tv83[rsp]
	mov	BYTE PTR [rax], cl
	mov	rax, QWORD PTR Write$[rsp]
	inc	rax
	mov	QWORD PTR Write$[rsp], rax
	jmp	SHORT $LN4@WinMain
$LN5@WinMain:
; Line 459
	mov	rax, QWORD PTR Write$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR Write$[rsp]
	inc	rax
	mov	QWORD PTR Write$[rsp], rax
$LN6@WinMain:
; Line 461
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN7@WinMain
	mov	rax, QWORD PTR Read$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN7@WinMain
; Line 462
	mov	rax, QWORD PTR Read$[rsp]
	inc	rax
	mov	QWORD PTR Read$[rsp], rax
	jmp	SHORT $LN6@WinMain
$LN7@WinMain:
; Line 463
	jmp	$LN2@WinMain
$LN3@WinMain:
; Line 466
	mov	eax, DWORD PTR Spaces$[rsp]
	mov	DWORD PTR ?ARGUMENTS@@3U_ARGUMENTS@@A, eax
; Line 467
	mov	rax, QWORD PTR ArgString$[rsp]
	mov	QWORD PTR ?ARGUMENTS@@3U_ARGUMENTS@@A+8, rax
; Line 468
	mov	rax, QWORD PTR PrevInst$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	lea	rax, QWORD PTR $T1[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	lea	rax, OFFSET FLAT:?ARGUMENTS@@3U_ARGUMENTS@@A+16
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 470
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+128
	or	eax, 4
	mov	DWORD PTR ?PROCESS@@3U_PROCESS@@A+128, eax
; Line 471
	mov	rax, QWORD PTR Inst$[rsp]
	mov	QWORD PTR $T2[rsp], rax
	lea	rax, QWORD PTR $T2[rsp+8]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 16
	rep stosb
	lea	rax, OFFSET FLAT:?PROCESS@@3U_PROCESS@@A+8
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
; Line 473
	call	?PlatformInitialize@@YAXXZ		; PlatformInitialize
; Line 474
	call	?MAIN@@YAXXZ				; MAIN
; Line 475
	call	?PlatformDeinitialize@@YAXXZ		; PlatformDeinitialize
; Line 477
	mov	rcx, QWORD PTR ArgBuffer$[rsp]
	call	?HeapFree@@YAXPEAX@Z			; HeapFree
; Line 478
	mov	rcx, QWORD PTR ArgString$[rsp]
	call	?HeapFree@@YAXPEAX@Z			; HeapFree
; Line 479
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+20
; Line 480
	add	rsp, 136				; 00000088H
	pop	rdi
	pop	rsi
	ret	0
WinMain	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
X$ = 32
?RuneIsEOL@@YAHH@Z PROC					; RuneIsEOL
; File W:\cpp\void\dr\text.c
; Line 46
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 24
	cmp	DWORD PTR X$[rsp], 13
	je	SHORT $LN3@RuneIsEOL
	cmp	DWORD PTR X$[rsp], 10
	je	SHORT $LN3@RuneIsEOL
	mov	DWORD PTR tv66[rsp], 0
	jmp	SHORT $LN4@RuneIsEOL
$LN3@RuneIsEOL:
	mov	DWORD PTR tv66[rsp], 1
$LN4@RuneIsEOL:
	mov	eax, DWORD PTR tv66[rsp]
; Line 47
	add	rsp, 24
	ret	0
?RuneIsEOL@@YAHH@Z ENDP					; RuneIsEOL
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
Args$ = 40
tv78 = 48
R$ = 56
Format$ = 80
?FormatW@@YAPEA_WPEB_WZZ PROC				; FormatW
; File W:\cpp\void\dr\text.c
; Line 32
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 33
	lea	rax, QWORD PTR Format$[rsp+8]
	mov	QWORD PTR Args$[rsp], rax
; Line 34
	mov	rax, QWORD PTR Args$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR Format$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv76[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv78[rsp]
	mov	rdx, QWORD PTR Format$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR R$[rsp], rax
; Line 35
	mov	QWORD PTR Args$[rsp], 0
; Line 36
	mov	rax, QWORD PTR R$[rsp]
; Line 37
	add	rsp, 72					; 00000048H
	ret	0
?FormatW@@YAPEA_WPEB_WZZ ENDP				; FormatW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv76 = 32
Args$ = 40
tv78 = 48
R$ = 56
Format$ = 80
?FormatA@@YAPEADPEBDZZ PROC				; FormatA
; File W:\cpp\void\dr\text.c
; Line 23
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 24
	lea	rax, QWORD PTR Format$[rsp+8]
	mov	QWORD PTR Args$[rsp], rax
; Line 25
	mov	rax, QWORD PTR Args$[rsp]
	mov	QWORD PTR tv78[rsp], rax
	mov	rcx, QWORD PTR Format$[rsp]
	call	strlen
	mov	DWORD PTR tv76[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv78[rsp]
	mov	rdx, QWORD PTR Format$[rsp]
	mov	ecx, DWORD PTR tv76[rsp]
	call	?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z	; FormatExtendedA
	mov	QWORD PTR R$[rsp], rax
; Line 26
	mov	QWORD PTR Args$[rsp], 0
; Line 27
	mov	rax, QWORD PTR R$[rsp]
; Line 28
	add	rsp, 72					; 00000048H
	ret	0
?FormatA@@YAPEADPEBDZZ ENDP				; FormatA
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
R$ = 40
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z PROC		; FormatExtendedW
; File W:\cpp\void\dr\text.c
; Line 15
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 257				; 00000101H
	cdqe
	shl	rax, 1
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR R$[rsp], rax
; Line 16
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 256				; 00000100H
	cdqe
	mov	r9, QWORD PTR Args$[rsp]
	mov	r8, QWORD PTR FormatStr$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR R$[rsp]
	call	_vsnwprintf
	mov	DWORD PTR L$[rsp], eax
; Line 17
	cmp	QWORD PTR Len$[rsp], 0
	je	SHORT $LN2@FormatExte
	mov	rax, QWORD PTR Len$[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@FormatExte:
; Line 18
	mov	rax, QWORD PTR R$[rsp]
; Line 19
	add	rsp, 56					; 00000038H
	ret	0
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ENDP		; FormatExtendedW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
L$ = 32
R$ = 40
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z PROC		; FormatExtendedA
; File W:\cpp\void\dr\text.c
; Line 7
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 257				; 00000101H
	cdqe
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR R$[rsp], rax
; Line 8
	mov	eax, DWORD PTR FormatLen$[rsp]
	add	eax, 256				; 00000100H
	cdqe
	mov	r9, QWORD PTR Args$[rsp]
	mov	r8, QWORD PTR FormatStr$[rsp]
	mov	rdx, rax
	mov	rcx, QWORD PTR R$[rsp]
	call	vsprintf_s
	mov	DWORD PTR L$[rsp], eax
; Line 9
	cmp	QWORD PTR Len$[rsp], 0
	je	SHORT $LN2@FormatExte
	mov	rax, QWORD PTR Len$[rsp]
	mov	ecx, DWORD PTR L$[rsp]
	mov	DWORD PTR [rax], ecx
$LN2@FormatExte:
; Line 10
	mov	rax, QWORD PTR R$[rsp]
; Line 11
	add	rsp, 56					; 00000038H
	ret	0
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z ENDP		; FormatExtendedA
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv68 = 48
$T1 = 56
$T2 = 80
$T3 = 112
$T4 = 136
Result$ = 208
__$ArrayPad$ = 272
__$ReturnAddress$ = 320
AspectRatio$ = 328
FieldOfView$ = 336
ZedNear$ = 344
ZedFar$ = 352
?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z PROC			; MatrixP
; File W:\cpp\void\dr\wide.c
; Line 617
	vmovss	DWORD PTR [rsp+32], xmm3
	vmovss	DWORD PTR [rsp+24], xmm2
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 296				; 00000128H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	DWORD PTR [rsp+32], 6
	mov	r9d, 617				; 00000269H
	lea	r8, OFFSET FLAT:$SG10715
	lea	rdx, OFFSET FLAT:$SG10716
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	vmovss	xmm0, DWORD PTR AspectRatio$[rsp]
	vucomiss xmm0, DWORD PTR __real@00000000
	jp	SHORT $LN5@MatrixP
	je	SHORT $LN3@MatrixP
$LN5@MatrixP:
	lea	rax, OFFSET FLAT:$SG10713
	test	rax, rax
	je	SHORT $LN3@MatrixP
	mov	DWORD PTR tv68[rsp], 1
	jmp	SHORT $LN4@MatrixP
$LN3@MatrixP:
	mov	DWORD PTR tv68[rsp], 0
$LN4@MatrixP:
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG10712
	mov	r8d, DWORD PTR tv68[rsp]
	lea	rdx, OFFSET FLAT:$SG10714
	lea	rcx, QWORD PTR $T2[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 618
	lea	rcx, QWORD PTR $T4[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR Result$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 619
	vmovss	xmm0, DWORD PTR FieldOfView$[rsp]
	vdivss	xmm0, xmm0, DWORD PTR __real@43340000
	vmulss	xmm0, xmm0, DWORD PTR __real@40490fdb
	vmulss	xmm0, xmm0, DWORD PTR __real@3f000000
	call	QWORD PTR __imp_tanf
	vmovss	xmm1, DWORD PTR __real@3f800000
	vdivss	xmm0, xmm1, xmm0
	vmovss	DWORD PTR FieldOfView$[rsp], xmm0
; Line 620
	vmovss	xmm0, DWORD PTR AspectRatio$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR FieldOfView$[rsp]
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR Result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 621
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR Result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	xmm0, DWORD PTR FieldOfView$[rsp]
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 622
	vmovss	xmm0, DWORD PTR ZedFar$[rsp]
	vsubss	xmm0, xmm0, DWORD PTR ZedNear$[rsp]
	vmovss	xmm1, DWORD PTR ZedFar$[rsp]
	vdivss	xmm0, xmm1, xmm0
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR Result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 623
	vmovss	xmm0, DWORD PTR ZedFar$[rsp]
	vmulss	xmm0, xmm0, DWORD PTR ZedNear$[rsp]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	xmm1, DWORD PTR ZedFar$[rsp]
	vsubss	xmm1, xmm1, DWORD PTR ZedNear$[rsp]
	vdivss	xmm0, xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR Result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 624
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR Result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 625
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR Result$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 626
	lea	rax, QWORD PTR Result$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 627
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 296				; 00000128H
	pop	rdi
	pop	rsi
	ret	0
?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z ENDP			; MatrixP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
R$ = 96
__$ArrayPad$ = 160
__$ReturnAddress$ = 208
V$ = 216
?MatrixRY@@YA?AUrx_f32_4x4@@M@Z PROC			; MatrixRY
; File W:\cpp\void\dr\wide.c
; Line 591
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR R$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 592
	vmovss	xmm0, DWORD PTR V$[rsp]
	call	QWORD PTR __imp_cosf
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 593
	vmovss	xmm0, DWORD PTR V$[rsp]
	call	QWORD PTR __imp_sinf
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 594
	vmovss	xmm0, DWORD PTR V$[rsp]
	call	QWORD PTR __imp_sinf
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 595
	vmovss	xmm0, DWORD PTR V$[rsp]
	call	QWORD PTR __imp_cosf
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 596
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 597
	lea	rax, QWORD PTR R$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 598
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?MatrixRY@@YA?AUrx_f32_4x4@@M@Z ENDP			; MatrixRY
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
R$ = 96
__$ArrayPad$ = 160
__$ReturnAddress$ = 208
V$ = 216
?MatrixRX@@YA?AUrx_f32_4x4@@M@Z PROC			; MatrixRX
; File W:\cpp\void\dr\wide.c
; Line 579
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR R$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 580
	mov	eax, 16
	imul	rax, rax, 0
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 581
	vmovss	xmm0, DWORD PTR V$[rsp]
	call	QWORD PTR __imp_cosf
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 582
	vmovss	xmm0, DWORD PTR V$[rsp]
	call	QWORD PTR __imp_sinf
	mov	eax, 16
	imul	rax, rax, 1
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 583
	vmovss	xmm0, DWORD PTR V$[rsp]
	call	QWORD PTR __imp_sinf
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 584
	vmovss	xmm0, DWORD PTR V$[rsp]
	call	QWORD PTR __imp_cosf
	mov	eax, 16
	imul	rax, rax, 2
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 585
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 3
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 586
	lea	rax, QWORD PTR R$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 587
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?MatrixRX@@YA?AUrx_f32_4x4@@M@Z ENDP			; MatrixRX
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
R$ = 96
__$ArrayPad$ = 160
__$ReturnAddress$ = 208
Pos$ = 216
?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z PROC		; MatrixD
; File W:\cpp\void\dr\wide.c
; Line 549
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 184				; 000000b8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?MatrixI@@YA?AUrx_f32_4x4@@XZ		; MatrixI
	lea	rcx, QWORD PTR R$[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
; Line 550
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR Pos$[rsp]
	vmovss	xmm0, DWORD PTR [rdx]
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 551
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR Pos$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+4]
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 552
	mov	eax, 16
	imul	rax, rax, 3
	lea	rax, QWORD PTR R$[rsp+rax]
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR Pos$[rsp]
	vmovss	xmm0, DWORD PTR [rdx+8]
	vmovss	DWORD PTR [rax+rcx], xmm0
; Line 553
	lea	rax, QWORD PTR R$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 554
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 184				; 000000b8H
	pop	rdi
	pop	rsi
	ret	0
?MatrixD@@YA?AUrx_f32_4x4@@Uf32x3@@@Z ENDP		; MatrixD
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
R$ = 0
__$ArrayPad$ = 64
__$ReturnAddress$ = 112
?MatrixI@@YA?AUrx_f32_4x4@@XZ PROC			; MatrixI
; File W:\cpp\void\dr\wide.c
; Line 538
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 88					; 00000058H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 539
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR R$[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+4], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+8], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+12], xmm0
; Line 540
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+16], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR R$[rsp+20], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+24], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+28], xmm0
; Line 541
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+32], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+36], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR R$[rsp+40], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+44], xmm0
; Line 542
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+48], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+52], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR R$[rsp+56], xmm0
	vmovss	xmm0, DWORD PTR __real@3f800000
	vmovss	DWORD PTR R$[rsp+60], xmm0
; Line 544
	lea	rax, QWORD PTR R$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 545
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 88					; 00000058H
	pop	rdi
	pop	rsi
	ret	0
?MatrixI@@YA?AUrx_f32_4x4@@XZ ENDP			; MatrixI
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
$T2 = 48
$T3 = 64
$T4 = 128
__$ArrayPad$ = 144
__$ReturnAddress$ = 192
A$ = 200
R$ = 208
?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z PROC	; MatrixMult
; File W:\cpp\void\dr\wide.c
; Line 533
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR R$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR A$[rsp]
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	r8, QWORD PTR $T1[rsp]
	lea	rdx, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	call	?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z ; MatrixMult3
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 534
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?MatrixMult@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z ENDP	; MatrixMult
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Row$1 = 0
Col$2 = 4
R$ = 16
__$ArrayPad$ = 80
__$ReturnAddress$ = 128
A$ = 136
B$ = 144
?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z PROC		; MatrixMult
; File W:\cpp\void\dr\wide.c
; Line 501
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 104				; 00000068H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 502
	mov	DWORD PTR Row$1[rsp], 0
	jmp	SHORT $LN4@MatrixMult
$LN2@MatrixMult:
	mov	eax, DWORD PTR Row$1[rsp]
	inc	eax
	mov	DWORD PTR Row$1[rsp], eax
$LN4@MatrixMult:
	cmp	DWORD PTR Row$1[rsp], 4
	jge	$LN3@MatrixMult
; Line 503
	mov	DWORD PTR Col$2[rsp], 0
	jmp	SHORT $LN7@MatrixMult
$LN5@MatrixMult:
	mov	eax, DWORD PTR Col$2[rsp]
	inc	eax
	mov	DWORD PTR Col$2[rsp], eax
$LN7@MatrixMult:
	cmp	DWORD PTR Col$2[rsp], 4
	jge	$LN6@MatrixMult
; Line 504
	movsxd	rax, DWORD PTR Row$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	edx, 16
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR B$[rsp]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR Col$2[rsp]
	vmovss	xmm0, DWORD PTR [rax+rcx]
	vmulss	xmm0, xmm0, DWORD PTR [rdx+r8*4]
	movsxd	rax, DWORD PTR Row$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	edx, 16
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR B$[rsp]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR Col$2[rsp]
	vmovss	xmm1, DWORD PTR [rax+rcx]
	vmulss	xmm1, xmm1, DWORD PTR [rdx+r8*4]
	vaddss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR Row$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	edx, 16
	imul	rdx, rdx, 2
	mov	r8, QWORD PTR B$[rsp]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR Col$2[rsp]
	vmovss	xmm1, DWORD PTR [rax+rcx]
	vmulss	xmm1, xmm1, DWORD PTR [rdx+r8*4]
	vaddss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR Row$1[rsp]
	imul	rax, rax, 16
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 3
	mov	edx, 16
	imul	rdx, rdx, 3
	mov	r8, QWORD PTR B$[rsp]
	add	r8, rdx
	mov	rdx, r8
	movsxd	r8, DWORD PTR Col$2[rsp]
	vmovss	xmm1, DWORD PTR [rax+rcx]
	vmulss	xmm1, xmm1, DWORD PTR [rdx+r8*4]
	vaddss	xmm0, xmm0, xmm1
	movsxd	rax, DWORD PTR Row$1[rsp]
	imul	rax, rax, 16
	lea	rax, QWORD PTR R$[rsp+rax]
	movsxd	rcx, DWORD PTR Col$2[rsp]
	vmovss	DWORD PTR [rax+rcx*4], xmm0
; Line 509
	jmp	$LN5@MatrixMult
$LN6@MatrixMult:
; Line 510
	jmp	$LN2@MatrixMult
$LN3@MatrixMult:
; Line 511
	lea	rax, QWORD PTR R$[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 512
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 104				; 00000068H
	pop	rdi
	pop	rsi
	ret	0
?MatrixMult@@YA?AUrx_f32_4x4@@U1@0@Z ENDP		; MatrixMult
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
X$ = 0
Y$ = 4
Z$ = 8
$T1 = 16
__$ArrayPad$ = 32
__$ReturnAddress$ = 80
A$ = 88
R$ = 96
?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z PROC	; MatrixMult3
; File W:\cpp\void\dr\wide.c
; Line 493
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm0, DWORD PTR [rdx]
	vmulss	xmm0, xmm0, DWORD PTR [rax+rcx]
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+4]
	vmulss	xmm1, xmm1, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+8]
	vmulss	xmm1, xmm1, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 0
	vaddss	xmm0, xmm0, DWORD PTR [rax+rcx]
	vmovss	DWORD PTR X$[rsp], xmm0
; Line 494
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm0, DWORD PTR [rdx]
	vmulss	xmm0, xmm0, DWORD PTR [rax+rcx]
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+4]
	vmulss	xmm1, xmm1, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+8]
	vmulss	xmm1, xmm1, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 1
	vaddss	xmm0, xmm0, DWORD PTR [rax+rcx]
	vmovss	DWORD PTR Y$[rsp], xmm0
; Line 495
	mov	eax, 16
	imul	rax, rax, 0
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm0, DWORD PTR [rdx]
	vmulss	xmm0, xmm0, DWORD PTR [rax+rcx]
	mov	eax, 16
	imul	rax, rax, 1
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+4]
	vmulss	xmm1, xmm1, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 2
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	mov	rdx, QWORD PTR R$[rsp]
	vmovss	xmm1, DWORD PTR [rdx+8]
	vmulss	xmm1, xmm1, DWORD PTR [rax+rcx]
	vaddss	xmm0, xmm0, xmm1
	mov	eax, 16
	imul	rax, rax, 3
	mov	rcx, QWORD PTR A$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, 4
	imul	rcx, rcx, 2
	vaddss	xmm0, xmm0, DWORD PTR [rax+rcx]
	vmovss	DWORD PTR Z$[rsp], xmm0
; Line 496
	vmovss	xmm0, DWORD PTR X$[rsp]
	vmovss	DWORD PTR $T1[rsp], xmm0
	vmovss	xmm0, DWORD PTR Y$[rsp]
	vmovss	DWORD PTR $T1[rsp+4], xmm0
	vmovss	xmm0, DWORD PTR Z$[rsp]
	vmovss	DWORD PTR $T1[rsp+8], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 497
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
?MatrixMult3@@YA?AUf32x3@@Urx_f32_4x4@@U1@@Z ENDP	; MatrixMult3
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
tv71 = 4
tv75 = 8
A$ = 32
B$ = 40
??Z@YAAEAUf32x3@@AEAU0@U0@@Z PROC			; operator-=
; File W:\cpp\void\dr\wide.c
; Line 315
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vsubss	xmm0, xmm0, DWORD PTR [rcx]
	vmovss	DWORD PTR tv67[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv67[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 316
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vsubss	xmm0, xmm0, DWORD PTR [rcx+4]
	vmovss	DWORD PTR tv71[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv71[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 317
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vsubss	xmm0, xmm0, DWORD PTR [rcx+8]
	vmovss	DWORD PTR tv75[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv75[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 318
	mov	rax, QWORD PTR A$[rsp]
; Line 319
	add	rsp, 24
	ret	0
??Z@YAAEAUf32x3@@AEAU0@U0@@Z ENDP			; operator-=
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
tv71 = 4
tv75 = 8
A$ = 32
B$ = 40
??Y@YAAEAUf32x3@@AEAU0@U0@@Z PROC			; operator+=
; File W:\cpp\void\dr\wide.c
; Line 307
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx]
	vmovss	DWORD PTR tv67[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv67[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 308
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+4]
	vmovss	DWORD PTR tv71[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv71[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 309
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+8]
	vmovss	DWORD PTR tv75[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv75[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 310
	mov	rax, QWORD PTR A$[rsp]
; Line 311
	add	rsp, 24
	ret	0
??Y@YAAEAUf32x3@@AEAU0@U0@@Z ENDP			; operator+=
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
tv69 = 4
tv72 = 8
A$ = 32
B$ = 40
??X@YAAEAUf32x3@@AEAU0@M@Z PROC				; operator*=
; File W:\cpp\void\dr\wide.c
; Line 291
	vmovss	DWORD PTR [rsp+16], xmm1
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmulss	xmm0, xmm0, DWORD PTR B$[rsp]
	vmovss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv66[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 292
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vmulss	xmm0, xmm0, DWORD PTR B$[rsp]
	vmovss	DWORD PTR tv69[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv69[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 293
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vmulss	xmm0, xmm0, DWORD PTR B$[rsp]
	vmovss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv72[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 294
	mov	rax, QWORD PTR A$[rsp]
; Line 295
	add	rsp, 24
	ret	0
??X@YAAEAUf32x3@@AEAU0@M@Z ENDP				; operator*=
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
A$ = 72
B$ = 80
??G@YA?AUf32x3@@U0@0@Z PROC				; operator-
; File W:\cpp\void\dr\wide.c
; Line 256
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vsubss	xmm0, xmm0, DWORD PTR [rcx]
	vmovss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vsubss	xmm0, xmm0, DWORD PTR [rcx+4]
	vmovss	DWORD PTR $T1[rsp+4], xmm0
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vsubss	xmm0, xmm0, DWORD PTR [rcx+8]
	vmovss	DWORD PTR $T1[rsp+8], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 261
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??G@YA?AUf32x3@@U0@0@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
A$ = 72
B$ = 80
??H@YA?AUf32x3@@U0@0@Z PROC				; operator+
; File W:\cpp\void\dr\wide.c
; Line 247
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vaddss	xmm0, xmm0, DWORD PTR [rcx]
	vmovss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+4]
	vmovss	DWORD PTR $T1[rsp+4], xmm0
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vaddss	xmm0, xmm0, DWORD PTR [rcx+8]
	vmovss	DWORD PTR $T1[rsp+8], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 252
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??H@YA?AUf32x3@@U0@0@Z ENDP				; operator+
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
__$ArrayPad$ = 16
__$ReturnAddress$ = 64
A$ = 72
??G@YA?AUf32x3@@U0@@Z PROC				; operator-
; File W:\cpp\void\dr\wide.c
; Line 229
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR $T1[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR $T1[rsp+4], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vxorps	xmm0, xmm0, DWORD PTR __xmm@80000000800000008000000080000000
	vmovss	DWORD PTR $T1[rsp+8], xmm0
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 234
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??G@YA?AUf32x3@@U0@@Z ENDP				; operator-
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv67 = 0
tv71 = 4
tv75 = 8
__$ReturnAddress$ = 48
A$ = 56
B$ = 64
??D@YA?AUf32x3@@U0@0@Z PROC				; operator*
; File W:\cpp\void\dr\wide.c
; Line 203
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 24
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmulss	xmm0, xmm0, DWORD PTR [rcx]
	vmovss	DWORD PTR tv67[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv67[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 204
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vmulss	xmm0, xmm0, DWORD PTR [rcx+4]
	vmovss	DWORD PTR tv71[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv71[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 205
	mov	rax, QWORD PTR A$[rsp]
	mov	rcx, QWORD PTR B$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vmulss	xmm0, xmm0, DWORD PTR [rcx+8]
	vmovss	DWORD PTR tv75[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv75[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 206
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, QWORD PTR A$[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 207
	add	rsp, 24
	pop	rdi
	pop	rsi
	ret	0
??D@YA?AUf32x3@@U0@0@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
tv69 = 4
tv72 = 8
__$ReturnAddress$ = 48
A$ = 56
B$ = 64
??D@YA?AUf32x3@@U0@M@Z PROC				; operator*
; File W:\cpp\void\dr\wide.c
; Line 119
	vmovss	DWORD PTR [rsp+24], xmm2
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 24
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax]
	vmulss	xmm0, xmm0, DWORD PTR B$[rsp]
	vmovss	DWORD PTR tv66[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv66[rsp]
	vmovss	DWORD PTR [rax], xmm0
; Line 120
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax+4]
	vmulss	xmm0, xmm0, DWORD PTR B$[rsp]
	vmovss	DWORD PTR tv69[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv69[rsp]
	vmovss	DWORD PTR [rax+4], xmm0
; Line 121
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR [rax+8]
	vmulss	xmm0, xmm0, DWORD PTR B$[rsp]
	vmovss	DWORD PTR tv72[rsp], xmm0
	mov	rax, QWORD PTR A$[rsp]
	vmovss	xmm0, DWORD PTR tv72[rsp]
	vmovss	DWORD PTR [rax+8], xmm0
; Line 122
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, QWORD PTR A$[rsp]
	mov	ecx, 12
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 123
	add	rsp, 24
	pop	rdi
	pop	rsi
	ret	0
??D@YA?AUf32x3@@U0@M@Z ENDP				; operator*
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 32
Args$1 = 40
tv79 = 48
tv86 = 56
$T2 = 64
$T3 = 96
$T4 = 128
Location$ = 192
Expression$ = 200
IsTrue$ = 208
Message$ = 216
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ PROC	; AssertExtendedW
; File W:\cpp\void\dr\break.c
; Line 8
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 168				; 000000a8H
; Line 9
	cmp	DWORD PTR IsTrue$[rsp], 0
	jne	$LN2@AssertExte
; Line 12
	lea	rax, QWORD PTR Message$[rsp+8]
	mov	QWORD PTR Args$1[rsp], rax
; Line 14
	mov	rax, QWORD PTR Args$1[rsp]
	mov	QWORD PTR tv79[rsp], rax
	mov	rcx, QWORD PTR Message$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv77[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv79[rsp]
	mov	rdx, QWORD PTR Message$[rsp]
	mov	ecx, DWORD PTR tv77[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR tv86[rsp], rax
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv86[rsp]
	lea	r8, OFFSET FLAT:$SG81317
	mov	edx, 7
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 16
	mov	QWORD PTR Args$1[rsp], 0
; Line 18
	lea	rax, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	mov	rdx, QWORD PTR Expression$[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	call	?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z ; DebugBreakExtended
	jmp	SHORT $LN1@AssertExte
$LN2@AssertExte:
; Line 21
	xor	eax, eax
$LN1@AssertExte:
; Line 22
	add	rsp, 168				; 000000a8H
	pop	rdi
	pop	rsi
	ret	0
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ENDP	; AssertExtendedW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
I$1 = 64
ErrorBed$ = 72
ErrorLen$ = 80
$T2 = 88
$T3 = 112
$T4 = 144
$T5 = 176
$T6 = 208
$T7 = 232
Class$ = 288
ErrorCode$ = 296
?GetErrorStringA@@YAPEBDHH@Z PROC			; GetErrorStringA
; File W:\cpp\void\dr\plat-win32.c
; Line 135
	mov	DWORD PTR [rsp+16], edx
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 264				; 00000108H
	cmp	DWORD PTR ErrorCode$[rsp], -1
	jne	SHORT $LN5@GetErrorSt
; Line 136
	mov	ecx, DWORD PTR Class$[rsp]
	call	?GetErrorCode@@YAHH@Z			; GetErrorCode
	mov	DWORD PTR ErrorCode$[rsp], eax
; Line 137
	jmp	SHORT $LN6@GetErrorSt
$LN5@GetErrorSt:
; Line 138
	cmp	DWORD PTR Class$[rsp], 0
	je	SHORT $LN7@GetErrorSt
; Line 139
	mov	DWORD PTR [rsp+32], 9
	mov	r9d, 139				; 0000008bH
	lea	r8, OFFSET FLAT:$SG79786
	lea	rdx, OFFSET FLAT:$SG79787
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG79785
	mov	edx, 4
	lea	rcx, QWORD PTR $T3[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN7@GetErrorSt:
$LN6@GetErrorSt:
; Line 142
	mov	edx, 257				; 00000101H
	xor	ecx, ecx
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR ErrorBed$[rsp], rax
; Line 143
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 256			; 00000100H
	mov	rax, QWORD PTR ErrorBed$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 1024				; 00000400H
	mov	r8d, DWORD PTR ErrorCode$[rsp]
	xor	edx, edx
	mov	ecx, 4096				; 00001000H
	call	QWORD PTR __imp_FormatMessageA
	mov	DWORD PTR ErrorLen$[rsp], eax
; Line 146
	mov	eax, DWORD PTR ErrorLen$[rsp]
	dec	eax
	mov	DWORD PTR I$1[rsp], eax
	jmp	SHORT $LN4@GetErrorSt
$LN2@GetErrorSt:
	mov	eax, DWORD PTR I$1[rsp]
	dec	eax
	mov	DWORD PTR I$1[rsp], eax
$LN4@GetErrorSt:
	cmp	DWORD PTR I$1[rsp], 0
	jl	SHORT $LN3@GetErrorSt
; Line 147
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	rcx, QWORD PTR ErrorBed$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	?RuneIsEOL@@YAHH@Z			; RuneIsEOL
	test	eax, eax
	je	SHORT $LN8@GetErrorSt
; Line 148
	movsxd	rax, DWORD PTR I$1[rsp]
	mov	rcx, QWORD PTR ErrorBed$[rsp]
	mov	BYTE PTR [rcx+rax], 46			; 0000002eH
; Line 149
	jmp	SHORT $LN9@GetErrorSt
$LN8@GetErrorSt:
; Line 150
	jmp	SHORT $LN3@GetErrorSt
$LN9@GetErrorSt:
; Line 152
	jmp	SHORT $LN2@GetErrorSt
$LN3@GetErrorSt:
; Line 153
	cmp	DWORD PTR ErrorLen$[rsp], 0
	je	SHORT $LN11@GetErrorSt
	cmp	QWORD PTR ErrorBed$[rsp], 0
	jne	$LN10@GetErrorSt
$LN11@GetErrorSt:
; Line 154
	mov	DWORD PTR [rsp+32], 10
	mov	r9d, 154				; 0000009aH
	lea	r8, OFFSET FLAT:$SG79793
	lea	rdx, OFFSET FLAT:$SG79794
	lea	rcx, QWORD PTR $T7[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG79792
	mov	edx, 4
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 155
	lea	rax, OFFSET FLAT:$SG79795
	mov	QWORD PTR ErrorBed$[rsp], rax
$LN10@GetErrorSt:
; Line 157
	mov	rax, QWORD PTR ErrorBed$[rsp]
; Line 158
	add	rsp, 264				; 00000108H
	pop	rdi
	pop	rsi
	ret	0
?GetErrorStringA@@YAPEBDHH@Z ENDP			; GetErrorStringA
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ErrorCode$ = 48
$T1 = 56
$T2 = 80
$T3 = 112
Class$ = 176
?GetErrorCode@@YAHH@Z PROC				; GetErrorCode
; File W:\cpp\void\dr\plat-win32.c
; Line 121
	mov	DWORD PTR [rsp+8], ecx
	push	rsi
	push	rdi
	sub	rsp, 152				; 00000098H
	mov	DWORD PTR ErrorCode$[rsp], -1
; Line 122
	cmp	DWORD PTR Class$[rsp], 2
	jne	SHORT $LN2@GetErrorCo
; Line 123
	call	QWORD PTR __imp_GetLastError
	mov	DWORD PTR ErrorCode$[rsp], eax
; Line 124
	jmp	SHORT $LN3@GetErrorCo
$LN2@GetErrorCo:
; Line 125
	cmp	DWORD PTR Class$[rsp], 1
	jne	SHORT $LN4@GetErrorCo
; Line 126
	call	QWORD PTR __imp_WSAGetLastError
	mov	DWORD PTR ErrorCode$[rsp], eax
; Line 127
	jmp	SHORT $LN5@GetErrorCo
$LN4@GetErrorCo:
; Line 128
	mov	DWORD PTR [rsp+32], 8
	mov	r9d, 128				; 00000080H
	lea	r8, OFFSET FLAT:$SG79761
	lea	rdx, OFFSET FLAT:$SG79762
	lea	rcx, QWORD PTR $T3[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG79760
	mov	edx, 4
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@GetErrorCo:
$LN3@GetErrorCo:
; Line 130
	mov	eax, DWORD PTR ErrorCode$[rsp]
; Line 131
	add	rsp, 152				; 00000098H
	pop	rdi
	pop	rsi
	ret	0
?GetErrorCode@@YAHH@Z ENDP				; GetErrorCode
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileSize$1 = 64
FileRead$2 = 68
FileData$ = 72
FileHandle$ = 80
FileSizeHI$3 = 88
tv137 = 96
tv155 = 104
$T4 = 112
$T5 = 136
$T6 = 160
$T7 = 192
$T8 = 216
$T9 = 240
$T10 = 272
$T11 = 296
BytesRead$ = 352
Name$ = 360
?LoadFileData@@YAPEAXPEAIPEBD@Z PROC			; LoadFileData
; File W:\cpp\void\dr\plat-win32.c
; Line 530
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 328				; 00000148H
; Line 531
	mov	QWORD PTR [rsp+48], 0
	mov	DWORD PTR [rsp+40], 0
	mov	DWORD PTR [rsp+32], 3
	xor	r9d, r9d
	mov	r8d, 3
	mov	edx, -2147483648			; 80000000H
	mov	rcx, QWORD PTR Name$[rsp]
	call	QWORD PTR __imp_CreateFileA
	mov	QWORD PTR FileHandle$[rsp], rax
; Line 534
	mov	QWORD PTR FileData$[rsp], 0
; Line 536
	cmp	QWORD PTR FileHandle$[rsp], -1
	je	$LN2@LoadFileDa
; Line 537
	mov	DWORD PTR FileSize$1[rsp], 0
	mov	DWORD PTR FileSizeHI$3[rsp], 0
	mov	DWORD PTR FileRead$2[rsp], 0
; Line 538
	lea	rdx, QWORD PTR FileSizeHI$3[rsp]
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_GetFileSize
	mov	DWORD PTR FileSize$1[rsp], eax
; Line 542
	mov	eax, DWORD PTR FileSize$1[rsp]
	mov	r9d, 4
	mov	r8d, 12288				; 00003000H
	mov	edx, eax
	xor	ecx, ecx
	call	QWORD PTR __imp_VirtualAlloc
	mov	QWORD PTR FileData$[rsp], rax
; Line 544
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR FileRead$2[rsp]
	mov	r8d, DWORD PTR FileSize$1[rsp]
	mov	rdx, QWORD PTR FileData$[rsp]
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_ReadFile
	test	eax, eax
	jne	$LN4@LoadFileDa
; Line 545
	mov	rcx, QWORD PTR FileData$[rsp]
	call	?UnloadFileData@@YAXPEAX@Z		; UnloadFileData
; Line 546
	mov	QWORD PTR FileData$[rsp], 0
; Line 548
	mov	DWORD PTR [rsp+32], 16
	mov	r9d, 548				; 00000224H
	lea	r8, OFFSET FLAT:$SG80013
	lea	rdx, OFFSET FLAT:$SG80014
	lea	rcx, QWORD PTR $T10[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv137[rsp], rax
	lea	rax, QWORD PTR $T5[rsp]
	lea	rcx, QWORD PTR $T4[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T6[rsp]
	lea	rcx, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv137[rsp]
	lea	r8, OFFSET FLAT:$SG80012
	mov	edx, 6
	lea	rcx, QWORD PTR $T6[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@LoadFileDa:
; Line 551
	cmp	QWORD PTR BytesRead$[rsp], 0
	je	SHORT $LN5@LoadFileDa
; Line 552
	mov	rax, QWORD PTR BytesRead$[rsp]
	mov	ecx, DWORD PTR FileRead$2[rsp]
	mov	DWORD PTR [rax], ecx
$LN5@LoadFileDa:
; Line 554
	mov	rcx, QWORD PTR FileHandle$[rsp]
	call	QWORD PTR __imp_CloseHandle
; Line 555
	jmp	$LN3@LoadFileDa
$LN2@LoadFileDa:
; Line 557
	mov	DWORD PTR [rsp+32], 17
	mov	r9d, 557				; 0000022dH
	lea	r8, OFFSET FLAT:$SG80017
	lea	rdx, OFFSET FLAT:$SG80018
	lea	rcx, QWORD PTR $T11[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rcx, QWORD PTR Name$[rsp]
	call	?CStrW@@YAPEB_WPEBD@Z			; CStrW
	mov	QWORD PTR tv155[rsp], rax
	lea	rax, QWORD PTR $T8[rsp]
	lea	rcx, QWORD PTR $T7[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T9[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv155[rsp]
	lea	r8, OFFSET FLAT:$SG80016
	mov	edx, 6
	lea	rcx, QWORD PTR $T9[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN3@LoadFileDa:
; Line 559
	mov	rax, QWORD PTR FileData$[rsp]
; Line 560
	add	rsp, 328				; 00000148H
	pop	rdi
	pop	rsi
	ret	0
?LoadFileData@@YAPEAXPEAIPEBD@Z ENDP			; LoadFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
FileData$ = 48
?UnloadFileData@@YAXPEAX@Z PROC				; UnloadFileData
; File W:\cpp\void\dr\plat-win32.c
; Line 525
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H
	mov	r8d, 32768				; 00008000H
	xor	edx, edx
	mov	rcx, QWORD PTR FileData$[rsp]
	call	QWORD PTR __imp_VirtualFree
; Line 526
	add	rsp, 40					; 00000028H
	ret	0
?UnloadFileData@@YAXPEAX@Z ENDP				; UnloadFileData
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
ButtonPressed$ = 48
Result$ = 52
ErrorMessage$ = 56
tv94 = 64
$T1 = 80
$T2 = 112
$T3 = 144
$T4 = 176
$T5 = 208
Location$ = 272
Expression$ = 280
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z PROC	; DebugBreakExtended
; File W:\cpp\void\dr\plat-win32.c
; Line 87
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
	mov	DWORD PTR Result$[rsp], 1
; Line 89
	mov	rax, QWORD PTR Expression$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR Location$[rsp]
	mov	eax, DWORD PTR [rax+20]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR Location$[rsp]
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR Location$[rsp]
	mov	r8d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG79738
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
	mov	QWORD PTR ErrorMessage$[rsp], rax
; Line 92
	mov	r9d, 16
	lea	r8, OFFSET FLAT:$SG79739
	mov	rdx, QWORD PTR ErrorMessage$[rsp]
	xor	ecx, ecx
	call	QWORD PTR __imp_MessageBoxA
; Line 94
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG79740
	mov	edx, 1
	lea	rcx, QWORD PTR $T1[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 95
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG79741
	mov	edx, 1
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 96
	mov	rdx, QWORD PTR ErrorMessage$[rsp]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv94[rsp], rax
	lea	rax, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	r9, QWORD PTR tv94[rsp]
	lea	r8, OFFSET FLAT:$SG79742
	mov	edx, 1
	lea	rcx, QWORD PTR $T4[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 97
	lea	rax, QWORD PTR $T5[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG79743
	mov	edx, 1
	lea	rcx, QWORD PTR $T5[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 99
	mov	r9d, 18
	lea	r8, OFFSET FLAT:$SG79744
	lea	rdx, OFFSET FLAT:$SG79745
	xor	ecx, ecx
	call	QWORD PTR __imp_MessageBoxA
	mov	DWORD PTR ButtonPressed$[rsp], eax
; Line 103
	cmp	DWORD PTR ButtonPressed$[rsp], 3
	jne	SHORT $LN2@DebugBreak
; Line 104
	mov	ecx, 777				; 00000309H
	call	QWORD PTR __imp_ExitProcess
; Line 105
	jmp	SHORT $LN3@DebugBreak
$LN2@DebugBreak:
; Line 106
	cmp	DWORD PTR ButtonPressed$[rsp], 4
	jne	SHORT $LN4@DebugBreak
; Line 110
	call	QWORD PTR __imp_DebugBreak
; Line 111
	jmp	SHORT $LN5@DebugBreak
$LN4@DebugBreak:
; Line 112
	cmp	DWORD PTR ButtonPressed$[rsp], 5
	jne	SHORT $LN6@DebugBreak
; Line 113
	mov	DWORD PTR Result$[rsp], 0
$LN6@DebugBreak:
$LN5@DebugBreak:
$LN3@DebugBreak:
; Line 116
	mov	eax, DWORD PTR Result$[rsp]
$LN7@DebugBreak:
; Line 117
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z ENDP	; DebugBreakExtended
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv77 = 48
Wrote$ = 52
tv75 = 56
Text$ = 80
?OutputW@@YAXPEB_W@Z PROC				; OutputW
; File W:\cpp\void\dr\plat-win32.c
; Line 43
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	rcx, QWORD PTR Text$[rsp]
	call	QWORD PTR __imp_OutputDebugStringW
; Line 46
	mov	rcx, QWORD PTR Text$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv77[rsp], eax
	mov	rax, QWORD PTR ?PROCESS@@3U_PROCESS@@A+96
	mov	QWORD PTR tv75[rsp], rax
	mov	QWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR Wrote$[rsp]
	mov	r8d, DWORD PTR tv77[rsp]
	mov	rdx, QWORD PTR Text$[rsp]
	mov	rcx, QWORD PTR tv75[rsp]
	call	QWORD PTR __imp_WriteConsoleW
	test	eax, eax
	jne	SHORT $LN2@OutputW
; Line 48
	lea	rcx, OFFSET FLAT:$SG79707
	call	printf
$LN2@OutputW:
; Line 50
	add	rsp, 72					; 00000048H
	ret	0
?OutputW@@YAXPEB_W@Z ENDP				; OutputW
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
StringLen$ = 48
C$ = 52
StringBed$ = 56
Len$ = 80
Str$ = 88
?Widen@@YAPEA_WHPEBD@Z PROC				; Widen
; File W:\cpp\void\dr\plat-win32.c
; Line 64
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
; Line 65
	cmp	QWORD PTR Str$[rsp], 0
	jne	SHORT $LN2@Widen
; Line 66
	xor	eax, eax
	jmp	$LN1@Widen
$LN2@Widen:
; Line 69
	mov	DWORD PTR StringLen$[rsp], 0
; Line 70
	mov	QWORD PTR StringBed$[rsp], 0
; Line 72
	cmp	DWORD PTR Len$[rsp], -1
	jne	SHORT $LN3@Widen
	mov	rcx, QWORD PTR Str$[rsp]
	call	strlen
	mov	DWORD PTR Len$[rsp], eax
$LN3@Widen:
; Line 74
	mov	DWORD PTR C$[rsp], 0
; Line 76
	mov	DWORD PTR C$[rsp], 65001		; 0000fde9H
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	jne	SHORT $LN5@Widen
	mov	DWORD PTR C$[rsp], 0
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	jne	SHORT $LN5@Widen
	mov	DWORD PTR C$[rsp], 2
	mov	DWORD PTR [rsp+40], 0
	mov	QWORD PTR [rsp+32], 0
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	DWORD PTR StringLen$[rsp], eax
	cmp	DWORD PTR StringLen$[rsp], 0
	je	SHORT $LN4@Widen
$LN5@Widen:
; Line 79
	mov	eax, DWORD PTR StringLen$[rsp]
	inc	eax
	cdqe
	shl	rax, 1
	mov	rdx, rax
	mov	ecx, 1
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
	mov	QWORD PTR StringBed$[rsp], rax
; Line 80
	mov	eax, DWORD PTR StringLen$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR StringBed$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR Len$[rsp]
	mov	r8, QWORD PTR Str$[rsp]
	mov	edx, 8
	mov	ecx, DWORD PTR C$[rsp]
	call	QWORD PTR __imp_MultiByteToWideChar
$LN4@Widen:
; Line 82
	mov	rax, QWORD PTR StringBed$[rsp]
$LN1@Widen:
; Line 83
	add	rsp, 72					; 00000048H
	ret	0
?Widen@@YAPEA_WHPEBD@Z ENDP				; Widen
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 32
?GetPerformanceCounter@@YA_KXZ PROC			; GetPerformanceCounter
; File W:\cpp\void\dr\plat-win32.c
; Line 31
	sub	rsp, 56					; 00000038H
; Line 32
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 33
	mov	rax, QWORD PTR Result$[rsp]
; Line 34
	add	rsp, 56					; 00000038H
	ret	0
?GetPerformanceCounter@@YA_KXZ ENDP			; GetPerformanceCounter
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Result$ = 32
?GetPerformanceFrequency@@YA_KXZ PROC			; GetPerformanceFrequency
; File W:\cpp\void\dr\plat-win32.c
; Line 24
	sub	rsp, 56					; 00000038H
; Line 25
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 26
	mov	rax, QWORD PTR Result$[rsp]
; Line 27
	add	rsp, 56					; 00000038H
	ret	0
?GetPerformanceFrequency@@YA_KXZ ENDP			; GetPerformanceFrequency
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
?GetThreadID@@YAHXZ PROC				; GetThreadID
; File W:\cpp\void\dr\plat-win32.c
; Line 38
	sub	rsp, 40					; 00000028H
	call	QWORD PTR __imp_GetCurrentThreadId
; Line 39
	add	rsp, 40					; 00000028H
	ret	0
?GetThreadID@@YAHXZ ENDP				; GetThreadID
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
cur_img_idx$ = 48
TimerAtSecond$ = 52
Speed$1 = 56
img_row_len$ = 60
img_col_len$ = 64
ViewSizeY$2 = 68
ViewSizeX$3 = 72
images_file_data$ = 80
img_num$ = 88
AspectRatio$4 = 92
label$5 = 96
labels_file_data$ = 104
labels_file_size$ = 112
label_count$ = 116
images_file_size$ = 120
img_mem$ = 128
label_array$ = 136
img_dat$6 = 144
$T7 = 160
$T8 = 224
App$ = 288
$T9 = 123104
__$ArrayPad$ = 123168
?MAIN@@YAXXZ PROC					; MAIN
; File W:\cpp\void\dr-ai\ai-vis.c
; Line 8
	push	rsi
	push	rdi
	mov	eax, 123192				; 0001e138H
	call	__chkstk
	sub	rsp, rax
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 10
	lea	rcx, OFFSET FLAT:$SG155784
	call	QWORD PTR __imp_SetCurrentDirectoryA
; Line 11
	lea	rax, QWORD PTR App$[rsp]
	mov	rdi, rax
	xor	eax, eax
	mov	ecx, 122808				; 0001dfb8H
	rep stosb
; Line 12
	lea	rax, OFFSET FLAT:$SG155785
	mov	QWORD PTR App$[rsp+120712], rax
; Line 13
	lea	rax, OFFSET FLAT:$SG155786
	mov	QWORD PTR App$[rsp+120728], rax
; Line 14
	mov	DWORD PTR App$[rsp+120736], 1
; Line 16
	lea	rdx, OFFSET FLAT:$SG155787
	lea	rcx, QWORD PTR App$[rsp]
	call	?DetroitApp_Init@@YAXPEAUDETROIT_APP@@PEB_W@Z ; DetroitApp_Init
; Line 17
	lea	rcx, OFFSET FLAT:$SG155788
	call	QWORD PTR __imp_SetCurrentDirectoryA
; Line 21
	lea	rdx, OFFSET FLAT:$SG155789
	lea	rcx, QWORD PTR labels_file_size$[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR labels_file_data$[rsp], rax
; Line 22
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR labels_file_data$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	?int_flip@@YAII@Z			; int_flip
	mov	DWORD PTR label_count$[rsp], eax
; Line 23
	mov	rax, QWORD PTR labels_file_data$[rsp]
	add	rax, 8
	mov	QWORD PTR label_array$[rsp], rax
; Line 25
	lea	rdx, OFFSET FLAT:$SG155790
	lea	rcx, QWORD PTR images_file_size$[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	QWORD PTR images_file_data$[rsp], rax
; Line 26
	mov	eax, 4
	imul	rax, rax, 1
	mov	rcx, QWORD PTR images_file_data$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	?int_flip@@YAII@Z			; int_flip
	mov	DWORD PTR img_num$[rsp], eax
; Line 27
	mov	eax, 4
	imul	rax, rax, 2
	mov	rcx, QWORD PTR images_file_data$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	?int_flip@@YAII@Z			; int_flip
	mov	DWORD PTR img_row_len$[rsp], eax
; Line 28
	mov	eax, 4
	imul	rax, rax, 3
	mov	rcx, QWORD PTR images_file_data$[rsp]
	mov	ecx, DWORD PTR [rcx+rax]
	call	?int_flip@@YAII@Z			; int_flip
	mov	DWORD PTR img_col_len$[rsp], eax
; Line 29
	mov	rax, QWORD PTR images_file_data$[rsp]
	add	rax, 12
	mov	QWORD PTR img_mem$[rsp], rax
; Line 31
	mov	DWORD PTR cur_img_idx$[rsp], 0
; Line 35
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR TimerAtSecond$[rsp], xmm0
$LN2@MAIN:
; Line 36
	cmp	DWORD PTR App$[rsp], 0
	jne	$LN3@MAIN
; Line 38
	vcvtsi2ss xmm0, xmm0, DWORD PTR App$[rsp+7632]
	vmovss	DWORD PTR ViewSizeX$3[rsp], xmm0
; Line 39
	vcvtsi2ss xmm0, xmm0, DWORD PTR App$[rsp+7636]
	vmovss	DWORD PTR ViewSizeY$2[rsp], xmm0
; Line 40
	vmovss	xmm0, DWORD PTR ViewSizeY$2[rsp]
	vdivss	xmm0, xmm0, DWORD PTR ViewSizeX$3[rsp]
	vmovss	DWORD PTR AspectRatio$4[rsp], xmm0
; Line 42
	vmovss	xmm0, DWORD PTR TimerAtSecond$[rsp]
	vaddss	xmm0, xmm0, DWORD PTR App$[rsp+24640]
	vmovss	DWORD PTR TimerAtSecond$[rsp], xmm0
; Line 44
	vmovss	xmm0, DWORD PTR TimerAtSecond$[rsp]
	vcomiss	xmm0, DWORD PTR __real@3e828f5c
	jb	SHORT $LN4@MAIN
; Line 45
	mov	eax, DWORD PTR cur_img_idx$[rsp]
	inc	eax
	mov	DWORD PTR cur_img_idx$[rsp], eax
	xor	edx, edx
	mov	eax, DWORD PTR cur_img_idx$[rsp]
	div	DWORD PTR img_num$[rsp]
	mov	eax, edx
	mov	DWORD PTR cur_img_idx$[rsp], eax
; Line 46
	vxorps	xmm0, xmm0, xmm0
	vmovss	DWORD PTR TimerAtSecond$[rsp], xmm0
$LN4@MAIN:
; Line 49
	mov	eax, DWORD PTR img_col_len$[rsp]
	imul	eax, DWORD PTR img_row_len$[rsp]
	imul	eax, DWORD PTR cur_img_idx$[rsp]
	mov	eax, eax
	mov	rcx, QWORD PTR img_mem$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR img_dat$6[rsp], rax
; Line 50
	movsxd	rax, DWORD PTR cur_img_idx$[rsp]
	mov	rcx, QWORD PTR label_array$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	DWORD PTR label$5[rsp], eax
; Line 53
	vmovss	xmm0, DWORD PTR __real@40000000
	vmulss	xmm0, xmm0, DWORD PTR App$[rsp+24640]
	vmovss	DWORD PTR Speed$1[rsp], xmm0
; Line 54
	mov	edx, 2
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_SetCameraMode@@YA?AW4DET_CAMERA_MODE@@PEAUID3D11_GRAPHICS@@W41@@Z ; ID3D11Graphics_SetCameraMode
; Line 55
	vmovss	xmm3, DWORD PTR Speed$1[rsp]
	vmovss	xmm2, DWORD PTR Speed$1[rsp]
	vmovss	xmm1, DWORD PTR Speed$1[rsp]
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_SetCameraSpeed@@YAXPEAUID3D11_GRAPHICS@@MMM@Z ; ID3D11Graphics_SetCameraSpeed
; Line 57
	mov	edx, 2
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_PickMatrix@@YAXPEAUID3D11_GRAPHICS@@H@Z ; ID3D11Graphics_PickMatrix
; Line 58
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_LoadMatrix
; Line 59
	vmovss	xmm0, DWORD PTR __real@447a0000
	vmovss	DWORD PTR [rsp+32], xmm0
	vmovss	xmm3, DWORD PTR __real@3a83126f
	vmovss	xmm2, DWORD PTR __real@42b40000
	vmovss	xmm1, DWORD PTR AspectRatio$4[rsp]
	lea	rcx, QWORD PTR $T8[rsp]
	call	?MatrixP@@YA?AUrx_f32_4x4@@MMMM@Z	; MatrixP
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rax, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR $T9[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 64					; 00000040H
	rep movsb
	lea	rdx, QWORD PTR $T7[rsp]
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_MultMatrix@@YAXPEAUID3D11_GRAPHICS@@Urx_f32_4x4@@@Z ; ID3D11Graphics_MultMatrix
; Line 61
	mov	edx, 1
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_PickMatrix@@YAXPEAUID3D11_GRAPHICS@@H@Z ; ID3D11Graphics_PickMatrix
; Line 63
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_LoadMatrix
; Line 64
	vmovss	xmm3, DWORD PTR __real@3f800000
	vmovss	xmm2, DWORD PTR __real@40000000
	vmovss	xmm1, DWORD PTR __real@40000000
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_Scale@@YAXPEAUID3D11_GRAPHICS@@MMM@Z ; ID3D11Graphics_Scale
; Line 65
	vmovss	xmm3, DWORD PTR __real@40000000
	vxorps	xmm2, xmm2, xmm2
	vxorps	xmm1, xmm1, xmm1
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_Translate@@YAXPEAUID3D11_GRAPHICS@@MMM@Z ; ID3D11Graphics_Translate
; Line 66
	mov	rax, QWORD PTR img_dat$6[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, DWORD PTR img_row_len$[rsp]
	mov	r8d, DWORD PTR img_col_len$[rsp]
	mov	edx, 1
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_DrawImageData@@YAXPEAUID3D11_GRAPHICS@@W4_PIXEL_FORMAT@@HHPEAX@Z ; ID3D11Graphics_DrawImageData
; Line 69
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_LoadMatrix@@YAXPEAUID3D11_GRAPHICS@@@Z ; ID3D11Graphics_LoadMatrix
; Line 70
	vmovss	xmm0, DWORD PTR __real@40000000
	vdivss	xmm0, xmm0, DWORD PTR ViewSizeY$2[rsp]
	vmovss	xmm1, DWORD PTR __real@40000000
	vdivss	xmm1, xmm1, DWORD PTR ViewSizeX$3[rsp]
	vmovss	xmm3, DWORD PTR __real@3f800000
	vmovups	xmm2, xmm0
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_Scale@@YAXPEAUID3D11_GRAPHICS@@MMM@Z ; ID3D11Graphics_Scale
; Line 71
	vmovss	xmm3, DWORD PTR __real@40000000
	vmovss	xmm2, DWORD PTR __real@80000000
	vmovss	xmm1, DWORD PTR __real@bf800000
	lea	rcx, QWORD PTR App$[rsp+8]
	call	?ID3D11Graphics_Translate@@YAXPEAUID3D11_GRAPHICS@@MMM@Z ; ID3D11Graphics_Translate
; Line 73
	mov	r9d, DWORD PTR label$5[rsp]
	lea	r8, OFFSET FLAT:$SG155792
	vmovss	xmm1, DWORD PTR __real@42800000
	vmovd	edx, xmm1
	lea	rcx, QWORD PTR App$[rsp]
	call	?DetroitApp_DrawText@@YAXPEAUDETROIT_APP@@MPEBDZZ ; DetroitApp_DrawText
; Line 75
	lea	rcx, QWORD PTR App$[rsp]
	call	?DetroitApp_Tick@@YAXPEAUDETROIT_APP@@@Z ; DetroitApp_Tick
; Line 76
	jmp	$LN2@MAIN
$LN3@MAIN:
; Line 77
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 123192				; 0001e138H
	pop	rdi
	pop	rsi
	ret	0
?MAIN@@YAXXZ ENDP					; MAIN
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
r$ = 32
s$ = 64
?strtoi@@YA_JUstr32@@@Z PROC				; strtoi
; File W:\cpp\void\dr\str32.h
; Line 27
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR r$[rsp], -1
; Line 28
	mov	rax, QWORD PTR s$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	rcx, QWORD PTR s$[rsp]
	add	rax, QWORD PTR [rcx+4]
	mov	r9, rax
	mov	rax, QWORD PTR s$[rsp]
	mov	r8, QWORD PTR [rax+4]
	lea	rdx, QWORD PTR r$[rsp]
	mov	ecx, 10
	call	?rx7__stoi@@YAHHPEA_JPEBD1@Z		; rx7__stoi
; Line 29
	mov	rax, QWORD PTR r$[rsp]
; Line 30
	add	rsp, 56					; 00000038H
	ret	0
?strtoi@@YA_JUstr32@@@Z ENDP				; strtoi
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv66 = 0
this$ = 32
??7str32@@QEAAHXZ PROC					; str32::operator!
; File W:\cpp\void\dr\str32.h
; Line 170
$LN5:
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 24
; Line 172
	mov	rax, QWORD PTR this$[rsp]
	cmp	DWORD PTR [rax], 0
	jne	SHORT $LN3@operator
	mov	DWORD PTR tv66[rsp], 1
	jmp	SHORT $LN4@operator
$LN3@operator:
	mov	DWORD PTR tv66[rsp], 0
$LN4@operator:
	mov	eax, DWORD PTR tv66[rsp]
; Line 173
	add	rsp, 24
	ret	0
??7str32@@QEAAHXZ ENDP					; str32::operator!
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAHXZ PROC					; str32::operator int
; File W:\cpp\void\dr\str32.h
; Line 196
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 197
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 198
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAHXZ ENDP					; str32::operator int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAIXZ PROC					; str32::operator unsigned int
; File W:\cpp\void\dr\str32.h
; Line 191
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 192
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 193
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAIXZ ENDP					; str32::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAAMXZ PROC					; str32::operator float
; File W:\cpp\void\dr\str32.h
; Line 206
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 207
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
	vcvtsi2ss xmm0, xmm0, rax
; Line 208
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAAMXZ ENDP					; str32::operator float
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAANXZ PROC					; str32::operator double
; File W:\cpp\void\dr\str32.h
; Line 201
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 202
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
	vcvtsi2sd xmm0, xmm0, rax
; Line 203
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAANXZ ENDP					; str32::operator double
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAA_KXZ PROC					; str32::operator unsigned __int64
; File W:\cpp\void\dr\str32.h
; Line 186
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 187
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 188
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAA_KXZ ENDP					; str32::operator unsigned __int64
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 32
this$ = 80
??Bstr32@@QEAA_JXZ PROC					; str32::operator __int64
; File W:\cpp\void\dr\str32.h
; Line 181
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 182
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR this$[rsp]
	mov	ecx, 12
	rep movsb
	lea	rcx, QWORD PTR $T1[rsp]
	call	?strtoi@@YA_JUstr32@@@Z			; strtoi
; Line 183
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rsi
	ret	0
??Bstr32@@QEAA_JXZ ENDP					; str32::operator __int64
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
this$ = 8
??Bstr32@@QEAAPEADXZ PROC				; str32::operator char *
; File W:\cpp\void\dr\str32.h
; Line 176
	mov	QWORD PTR [rsp+8], rcx
; Line 177
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+4]
; Line 178
	ret	0
??Bstr32@@QEAAPEADXZ ENDP				; str32::operator char *
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Memr$ = 48
UserData$ = 80
Flags$ = 88
Alignment$ = 96
OldSize$ = 104
OldMemr$ = 112
NewSize$ = 120
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; HEAP_ALLOCATOR
; File W:\cpp\void\dr\cator.c
; Line 66
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
	mov	QWORD PTR Memr$[rsp], 0
; Line 68
	cmp	QWORD PTR NewSize$[rsp], 0
	je	$LN2@HEAP_ALLOC
; Line 69
	cmp	DWORD PTR Alignment$[rsp], 0
	je	SHORT $LN4@HEAP_ALLOC
; Line 70
	movsxd	rax, DWORD PTR Alignment$[rsp]
	mov	DWORD PTR [rsp+32], 70			; 00000046H
	lea	r9, OFFSET FLAT:$SG81231
	mov	r8, rax
	mov	rdx, QWORD PTR NewSize$[rsp]
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	QWORD PTR __imp__aligned_realloc_dbg
	mov	QWORD PTR Memr$[rsp], rax
; Line 71
	jmp	SHORT $LN5@HEAP_ALLOC
$LN4@HEAP_ALLOC:
; Line 72
	mov	rdx, QWORD PTR NewSize$[rsp]
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	QWORD PTR __imp_realloc
	mov	QWORD PTR Memr$[rsp], rax
$LN5@HEAP_ALLOC:
; Line 75
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN6@HEAP_ALLOC
; Line 76
	mov	rax, QWORD PTR OldSize$[rsp]
	mov	rcx, QWORD PTR NewSize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR OldSize$[rsp]
	mov	rdx, QWORD PTR Memr$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	xor	edx, edx
	call	memset
$LN6@HEAP_ALLOC:
; Line 78
	jmp	SHORT $LN3@HEAP_ALLOC
$LN2@HEAP_ALLOC:
; Line 79
	cmp	QWORD PTR OldMemr$[rsp], 0
	je	SHORT $LN7@HEAP_ALLOC
; Line 80
	cmp	DWORD PTR Alignment$[rsp], 0
	je	SHORT $LN8@HEAP_ALLOC
; Line 81
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	QWORD PTR __imp__aligned_free_dbg
; Line 82
	jmp	SHORT $LN9@HEAP_ALLOC
$LN8@HEAP_ALLOC:
; Line 83
	mov	rcx, QWORD PTR OldMemr$[rsp]
	call	QWORD PTR __imp_free
$LN9@HEAP_ALLOC:
$LN7@HEAP_ALLOC:
$LN3@HEAP_ALLOC:
; Line 88
	mov	rax, QWORD PTR Memr$[rsp]
; Line 89
	add	rsp, 72					; 00000048H
	ret	0
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; HEAP_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv191 = 48
Mem$ = 56
tv95 = 64
$T1 = 72
$T2 = 96
$T3 = 128
$T4 = 160
$T5 = 192
$T6 = 216
UserData$ = 272
Flags$ = 280
Alignment$ = 288
OldSize$ = 296
OldMemr$ = 304
NewSize$ = 312
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; STATIC_ALLOCATOR
; File W:\cpp\void\dr\cator.c
; Line 20
	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 248				; 000000f8H
; Line 34
	mov	eax, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN2@STATIC_ALL
	mov	eax, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	eax, DWORD PTR [rcx+rax]
	or	eax, 1
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	r8d, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	r8d, r8d
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [r8+rcx], eax
	mov	edx, 16384				; 00004000H
	xor	ecx, ecx
	call	?HeapAlloc@@YAPEAXH_K@Z			; HeapAlloc
	mov	QWORD PTR tv95[rsp], rax
	mov	eax, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	rdx, QWORD PTR tv95[rsp]
	mov	QWORD PTR [rax+rcx], rdx
$LN2@STATIC_ALL:
; Line 36
	mov	eax, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	movsxd	rax, DWORD PTR [rcx+rax]
	add	rax, QWORD PTR NewSize$[rsp]
	cmp	rax, 16384				; 00004000H
	jb	$LN3@STATIC_ALL
; Line 38
	cmp	QWORD PTR NewSize$[rsp], 16384		; 00004000H
	jb	SHORT $LN4@STATIC_ALL
; Line 40
	mov	DWORD PTR [rsp+32], 38			; 00000026H
	mov	r9d, 40					; 00000028H
	lea	r8, OFFSET FLAT:$SG81206
	lea	rdx, OFFSET FLAT:$SG81207
	lea	rcx, QWORD PTR $T5[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T2[rsp]
	lea	rcx, QWORD PTR $T1[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r8, OFFSET FLAT:$SG81205
	mov	edx, 6
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 41
	xor	eax, eax
	jmp	$LN1@STATIC_ALL
$LN4@STATIC_ALL:
; Line 44
	mov	eax, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rax+rcx], 1
$LN3@STATIC_ALL:
; Line 47
	mov	eax, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	eax, eax
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	edx, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	edx, edx
	mov	edi, DWORD PTR _tls_index
	mov	rsi, QWORD PTR gs:88
	mov	rdi, QWORD PTR [rsi+rdi*8]
	movsxd	rdx, DWORD PTR [rdi+rdx]
	add	rdx, QWORD PTR [rcx+rax]
	mov	rax, rdx
	mov	QWORD PTR Mem$[rsp], rax
; Line 48
	mov	rax, QWORD PTR NewSize$[rsp]
	add	rax, 63					; 0000003fH
	xor	edx, edx
	mov	ecx, 64					; 00000040H
	div	rcx
	imul	rax, rax, 64				; 00000040H
	mov	ecx, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	ecx, ecx
	mov	edx, DWORD PTR _tls_index
	mov	rdi, QWORD PTR gs:88
	mov	rdx, QWORD PTR [rdi+rdx*8]
	movsxd	rcx, DWORD PTR [rdx+rcx]
	add	rcx, rax
	mov	rax, rcx
	mov	ecx, DWORD PTR _tls_index
	mov	rdx, QWORD PTR gs:88
	mov	edi, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	mov	edi, edi
	mov	rcx, QWORD PTR [rdx+rcx*8]
	mov	DWORD PTR [rdi+rcx], eax
; Line 50
	cmp	QWORD PTR NewSize$[rsp], 0
	je	$LN5@STATIC_ALL
; Line 51
	cmp	QWORD PTR OldMemr$[rsp], 0
	je	$LN7@STATIC_ALL
; Line 52
	mov	DWORD PTR [rsp+32], 39			; 00000027H
	mov	r9d, 52					; 00000034H
	lea	r8, OFFSET FLAT:$SG81214
	lea	rdx, OFFSET FLAT:$SG81215
	lea	rcx, QWORD PTR $T6[rsp]
	call	?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ; TraceLocation
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rcx
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	lea	rax, OFFSET FLAT:$SG81212
	test	rax, rax
	jne	SHORT $LN10@STATIC_ALL
	mov	DWORD PTR tv191[rsp], 1
	jmp	SHORT $LN11@STATIC_ALL
$LN10@STATIC_ALL:
	mov	DWORD PTR tv191[rsp], 0
$LN11@STATIC_ALL:
	lea	rax, QWORD PTR $T4[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	lea	r9, OFFSET FLAT:$SG81211
	mov	r8d, DWORD PTR tv191[rsp]
	lea	rdx, OFFSET FLAT:$SG81213
	lea	rcx, QWORD PTR $T4[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN7@STATIC_ALL:
; Line 54
	mov	eax, DWORD PTR Flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN8@STATIC_ALL
; Line 55
	mov	rax, QWORD PTR OldSize$[rsp]
	mov	rcx, QWORD PTR NewSize$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR OldSize$[rsp]
	mov	rdx, QWORD PTR Mem$[rsp]
	add	rdx, rcx
	mov	rcx, rdx
	mov	r8, rax
	xor	edx, edx
	call	memset
$LN8@STATIC_ALL:
$LN5@STATIC_ALL:
; Line 60
	mov	rax, QWORD PTR Mem$[rsp]
$LN1@STATIC_ALL:
; Line 61
	add	rsp, 248				; 000000f8H
	pop	rdi
	pop	rsi
	ret	0
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; STATIC_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Memr$ = 64
?HeapFree@@YAXPEAX@Z PROC				; HeapFree
; File W:\cpp\void\dr\cator.c
; Line 93
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
	mov	QWORD PTR [rsp+40], 0
	mov	rax, QWORD PTR Memr$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8d, 16
	xor	edx, edx
	xor	ecx, ecx
	call	?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; HEAP_ALLOCATOR
; Line 94
	add	rsp, 56					; 00000038H
	ret	0
?HeapFree@@YAXPEAX@Z ENDP				; HeapFree
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
Zeroed$ = 80
Size$ = 88
?HeapAlloc@@YAPEAXH_K@Z PROC				; HeapAlloc
; File W:\cpp\void\dr\cator.c
; Line 98
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
	cmp	DWORD PTR Zeroed$[rsp], 0
	je	SHORT $LN3@HeapAlloc
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@HeapAlloc
$LN3@HeapAlloc:
	mov	DWORD PTR tv70[rsp], 0
$LN4@HeapAlloc:
	mov	rax, QWORD PTR Size$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 16
	mov	edx, DWORD PTR tv70[rsp]
	xor	ecx, ecx
	call	?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; HEAP_ALLOCATOR
; Line 100
	add	rsp, 72					; 00000048H
	ret	0
?HeapAlloc@@YAPEAXH_K@Z ENDP				; HeapAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv70 = 48
Zeroed$ = 80
Size$ = 88
?StaticAlloc@@YAPEAXH_K@Z PROC				; StaticAlloc
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H
	cmp	DWORD PTR Zeroed$[rsp], 0
	je	SHORT $LN3@StaticAllo
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@StaticAllo
$LN3@StaticAllo:
	mov	DWORD PTR tv70[rsp], 0
$LN4@StaticAllo:
	mov	rax, QWORD PTR Size$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8d, 16
	mov	edx, DWORD PTR tv70[rsp]
	xor	ecx, ecx
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; Line 106
	add	rsp, 72					; 00000048H
	ret	0
?StaticAlloc@@YAPEAXH_K@Z ENDP				; StaticAlloc
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
Output$ = 48
tv79 = 52
tv94 = 56
tv154 = 60
FormatArguments$ = 64
tv81 = 72
tv83 = 80
tv128 = 88
Formatted$1 = 96
tv152 = 104
tv150 = 112
tv148 = 120
$T2 = 128
$T3 = 160
Location$ = 224
TraceMessageKind$ = 232
FormatString$ = 240
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ PROC	; OutputTraceMessage
; File W:\cpp\void\dr\trace.c
; Line 22
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+32], r9
	push	rsi
	push	rdi
	sub	rsp, 200				; 000000c8H
; Line 25
	lea	rax, QWORD PTR FormatString$[rsp+8]
	mov	QWORD PTR FormatArguments$[rsp], rax
; Line 27
	mov	DWORD PTR Output$[rsp], 1
; Line 28
	cmp	QWORD PTR ?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA, 0
	je	$LN2@OutputTrac
; Line 29
	mov	rax, QWORD PTR ?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA
	mov	QWORD PTR tv83[rsp], rax
	mov	rax, QWORD PTR FormatArguments$[rsp]
	mov	QWORD PTR tv81[rsp], rax
	mov	rcx, QWORD PTR FormatString$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv79[rsp], eax
	lea	rax, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
	lea	rax, QWORD PTR $T3[rsp]
	lea	rcx, QWORD PTR $T2[rsp]
	mov	rdi, rax
	mov	rsi, rcx
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR tv81[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR FormatString$[rsp]
	mov	r8d, DWORD PTR tv79[rsp]
	mov	edx, DWORD PTR TraceMessageKind$[rsp]
	lea	rcx, QWORD PTR $T3[rsp]
	call	QWORD PTR tv83[rsp]
	mov	DWORD PTR Output$[rsp], eax
$LN2@OutputTrac:
; Line 33
	cmp	DWORD PTR Output$[rsp], 0
	je	$LN3@OutputTrac
; Line 35
	mov	rax, QWORD PTR FormatArguments$[rsp]
	mov	QWORD PTR tv128[rsp], rax
	mov	rcx, QWORD PTR FormatString$[rsp]
	call	QWORD PTR __imp_wcslen
	mov	DWORD PTR tv94[rsp], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR tv128[rsp]
	mov	rdx, QWORD PTR FormatString$[rsp]
	mov	ecx, DWORD PTR tv94[rsp]
	call	?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ; FormatExtendedW
	mov	QWORD PTR Formatted$1[rsp], rax
; Line 37
	call	?GetThreadID@@YAHXZ			; GetThreadID
	mov	DWORD PTR tv154[rsp], eax
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv152[rsp], rax
	mov	rax, QWORD PTR Location$[rsp]
	mov	rdx, QWORD PTR [rax]
	mov	ecx, -1
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	QWORD PTR tv150[rsp], rax
	mov	ecx, DWORD PTR TraceMessageKind$[rsp]
	call	?TraceMessageKindToString@@YAPEB_WH@Z	; TraceMessageKindToString
	mov	QWORD PTR tv148[rsp], rax
	mov	rax, QWORD PTR Formatted$1[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR tv154[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR tv152[rsp]
	mov	r8, QWORD PTR tv150[rsp]
	mov	rdx, QWORD PTR tv148[rsp]
	lea	rcx, OFFSET FLAT:$SG81286
	call	?FormatW@@YAPEA_WPEB_WZZ		; FormatW
	mov	rcx, rax
	call	?OutputW@@YAXPEB_W@Z			; OutputW
$LN3@OutputTrac:
; Line 42
	mov	QWORD PTR FormatArguments$[rsp], 0
; Line 43
	add	rsp, 200				; 000000c8H
	pop	rdi
	pop	rsi
	ret	0
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ENDP	; OutputTraceMessage
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
$T1 = 0
__$ReturnAddress$ = 64
File$ = 72
Func$ = 80
Line$ = 88
Guid$ = 96
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z PROC	; TraceLocation
; File W:\cpp\void\dr\trace.h
; Line 40
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
; Line 43
	mov	rax, QWORD PTR File$[rsp]
	mov	QWORD PTR $T1[rsp], rax
	mov	rax, QWORD PTR Func$[rsp]
	mov	QWORD PTR $T1[rsp+8], rax
	mov	eax, DWORD PTR Line$[rsp]
	mov	DWORD PTR $T1[rsp+16], eax
	mov	eax, DWORD PTR Guid$[rsp]
	mov	DWORD PTR $T1[rsp+20], eax
	lea	rax, QWORD PTR $T1[rsp]
	mov	rdi, QWORD PTR __$ReturnAddress$[rsp]
	mov	rsi, rax
	mov	ecx, 24
	rep movsb
	mov	rax, QWORD PTR __$ReturnAddress$[rsp]
; Line 46
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ENDP	; TraceLocation
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
CounterB$ = 48
tv68 = 56
CounterE$ = 64
$T1 = 80
this$ = 144
??1_TRACE_BLOCK@@QEAA@XZ PROC				; _TRACE_BLOCK::~_TRACE_BLOCK
; File W:\cpp\void\dr\trace.c
; Line 54
$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 120				; 00000078H
	call	?GetPerformanceCounter@@YA_KXZ		; GetPerformanceCounter
	mov	QWORD PTR CounterB$[rsp], rax
; Line 55
	mov	rax, QWORD PTR this$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	rcx, QWORD PTR CounterB$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	test	rax, rax
	jl	SHORT $LN5@TRACE_BLOC
	vcvtsi2sd xmm0, xmm0, rax
	jmp	SHORT $LN6@TRACE_BLOC
$LN5@TRACE_BLOC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	vcvtsi2sd xmm1, xmm1, rcx
	vaddsd	xmm1, xmm1, xmm1
	vmovupd	xmm0, xmm1
$LN6@TRACE_BLOC:
	vmovsd	xmm1, QWORD PTR __real@408f400000000000
	vmulsd	xmm0, xmm1, xmm0
	vmovsd	QWORD PTR tv68[rsp], xmm0
	call	?GetPerformanceFrequency@@YA_KXZ	; GetPerformanceFrequency
	test	rax, rax
	jl	SHORT $LN3@TRACE_BLOC
	vcvtsi2sd xmm0, xmm0, rax
	jmp	SHORT $LN4@TRACE_BLOC
$LN3@TRACE_BLOC:
	mov	rcx, rax
	shr	rcx, 1
	and	rax, 1
	or	rcx, rax
	vcvtsi2sd xmm1, xmm1, rcx
	vaddsd	xmm1, xmm1, xmm1
	vmovupd	xmm0, xmm1
$LN4@TRACE_BLOC:
	vmovsd	xmm1, QWORD PTR tv68[rsp]
	vdivsd	xmm0, xmm1, xmm0
	vmovsd	QWORD PTR CounterE$[rsp], xmm0
; Line 57
	lea	rax, QWORD PTR $T1[rsp]
	mov	rcx, QWORD PTR this$[rsp]
	mov	rdi, rax
	lea	rsi, QWORD PTR [rcx+8]
	mov	ecx, 24
	rep movsb
	vmovsd	xmm0, QWORD PTR CounterE$[rsp]
	vmovsd	QWORD PTR [rsp+32], xmm0
	mov	rax, QWORD PTR this$[rsp]
	mov	r9, QWORD PTR [rax]
	lea	r8, OFFSET FLAT:$SG81300
	mov	edx, 2
	lea	rcx, QWORD PTR $T1[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 58
	add	rsp, 120				; 00000078H
	pop	rdi
	pop	rsi
	ret	0
??1_TRACE_BLOCK@@QEAA@XZ ENDP				; _TRACE_BLOCK::~_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
this$ = 64
Location$ = 72
FriendlyName$ = 80
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z PROC	; _TRACE_BLOCK::_TRACE_BLOCK
; File W:\cpp\void\dr\trace.c
; Line 48
$LN3:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rsi
	push	rdi
	sub	rsp, 40					; 00000028H
	mov	rax, QWORD PTR this$[rsp]
	lea	rdi, QWORD PTR [rax+8]
	mov	rsi, QWORD PTR Location$[rsp]
	mov	ecx, 24
	rep movsb
; Line 49
	mov	rax, QWORD PTR this$[rsp]
	mov	rcx, QWORD PTR FriendlyName$[rsp]
	mov	QWORD PTR [rax], rcx
; Line 50
	call	?GetPerformanceCounter@@YA_KXZ		; GetPerformanceCounter
	mov	rcx, QWORD PTR this$[rsp]
	mov	QWORD PTR [rcx+32], rax
; Line 51
	mov	rax, QWORD PTR this$[rsp]
	add	rsp, 40					; 00000028H
	pop	rdi
	pop	rsi
	ret	0
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z ENDP	; _TRACE_BLOCK::_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv73 = 0
s$ = 4
x$ = 8
tv88 = 16
tv134 = 24
tv148 = 32
base$ = 64
res$ = 72
min$ = 80
max$ = 88
?rx7__stoi@@YAHHPEA_JPEBD1@Z PROC			; rx7__stoi
; File W:\cpp\void\dr\rx7-text.h
; Line 125
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 56					; 00000038H
; Line 126
	mov	QWORD PTR x$[rsp], 0
; Line 127
	mov	DWORD PTR s$[rsp], 1
$LN2@rx7__stoi:
; Line 131
	mov	rax, QWORD PTR max$[rsp]
	cmp	QWORD PTR min$[rsp], rax
	je	SHORT $LN7@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 32					; 00000020H
	je	SHORT $LN6@rx7__stoi
$LN7@rx7__stoi:
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 43					; 0000002bH
	je	SHORT $LN6@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN3@rx7__stoi
$LN6@rx7__stoi:
; Line 134
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 45					; 0000002dH
	jne	SHORT $LN15@rx7__stoi
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN16@rx7__stoi
$LN15@rx7__stoi:
	mov	DWORD PTR tv73[rsp], 1
$LN16@rx7__stoi:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR s$[rsp], eax
; Line 135
	mov	rax, QWORD PTR min$[rsp]
	inc	rax
	mov	QWORD PTR min$[rsp], rax
; Line 136
	jmp	SHORT $LN2@rx7__stoi
$LN3@rx7__stoi:
$LN4@rx7__stoi:
; Line 139
	mov	rax, QWORD PTR max$[rsp]
	cmp	QWORD PTR min$[rsp], rax
	jae	$LN5@rx7__stoi
; Line 140
	cmp	DWORD PTR base$[rsp], 10
	jl	SHORT $LN8@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN8@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 57					; 00000039H
	jg	SHORT $LN8@rx7__stoi
; Line 141
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR min$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-48]
	mov	QWORD PTR tv88[rsp], rax
	mov	rax, QWORD PTR min$[rsp]
	inc	rax
	mov	QWORD PTR min$[rsp], rax
	mov	rax, QWORD PTR tv88[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 142
	jmp	$LN9@rx7__stoi
$LN8@rx7__stoi:
; Line 143
	cmp	DWORD PTR base$[rsp], 16
	jne	SHORT $LN10@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 97					; 00000061H
	jl	SHORT $LN10@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 102				; 00000066H
	jg	SHORT $LN10@rx7__stoi
; Line 144
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR min$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-87]
	mov	QWORD PTR tv134[rsp], rax
	mov	rax, QWORD PTR min$[rsp]
	inc	rax
	mov	QWORD PTR min$[rsp], rax
	mov	rax, QWORD PTR tv134[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 145
	jmp	SHORT $LN11@rx7__stoi
$LN10@rx7__stoi:
; Line 146
	cmp	DWORD PTR base$[rsp], 16
	jne	SHORT $LN12@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 65					; 00000041H
	jl	SHORT $LN12@rx7__stoi
	mov	rax, QWORD PTR min$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 70					; 00000046H
	jg	SHORT $LN12@rx7__stoi
; Line 147
	movsxd	rax, DWORD PTR base$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR min$[rsp]
	movsx	rcx, BYTE PTR [rcx]
	lea	rax, QWORD PTR [rax+rcx-55]
	mov	QWORD PTR tv148[rsp], rax
	mov	rax, QWORD PTR min$[rsp]
	inc	rax
	mov	QWORD PTR min$[rsp], rax
	mov	rax, QWORD PTR tv148[rsp]
	mov	QWORD PTR x$[rsp], rax
; Line 148
	jmp	SHORT $LN13@rx7__stoi
$LN12@rx7__stoi:
; Line 149
	jmp	SHORT $LN5@rx7__stoi
$LN13@rx7__stoi:
$LN11@rx7__stoi:
$LN9@rx7__stoi:
; Line 151
	jmp	$LN4@rx7__stoi
$LN5@rx7__stoi:
; Line 153
	movsxd	rax, DWORD PTR s$[rsp]
	mov	rcx, QWORD PTR x$[rsp]
	imul	rcx, rax
	mov	rax, rcx
	mov	rcx, QWORD PTR res$[rsp]
	mov	QWORD PTR [rcx], rax
; Line 155
	mov	rax, QWORD PTR min$[rsp]
	mov	rcx, QWORD PTR max$[rsp]
	sub	rcx, rax
	mov	rax, rcx
; Line 156
	add	rsp, 56					; 00000038H
	ret	0
?rx7__stoi@@YAHHPEA_JPEBD1@Z ENDP			; rx7__stoi
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
_Buffer$ = 64
_Format$ = 72
sprintf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1771
$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 56					; 00000038H
; Line 1774
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 1776
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 1778
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 1779
	mov	eax, DWORD PTR _Result$[rsp]
; Line 1780
	add	rsp, 56					; 00000038H
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT vsprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
vsprintf_s PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1512
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1513
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_s_l
; Line 1514
	add	rsp, 56					; 00000038H
	ret	0
vsprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Result$ = 48
tv73 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsprintf_s_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1490
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1491
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vsprintf_s
	mov	DWORD PTR _Result$[rsp], eax
; Line 1495
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsprintf_s
	mov	DWORD PTR tv73[rsp], -1
	jmp	SHORT $LN4@vsprintf_s
$LN3@vsprintf_s:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv73[rsp], eax
$LN4@vsprintf_s:
	mov	eax, DWORD PTR tv73[rsp]
; Line 1496
	add	rsp, 72					; 00000048H
	ret	0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1458
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1459
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, -1
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnprintf_l
; Line 1460
	add	rsp, 56					; 00000038H
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1391
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1392
	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp___stdio_common_vsprintf
	mov	DWORD PTR _Result$[rsp], eax
; Line 1396
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[rsp]
; Line 1397
	add	rsp, 72					; 00000048H
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 40
tv77 = 48
tv75 = 56
_Format$ = 80
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	sub	rsp, 72					; 00000048H
; Line 959
	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax
; Line 960
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR tv77[rsp], rax
	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	QWORD PTR tv75[rsp], rax
	mov	r9, QWORD PTR tv77[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR tv75[rsp]
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax
; Line 961
	mov	QWORD PTR _ArgList$[rsp], 0
; Line 962
	mov	eax, DWORD PTR _Result$[rsp]
; Line 963
	add	rsp, 72					; 00000048H
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 645
	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf
; Line 646
	add	rsp, 56					; 00000038H
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnwprintf
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
_vsnwprintf PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1129
$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H
; Line 1130
	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	xor	r9d, r9d
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _BufferCount$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnwprintf_l
; Line 1131
	add	rsp, 56					; 00000038H
	ret	0
_vsnwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _vsnwprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnwprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1061
$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H
; Line 1062
	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp___stdio_common_vswprintf
	mov	DWORD PTR _Result$[rsp], eax
; Line 1066
	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnwprintf
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnwprintf
$LN3@vsnwprintf:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnwprintf:
	mov	eax, DWORD PTR tv74[rsp]
; Line 1067
	add	rsp, 72					; 00000048H
	ret	0
_vsnwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
