; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?lan_one@@3T__m256@@B DD 03f800000r		; 1	; lan_one
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
?lan_zro@@3T__m256@@B DD 000000000r		; 0	; lan_zro
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnwprintf_l
PUBLIC	_vsnwprintf
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsprintf_s_l
PUBLIC	vsprintf_s
PUBLIC	??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z	; _TRACE_BLOCK::_TRACE_BLOCK
PUBLIC	??1_TRACE_BLOCK@@QEAA@XZ			; _TRACE_BLOCK::~_TRACE_BLOCK
PUBLIC	??Bstr32@@QEAAPEADXZ				; str32::operator char *
PUBLIC	??Bstr32@@QEAA_JXZ				; str32::operator __int64
PUBLIC	??Bstr32@@QEAA_KXZ				; str32::operator unsigned __int64
PUBLIC	??Bstr32@@QEAANXZ				; str32::operator double
PUBLIC	??Bstr32@@QEAAMXZ				; str32::operator float
PUBLIC	??Bstr32@@QEAAIXZ				; str32::operator unsigned int
PUBLIC	??Bstr32@@QEAAHXZ				; str32::operator int
PUBLIC	??7str32@@QEAAHXZ				; str32::operator!
PUBLIC	main
PUBLIC	?xorshift32@@YAII@Z				; xorshift32
PUBLIC	?rand_f@@YAMMM@Z				; rand_f
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@ ; `string'
PUBLIC	??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@ ; `string'
PUBLIC	??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@ ; `string'
PUBLIC	??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@	; `string'
PUBLIC	??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@ ; `string'
PUBLIC	??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@ ; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs@			; `string'
PUBLIC	??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@	; `string'
PUBLIC	??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@ ; `string'
PUBLIC	??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@ ; `string'
PUBLIC	??_C@_0L@GMPLCCII@user32?4dll@			; `string'
PUBLIC	??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@ ; `string'
PUBLIC	??_C@_0BD@ENICNPLM@SetProcessDPIAware@		; `string'
PUBLIC	??_C@_1DC@NCJOBAHH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_0N@LDNIACEG@LoadFileData@			; `string'
PUBLIC	??_C@_1DC@BNICGKJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAL?$AAo?$AAa?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@ ; `string'
PUBLIC	??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@		; `string'
PUBLIC	??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@ ; `string'
PUBLIC	??_C@_0CI@NPMNNLNI@?$CB?$CCnot?5supported?5for?5static?5allo@ ; `string'
PUBLIC	??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@ ; `string'
PUBLIC	??_C@_1DO@DEICCEEP@?$AAK?$AAL?$AAA?$AAR?$AAK?$AA_?$AAA?$AAP?$AAP?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAs@ ; `string'
PUBLIC	??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@ ; `string'
PUBLIC	??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@ ; `string'
PUBLIC	??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@ ; `string'
PUBLIC	??_C@_08CHCJAPEF@vec_add_@			; `string'
PUBLIC	??_C@_07KBNDKOJG@vec_dot@			; `string'
PUBLIC	??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@ ; `string'
PUBLIC	??_C@_08ENKIOJLC@new_mat_@			; `string'
PUBLIC	??_C@_0BN@EEIDJDDN@data?2train?9labels?4idx1?9ubyte@ ; `string'
PUBLIC	??_C@_0BN@FIFMGHNF@data?2train?9images?4idx3?9ubyte@ ; `string'
PUBLIC	??_C@_1M@CAIDPHAA@?$AAT?$AAI?$AAM?$AAE?$AAD@	; `string'
PUBLIC	??_C@_04KLKHHPIG@MAIN@				; `string'
PUBLIC	??_C@_08KGMLKAKE@num?9ai?4c@			; `string'
PUBLIC	??_C@_1CE@ELMGMFNF@?$AAa?$AAc?$AAc?$AAu?$AAr?$AAa?$AAc?$AAy?$AA?5?$AA?$CF?$AA?$CF?$AA?$CF?$AA?9?$AA3?$AA?4@ ; `string'
PUBLIC	__real@2f800000
PUBLIC	__real@3b808081
PUBLIC	__real@3dcccccd
PUBLIC	__real@3f800000
PUBLIC	__real@408f400000000000
PUBLIC	__real@42c80000
PUBLIC	__real@bf800000
PUBLIC	__xmm@3b8080813b8080813b8080813b808081
PUBLIC	__xmm@80000000800000008000000080000000
PUBLIC	__ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vswprintf:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__stdio_common_vsprintf_s:PROC
EXTRN	free:PROC
EXTRN	realloc:PROC
EXTRN	_aligned_free:PROC
EXTRN	_aligned_malloc:PROC
EXTRN	_aligned_realloc:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_DebugBreak:PROC
EXTRN	__imp_OutputDebugStringW:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_MessageBoxA:PROC
EXTRN	__imp_MultiByteToWideChar:PROC
EXTRN	__imp_AllocConsole:PROC
EXTRN	__imp_WriteConsoleW:PROC
EXTRN	__imp_timeBeginPeriod:PROC
EXTRN	__imp_timeEndPeriod:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__vdecl_expf8:PROC
EXTRN	memset:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA DQ 01H DUP (?) ; Global_TraceMessageHook
?ARGUMENTS@@3U_ARGUMENTS@@A DB 030H DUP (?)		; ARGUMENTS
?SYSTEM@@3U_SYSTEM@@A DB 048H DUP (?)			; SYSTEM
?PROCESS@@3U_PROCESS@@A DB 088H DUP (?)			; PROCESS
_BSS	ENDS
;	COMDAT ?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
_TLS	SEGMENT
?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA DQ 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::Bed
_TLS	ENDS
;	COMDAT ?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
_TLS	SEGMENT
?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA DD 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::$S1
_TLS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf_l DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$_vsnwprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$_vsnwprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+80
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsprintf_s DD imagerel $LN6
	DD	imagerel $LN6+99
	DD	imagerel $unwind$vsprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?rx7__stoi@@YAHHPEA_JPEBD1@Z DD imagerel ?rx7__stoi@@YAHHPEA_JPEBD1@Z
	DD	imagerel ?rx7__stoi@@YAHHPEA_JPEBD1@Z+206
	DD	imagerel $unwind$?rx7__stoi@@YAHHPEA_JPEBD1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD imagerel $LN6
	DD	imagerel $LN6+60
	DD	imagerel $unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_TRACE_BLOCK@@QEAA@XZ DD imagerel $LN12
	DD	imagerel $LN12+187
	DD	imagerel $unwind$??1_TRACE_BLOCK@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+133
	DD	imagerel $chain$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+133
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+432
	DD	imagerel $chain$1$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+432
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+484
	DD	imagerel $chain$2$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+484
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+540
	DD	imagerel $chain$3$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+192
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z+192
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+247
	DD	imagerel $chain$0$?StaticAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z+247
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+269
	DD	imagerel $chain$1$?StaticAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+22
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z+22
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+75
	DD	imagerel $chain$0$?HeapAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z+75
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+88
	DD	imagerel $chain$1$?HeapAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+200
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+200
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+338
	DD	imagerel $chain$0$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+338
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+358
	DD	imagerel $chain$1$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+35
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+35
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+113
	DD	imagerel $chain$0$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+113
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+169
	DD	imagerel $chain$1$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAA_JXZ DD imagerel $LN33
	DD	imagerel $LN33+157
	DD	imagerel $unwind$??Bstr32@@QEAA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAA_KXZ DD imagerel $LN33
	DD	imagerel $LN33+157
	DD	imagerel $unwind$??Bstr32@@QEAA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAANXZ DD imagerel $LN33
	DD	imagerel $LN33+151
	DD	imagerel $unwind$??Bstr32@@QEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAAMXZ DD imagerel $LN33
	DD	imagerel $LN33+151
	DD	imagerel $unwind$??Bstr32@@QEAAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAAIXZ DD imagerel $LN33
	DD	imagerel $LN33+157
	DD	imagerel $unwind$??Bstr32@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAAHXZ DD imagerel $LN33
	DD	imagerel $LN33+157
	DD	imagerel $unwind$??Bstr32@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MAIN@@YAXXZ DD imagerel ?MAIN@@YAXXZ
	DD	imagerel ?MAIN@@YAXXZ+2389
	DD	imagerel $unwind$?MAIN@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetPerformanceFrequency@@YA_KXZ DD imagerel ?GetPerformanceFrequency@@YA_KXZ
	DD	imagerel ?GetPerformanceFrequency@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceFrequency@@YA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetPerformanceCounter@@YA_KXZ DD imagerel ?GetPerformanceCounter@@YA_KXZ
	DD	imagerel ?GetPerformanceCounter@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceCounter@@YA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Widen@@YAPEA_WHPEBD@Z DD imagerel ?Widen@@YAPEA_WHPEBD@Z
	DD	imagerel ?Widen@@YAPEA_WHPEBD@Z+266
	DD	imagerel $unwind$?Widen@@YAPEA_WHPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?OutputW@@YAXPEB_W@Z DD imagerel ?OutputW@@YAXPEB_W@Z
	DD	imagerel ?OutputW@@YAXPEB_W@Z+95
	DD	imagerel $unwind$?OutputW@@YAXPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
	DD	imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z+355
	DD	imagerel $unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+189
	DD	imagerel $chain$1$?LoadFileData@@YAPEAXPEAIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+189
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+357
	DD	imagerel $chain$2$?LoadFileData@@YAPEAXPEAIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+357
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+476
	DD	imagerel $chain$3$?LoadFileData@@YAPEAXPEAIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+552
	DD	imagerel $chain$4$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+552
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+609
	DD	imagerel $chain$5$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+609
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+624
	DD	imagerel $chain$6$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
	DD	imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z+174
	DD	imagerel $unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
	DD	imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z+181
	DD	imagerel $unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FormatA@@YAPEADPEBDZZ DD imagerel ?FormatA@@YAPEADPEBDZZ
	DD	imagerel ?FormatA@@YAPEADPEBDZZ+161
	DD	imagerel $unwind$?FormatA@@YAPEADPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FormatW@@YAPEA_WPEB_WZZ DD imagerel ?FormatW@@YAPEA_WPEB_WZZ
	DD	imagerel ?FormatW@@YAPEA_WPEB_WZZ+169
	DD	imagerel $unwind$?FormatW@@YAPEA_WPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PlatformInitialize@@YAXXZ DD imagerel ?PlatformInitialize@@YAXXZ
	DD	imagerel ?PlatformInitialize@@YAXXZ+145
	DD	imagerel $unwind$?PlatformInitialize@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?PlatformInitialize@@YAXXZ DD imagerel ?PlatformInitialize@@YAXXZ+145
	DD	imagerel ?PlatformInitialize@@YAXXZ+248
	DD	imagerel $chain$1$?PlatformInitialize@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?PlatformInitialize@@YAXXZ DD imagerel ?PlatformInitialize@@YAXXZ+248
	DD	imagerel ?PlatformInitialize@@YAXXZ+253
	DD	imagerel $chain$2$?PlatformInitialize@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN7
	DD	imagerel $LN7+35
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?drvs__dot@@YAXIPEAM00@Z DD imagerel ?drvs__dot@@YAXIPEAM00@Z
	DD	imagerel ?drvs__dot@@YAXIPEAM00@Z+121
	DD	imagerel $unwind$?drvs__dot@@YAXIPEAM00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_vec@@YA?AUai_vec@@H@Z DD imagerel ?new_vec@@YA?AUai_vec@@H@Z
	DD	imagerel ?new_vec@@YA?AUai_vec@@H@Z+121
	DD	imagerel $unwind$?new_vec@@YA?AUai_vec@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z DD imagerel ?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z
	DD	imagerel ?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z+242
	DD	imagerel $unwind$?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_add_@@YQ?AUai_vec@@U1@00@Z DD imagerel ?vec_add_@@YQ?AUai_vec@@U1@00@Z
	DD	imagerel ?vec_add_@@YQ?AUai_vec@@U1@00@Z+221
	DD	imagerel $unwind$?vec_add_@@YQ?AUai_vec@@U1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_sig_@@YQ?AUai_vec@@U1@0@Z DD imagerel ?vec_sig_@@YQ?AUai_vec@@U1@0@Z
	DD	imagerel ?vec_sig_@@YQ?AUai_vec@@U1@0@Z+156
	DD	imagerel $unwind$?vec_sig_@@YQ?AUai_vec@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+30
	DD	imagerel $unwind$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+30
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+132
	DD	imagerel $chain$1$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+132
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+164
	DD	imagerel $chain$2$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_dot@@YQMUai_vec@@0@Z DD imagerel ?vec_dot@@YQMUai_vec@@0@Z
	DD	imagerel ?vec_dot@@YQMUai_vec@@0@Z+249
	DD	imagerel $unwind$?vec_dot@@YQMUai_vec@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_mat_@@YA?AUai_mat@@HHHH@Z DD imagerel ?new_mat_@@YA?AUai_mat@@HHHH@Z
	DD	imagerel ?new_mat_@@YA?AUai_mat@@HHHH@Z+193
	DD	imagerel $unwind$?new_mat_@@YA?AUai_mat@@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mat_rnd@@YAXUai_mat@@@Z DD imagerel ?mat_rnd@@YAXUai_mat@@@Z
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+46
	DD	imagerel $unwind$?mat_rnd@@YAXUai_mat@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?mat_rnd@@YAXUai_mat@@@Z DD imagerel ?mat_rnd@@YAXUai_mat@@@Z+46
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+194
	DD	imagerel $chain$1$?mat_rnd@@YAXUai_mat@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?mat_rnd@@YAXUai_mat@@@Z DD imagerel ?mat_rnd@@YAXUai_mat@@@Z+194
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+203
	DD	imagerel $chain$2$?mat_rnd@@YAXUai_mat@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z DD imagerel ?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z
	DD	imagerel ?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z+418
	DD	imagerel $unwind$?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_lay@@YA?AUai_lay@@HH@Z DD imagerel ?new_lay@@YA?AUai_lay@@HH@Z
	DD	imagerel ?new_lay@@YA?AUai_lay@@HH@Z+789
	DD	imagerel $unwind$?new_lay@@YA?AUai_lay@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?ai_net_ini@@YAXPEAUai_net@@HHH@Z DD imagerel ?ai_net_ini@@YAXPEAUai_net@@HHH@Z
	DD	imagerel ?ai_net_ini@@YAXPEAUai_net@@HHH@Z+200
	DD	imagerel $unwind$?ai_net_ini@@YAXPEAUai_net@@HHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z DD imagerel ?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z
	DD	imagerel ?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z+746
	DD	imagerel $unwind$?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lay_upd@@YAXPEAUai_lay@@M@Z DD imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+225
	DD	imagerel $unwind$?lay_upd@@YAXPEAUai_lay@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z DD imagerel ?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z
	DD	imagerel ?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z+1313
	DD	imagerel $unwind$?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+130
	DD	imagerel $unwind$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+130
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+374
	DD	imagerel $chain$2$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+374
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+482
	DD	imagerel $chain$3$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+482
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+621
	DD	imagerel $chain$4$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+621
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+727
	DD	imagerel $chain$5$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z
	DD	imagerel ?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z+1357
	DD	imagerel $unwind$?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT ?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
_TLS	SEGMENT
?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA DD 00H ; `STATIC_ALLOCATOR'::`2'::Min
_TLS	ENDS
;	COMDAT __ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
CONST	SEGMENT
__ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000 DB 00H
	DB	00H, 080H, '?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?', 00H, 00H
	DB	080H, '?', 00H, 00H, 080H, '?', 00H, 00H, 080H, '?', 00H, 00H, 080H
	DB	'?', 00H, 00H, 080H, '?'
CONST	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@3b8080813b8080813b8080813b808081
CONST	SEGMENT
__xmm@3b8080813b8080813b8080813b808081 DB 081H, 080H, 080H, ';', 081H, 080H
	DB	080H, ';', 081H, 080H, 080H, ';', 081H, 080H, 080H, ';'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@2f800000
CONST	SEGMENT
__real@2f800000 DD 02f800000r			; 2.32831e-10
CONST	ENDS
;	COMDAT ??_C@_1CE@ELMGMFNF@?$AAa?$AAc?$AAc?$AAu?$AAr?$AAa?$AAc?$AAy?$AA?5?$AA?$CF?$AA?$CF?$AA?$CF?$AA?9?$AA3?$AA?4@
CONST	SEGMENT
??_C@_1CE@ELMGMFNF@?$AAa?$AAc?$AAc?$AAu?$AAr?$AAa?$AAc?$AAy?$AA?5?$AA?$CF?$AA?$CF?$AA?$CF?$AA?9?$AA3?$AA?4@ DB 'a'
	DB	00H, 'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'a', 00H, 'c', 00H
	DB	'y', 00H, ' ', 00H, '%', 00H, '%', 00H, '%', 00H, '-', 00H, '3'
	DB	00H, '.', 00H, '2', 00H, 'f', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KGMLKAKE@num?9ai?4c@
CONST	SEGMENT
??_C@_08KGMLKAKE@num?9ai?4c@ DB 'num-ai.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLKHHPIG@MAIN@
CONST	SEGMENT
??_C@_04KLKHHPIG@MAIN@ DB 'MAIN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@CAIDPHAA@?$AAT?$AAI?$AAM?$AAE?$AAD@
CONST	SEGMENT
??_C@_1M@CAIDPHAA@?$AAT?$AAI?$AAM?$AAE?$AAD@ DB 'T', 00H, 'I', 00H, 'M', 00H
	DB	'E', 00H, 'D', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FIFMGHNF@data?2train?9images?4idx3?9ubyte@
CONST	SEGMENT
??_C@_0BN@FIFMGHNF@data?2train?9images?4idx3?9ubyte@ DB 'data\train-image'
	DB	's.idx3-ubyte', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EEIDJDDN@data?2train?9labels?4idx1?9ubyte@
CONST	SEGMENT
??_C@_0BN@EEIDJDDN@data?2train?9labels?4idx1?9ubyte@ DB 'data\train-label'
	DB	's.idx1-ubyte', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENKIOJLC@new_mat_@
CONST	SEGMENT
??_C@_08ENKIOJLC@new_mat_@ DB 'new_mat_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@
CONST	SEGMENT
??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@ DB 'm'
	DB	00H, 'e', 00H, 'm', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	' ', 00H, 's', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, '/', 00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'p', 00H
	DB	'a', 00H, 'd', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'n', 00H, 'e', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'a', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBNDKOJG@vec_dot@
CONST	SEGMENT
??_C@_07KBNDKOJG@vec_dot@ DB 'vec_dot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CHCJAPEF@vec_add_@
CONST	SEGMENT
??_C@_08CHCJAPEF@vec_add_@ DB 'vec_add_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
CONST	SEGMENT
??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@ DB 'lhs.len == rhs.len', 00H ; `string'
CONST	ENDS
;	COMDAT ?state@?1??rand_f@@YAMMM@Z@4IA
_DATA	SEGMENT
?state@?1??rand_f@@YAMMM@Z@4IA DD 035c0ba7eH		; `rand_f'::`2'::state
_DATA	ENDS
;	COMDAT ??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
CONST	SEGMENT
??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@ DB 'W:\cpp\void\dr'
	DB	'-ai\dr-vec.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@
CONST	SEGMENT
??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@ DB 'T'
	DB	00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'B', 00H
	DB	'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, ' ', 00H, '[', 00H, '%'
	DB	00H, 's', 00H, ']', 00H, ' ', 00H, '%', 00H, 'f', 00H, '(', 00H
	DB	'm', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@DEICCEEP@?$AAK?$AAL?$AAA?$AAR?$AAK?$AA_?$AAA?$AAP?$AAP?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAs@
CONST	SEGMENT
??_C@_1DO@DEICCEEP@?$AAK?$AAL?$AAA?$AAR?$AAK?$AA_?$AAA?$AAP?$AAP?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAs@ DB 'K'
	DB	00H, 'L', 00H, 'A', 00H, 'R', 00H, 'K', 00H, '_', 00H, 'A', 00H
	DB	'P', 00H, 'P', 00H, ' ', 00H, '%', 00H, 's', 00H, ' ', 00H, '%'
	DB	00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@
CONST	SEGMENT
??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@ DB 'I'
	DB	00H, 'N', 00H, 'V', 00H, 'A', 00H, 'L', 00H, 'I', 00H, 'D', 00H
	DB	'_', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, '_'
	DB	00H, 'M', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'A', 00H, 'G', 00H
	DB	'E', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@
CONST	SEGMENT
??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@ DB 'P'
	DB	00H, 'E', 00H, 'D', 00H, 'A', 00H, 'N', 00H, 'T', 00H, 'I', 00H
	DB	'C', 00H, ':', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@ DB 'V'
	DB	00H, 'E', 00H, 'R', 00H, 'B', 00H, 'O', 00H, 'S', 00H, 'E', 00H
	DB	':', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'F'
	DB	00H, 'A', 00H, 'T', 00H, 'A', 00H, 'L', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@ DB 'W'
	DB	00H, 'A', 00H, 'R', 00H, 'N', 00H, 'I', 00H, 'N', 00H, 'G', 00H
	DB	':', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'I'
	DB	00H, 'N', 00H, 'F', 00H, 'O', 00H, ':', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'D'
	DB	00H, 'E', 00H, 'B', 00H, 'U', 00H, 'G', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'T'
	DB	00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NPMNNLNI@?$CB?$CCnot?5supported?5for?5static?5allo@
CONST	SEGMENT
??_C@_0CI@NPMNNLNI@?$CB?$CCnot?5supported?5for?5static?5allo@ DB '!"not s'
	DB	'upported for static allocations"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@
CONST	SEGMENT
??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@ DB 'W:\cpp\void\dr/cator'
	DB	'.c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@
CONST	SEGMENT
??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@ DB 'STATIC_ALLOCATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@
CONST	SEGMENT
??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	'o', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@BNICGKJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAL?$AAo?$AAa?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1DC@BNICGKJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAL?$AAo?$AAa?$AAd?$AA?5@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'T', 00H, 'o', 00H, ' ', 00H, 'L', 00H, 'o', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDNIACEG@LoadFileData@
CONST	SEGMENT
??_C@_0N@LDNIACEG@LoadFileData@ DB 'LoadFileData', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@NCJOBAHH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1DC@NCJOBAHH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'T', 00H, 'o', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ENICNPLM@SetProcessDPIAware@
CONST	SEGMENT
??_C@_0BD@ENICNPLM@SetProcessDPIAware@ DB 'SetProcessDPIAware', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@
CONST	SEGMENT
??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@ DB 'SetProcessDPIAwaren'
	DB	'essContext', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GMPLCCII@user32?4dll@
CONST	SEGMENT
??_C@_0L@GMPLCCII@user32?4dll@ DB 'user32.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@
CONST	SEGMENT
??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@ DB 'W:\cpp\void\dr'
	DB	'/plat-win32.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@
CONST	SEGMENT
??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@ DB 'Would'
	DB	' You Like To Exit (Abort), Debug (Retry) or Continue (Ignore)'
	DB	'?', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@
CONST	SEGMENT
??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@ DB 'Choose Your Poison', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
CONST	SEGMENT
??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@ DB '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@
CONST	SEGMENT
??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@ DB 'B'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, ' ', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'I', 00H, 'n', 00H, 'v', 00H, 'o', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@
CONST	SEGMENT
??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@ DB 'Break Handler Invoked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@
CONST	SEGMENT
??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@ DB '%'
	DB	's, %i %s() [%i] %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@
CONST	SEGMENT
??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@ DB '[WARNIN'
	DB	'G] write console failed, are you using visual studio?', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
CONST	SEGMENT
??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@ DB 'N'
	DB	00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H, 'S', 00H
	DB	'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z DD 0f3801H
	DD	0e782fH
	DD	0f682aH
	DD	02b3425H
	DD	0200125H
	DD	0e01cf01eH
	DD	0c018d01aH
	DD	060157016H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 021H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+130
	DD	imagerel $unwind$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 021H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+130
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+374
	DD	imagerel $chain$2$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 020821H
	DD	02ee408H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+130
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+374
	DD	imagerel $chain$2$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 06f021H
	DD	02c64f0H
	DD	02ff42cH
	DD	02dc404H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+130
	DD	imagerel $unwind$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 050e01H
	DD	028010eH
	DD	07005d007H
	DD	03004H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z DD 0113601H
	DD	0e782dH
	DD	0f6828H
	DD	0297423H
	DD	0286423H
	DD	0273423H
	DD	0200123H
	DD	0e01af01cH
	DD	0c016d018H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lay_upd@@YAXPEAUai_lay@@M@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z DD 0d2f01H
	DD	0e6826H
	DD	0283421H
	DD	01e0121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?ai_net_ini@@YAXPEAUai_net@@HHH@Z DD 071201H
	DD	0196412H
	DD	0183412H
	DD	0160112H
	DD	0700bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_lay@@YA?AUai_lay@@HH@Z DD 0a1a01H
	DD	013741aH
	DD	012641aH
	DD	011541aH
	DD	010341aH
	DD	0e016d21aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z DD 0d2f01H
	DD	0c6826H
	DD	0243421H
	DD	01a0121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?mat_rnd@@YAXUai_mat@@@Z DD 021H
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+46
	DD	imagerel $unwind$?mat_rnd@@YAXUai_mat@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?mat_rnd@@YAXUai_mat@@@Z DD 040a21H
	DD	07740aH
	DD	066405H
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+46
	DD	imagerel $unwind$?mat_rnd@@YAXUai_mat@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mat_rnd@@YAXUai_mat@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_mat_@@YA?AUai_mat@@HHHH@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_dot@@YQMUai_vec@@0@Z DD 0a2201H
	DD	011e419H
	DD	0107419H
	DD	0f6419H
	DD	0e3419H
	DD	05015b219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD 021H
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+30
	DD	imagerel $unwind$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD 040e21H
	DD	07e40eH
	DD	063405H
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+30
	DD	imagerel $unwind$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD 061001H
	DD	097410H
	DD	086410H
	DD	0f00c3210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_sig_@@YQ?AUai_vec@@U1@0@Z DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_add_@@YQ?AUai_vec@@U1@00@Z DD 081501H
	DD	0c7415H
	DD	0b6415H
	DD	0a3415H
	DD	0e0117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z DD 082001H
	DD	038820H
	DD	047817H
	DD	05680cH
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_vec@@YA?AUai_vec@@H@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?drvs__dot@@YAXIPEAM00@Z DD 020f01H
	DD	050027206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?PlatformInitialize@@YAXXZ DD 021H
	DD	imagerel ?PlatformInitialize@@YAXXZ
	DD	imagerel ?PlatformInitialize@@YAXXZ+145
	DD	imagerel $unwind$?PlatformInitialize@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?PlatformInitialize@@YAXXZ DD 041121H
	DD	047411H
	DD	073405H
	DD	imagerel ?PlatformInitialize@@YAXXZ
	DD	imagerel ?PlatformInitialize@@YAXXZ+145
	DD	imagerel $unwind$?PlatformInitialize@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PlatformInitialize@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FormatW@@YAPEA_WPEB_WZZ DD 051d01H
	DD	0e019621dH
	DD	060167017H
	DD	03015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FormatA@@YAPEADPEBDZZ DD 051d01H
	DD	0e019621dH
	DD	060167017H
	DD	03015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 021H
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 040021H
	DD	0cc400H
	DD	0e5400H
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 0a1b21H
	DD	0bd41bH
	DD	0cc417H
	DD	0d7413H
	DD	0e540fH
	DD	0f3404H
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 041301H
	DD	0f00cf213H
	DD	06008e00aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 021H
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 020021H
	DD	0105400H
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 041b21H
	DD	010541bH
	DD	0163408H
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 060e01H
	DD	011010eH
	DD	0e005f007H
	DD	060027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD 060f01H
	DD	0d640fH
	DD	0c340fH
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?OutputW@@YAXPEB_W@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Widen@@YAPEA_WHPEBD@Z DD 0a3201H
	DD	0ae432H
	DD	09642bH
	DD	085426H
	DD	0b340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetPerformanceCounter@@YA_KXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetPerformanceFrequency@@YA_KXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MAIN@@YAXXZ DD 01f8a19H
	DD	015fe878H
	DD	0160d86fH
	DD	0161c866H
	DD	0162b85dH
	DD	0163a854H
	DD	0164984bH
	DD	01658842H
	DD	01667839H
	DD	01676830H
	DD	02d7c427H
	DD	02d67427H
	DD	02d56427H
	DD	02d43427H
	DD	02d00127H
	DD	0e018f01aH
	DD	0d016H
	DD	imagerel __GSHandlerCheck
	DD	015e0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAAHXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAAIXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAAMXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAANXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAA_KXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAA_JXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 021H
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+35
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 020521H
	DD	067405H
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+35
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 021H
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+200
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 020521H
	DD	0c7405H
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+200
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 081301H
	DD	0e5413H
	DD	0d3413H
	DD	0f00f7213H
	DD	0600be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?HeapAlloc@@YAPEAXH_K@Z DD 021H
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+22
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?HeapAlloc@@YAPEAXH_K@Z DD 020521H
	DD	063405H
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+22
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?HeapAlloc@@YAPEAXH_K@Z DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?StaticAlloc@@YAPEAXH_K@Z DD 021H
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+192
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?StaticAlloc@@YAPEAXH_K@Z DD 020521H
	DD	0a3405H
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+192
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StaticAlloc@@YAPEAXH_K@Z DD 081501H
	DD	0d7415H
	DD	0c6415H
	DD	0b5415H
	DD	0e0117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 021H
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 021H
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+133
	DD	imagerel $chain$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 020521H
	DD	0cf405H
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+133
	DD	imagerel $chain$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 020521H
	DD	0d7405H
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 061501H
	DD	0e011d215H
	DD	0600dc00fH
	DD	0300b500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_TRACE_BLOCK@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?rx7__stoi@@YAHHPEA_JPEBD1@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsprintf_s DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 031a01H
	DD	07016621aH
	DD	03015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z
_TEXT	SEGMENT
$T1 = 0
tv1624 = 0
acc$2 = 32
$T3 = 32
$T4 = 32
$T5 = 32
$T6 = 32
$T7 = 32
$T8 = 32
$T9 = 32
$T10 = 64
$T11 = 64
$T12 = 64
acc$13 = 64
$T14 = 96
$T15 = 96
$T16 = 96
$T17 = 96
$T18 = 112
$T19 = 112
$T20 = 112
$T21 = 112
$T22 = 128
$T23 = 128
net$ = 320
inp_v$ = 328
tar_v$ = 336
?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z PROC		; net_grd_dsc, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 350
	mov	rax, rsp
	mov	QWORD PTR [rax+32], rbx
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 256				; 00000100H
	vmovaps	XMMWORD PTR [rax-72], xmm6
	vmovaps	XMMWORD PTR [rax-88], xmm7
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
; Line 277
	vmovups	xmm0, XMMWORD PTR [rcx+256]
	vmovups	ymm1, YMMWORD PTR [rcx+144]
; Line 292
	xor	r12d, r12d
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 277
	vmovups	XMMWORD PTR $T17[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm0, ymm1, 1
	vmovd	r13d, xmm0
	lea	r9, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 350
	mov	r15, rcx
; Line 292
	mov	r14d, r12d
; Line 277
	vmovups	YMMWORD PTR $T23[rbp], ymm1
	vxorps	xmm7, xmm7, xmm7
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	r13d, r13d
	jle	$LN9@net_grd_ds
; Line 433
	mov	rbx, QWORD PTR $T23[rbp+8]
	xor	ecx, ecx
	vmovups	xmm0, XMMWORD PTR [rdx]
	mov	r15, QWORD PTR $T17[rbp+8]
	mov	r12, rbx
	shr	r12, 32					; 00000020H
; Line 364
	vmovd	eax, xmm0
	cmp	ebx, eax
; Line 433
	vmovups	XMMWORD PTR $T19[rbp], xmm0
	mov	rsi, QWORD PTR $T19[rbp+8]
	sete	cl
	mov	DWORD PTR tv1624[rbp], ecx
$LL10@net_grd_ds:
; Line 386
	mov	rdx, QWORD PTR $T23[rbp+24]
	mov	eax, r12d
	imul	eax, r14d
; Line 364
	mov	QWORD PTR $T6[rbp], r8
	mov	r8d, ecx
	mov	QWORD PTR $T6[rbp+8], r9
	lea	rcx, QWORD PTR $T6[rbp]
	mov	DWORD PTR $T6[rbp+16], 364		; 0000016cH
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T6[rbp+20], 45		; 0000002dH
; Line 386
	cdqe
	lea	rdi, QWORD PTR [rdx+rax*4]
; Line 364
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 433
	xor	ecx, ecx
	vpxor	xmm1, xmm1, xmm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 119
	vmovups	YMMWORD PTR acc$13[rbp], ymm1
; Line 120
	test	ebx, ebx
	je	SHORT $LL20@net_grd_ds
	npad	9
$LL21@net_grd_ds:
; Line 121
	vmovups	ymm0, YMMWORD PTR [rdi+rcx*4]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rsi+rcx*4]
	add	ecx, 8
	cmp	ecx, ebx
	jb	SHORT $LL21@net_grd_ds
	vmovups	YMMWORD PTR acc$13[rbp], ymm1
	npad	9
$LL20@net_grd_ds:
; Line 127
	vaddss	xmm1, xmm7, DWORD PTR acc$13[rbp]
	vaddss	xmm2, xmm1, DWORD PTR acc$13[rbp+4]
	vaddss	xmm3, xmm2, DWORD PTR acc$13[rbp+8]
	vaddss	xmm0, xmm3, DWORD PTR acc$13[rbp+12]
	vaddss	xmm1, xmm0, DWORD PTR acc$13[rbp+16]
	vaddss	xmm2, xmm1, DWORD PTR acc$13[rbp+20]
	vaddss	xmm3, xmm2, DWORD PTR acc$13[rbp+24]
	vaddss	xmm0, xmm3, DWORD PTR acc$13[rbp+28]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	mov	ecx, DWORD PTR tv1624[rbp]
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; Line 433
	vmovss	DWORD PTR [r15], xmm0
	add	r15, 4
	lea	r9, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	inc	r14d
	cmp	r14d, r13d
	jl	$LL10@net_grd_ds
	mov	r15, QWORD PTR net$[rsp]
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	xor	r12d, r12d
$LN9@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm0, XMMWORD PTR [r15+256]
	vmovups	xmm1, XMMWORD PTR [r15+176]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	QWORD PTR $T12[rbp], r8
	mov	QWORD PTR $T12[rbp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	DWORD PTR $T12[rbp+16], 276		; 00000114H
	mov	r8d, r12d
	mov	DWORD PTR $T12[rbp+20], 43		; 0000002bH
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	sete	r8b
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	XMMWORD PTR $T20[rbp], xmm1
	vmovups	XMMWORD PTR $T16[rbp], xmm0
	vmovups	XMMWORD PTR $T8[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	lea	rcx, QWORD PTR $T12[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 279
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN28@net_grd_ds
	mov	rcx, QWORD PTR $T20[rbp+8]
; Line 280
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T16[rbp+8]
	mov	r9, QWORD PTR $T8[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	1
$LL29@net_grd_ds:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL29@net_grd_ds
$LN28@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	xmm0, XMMWORD PTR [r15+272]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 328
	mov	rsi, QWORD PTR [r15+264]
; Line 331
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	XMMWORD PTR $T7[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 331
	test	eax, eax
	jle	SHORT $LN35@net_grd_ds
	mov	rbx, QWORD PTR $T7[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	5
$LL36@net_grd_ds:
; Line 334
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 335
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL36@net_grd_ds
$LN35@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 277
	vmovups	ymm1, YMMWORD PTR [r15]
	vmovups	xmm0, XMMWORD PTR [r15+272]
	vmovups	YMMWORD PTR $T22[rbp], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm1, ymm1, 1
	vmovd	eax, xmm1
	mov	DWORD PTR $T1[rbp], eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 280
	mov	r14d, r12d
; Line 277
	vmovups	XMMWORD PTR $T15[rbp], xmm0
	vmovups	xmm0, XMMWORD PTR [r15+112]
	vmovups	XMMWORD PTR $T5[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	eax, eax
	jle	$LN42@net_grd_ds
; Line 364
	mov	rbx, QWORD PTR $T22[rbp+8]
	xor	r13d, r13d
	mov	r15, QWORD PTR $T5[rbp+8]
	mov	r12, rbx
	mov	rsi, QWORD PTR $T15[rbp+8]
	shr	r12, 32					; 00000020H
	cmp	ebx, DWORD PTR $T15[rbp]
	sete	r13b
	npad	1
$LL43@net_grd_ds:
; Line 386
	mov	rcx, QWORD PTR $T22[rbp+24]
; Line 364
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; Line 386
	mov	eax, r12d
; Line 364
	mov	DWORD PTR $T11[rbp+16], 364		; 0000016cH
; Line 386
	imul	eax, r14d
; Line 364
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	DWORD PTR $T11[rbp+20], 45		; 0000002dH
	mov	r8d, r13d
; Line 386
	cdqe
	lea	rdi, QWORD PTR [rcx+rax*4]
; Line 364
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	QWORD PTR $T11[rbp], rax
	lea	rcx, QWORD PTR $T11[rbp]
	lea	rax, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	QWORD PTR $T11[rbp+8], rax
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 433
	xor	ecx, ecx
	vpxor	xmm1, xmm1, xmm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 119
	vmovups	YMMWORD PTR acc$2[rbp], ymm1
; Line 120
	test	ebx, ebx
	je	SHORT $LL53@net_grd_ds
	npad	12
$LL54@net_grd_ds:
; Line 121
	vmovups	ymm0, YMMWORD PTR [rdi+rcx*4]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rsi+rcx*4]
	add	ecx, 8
	cmp	ecx, ebx
	jb	SHORT $LL54@net_grd_ds
	vmovups	YMMWORD PTR acc$2[rbp], ymm1
	npad	9
$LL53@net_grd_ds:
; Line 127
	vaddss	xmm1, xmm7, DWORD PTR acc$2[rbp]
	vaddss	xmm2, xmm1, DWORD PTR acc$2[rbp+4]
	vaddss	xmm3, xmm2, DWORD PTR acc$2[rbp+8]
	vaddss	xmm0, xmm3, DWORD PTR acc$2[rbp+12]
	vaddss	xmm1, xmm0, DWORD PTR acc$2[rbp+16]
	vaddss	xmm2, xmm1, DWORD PTR acc$2[rbp+20]
	vaddss	xmm3, xmm2, DWORD PTR acc$2[rbp+24]
	vaddss	xmm0, xmm3, DWORD PTR acc$2[rbp+28]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 433
	vmovss	DWORD PTR [r15], xmm0
	add	r15, 4
	inc	r14d
	cmp	r14d, DWORD PTR $T1[rbp]
	jl	$LL43@net_grd_ds
	mov	r15, QWORD PTR net$[rsp]
$LN42@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm0, XMMWORD PTR [r15+112]
	vmovups	xmm1, XMMWORD PTR [r15+32]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T10[rbp+16], 276		; 00000114H
	mov	QWORD PTR $T10[rbp], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	DWORD PTR $T10[rbp+20], 43		; 0000002bH
	mov	QWORD PTR $T10[rbp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	eax, 0
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	sete	al
	lea	rcx, QWORD PTR $T10[rbp]
	mov	r8d, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	XMMWORD PTR $T4[rbp], xmm1
	vmovups	XMMWORD PTR $T18[rbp], xmm0
	vmovups	XMMWORD PTR $T14[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 279
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN61@net_grd_ds
	mov	rcx, QWORD PTR $T4[rbp+8]
; Line 280
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T18[rbp+8]
	mov	r9, QWORD PTR $T14[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	6
$LL62@net_grd_ds:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL62@net_grd_ds
$LN61@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	xmm0, XMMWORD PTR [r15+128]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 328
	mov	rsi, QWORD PTR [r15+120]
; Line 331
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	XMMWORD PTR $T3[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 331
	test	eax, eax
	jle	SHORT $LN68@net_grd_ds
	mov	rbx, QWORD PTR $T3[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	8
$LL69@net_grd_ds:
; Line 334
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 335
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL69@net_grd_ds
$LN68@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 352
	mov	rax, QWORD PTR tar_v$[rsp]
	lea	r8, QWORD PTR $T9[rbp]
	lea	rdx, QWORD PTR $T21[rbp]
	mov	rcx, r15
	vmovups	xmm0, XMMWORD PTR [rax]
	mov	rax, QWORD PTR inp_v$[rsp]
	vmovups	XMMWORD PTR $T9[rbp], xmm0
	vmovups	xmm1, XMMWORD PTR [rax]
	vmovups	XMMWORD PTR $T21[rbp], xmm1
	vzeroupper
	call	?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z ; net_prp_bwd
; Line 353
	lea	r11, QWORD PTR [rsp+256]
	mov	rbx, QWORD PTR [r11+88]
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	vmovaps	xmm7, XMMWORD PTR [r11-32]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z ENDP		; net_grd_dsc
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
_TEXT	SEGMENT
lay_o$ = 32
lay_i$ = 176
net$ = 352
inp_v$ = 360
tar_v$ = 368
?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z PROC		; net_prp_bwd, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 297
	mov	rax, rsp
	push	rbx
	push	rdi
	push	r13
	sub	rsp, 320				; 00000140H
; Line 298
	vmovups	ymm0, YMMWORD PTR [rcx]
	vmovups	ymm2, YMMWORD PTR [rcx+32]
	vmovups	ymm1, YMMWORD PTR [rcx+96]
; Line 321
	mov	r9, QWORD PTR [r8+8]
	mov	r13, rdx
	vmovups	YMMWORD PTR lay_o$[rsp], ymm0
	vmovups	ymm0, YMMWORD PTR [rcx+64]
	vmovups	YMMWORD PTR lay_o$[rsp+64], ymm0
	vmovups	xmm0, XMMWORD PTR [rcx+128]
	vmovups	YMMWORD PTR lay_o$[rsp+32], ymm2
	vmovups	XMMWORD PTR [rax-184], xmm0
	vmovups	ymm0, YMMWORD PTR [rcx+176]
	vmovups	YMMWORD PTR [rax-216], ymm1
	vmovups	ymm1, YMMWORD PTR [rcx+144]
	vmovups	YMMWORD PTR [rax-136], ymm0
	vmovups	ymm0, YMMWORD PTR [rcx+240]
	vmovups	YMMWORD PTR [rax-168], ymm1
	vmovups	ymm1, YMMWORD PTR [rcx+208]
	mov	QWORD PTR [rax+16], r12
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 156
	mov	r12, QWORD PTR lay_o$[rsp+56]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 299
	vmovups	YMMWORD PTR [rax-72], ymm0
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 156
	vextractf128 xmm0, ymm2, 1
; File W:\cpp\void\dr-ai\num-ai.c
; Line 299
	vmovups	YMMWORD PTR [rax-104], ymm1
	vmovups	xmm1, XMMWORD PTR [rcx+272]
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 156
	vmovd	r8d, xmm0
; File W:\cpp\void\dr-ai\num-ai.c
; Line 298
	xor	ecx, ecx
	mov	QWORD PTR [rax+32], r15
; Line 299
	vmovups	XMMWORD PTR [rax-40], xmm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 156
	test	r8d, r8d
	je	SHORT $LN28@net_prp_bw
	vmovups	ymm3, YMMWORD PTR __ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
	mov	rdx, QWORD PTR [rax-176]
	npad	9
$LL29@net_prp_bw:
; Line 157
	vmovups	ymm1, YMMWORD PTR [rdx+rcx*4]
	vsubps	ymm0, ymm3, ymm1
	vmulps	ymm2, ymm0, ymm1
	vsubps	ymm1, ymm1, YMMWORD PTR [r9+rcx*4]
	vmulps	ymm2, ymm2, ymm1
	vmovups	YMMWORD PTR [r12+rcx*4], ymm2
	add	ecx, 8
	cmp	ecx, r8d
	jb	SHORT $LL29@net_prp_bw
$LN28@net_prp_bw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 323
	mov	r15d, DWORD PTR lay_o$[rsp+4]
	test	r15d, r15d
	jle	SHORT $LN3@net_prp_bw
	movsxd	rbx, DWORD PTR lay_o$[rsp+92]
	mov	r8, r12
	mov	r9, QWORD PTR lay_o$[rsp+104]
	mov	r10d, r15d
	mov	r11d, DWORD PTR lay_o$[rsp]
	mov	rdi, QWORD PTR lay_i$[rsp+136]
	shl	rbx, 2
$LL4@net_prp_bw:
; Line 324
	test	r11d, r11d
	jle	SHORT $LN2@net_prp_bw
	mov	rax, rdi
	mov	rcx, r9
	mov	rdx, r11
$LL7@net_prp_bw:
	lea	rcx, QWORD PTR [rcx+4]
	lea	rax, QWORD PTR [rax+4]
; Line 325
	vmovss	xmm0, DWORD PTR [r8]
	vmulss	xmm1, xmm0, DWORD PTR [rax-4]
	vmovss	DWORD PTR [rcx-4], xmm1
	sub	rdx, 1
	jne	SHORT $LL7@net_prp_bw
$LN2@net_prp_bw:
; Line 323
	add	r9, rbx
	add	r8, 4
	sub	r10, 1
	jne	SHORT $LL4@net_prp_bw
$LN3@net_prp_bw:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 348
	mov	eax, DWORD PTR lay_i$[rsp+48]
	mov	rbx, QWORD PTR lay_i$[rsp+56]
	mov	QWORD PTR [rsp+352], rsi
	test	eax, eax
	jle	SHORT $LN23@net_prp_bw
	mov	QWORD PTR [rsp+368], r14
	lea	esi, DWORD PTR [rax-1]
	mov	r14, QWORD PTR lay_i$[rsp+120]
	mov	rdi, rbx
	sub	r14, rbx
	shr	esi, 3
	inc	esi
	npad	12
$LL24@net_prp_bw:
; Line 351
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rdi+r14]
	call	__vdecl_expf8
	lea	rdi, QWORD PTR [rdi+32]
	vmovups	ymm3, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm3
	vdivps	ymm2, ymm3, ymm1
	vsubps	ymm0, ymm3, ymm2
	vmulps	ymm1, ymm0, ymm2
; Line 352
	vmovups	YMMWORD PTR [rdi-32], ymm1
	sub	rsi, 1
	jne	SHORT $LL24@net_prp_bw
; Line 348
	mov	r14, QWORD PTR [rsp+368]
$LN23@net_prp_bw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 331
	mov	edi, DWORD PTR lay_i$[rsp+4]
	test	edi, edi
	jle	SHORT $LN9@net_prp_bw
	mov	r10, QWORD PTR lay_o$[rsp+24]
	mov	r9, rbx
	movsxd	rsi, DWORD PTR lay_o$[rsp+12]
	mov	r11d, edi
	npad	3
$LL10@net_prp_bw:
	vxorps	xmm2, xmm2, xmm2
; Line 333
	test	r15d, r15d
	jle	SHORT $LN12@net_prp_bw
; Line 332
	mov	r8, rsi
	mov	rax, r12
	shl	r8, 2
	mov	rcx, r10
	mov	rdx, r15
	npad	7
$LL13@net_prp_bw:
; Line 334
	vmovss	xmm0, DWORD PTR [rcx]
	vmulss	xmm1, xmm0, DWORD PTR [rax]
	add	rcx, r8
	lea	rax, QWORD PTR [rax+4]
	vaddss	xmm2, xmm2, xmm1
	sub	rdx, 1
	jne	SHORT $LL13@net_prp_bw
$LN12@net_prp_bw:
; Line 336
	vmulss	xmm0, xmm2, DWORD PTR [r9]
	vmovss	DWORD PTR [r9], xmm0
	add	r9, 4
	add	r10, 4
	sub	r11, 1
	jne	SHORT $LL10@net_prp_bw
$LN9@net_prp_bw:
	mov	r15, QWORD PTR [rsp+376]
; Line 339
	mov	r12, QWORD PTR [rsp+360]
	mov	rsi, QWORD PTR [rsp+352]
	test	edi, edi
	jle	SHORT $LN15@net_prp_bw
; Line 341
	movsxd	r11, DWORD PTR lay_i$[rsp+92]
	mov	r9, rdi
	mov	r8, QWORD PTR lay_i$[rsp+104]
	mov	r10d, DWORD PTR lay_i$[rsp]
	shl	r11, 2
	npad	4
$LL16@net_prp_bw:
; Line 340
	test	r10d, r10d
	jle	SHORT $LN14@net_prp_bw
; Line 341
	mov	rax, QWORD PTR [r13+8]
	mov	rcx, r8
	mov	rdx, r10
	npad	1
$LL19@net_prp_bw:
	lea	rcx, QWORD PTR [rcx+4]
	vmovss	xmm0, DWORD PTR [rax]
	lea	rax, QWORD PTR [rax+4]
	vmulss	xmm1, xmm0, DWORD PTR [rbx]
	vmovss	DWORD PTR [rcx-4], xmm1
	sub	rdx, 1
	jne	SHORT $LL19@net_prp_bw
$LN14@net_prp_bw:
; Line 339
	add	r8, r11
	add	rbx, 4
	sub	r9, 1
	jne	SHORT $LL16@net_prp_bw
$LN15@net_prp_bw:
; Line 344
	vzeroupper
	add	rsp, 320				; 00000140H
	pop	r13
	pop	rdi
	pop	rbx
	ret	0
?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z ENDP		; net_prp_bwd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z
_TEXT	SEGMENT
$T1 = 0
tv1636 = 0
acc$2 = 32
$T3 = 32
$T4 = 32
$T5 = 32
$T6 = 32
$T7 = 32
$T8 = 32
$T9 = 64
$T10 = 64
$T11 = 64
acc$12 = 64
$T13 = 96
$T14 = 96
$T15 = 96
$T16 = 96
$T17 = 112
$T18 = 112
$T19 = 112
$T20 = 128
$T21 = 128
net$ = 304
inp$ = 312
?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z PROC		; net_prp_fwd, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 292
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 256				; 00000100H
	vmovaps	XMMWORD PTR [rax-56], xmm6
	vmovaps	XMMWORD PTR [rax-72], xmm7
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
; Line 277
	vmovups	xmm0, XMMWORD PTR [rcx+256]
	vmovups	ymm1, YMMWORD PTR [rcx+144]
; Line 292
	xor	r12d, r12d
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 277
	vmovups	XMMWORD PTR $T16[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm0, ymm1, 1
	vmovd	r13d, xmm0
	lea	r9, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 292
	mov	r15, rcx
	mov	r14d, r12d
; Line 277
	vmovups	YMMWORD PTR $T21[rbp], ymm1
	vxorps	xmm7, xmm7, xmm7
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	r13d, r13d
	jle	$LN7@net_prp_fw
; Line 433
	mov	rbx, QWORD PTR $T21[rbp+8]
	xor	ecx, ecx
	vmovups	xmm0, XMMWORD PTR [rdx]
	mov	r15, QWORD PTR $T16[rbp+8]
	mov	r12, rbx
	shr	r12, 32					; 00000020H
; Line 364
	vmovd	eax, xmm0
	cmp	ebx, eax
; Line 433
	vmovups	XMMWORD PTR $T18[rbp], xmm0
	mov	rsi, QWORD PTR $T18[rbp+8]
	sete	cl
	mov	DWORD PTR tv1636[rbp], ecx
	npad	1
$LL8@net_prp_fw:
; Line 386
	mov	rdx, QWORD PTR $T21[rbp+24]
	mov	eax, r12d
	imul	eax, r14d
; Line 364
	mov	QWORD PTR $T6[rbp], r8
	mov	r8d, ecx
	mov	QWORD PTR $T6[rbp+8], r9
	lea	rcx, QWORD PTR $T6[rbp]
	mov	DWORD PTR $T6[rbp+16], 364		; 0000016cH
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T6[rbp+20], 45		; 0000002dH
; Line 386
	cdqe
	lea	rdi, QWORD PTR [rdx+rax*4]
; Line 364
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 433
	xor	ecx, ecx
	vpxor	xmm1, xmm1, xmm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 119
	vmovups	YMMWORD PTR acc$12[rbp], ymm1
; Line 120
	test	ebx, ebx
	je	SHORT $LL18@net_prp_fw
	npad	10
$LL19@net_prp_fw:
; Line 121
	vmovups	ymm0, YMMWORD PTR [rdi+rcx*4]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rsi+rcx*4]
	add	ecx, 8
	cmp	ecx, ebx
	jb	SHORT $LL19@net_prp_fw
	vmovups	YMMWORD PTR acc$12[rbp], ymm1
	npad	9
$LL18@net_prp_fw:
; Line 127
	vaddss	xmm1, xmm7, DWORD PTR acc$12[rbp]
	vaddss	xmm2, xmm1, DWORD PTR acc$12[rbp+4]
	vaddss	xmm3, xmm2, DWORD PTR acc$12[rbp+8]
	vaddss	xmm0, xmm3, DWORD PTR acc$12[rbp+12]
	vaddss	xmm1, xmm0, DWORD PTR acc$12[rbp+16]
	vaddss	xmm2, xmm1, DWORD PTR acc$12[rbp+20]
	vaddss	xmm3, xmm2, DWORD PTR acc$12[rbp+24]
	vaddss	xmm0, xmm3, DWORD PTR acc$12[rbp+28]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	mov	ecx, DWORD PTR tv1636[rbp]
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; Line 433
	vmovss	DWORD PTR [r15], xmm0
	add	r15, 4
	lea	r9, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	inc	r14d
	cmp	r14d, r13d
	jl	$LL8@net_prp_fw
	mov	r15, QWORD PTR net$[rsp]
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	xor	r12d, r12d
$LN7@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm0, XMMWORD PTR [r15+256]
	vmovups	xmm1, XMMWORD PTR [r15+176]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	QWORD PTR $T11[rbp], r8
	mov	QWORD PTR $T11[rbp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	DWORD PTR $T11[rbp+16], 276		; 00000114H
	mov	r8d, r12d
	mov	DWORD PTR $T11[rbp+20], 43		; 0000002bH
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	sete	r8b
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	XMMWORD PTR $T19[rbp], xmm1
	vmovups	XMMWORD PTR $T15[rbp], xmm0
	vmovups	XMMWORD PTR $T8[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	lea	rcx, QWORD PTR $T11[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 279
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN26@net_prp_fw
	mov	rcx, QWORD PTR $T19[rbp+8]
; Line 280
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T15[rbp+8]
	mov	r9, QWORD PTR $T8[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	1
$LL27@net_prp_fw:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL27@net_prp_fw
$LN26@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	xmm0, XMMWORD PTR [r15+272]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 328
	mov	rsi, QWORD PTR [r15+264]
; Line 331
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	XMMWORD PTR $T7[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 331
	test	eax, eax
	jle	SHORT $LN33@net_prp_fw
	mov	rbx, QWORD PTR $T7[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	5
$LL34@net_prp_fw:
; Line 334
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 335
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL34@net_prp_fw
$LN33@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 277
	vmovups	ymm1, YMMWORD PTR [r15]
	vmovups	xmm0, XMMWORD PTR [r15+272]
	vmovups	YMMWORD PTR $T20[rbp], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm1, ymm1, 1
	vmovd	eax, xmm1
	mov	DWORD PTR $T1[rbp], eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 280
	mov	r14d, r12d
; Line 277
	vmovups	XMMWORD PTR $T14[rbp], xmm0
	vmovups	xmm0, XMMWORD PTR [r15+112]
	vmovups	XMMWORD PTR $T5[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	eax, eax
	jle	$LN40@net_prp_fw
; Line 364
	mov	rbx, QWORD PTR $T20[rbp+8]
	xor	r13d, r13d
	mov	r15, QWORD PTR $T5[rbp+8]
	mov	r12, rbx
	mov	rsi, QWORD PTR $T14[rbp+8]
	shr	r12, 32					; 00000020H
	cmp	ebx, DWORD PTR $T14[rbp]
	sete	r13b
	npad	1
$LL41@net_prp_fw:
; Line 386
	mov	rcx, QWORD PTR $T20[rbp+24]
; Line 364
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; Line 386
	mov	eax, r12d
; Line 364
	mov	DWORD PTR $T10[rbp+16], 364		; 0000016cH
; Line 386
	imul	eax, r14d
; Line 364
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	DWORD PTR $T10[rbp+20], 45		; 0000002dH
	mov	r8d, r13d
; Line 386
	cdqe
	lea	rdi, QWORD PTR [rcx+rax*4]
; Line 364
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	QWORD PTR $T10[rbp], rax
	lea	rcx, QWORD PTR $T10[rbp]
	lea	rax, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	QWORD PTR $T10[rbp+8], rax
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 433
	xor	ecx, ecx
	vpxor	xmm1, xmm1, xmm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 119
	vmovups	YMMWORD PTR acc$2[rbp], ymm1
; Line 120
	test	ebx, ebx
	je	SHORT $LL51@net_prp_fw
	npad	12
$LL52@net_prp_fw:
; Line 121
	vmovups	ymm0, YMMWORD PTR [rdi+rcx*4]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rsi+rcx*4]
	add	ecx, 8
	cmp	ecx, ebx
	jb	SHORT $LL52@net_prp_fw
	vmovups	YMMWORD PTR acc$2[rbp], ymm1
	npad	9
$LL51@net_prp_fw:
; Line 127
	vaddss	xmm1, xmm7, DWORD PTR acc$2[rbp]
	vaddss	xmm2, xmm1, DWORD PTR acc$2[rbp+4]
	vaddss	xmm3, xmm2, DWORD PTR acc$2[rbp+8]
	vaddss	xmm0, xmm3, DWORD PTR acc$2[rbp+12]
	vaddss	xmm1, xmm0, DWORD PTR acc$2[rbp+16]
	vaddss	xmm2, xmm1, DWORD PTR acc$2[rbp+20]
	vaddss	xmm3, xmm2, DWORD PTR acc$2[rbp+24]
	vaddss	xmm0, xmm3, DWORD PTR acc$2[rbp+28]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 433
	vmovss	DWORD PTR [r15], xmm0
	add	r15, 4
	inc	r14d
	cmp	r14d, DWORD PTR $T1[rbp]
	jl	$LL41@net_prp_fw
	mov	r15, QWORD PTR net$[rsp]
$LN40@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm0, XMMWORD PTR [r15+112]
	vmovups	xmm1, XMMWORD PTR [r15+32]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T9[rbp+16], 276		; 00000114H
	mov	QWORD PTR $T9[rbp], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	DWORD PTR $T9[rbp+20], 43		; 0000002bH
	mov	QWORD PTR $T9[rbp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	eax, 0
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	sete	al
	lea	rcx, QWORD PTR $T9[rbp]
	mov	r8d, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	XMMWORD PTR $T4[rbp], xmm1
	vmovups	XMMWORD PTR $T17[rbp], xmm0
	vmovups	XMMWORD PTR $T13[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 279
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN59@net_prp_fw
	mov	rcx, QWORD PTR $T4[rbp+8]
; Line 280
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T17[rbp+8]
	mov	r9, QWORD PTR $T13[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	6
$LL60@net_prp_fw:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL60@net_prp_fw
$LN59@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	xmm0, XMMWORD PTR [r15+128]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 328
	mov	rsi, QWORD PTR [r15+120]
; Line 331
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	XMMWORD PTR $T3[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 331
	test	eax, eax
	jle	SHORT $LN66@net_prp_fw
	mov	rbx, QWORD PTR $T3[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	8
$LL67@net_prp_fw:
; Line 334
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 335
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL67@net_prp_fw
$LN66@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 294
	vzeroupper
	lea	r11, QWORD PTR [rsp+256]
	mov	rbx, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rdi, QWORD PTR [r11+72]
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	vmovaps	xmm7, XMMWORD PTR [r11-32]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z ENDP		; net_prp_fwd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?lay_upd@@YAXPEAUai_lay@@M@Z
_TEXT	SEGMENT
wei_new$ = 0
bia_old$ = 0
wei_old$ = 32
bia_new$ = 32
lay$ = 80
alpha$ = 88
?lay_upd@@YAXPEAUai_lay@@M@Z PROC			; lay_upd, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 284
	sub	rsp, 72					; 00000048H
	vmovups	xmm2, XMMWORD PTR [rcx+32]
	vmovups	xmm0, XMMWORD PTR [rcx+48]
	vxorps	xmm3, xmm1, DWORD PTR __xmm@80000000800000008000000080000000
	xor	edx, edx
	mov	r11, rcx
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 96
	vmovd	r9d, xmm2
; File W:\cpp\void\dr-ai\num-ai.c
; Line 284
	mov	r8d, edx
	vmovups	XMMWORD PTR bia_old$[rsp], xmm2
	vmovups	XMMWORD PTR bia_new$[rsp], xmm0
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 96
	test	r9d, r9d
	je	SHORT $LN19@lay_upd
	mov	rcx, QWORD PTR bia_old$[rsp+8]
	mov	r10, QWORD PTR bia_new$[rsp+8]
	vmovaps	xmm1, xmm3
	vshufps	xmm1, xmm3, xmm3, 0
	vinsertf128 ymm1, ymm1, xmm1, 1
	npad	4
$LL6@lay_upd:
; Line 97
	mov	eax, r8d
	add	r8d, 8
; Line 99
	vmovups	ymm0, YMMWORD PTR [r10+rax*4]
	vfmadd213ps ymm0, ymm1, YMMWORD PTR [rcx+rax*4]
	vmovups	YMMWORD PTR [rcx+rax*4], ymm0
	cmp	r8d, r9d
	jb	SHORT $LL6@lay_upd
$LN19@lay_upd:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 286
	vmovups	ymm1, YMMWORD PTR [r11]
	vmovups	ymm0, YMMWORD PTR [r11+80]
	vmovups	YMMWORD PTR wei_new$[rsp], ymm0
; Line 287
	vextractf128 xmm0, ymm1, 1
	vpextrq	r8, xmm1, 1
	shr	r8, 32					; 00000020H
	vmovd	eax, xmm0
	imul	r8d, eax
	vmovups	YMMWORD PTR wei_old$[rsp], ymm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 96
	test	r8d, r8d
	je	SHORT $LN10@lay_upd
	mov	rcx, QWORD PTR wei_old$[rsp+24]
	mov	r9, QWORD PTR wei_new$[rsp+24]
	vmovaps	xmm1, xmm3
	vshufps	xmm1, xmm3, xmm3, 0
	vinsertf128 ymm1, ymm1, xmm1, 1
	npad	7
$LL11@lay_upd:
; Line 99
	vmovups	ymm0, YMMWORD PTR [r9+rdx*4]
	vfmadd213ps ymm0, ymm1, YMMWORD PTR [rcx+rdx*4]
	vmovups	YMMWORD PTR [rcx+rdx*4], ymm0
	add	edx, 8
	cmp	edx, r8d
	jb	SHORT $LL11@lay_upd
$LN10@lay_upd:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 289
	vzeroupper
	add	rsp, 72					; 00000048H
	ret	0
?lay_upd@@YAXPEAUai_lay@@M@Z ENDP			; lay_upd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z
_TEXT	SEGMENT
$T1 = 0
tv834 = 16
$T2 = 32
acc$3 = 32
$T4 = 64
$T5 = 64
$T6 = 64
$T7 = 64
tv836 = 96
$T8 = 96
$T9 = 112
$T10 = 112
$T11 = 128
__$ReturnAddress$ = 304
lay$ = 312
inp$ = 320
?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z PROC	; lay_prp_fwd, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 277
	mov	rax, rsp
	mov	QWORD PTR [rax+24], rbx
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 240				; 000000f0H
	vmovaps	XMMWORD PTR [rax-72], xmm6
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
	vmovups	xmm0, XMMWORD PTR [rdx+112]
	vmovups	ymm1, YMMWORD PTR [rdx]
	xor	r12d, r12d
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	lea	r9, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 277
	vmovups	XMMWORD PTR $T10[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm0, ymm1, 1
	vmovd	eax, xmm0
	mov	DWORD PTR $T1[rbp], eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 277
	mov	r14, rdx
	mov	r13, rcx
	mov	r15d, r12d
	vmovups	YMMWORD PTR $T11[rbp], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	eax, eax
	jle	$LN5@lay_prp_fw
; Line 433
	vmovups	xmm0, XMMWORD PTR [r8]
	mov	rdi, QWORD PTR $T11[rbp+8]
	lea	r8, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	r13, QWORD PTR $T10[rbp+8]
	mov	edx, r12d
	mov	r14d, DWORD PTR $T1[rbp]
	mov	rcx, rdi
	shr	rcx, 32					; 00000020H
; Line 364
	vmovd	eax, xmm0
	cmp	edi, eax
	mov	QWORD PTR tv836[rbp], rcx
; Line 433
	vmovups	XMMWORD PTR $T5[rbp], xmm0
	mov	rsi, QWORD PTR $T5[rbp+8]
	sete	dl
	mov	DWORD PTR tv834[rbp], edx
	vxorps	xmm6, xmm6, xmm6
	npad	1
$LL6@lay_prp_fw:
; Line 386
	imul	ecx, r15d
; Line 364
	mov	QWORD PTR $T4[rbp+8], r8
	mov	r8d, edx
	mov	QWORD PTR $T4[rbp], r9
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	DWORD PTR $T4[rbp+16], 364		; 0000016cH
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T4[rbp+20], 45		; 0000002dH
; Line 386
	movsxd	rax, ecx
	mov	rcx, QWORD PTR $T11[rbp+24]
	lea	rbx, QWORD PTR [rcx+rax*4]
; Line 364
	lea	rcx, QWORD PTR $T4[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 433
	mov	ecx, r12d
	vpxor	xmm1, xmm1, xmm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 119
	vmovups	YMMWORD PTR acc$3[rbp], ymm1
; Line 120
	test	edi, edi
	je	SHORT $LL16@lay_prp_fw
	npad	11
$LL17@lay_prp_fw:
; Line 121
	mov	eax, ecx
	add	ecx, 8
	vmovups	ymm0, YMMWORD PTR [rbx+rax*4]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rsi+rax*4]
	cmp	ecx, edi
	jb	SHORT $LL17@lay_prp_fw
	vmovups	YMMWORD PTR acc$3[rbp], ymm1
	npad	7
$LL16@lay_prp_fw:
; Line 127
	vaddss	xmm1, xmm6, DWORD PTR acc$3[rbp]
	vaddss	xmm2, xmm1, DWORD PTR acc$3[rbp+4]
	vaddss	xmm3, xmm2, DWORD PTR acc$3[rbp+8]
	vaddss	xmm0, xmm3, DWORD PTR acc$3[rbp+12]
	vaddss	xmm1, xmm0, DWORD PTR acc$3[rbp+16]
	vaddss	xmm2, xmm1, DWORD PTR acc$3[rbp+20]
	vaddss	xmm3, xmm2, DWORD PTR acc$3[rbp+24]
	vaddss	xmm0, xmm3, DWORD PTR acc$3[rbp+28]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	mov	rcx, QWORD PTR tv836[rbp]
	lea	r9, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	edx, DWORD PTR tv834[rbp]
	lea	r8, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
; Line 433
	vmovss	DWORD PTR [r13], xmm0
	add	r13, 4
	inc	r15d
	cmp	r15d, r14d
	jl	$LL6@lay_prp_fw
	mov	r14, QWORD PTR lay$[rsp]
	lea	r9, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	r13, QWORD PTR __$ReturnAddress$[rsp]
$LN5@lay_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm0, XMMWORD PTR [r14+112]
	vmovups	xmm1, XMMWORD PTR [r14+32]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	QWORD PTR $T2[rbp], r9
	mov	QWORD PTR $T2[rbp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	DWORD PTR $T2[rbp+16], 276		; 00000114H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	sete	r12b
	mov	DWORD PTR $T2[rbp+20], 43		; 0000002bH
	mov	r8d, r12d
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vmovups	XMMWORD PTR $T7[rbp], xmm1
	vmovups	XMMWORD PTR $T9[rbp], xmm0
	vmovups	XMMWORD PTR $T8[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 276
	lea	rcx, QWORD PTR $T2[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 279
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN24@lay_prp_fw
	mov	rcx, QWORD PTR $T7[rbp+8]
; Line 280
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T9[rbp+8]
	mov	r9, QWORD PTR $T8[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	13
$LL25@lay_prp_fw:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL25@lay_prp_fw
$LN24@lay_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	xmm0, XMMWORD PTR [r14+128]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 328
	mov	rsi, QWORD PTR [r14+120]
; Line 331
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 279
	vmovups	XMMWORD PTR $T6[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 331
	test	eax, eax
	jle	SHORT $LN31@lay_prp_fw
	mov	rbx, QWORD PTR $T6[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	8
$LL32@lay_prp_fw:
; Line 334
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 335
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL32@lay_prp_fw
$LN31@lay_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 280
	vmovups	xmm0, XMMWORD PTR [r14+128]
	vmovups	XMMWORD PTR [r13], xmm0
	mov	rax, r13
	vzeroupper
; Line 281
	mov	rbx, QWORD PTR [rsp+320]
	vmovaps	xmm6, XMMWORD PTR [rsp+224]
	add	rsp, 240				; 000000f0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z ENDP	; lay_prp_fwd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?int_flip@@YAII@Z
_TEXT	SEGMENT
i$ = 8
?int_flip@@YAII@Z PROC					; int_flip, COMDAT
; File W:\cpp\void\dr-ai\num-ai.h
; Line 105
	bswap	ecx
	mov	eax, ecx
; Line 109
	ret	0
?int_flip@@YAII@Z ENDP					; int_flip
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?ai_net_ini@@YAXPEAUai_net@@HHH@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
net$ = 192
inp$ = 200
con$ = 208
out$ = 216
?ai_net_ini@@YAXPEAUai_net@@HHH@Z PROC			; ai_net_ini, COMDAT
; File W:\cpp\void\dr-ai\num-ai.h
; Line 96
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rsi, rcx
	mov	ebx, r9d
	lea	rcx, QWORD PTR $T2[rsp]
	mov	edi, r8d
	call	?new_lay@@YA?AUai_lay@@HH@Z		; new_lay
; Line 97
	mov	r8d, ebx
	lea	rcx, QWORD PTR $T1[rsp]
	mov	edx, edi
	vmovups	ymm0, YMMWORD PTR [rax]
	vmovups	ymm1, YMMWORD PTR [rax+32]
	vmovups	ymm2, YMMWORD PTR [rax+64]
	vmovups	ymm3, YMMWORD PTR [rax+96]
	vmovups	xmm4, XMMWORD PTR [rax+128]
	vmovups	YMMWORD PTR [rsi+144], ymm0
	vmovups	YMMWORD PTR [rsi+176], ymm1
	vmovups	YMMWORD PTR [rsi+208], ymm2
	vmovups	YMMWORD PTR [rsi+240], ymm3
	vmovups	XMMWORD PTR [rsi+272], xmm4
	vzeroupper
	call	?new_lay@@YA?AUai_lay@@HH@Z		; new_lay
	vmovups	ymm0, YMMWORD PTR [rax]
	vmovups	ymm1, YMMWORD PTR [rax+32]
	vmovups	ymm2, YMMWORD PTR [rax+64]
	vmovups	ymm3, YMMWORD PTR [rax+96]
	vmovups	xmm4, XMMWORD PTR [rax+128]
	vmovups	YMMWORD PTR [rsi], ymm0
	vmovups	YMMWORD PTR [rsi+32], ymm1
	vmovups	YMMWORD PTR [rsi+64], ymm2
	vmovups	YMMWORD PTR [rsi+96], ymm3
	vmovups	XMMWORD PTR [rsi+128], xmm4
	vzeroupper
; Line 98
	lea	r11, QWORD PTR [rsp+176]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rsp, r11
	pop	rdi
	ret	0
?ai_net_ini@@YAXPEAUai_net@@HHH@Z ENDP			; ai_net_ini
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_lay@@YA?AUai_lay@@HH@Z
_TEXT	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 80
$T6 = 80
__$ReturnAddress$ = 128
col_len$ = 136
row_len$ = 144
?new_lay@@YA?AUai_lay@@HH@Z PROC			; new_lay, COMDAT
; File W:\cpp\void\dr-ai\num-ai.h
; Line 80
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 112				; 00000070H
	mov	r14, rcx
; Line 82
	mov	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T6[rsp]
	mov	r9d, r8d
	mov	ebp, r8d
	call	?new_mat_@@YA?AUai_mat@@HHHH@Z		; new_mat_
	vmovups	ymm0, YMMWORD PTR [rax]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 135
	lea	eax, DWORD PTR [rbp+7]
	cdq
	and	edx, 7
; File W:\cpp\void\dr-ai\num-ai.h
; Line 82
	vmovups	YMMWORD PTR [r14], ymm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 135
	lea	esi, DWORD PTR [rdx+rax]
; Line 154
	mov	edx, 32					; 00000020H
; Line 135
	and	esi, -8
; Line 154
	movsxd	rdi, esi
	shl	rdi, 2
	mov	rcx, rdi
	vzeroupper
	call	_aligned_malloc
; Line 155
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 83
	mov	DWORD PTR [r14+128], ebp
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 83
	mov	DWORD PTR [r14+132], esi
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	rcx, rdi
; File W:\cpp\void\dr-ai\num-ai.h
; Line 83
	mov	QWORD PTR [r14+136], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
; Line 155
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 84
	mov	DWORD PTR [r14+112], ebp
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 84
	mov	DWORD PTR [r14+116], esi
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	rcx, rdi
; File W:\cpp\void\dr-ai\num-ai.h
; Line 84
	mov	QWORD PTR [r14+120], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
; Line 155
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 85
	mov	DWORD PTR [r14+32], ebp
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 85
	mov	DWORD PTR [r14+36], esi
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	rcx, rdi
; File W:\cpp\void\dr-ai\num-ai.h
; Line 85
	mov	QWORD PTR [r14+40], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
; Line 155
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 87
	mov	DWORD PTR [r14+48], ebp
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 87
	mov	DWORD PTR [r14+52], esi
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	rcx, rdi
; File W:\cpp\void\dr-ai\num-ai.h
; Line 87
	mov	QWORD PTR [r14+56], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
; Line 155
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 88
	mov	DWORD PTR [r14+64], ebp
	mov	DWORD PTR [r14+68], esi
	mov	QWORD PTR [r14+72], rbx
; Line 89
	mov	r9d, DWORD PTR [r14+8]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 395
	mov	eax, DWORD PTR [r14]
; File W:\cpp\void\dr-ai\num-ai.h
; Line 89
	movsxd	rdi, DWORD PTR [r14+16]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 395
	mov	DWORD PTR $T5[rsp], eax
; Line 396
	mov	eax, DWORD PTR [r14+4]
	mov	DWORD PTR $T5[rsp+4], eax
; Line 135
	lea	eax, DWORD PTR [r9+7]
; Line 398
	mov	DWORD PTR $T5[rsp+16], edi
; Line 399
	mov	DWORD PTR $T5[rsp+20], edi
; Line 400
	mov	DWORD PTR $T5[rsp+8], r9d
; Line 135
	cdq
	and	edx, 7
	lea	ebx, DWORD PTR [rdx+rax]
	and	ebx, -8
; Line 401
	mov	DWORD PTR $T5[rsp+12], ebx
	cmp	ebx, r9d
; Line 403
	je	SHORT $LN27@new_lay
; Line 404
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T2[rsp+16], 404		; 00000194H
	mov	QWORD PTR $T2[rsp], rax
	lea	r8, OFFSET FLAT:??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@
	lea	rax, OFFSET FLAT:??_C@_08ENKIOJLC@new_mat_@
	mov	DWORD PTR $T2[rsp+20], 46		; 0000002eH
	mov	edx, 4
	mov	QWORD PTR $T2[rsp+8], rax
	lea	rcx, QWORD PTR $T2[rsp]
	mov	DWORD PTR [rsp+32], ebx
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN27@new_lay:
; Line 407
	movsxd	rbx, ebx
	mov	edx, 32					; 00000020H
	imul	rbx, rdi
	shl	rbx, 2
	mov	rcx, rbx
	call	_aligned_malloc
; Line 408
	mov	r8, rbx
	mov	QWORD PTR $T5[rsp+24], rax
	xor	edx, edx
	mov	rcx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 89
	vmovups	ymm0, YMMWORD PTR $T5[rsp]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 420
	mov	edi, DWORD PTR [r14+16]
; File W:\cpp\void\dr-ai\num-ai.h
; Line 89
	xor	r10d, r10d
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 420
	mov	edx, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
; File W:\cpp\void\dr-ai\num-ai.h
; Line 90
	vmovups	ymm1, YMMWORD PTR [r14]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 420
	vmovss	xmm4, DWORD PTR __real@2f800000
	vmovss	xmm5, DWORD PTR __real@3f800000
; File W:\cpp\void\dr-ai\num-ai.h
; Line 89
	vmovups	YMMWORD PTR [r14+80], ymm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 420
	test	edi, edi
	jle	$LN37@new_lay
; Line 421
	vmovups	ymm0, ymm1
	vpextrq	r11, xmm0, 1
	mov	rbx, r11
	vmovups	YMMWORD PTR $T4[rsp], ymm1
	mov	rsi, QWORD PTR $T4[rsp+24]
	shr	rbx, 32					; 00000020H
$LL38@new_lay:
; Line 386
	mov	eax, ebx
	imul	eax, r10d
	cdqe
	lea	r8, QWORD PTR [rsi+rax*4]
; Line 421
	test	r11d, r11d
; Line 229
	jle	SHORT $LN36@new_lay
; Line 421
	mov	r9d, r11d
	npad	12
$LL68@new_lay:
; Line 119
	mov	ecx, edx
; Line 229
	lea	r8, QWORD PTR [r8+4]
; Line 119
	shl	ecx, 13
	xor	ecx, edx
; Line 120
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 121
	mov	edx, ecx
	shl	edx, 5
	xor	edx, ecx
; Line 127
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, edx
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, rdx
; Line 128
	vmulss	xmm1, xmm0, xmm4
	vaddss	xmm2, xmm1, xmm1
	vsubss	xmm3, xmm2, xmm5
; Line 230
	vmovss	DWORD PTR [r8-4], xmm3
	sub	r9, 1
	jne	SHORT $LL68@new_lay
$LN36@new_lay:
; Line 420
	inc	r10d
	cmp	r10d, edi
	jl	SHORT $LL38@new_lay
$LN37@new_lay:
; File W:\cpp\void\dr-ai\num-ai.h
; Line 91
	vmovups	xmm0, XMMWORD PTR [r14+32]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 229
	vmovd	eax, xmm0
; File W:\cpp\void\dr-ai\num-ai.h
; Line 91
	vmovups	XMMWORD PTR $T3[rsp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 229
	test	eax, eax
	jle	SHORT $LN80@new_lay
	mov	r8, QWORD PTR $T3[rsp+8]
	mov	r9d, eax
	npad	12
$LL70@new_lay:
; Line 119
	mov	ecx, edx
; Line 229
	lea	r8, QWORD PTR [r8+4]
; Line 119
	shl	ecx, 13
	xor	ecx, edx
; Line 120
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 121
	mov	eax, ecx
	shl	eax, 5
	xor	eax, ecx
	mov	ecx, eax
; Line 127
	mov	edx, eax
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, ecx
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, rcx
; Line 128
	vmulss	xmm1, xmm0, xmm4
	vaddss	xmm2, xmm1, xmm1
	vsubss	xmm3, xmm2, xmm5
; Line 230
	vmovss	DWORD PTR [r8-4], xmm3
	sub	r9, 1
	jne	SHORT $LL70@new_lay
$LN80@new_lay:
; File W:\cpp\void\dr-ai\num-ai.h
; Line 93
	mov	rax, r14
	vzeroupper
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+16]
	mov	rbp, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	r14
	ret	0
?new_lay@@YA?AUai_lay@@HH@Z ENDP			; new_lay
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z
_TEXT	SEGMENT
tv555 = 0
$T1 = 16
$T2 = 16
acc$3 = 64
$T4 = 96
__$ReturnAddress$ = 272
dst$ = 280
mat$ = 288
src$ = 296
?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z PROC		; mat_dot_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 426
	mov	rax, rsp
	mov	QWORD PTR [rax+24], rbx
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 208				; 000000d0H
	vmovaps	XMMWORD PTR [rax-72], xmm6
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
; Line 432
	mov	r12d, DWORD PTR [r8+16]
	xor	r14d, r14d
	mov	r13, rcx
	test	r12d, r12d
	jle	$LN3@mat_dot_
; Line 433
	vmovups	ymm0, YMMWORD PTR [r8]
	mov	r15, QWORD PTR [rdx+8]
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	vpextrq	rdi, xmm0, 1
	xor	ecx, ecx
	mov	r13, rdi
	vmovups	YMMWORD PTR $T4[rbp], ymm0
	vmovups	xmm0, XMMWORD PTR [r9]
	shr	r13, 32					; 00000020H
	lea	r9, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
; Line 364
	vmovd	eax, xmm0
	cmp	edi, eax
; Line 433
	vmovups	XMMWORD PTR $T2[rbp], xmm0
	mov	rsi, QWORD PTR $T2[rbp+8]
	sete	cl
	mov	DWORD PTR tv555[rbp], ecx
	vxorps	xmm6, xmm6, xmm6
	npad	5
$LL4@mat_dot_:
; Line 386
	mov	rdx, QWORD PTR $T4[rbp+24]
	mov	eax, r13d
	imul	eax, r14d
; Line 364
	mov	QWORD PTR $T1[rbp], r8
	mov	r8d, ecx
	mov	QWORD PTR $T1[rbp+8], r9
	lea	rcx, QWORD PTR $T1[rbp]
	mov	DWORD PTR $T1[rbp+16], 364		; 0000016cH
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T1[rbp+20], 45		; 0000002dH
; Line 386
	cdqe
	lea	rbx, QWORD PTR [rdx+rax*4]
; Line 364
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 433
	xor	ecx, ecx
	vpxor	xmm1, xmm1, xmm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 119
	vmovups	YMMWORD PTR acc$3[rbp], ymm1
; Line 120
	test	edi, edi
	je	SHORT $LL14@mat_dot_
	npad	13
$LL15@mat_dot_:
; Line 121
	vmovups	ymm0, YMMWORD PTR [rbx+rcx*4]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rsi+rcx*4]
	add	ecx, 8
	cmp	ecx, edi
	jb	SHORT $LL15@mat_dot_
	vmovups	YMMWORD PTR acc$3[rbp], ymm1
	npad	9
$LL14@mat_dot_:
; Line 127
	vaddss	xmm1, xmm6, DWORD PTR acc$3[rbp]
	vaddss	xmm2, xmm1, DWORD PTR acc$3[rbp+4]
	vaddss	xmm3, xmm2, DWORD PTR acc$3[rbp+8]
	vaddss	xmm0, xmm3, DWORD PTR acc$3[rbp+12]
	vaddss	xmm1, xmm0, DWORD PTR acc$3[rbp+16]
	vaddss	xmm2, xmm1, DWORD PTR acc$3[rbp+20]
	vaddss	xmm3, xmm2, DWORD PTR acc$3[rbp+24]
	vaddss	xmm0, xmm3, DWORD PTR acc$3[rbp+28]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	mov	ecx, DWORD PTR tv555[rbp]
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; Line 433
	vmovss	DWORD PTR [r15], xmm0
	add	r15, 4
	lea	r9, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	inc	r14d
	cmp	r14d, r12d
	jl	$LL4@mat_dot_
	mov	r13, QWORD PTR __$ReturnAddress$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
$LN3@mat_dot_:
; Line 435
	vmovups	xmm0, XMMWORD PTR [rdx]
	vmovups	XMMWORD PTR [r13], xmm0
	mov	rax, r13
	vzeroupper
; Line 436
	mov	rbx, QWORD PTR [rsp+288]
	vmovaps	xmm6, XMMWORD PTR [rsp+192]
	add	rsp, 208				; 000000d0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z ENDP		; mat_dot_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?mat_rnd@@YAXUai_mat@@@Z
_TEXT	SEGMENT
$T2 = 0
mat$ = 48
?mat_rnd@@YAXUai_mat@@@Z PROC				; mat_rnd, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 419
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 420
	mov	ebx, DWORD PTR [rcx+16]
	xor	r8d, r8d
	test	ebx, ebx
	jle	$LN3@mat_rnd
; Line 421
	vmovups	ymm0, YMMWORD PTR [rcx]
	vmovss	xmm4, DWORD PTR __real@2f800000
	vmovss	xmm5, DWORD PTR __real@3f800000
	mov	edx, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
	mov	QWORD PTR [rsp+48], rsi
	mov	QWORD PTR [rsp+56], rdi
	vpextrq	r11, xmm0, 1
	mov	rdi, r11
	vmovups	YMMWORD PTR $T2[rsp], ymm0
	mov	rsi, QWORD PTR $T2[rsp+24]
	shr	rdi, 32					; 00000020H
	npad	1
$LL4@mat_rnd:
; Line 386
	mov	eax, edi
	imul	eax, r8d
	cdqe
	lea	r9, QWORD PTR [rsi+rax*4]
; Line 421
	test	r11d, r11d
; Line 229
	jle	SHORT $LN2@mat_rnd
; Line 421
	mov	r10d, r11d
	npad	12
$LL21@mat_rnd:
; Line 119
	mov	ecx, edx
; Line 229
	lea	r9, QWORD PTR [r9+4]
; Line 119
	shl	ecx, 13
	xor	ecx, edx
; Line 120
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 121
	mov	edx, ecx
	shl	edx, 5
	xor	edx, ecx
; Line 127
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, edx
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, rdx
; Line 128
	vmulss	xmm1, xmm0, xmm4
	vaddss	xmm2, xmm1, xmm1
	vsubss	xmm3, xmm2, xmm5
; Line 230
	vmovss	DWORD PTR [r9-4], xmm3
	sub	r10, 1
	jne	SHORT $LL21@mat_rnd
$LN2@mat_rnd:
; Line 420
	inc	r8d
	cmp	r8d, ebx
	jl	SHORT $LL4@mat_rnd
	mov	rdi, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+48]
$LN3@mat_rnd:
; Line 423
	vzeroupper
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?mat_rnd@@YAXUai_mat@@@Z ENDP				; mat_rnd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_mat_@@YA?AUai_mat@@HHHH@Z
_TEXT	SEGMENT
$T1 = 48
__$ReturnAddress$ = 96
col$ = 104
row$ = 112
min$ = 120
vec$ = 128
?new_mat_@@YA?AUai_mat@@HHHH@Z PROC			; new_mat_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 394
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	movsxd	rdi, r9d
	mov	rbx, rcx
; Line 400
	mov	r9d, DWORD PTR vec$[rsp]
	mov	DWORD PTR [rcx], edx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+16], edi
; Line 135
	lea	eax, DWORD PTR [r9+7]
; Line 399
	mov	DWORD PTR [rcx+20], edi
; Line 135
	cdq
; Line 400
	mov	DWORD PTR [rcx+8], r9d
; Line 135
	and	edx, 7
	add	eax, edx
	and	eax, -8
; Line 401
	mov	DWORD PTR [rcx+12], eax
; Line 403
	cmp	eax, r9d
	je	SHORT $LN5@new_mat_
; Line 404
	lea	rcx, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T1[rsp+16], 404		; 00000194H
	mov	QWORD PTR $T1[rsp], rcx
	lea	r8, OFFSET FLAT:??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@
	lea	rcx, OFFSET FLAT:??_C@_08ENKIOJLC@new_mat_@
	mov	DWORD PTR $T1[rsp+20], 46		; 0000002eH
	mov	QWORD PTR $T1[rsp+8], rcx
	mov	edx, 4
	lea	rcx, QWORD PTR $T1[rsp]
	mov	DWORD PTR [rsp+32], eax
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@new_mat_:
; Line 407
	movsxd	rcx, DWORD PTR [rbx+12]
	mov	edx, 32					; 00000020H
	imul	rcx, rdi
	shl	rcx, 2
	call	_aligned_malloc
; Line 408
	movsxd	rcx, DWORD PTR [rbx+16]
	xor	edx, edx
	movsxd	r8, DWORD PTR [rbx+12]
	imul	r8, rcx
	mov	rcx, rax
	mov	QWORD PTR [rbx+24], rax
	shl	r8, 2
	call	memset
; Line 415
	mov	rax, rbx
; Line 416
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?new_mat_@@YA?AUai_mat@@HHHH@Z ENDP			; new_mat_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?mat_vec@@YA?AUai_vec@@Uai_mat@@H@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 8
mat$ = 16
index$ = 24
?mat_vec@@YA?AUai_vec@@Uai_mat@@H@Z PROC		; mat_vec, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 386
	mov	r9d, DWORD PTR [rdx+12]
	mov	eax, r9d
	imul	eax, r8d
; Line 388
	mov	DWORD PTR [rcx+4], r9d
	movsxd	r8, eax
	mov	rax, QWORD PTR [rdx+24]
	lea	r8, QWORD PTR [rax+r8*4]
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx], eax
; Line 390
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
; Line 391
	ret	0
?mat_vec@@YA?AUai_vec@@Uai_mat@@H@Z ENDP		; mat_vec
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_dot@@YQMUai_vec@@0@Z
_TEXT	SEGMENT
acc$1 = 0
$T2 = 0
lhs$ = 112
rhs$ = 120
?vec_dot@@YQMUai_vec@@0@Z PROC				; vec_dot, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 364
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
	mov	r14d, DWORD PTR [rcx]
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	xor	esi, esi
	mov	QWORD PTR $T2[rbp], rax
	cmp	r14d, DWORD PTR [rdx]
	lea	rax, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	r8d, esi
	mov	QWORD PTR $T2[rbp+8], rax
	mov	rbx, rdx
	mov	DWORD PTR $T2[rbp+16], 364		; 0000016cH
	mov	rdi, rcx
	mov	DWORD PTR $T2[rbp+20], 45		; 0000002dH
	sete	r8b
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	lea	rcx, QWORD PTR $T2[rbp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 366
	mov	rcx, QWORD PTR [rbx+8]
	mov	rdx, QWORD PTR [rdi+8]
	vpxor	xmm1, xmm1, xmm1
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 119
	vmovups	YMMWORD PTR acc$1[rbp], ymm1
; Line 120
	test	r14d, r14d
	je	SHORT $LL7@vec_dot
	npad	8
$LL8@vec_dot:
; Line 121
	vmovups	ymm0, YMMWORD PTR [rdx+rsi*4]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rcx+rsi*4]
	add	esi, 8
	cmp	esi, r14d
	jb	SHORT $LL8@vec_dot
	vmovups	YMMWORD PTR acc$1[rbp], ymm1
	npad	8
$LL7@vec_dot:
	vxorps	xmm1, xmm1, xmm1
; Line 127
	vaddss	xmm1, xmm1, DWORD PTR acc$1[rbp]
	vaddss	xmm2, xmm1, DWORD PTR acc$1[rbp+4]
	vaddss	xmm3, xmm2, DWORD PTR acc$1[rbp+8]
	vaddss	xmm0, xmm3, DWORD PTR acc$1[rbp+12]
	vaddss	xmm1, xmm0, DWORD PTR acc$1[rbp+16]
	vaddss	xmm2, xmm1, DWORD PTR acc$1[rbp+20]
	vaddss	xmm3, xmm2, DWORD PTR acc$1[rbp+24]
	vaddss	xmm0, xmm3, DWORD PTR acc$1[rbp+28]
	vzeroupper
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 368
	lea	r11, QWORD PTR [rsp+96]
	mov	rbx, QWORD PTR [r11+16]
	mov	rsi, QWORD PTR [r11+24]
	mov	rdi, QWORD PTR [r11+32]
	mov	r14, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	rbp
	ret	0
?vec_dot@@YQMUai_vec@@0@Z ENDP				; vec_dot
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 48
dst$ = 56
lhs$ = 64
?vec_dsg_@@YQ?AUai_vec@@U1@0@Z PROC			; vec_dsg_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 346
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r15
	sub	rsp, 32					; 00000020H
; Line 348
	movsxd	rdi, DWORD PTR [rdx]
	mov	rsi, rdx
	mov	r15, rcx
	test	rdi, rdi
	jle	SHORT $LN3@vec_dsg_
; Line 352
	mov	QWORD PTR [rsp+48], rbx
	mov	rbx, QWORD PTR [rdx+8]
	mov	QWORD PTR [rsp+56], r14
	mov	r14, QWORD PTR [r8+8]
	sub	r14, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	3
$LL4@vec_dsg_:
; Line 351
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [r14+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm3, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm3
	vdivps	ymm2, ymm3, ymm1
	vsubps	ymm0, ymm3, ymm2
	vmulps	ymm1, ymm0, ymm2
; Line 352
	vmovups	YMMWORD PTR [rbx-32], ymm1
	sub	rdi, 1
	jne	SHORT $LL4@vec_dsg_
; Line 348
	mov	r14, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
$LN3@vec_dsg_:
; Line 359
	vmovups	xmm0, XMMWORD PTR [rsi]
	vmovups	XMMWORD PTR [r15], xmm0
	mov	rax, r15
	vzeroupper
; Line 360
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
?vec_dsg_@@YQ?AUai_vec@@U1@0@Z ENDP			; vec_dsg_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_sig_@@YQ?AUai_vec@@U1@0@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 48
dst$ = 56
lhs$ = 64
?vec_sig_@@YQ?AUai_vec@@U1@0@Z PROC			; vec_sig_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 325
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 331
	movsxd	rdi, DWORD PTR [rdx]
	mov	r14, rdx
	mov	rbx, QWORD PTR [rdx+8]
	mov	r15, rcx
	mov	rsi, QWORD PTR [r8+8]
	test	rdi, rdi
	jle	SHORT $LN3@vec_sig_
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	3
$LL4@vec_sig_:
; Line 334
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 335
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL4@vec_sig_
$LN3@vec_sig_:
; Line 342
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovups	XMMWORD PTR [r15], xmm0
	mov	rax, r15
	vzeroupper
; Line 343
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
?vec_sig_@@YQ?AUai_vec@@U1@0@Z ENDP			; vec_sig_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_add_@@YQ?AUai_vec@@U1@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
dst$ = 88
lhs$ = 96
rhs$ = 104
?vec_add_@@YQ?AUai_vec@@U1@00@Z PROC			; vec_add_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 271
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 64					; 00000040H
	mov	r14, r8
; Line 276
	mov	DWORD PTR $T1[rsp+16], 276		; 00000114H
	xor	r8d, r8d
	mov	DWORD PTR $T1[rsp+20], 43		; 0000002bH
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	rsi, r9
	mov	QWORD PTR $T1[rsp], rax
	mov	rdi, rdx
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	rbx, rcx
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	eax, DWORD PTR [r9]
	lea	rcx, QWORD PTR $T1[rsp]
	cmp	DWORD PTR [r14], eax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	sete	r8b
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 279
	movsxd	rcx, DWORD PTR [rdi]
	test	rcx, rcx
	jle	SHORT $LN3@vec_add_
; Line 280
	mov	rax, QWORD PTR [r14+8]
	mov	rdx, QWORD PTR [rsi+8]
	mov	r8, QWORD PTR [rdi+8]
	sub	rdx, rax
	sub	r8, rax
	dec	rcx
	shr	rcx, 3
	inc	rcx
	npad	14
$LL4@vec_add_:
	vmovups	ymm0, YMMWORD PTR [rdx+rax]
	vaddps	ymm1, ymm0, YMMWORD PTR [rax]
	vmovups	YMMWORD PTR [r8+rax], ymm1
	lea	rax, QWORD PTR [rax+32]
	sub	rcx, 1
	jne	SHORT $LL4@vec_add_
$LN3@vec_add_:
; Line 287
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovups	XMMWORD PTR [rbx], xmm0
	mov	rax, rbx
	vzeroupper
; Line 288
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
?vec_add_@@YQ?AUai_vec@@U1@00@Z ENDP			; vec_add_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_rnd@@YAXUai_vec@@@Z
_TEXT	SEGMENT
v$ = 8
?vec_rnd@@YAXUai_vec@@@Z PROC				; vec_rnd, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 229
	movsxd	rdx, DWORD PTR [rcx]
	test	rdx, rdx
	jle	SHORT $LN3@vec_rnd
; Line 230
	mov	r8, QWORD PTR [rcx+8]
	vmovss	xmm4, DWORD PTR __real@2f800000
	vmovss	xmm5, DWORD PTR __real@3f800000
	mov	eax, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
$LL12@vec_rnd:
; Line 119
	mov	ecx, eax
; Line 229
	lea	r8, QWORD PTR [r8+4]
; Line 119
	shl	ecx, 13
	xor	ecx, eax
; Line 120
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 121
	mov	eax, ecx
	shl	eax, 5
	xor	eax, ecx
; Line 127
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, eax
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, rax
; Line 128
	vmulss	xmm1, xmm0, xmm4
	vaddss	xmm2, xmm1, xmm1
	vsubss	xmm3, xmm2, xmm5
; Line 230
	vmovss	DWORD PTR [r8-4], xmm3
	sub	rdx, 1
	jne	SHORT $LL12@vec_rnd
$LN3@vec_rnd:
; Line 231
	ret	0
?vec_rnd@@YAXUai_vec@@@Z ENDP				; vec_rnd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_zro@@YAXUai_vec@@@Z
_TEXT	SEGMENT
v$ = 8
?vec_zro@@YAXUai_vec@@@Z PROC				; vec_zro, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 209
	mov	edx, DWORD PTR [rcx]
	mov	r8, QWORD PTR [rcx+8]
	xor	ecx, ecx
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 142
	test	edx, edx
	je	SHORT $LN5@vec_zro
	vxorps	xmm0, xmm0, xmm0
$LL6@vec_zro:
; Line 143
	vmovups	YMMWORD PTR [r8+rcx*4], ymm0
	add	ecx, 8
	cmp	ecx, edx
	jb	SHORT $LL6@vec_zro
$LN5@vec_zro:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 210
	vzeroupper
	ret	0
?vec_zro@@YAXUai_vec@@@Z ENDP				; vec_zro
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 112
s0$ = 120
s1$ = 128
s2$ = 136
s3$ = 144
s4$ = 152
s5$ = 160
s6$ = 168
s7$ = 176
s8$ = 184
s9$ = 192
?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z PROC		; new_vec10, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 198
	push	rbx
	sub	rsp, 96					; 00000060H
	vmovaps	XMMWORD PTR [rsp+80], xmm6
; Line 154
	mov	edx, 32					; 00000020H
	vmovaps	XMMWORD PTR [rsp+64], xmm7
; Line 198
	mov	rbx, rcx
	vmovaps	XMMWORD PTR [rsp+48], xmm8
	vmovaps	xmm8, xmm3
; Line 154
	lea	ecx, QWORD PTR [rdx+32]
; Line 198
	vmovaps	xmm7, xmm2
	vmovaps	xmm6, xmm1
; Line 154
	call	_aligned_malloc
; Line 201
	vmovss	xmm1, DWORD PTR s4$[rsp]
	vpxor	xmm0, xmm0, xmm0
; Line 160
	mov	QWORD PTR $T1[rsp+8], rax
	vmovups	YMMWORD PTR [rax], ymm0
	vmovups	YMMWORD PTR [rax+32], ymm0
	mov	DWORD PTR $T1[rsp], 10
	mov	DWORD PTR $T1[rsp+4], 16
; Line 198
	vmovups	xmm0, XMMWORD PTR $T1[rsp]
	vmovups	XMMWORD PTR [rbx], xmm0
; Line 199
	mov	rax, QWORD PTR [rbx+8]
; Line 200
	vmovss	xmm0, DWORD PTR s3$[rsp]
	vmovss	DWORD PTR [rax], xmm6
	vmovss	DWORD PTR [rax+4], xmm7
	vmovss	DWORD PTR [rax+8], xmm8
	vmovss	DWORD PTR [rax+12], xmm0
; Line 201
	vmovss	xmm0, DWORD PTR s5$[rsp]
	vmovss	DWORD PTR [rax+16], xmm1
; Line 202
	vmovss	xmm1, DWORD PTR s6$[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
	vmovss	xmm0, DWORD PTR s7$[rsp]
	vmovss	DWORD PTR [rax+24], xmm1
; Line 203
	vmovss	xmm1, DWORD PTR s8$[rsp]
	vmovss	DWORD PTR [rax+28], xmm0
	vmovss	xmm0, DWORD PTR s9$[rsp]
	vmovss	DWORD PTR [rax+32], xmm1
	vmovss	DWORD PTR [rax+36], xmm0
; Line 204
	mov	rax, rbx
	vzeroupper
; Line 205
	vmovaps	xmm6, XMMWORD PTR [rsp+80]
	vmovaps	xmm7, XMMWORD PTR [rsp+64]
	vmovaps	xmm8, XMMWORD PTR [rsp+48]
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z ENDP		; new_vec10
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_vec@@YA?AUai_vec@@H@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 48
len$ = 56
?new_vec@@YA?AUai_vec@@H@Z PROC				; new_vec, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 135
	lea	eax, DWORD PTR [rdx+7]
; Line 150
	mov	ebp, edx
; Line 135
	cdq
; Line 150
	mov	r14, rcx
; Line 135
	and	edx, 7
	lea	esi, DWORD PTR [rdx+rax]
; Line 154
	mov	edx, 32					; 00000020H
; Line 135
	and	esi, -8
; Line 154
	movsxd	rbx, esi
	shl	rbx, 2
	mov	rcx, rbx
	call	_aligned_malloc
; Line 155
	mov	r8, rbx
	xor	edx, edx
	mov	rcx, rax
	mov	rdi, rax
	call	memset
; Line 162
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, r14
	mov	DWORD PTR [r14], ebp
	mov	rbp, QWORD PTR [rsp+56]
	mov	DWORD PTR [r14+4], esi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [r14+8], rdi
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
?new_vec@@YA?AUai_vec@@H@Z ENDP				; new_vec
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_max@@YAHH@Z
_TEXT	SEGMENT
len$ = 8
?vec_max@@YAHH@Z PROC					; vec_max, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 135
	lea	eax, DWORD PTR [rcx+7]
	cdq
	and	edx, 7
	add	eax, edx
	and	eax, -8
; Line 139
	ret	0
?vec_max@@YAHH@Z ENDP					; vec_max
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?rand_f@@YAMMM@Z
_TEXT	SEGMENT
min$ = 8
max$ = 16
?rand_f@@YAMMM@Z PROC					; rand_f, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 119
	mov	ecx, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
; Line 126
	vmovaps	xmm3, xmm0
; Line 119
	shl	ecx, 13
	xor	ecx, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
; Line 120
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 121
	mov	eax, ecx
	shl	eax, 5
	xor	eax, ecx
	vxorps	xmm0, xmm0, xmm0
; Line 127
	vcvtsi2ss xmm0, xmm0, rax
; Line 128
	vmulss	xmm2, xmm0, DWORD PTR __real@2f800000
	vsubss	xmm1, xmm1, xmm3
	vmulss	xmm2, xmm2, xmm1
	vaddss	xmm0, xmm2, xmm3
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, eax
; Line 129
	ret	0
?rand_f@@YAMMM@Z ENDP					; rand_f
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?xorshift32@@YAII@Z
_TEXT	SEGMENT
x$ = 8
?xorshift32@@YAII@Z PROC				; xorshift32, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 119
	mov	eax, ecx
	shl	eax, 13
	xor	ecx, eax
; Line 120
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 121
	mov	eax, ecx
	shl	eax, 5
	xor	eax, ecx
; Line 123
	ret	0
?xorshift32@@YAII@Z ENDP				; xorshift32
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?mem_chk_vec@@YAXUai_vec@@@Z
_TEXT	SEGMENT
vec$ = 8
?mem_chk_vec@@YAXUai_vec@@@Z PROC			; mem_chk_vec, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 114
	ret	0
?mem_chk_vec@@YAXUai_vec@@@Z ENDP			; mem_chk_vec
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?drvs__aii_err_out@@YAXIPEAM00@Z
_TEXT	SEGMENT
len$ = 8
err$ = 16
tar$ = 24
act$ = 32
?drvs__aii_err_out@@YAXIPEAM00@Z PROC			; drvs__aii_err_out, COMDAT
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 156
	xor	r10d, r10d
	test	ecx, ecx
	je	SHORT $LN3@drvs__aii_
	vmovups	ymm3, YMMWORD PTR __ymm@3f8000003f8000003f8000003f8000003f8000003f8000003f8000003f800000
	npad	1
$LL4@drvs__aii_:
; Line 157
	vmovups	ymm1, YMMWORD PTR [r9+r10*4]
	vsubps	ymm0, ymm3, ymm1
	vmulps	ymm2, ymm0, ymm1
	vsubps	ymm1, ymm1, YMMWORD PTR [r8+r10*4]
	vmulps	ymm2, ymm2, ymm1
	vmovups	YMMWORD PTR [rdx+r10*4], ymm2
	add	r10d, 8
	cmp	r10d, ecx
	jb	SHORT $LL4@drvs__aii_
$LN3@drvs__aii_:
; Line 165
	vzeroupper
	ret	0
?drvs__aii_err_out@@YAXIPEAM00@Z ENDP			; drvs__aii_err_out
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?drvs__zro@@YAXIPEAM@Z
_TEXT	SEGMENT
len$ = 8
dst$ = 16
?drvs__zro@@YAXIPEAM@Z PROC				; drvs__zro, COMDAT
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 142
	xor	r8d, r8d
	test	ecx, ecx
	je	SHORT $LN3@drvs__zro
	vxorps	xmm0, xmm0, xmm0
	npad	5
$LL4@drvs__zro:
; Line 143
	vmovups	YMMWORD PTR [rdx+r8*4], ymm0
	add	r8d, 8
	cmp	r8d, ecx
	jb	SHORT $LL4@drvs__zro
$LN3@drvs__zro:
; Line 145
	vzeroupper
	ret	0
?drvs__zro@@YAXIPEAM@Z ENDP				; drvs__zro
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?drvs__dot@@YAXIPEAM00@Z
_TEXT	SEGMENT
acc$ = 0
len$ = 80
dst$ = 88
lhs$ = 96
rhs$ = 104
?drvs__dot@@YAXIPEAM00@Z PROC				; drvs__dot, COMDAT
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 119
	push	rbp
	sub	rsp, 64					; 00000040H
	lea	rbp, QWORD PTR [rsp+32]
	and	rbp, -32				; ffffffffffffffe0H
	xor	r10d, r10d
	vpxor	xmm1, xmm1, xmm1
	vmovups	YMMWORD PTR acc$[rbp], ymm1
; Line 120
	test	ecx, ecx
	je	SHORT $LL3@drvs__dot
	npad	1
$LL4@drvs__dot:
; Line 121
	vmovups	ymm0, YMMWORD PTR [r8+r10*4]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [r9+r10*4]
	add	r10d, 8
	cmp	r10d, ecx
	jb	SHORT $LL4@drvs__dot
	vmovups	YMMWORD PTR acc$[rbp], ymm1
	npad	6
$LL3@drvs__dot:
	vxorps	xmm1, xmm1, xmm1
; Line 127
	vaddss	xmm1, xmm1, DWORD PTR acc$[rbp]
	vaddss	xmm2, xmm1, DWORD PTR acc$[rbp+4]
	vaddss	xmm3, xmm2, DWORD PTR acc$[rbp+8]
	vaddss	xmm0, xmm3, DWORD PTR acc$[rbp+12]
	vaddss	xmm1, xmm0, DWORD PTR acc$[rbp+16]
	vaddss	xmm2, xmm1, DWORD PTR acc$[rbp+20]
	vaddss	xmm3, xmm2, DWORD PTR acc$[rbp+24]
	vaddss	xmm0, xmm3, DWORD PTR acc$[rbp+28]
; Line 129
	vmovss	DWORD PTR [rdx], xmm0
	vzeroupper
; Line 130
	add	rsp, 64					; 00000040H
	pop	rbp
	ret	0
?drvs__dot@@YAXIPEAM00@Z ENDP				; drvs__dot
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?drvs__maa@@YAXIPEAM00M@Z
_TEXT	SEGMENT
len$ = 8
dst$ = 16
lhs$ = 24
rhs$ = 32
alpha$ = 40
?drvs__maa@@YAXIPEAM00M@Z PROC				; drvs__maa, COMDAT
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 96
	xor	r10d, r10d
	test	ecx, ecx
	je	SHORT $LN3@drvs__maa
	vbroadcastss ymm1, DWORD PTR alpha$[rsp]
	npad	2
$LL4@drvs__maa:
; Line 99
	vmovups	ymm0, YMMWORD PTR [r9+r10*4]
	vfmadd213ps ymm0, ymm1, YMMWORD PTR [r8+r10*4]
	vmovups	YMMWORD PTR [rdx+r10*4], ymm0
	add	r10d, 8
	cmp	r10d, ecx
	jb	SHORT $LL4@drvs__maa
$LN3@drvs__maa:
; Line 101
	vzeroupper
	ret	0
?drvs__maa@@YAXIPEAM00M@Z ENDP				; drvs__maa
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?TraceMessageKindToString@@YAPEB_WH@Z
_TEXT	SEGMENT
Kind$ = 8
?TraceMessageKindToString@@YAPEB_WH@Z PROC		; TraceMessageKindToString, COMDAT
; File W:\cpp\void\dr\trace.c
; Line 6
	cmp	ecx, 7
	ja	SHORT $LN2@TraceMessa
	movsxd	rax, ecx
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	ecx, DWORD PTR $LN13@TraceMessa[rdx+rax*4]
	add	rcx, rdx
	jmp	rcx
$LN4@TraceMessa:
; Line 7
	lea	rax, OFFSET FLAT:??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN5@TraceMessa:
; Line 8
	lea	rax, OFFSET FLAT:??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN6@TraceMessa:
; Line 9
	lea	rax, OFFSET FLAT:??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN7@TraceMessa:
; Line 10
	lea	rax, OFFSET FLAT:??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@
; Line 17
	ret	0
$LN8@TraceMessa:
; Line 11
	lea	rax, OFFSET FLAT:??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN9@TraceMessa:
; Line 12
	lea	rax, OFFSET FLAT:??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN10@TraceMessa:
; Line 13
	lea	rax, OFFSET FLAT:??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@
; Line 17
	ret	0
$LN11@TraceMessa:
; Line 14
	lea	rax, OFFSET FLAT:??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@
; Line 17
	ret	0
$LN2@TraceMessa:
; Line 16
	lea	rax, OFFSET FLAT:??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@
; Line 17
	ret	0
	npad	1
$LN13@TraceMessa:
	DD	$LN4@TraceMessa
	DD	$LN5@TraceMessa
	DD	$LN6@TraceMessa
	DD	$LN10@TraceMessa
	DD	$LN7@TraceMessa
	DD	$LN11@TraceMessa
	DD	$LN8@TraceMessa
	DD	$LN9@TraceMessa
?TraceMessageKindToString@@YAPEB_WH@Z ENDP		; TraceMessageKindToString
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?CStrW@@YAPEB_WPEBD@Z
_TEXT	SEGMENT
Str$ = 8
?CStrW@@YAPEB_WPEBD@Z PROC				; CStrW, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	rdx, rcx
	mov	ecx, -1
	jmp	?Widen@@YAPEA_WHPEBD@Z			; Widen
?CStrW@@YAPEB_WPEBD@Z ENDP				; CStrW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
ArgC$ = 48
ArgV$ = 56
main	PROC						; COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 434
$LN7:
	sub	rsp, 40					; 00000028H
	lea	eax, DWORD PTR [rcx-1]
	mov	DWORD PTR ?ARGUMENTS@@3U_ARGUMENTS@@A, eax
; Line 435
	lea	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR ?ARGUMENTS@@3U_ARGUMENTS@@A+8, rax
; Line 436
	call	?PlatformInitialize@@YAXXZ		; PlatformInitialize
; Line 437
	call	?MAIN@@YAXXZ				; MAIN
	int	3
$LN6@main:
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?PlatformDeinitialize@@YAXXZ
_TEXT	SEGMENT
?PlatformDeinitialize@@YAXXZ PROC			; PlatformDeinitialize, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 426
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	test	ecx, ecx
	je	SHORT $LN2@PlatformDe
; Line 427
	rex_jmp	QWORD PTR __imp_timeEndPeriod
$LN2@PlatformDe:
; Line 429
	ret	0
?PlatformDeinitialize@@YAXXZ ENDP			; PlatformDeinitialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?PlatformInitialize@@YAXXZ
_TEXT	SEGMENT
Result$1 = 48
?PlatformInitialize@@YAXXZ PROC				; PlatformInitialize, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 383
	sub	rsp, 40					; 00000028H
; Line 384
	test	BYTE PTR ?PROCESS@@3U_PROCESS@@A+128, 4
	je	SHORT $LN2@PlatformIn
; Line 385
	call	QWORD PTR __imp_AllocConsole
$LN2@PlatformIn:
; Line 387
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
; Line 388
	mov	ecx, -10				; fffffff6H
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+96, rax
	call	QWORD PTR __imp_GetStdHandle
; Line 389
	mov	ecx, -12				; fffffff4H
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+64, rax
	call	QWORD PTR __imp_GetStdHandle
; Line 393
	mov	ecx, 1
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 1
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+120, rax
	call	QWORD PTR __imp_timeBeginPeriod
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	xor	edx, edx
	test	eax, eax
	cmovne	ecx, edx
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, ecx
; Line 25
	lea	rcx, QWORD PTR Result$1[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 399
	test	BYTE PTR ?PROCESS@@3U_PROCESS@@A+128, 4
	mov	rax, QWORD PTR Result$1[rsp]
	mov	QWORD PTR ?SYSTEM@@3U_SYSTEM@@A+64, rax
	je	SHORT $LN4@PlatformIn
; Line 405
	mov	QWORD PTR [rsp+56], rbx
	lea	rcx, OFFSET FLAT:??_C@_0L@GMPLCCII@user32?4dll@
	mov	QWORD PTR [rsp+32], rdi
	call	QWORD PTR __imp_LoadLibraryA
; Line 407
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@
	mov	rbx, rax
	call	QWORD PTR __imp_GetProcAddress
; Line 409
	lea	rdx, OFFSET FLAT:??_C@_0BD@ENICNPLM@SetProcessDPIAware@
	mov	rcx, rbx
	mov	rdi, rax
	call	QWORD PTR __imp_GetProcAddress
; Line 412
	test	rdi, rdi
	je	SHORT $LN5@PlatformIn
; Line 413
	mov	rcx, -3
	call	rdi
; Line 414
	jmp	SHORT $LN7@PlatformIn
$LN5@PlatformIn:
; Line 415
	test	rax, rax
	je	SHORT $LN7@PlatformIn
; Line 416
	call	rax
$LN7@PlatformIn:
; Line 419
	mov	rcx, rbx
	call	QWORD PTR __imp_FreeLibrary
	mov	rdi, QWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+56]
$LN4@PlatformIn:
; Line 421
	add	rsp, 40					; 00000028H
	ret	0
?PlatformInitialize@@YAXXZ ENDP				; PlatformInitialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FormatW@@YAPEA_WPEB_WZZ
_TEXT	SEGMENT
Format$ = 96
?FormatW@@YAPEA_WPEB_WZZ PROC				; FormatW, COMDAT
; File W:\cpp\void\dr\text.c
; Line 32
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 56					; 00000038H
	mov	rsi, rcx
; Line 33
	lea	r14, QWORD PTR Format$[rsp+8]
; Line 34
	mov	rbx, -1
	npad	4
$LL37@FormatW:
	cmp	WORD PTR [rcx+rbx*2+2], 0
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL37@FormatW
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 15
	lea	eax, DWORD PTR [rbx+257]
	movsxd	rcx, eax
	add	rcx, rcx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], rcx
	xor	ecx, ecx
	lea	edx, QWORD PTR [r9+1]
	mov	QWORD PTR [rsp+32], 0
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 16
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rdi, rax
; File W:\cpp\void\dr\text.c
; Line 16
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], r14
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vswprintf
; File W:\cpp\void\dr\text.c
; Line 36
	mov	rax, rdi
; Line 37
	add	rsp, 56					; 00000038H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?FormatW@@YAPEA_WPEB_WZZ ENDP				; FormatW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FormatA@@YAPEADPEBDZZ
_TEXT	SEGMENT
Format$ = 96
?FormatA@@YAPEADPEBDZZ PROC				; FormatA, COMDAT
; File W:\cpp\void\dr\text.c
; Line 23
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 56					; 00000038H
	mov	rsi, rcx
; Line 24
	lea	r14, QWORD PTR Format$[rsp+8]
; Line 25
	mov	rbx, -1
	npad	4
$LL37@FormatA:
	cmp	BYTE PTR [rcx+rbx+1], 0
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL37@FormatA
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 7
	lea	eax, DWORD PTR [rbx+257]
	movsxd	rcx, eax
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], rcx
	xor	ecx, ecx
	mov	QWORD PTR [rsp+32], 0
	lea	edx, QWORD PTR [r9+1]
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 8
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rdi, rax
; File W:\cpp\void\dr\text.c
; Line 8
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1491
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], r14
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
; File W:\cpp\void\dr\text.c
; Line 27
	mov	rax, rdi
; Line 28
	add	rsp, 56					; 00000038H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?FormatA@@YAPEADPEBDZZ ENDP				; FormatA
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
_TEXT	SEGMENT
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z PROC		; FormatExtendedW, COMDAT
; File W:\cpp\void\dr\text.c
; Line 15
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	lea	eax, DWORD PTR [rcx+257]
	mov	r14, r9
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 15
	movsxd	r10, eax
	add	r10, r10
	mov	rdi, r8
	mov	rsi, rdx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], r10
; File W:\cpp\void\dr\text.c
; Line 15
	mov	ebx, ecx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+32], 0
	lea	edx, QWORD PTR [r9+1]
	xor	ecx, ecx
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 16
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rbp, rax
; File W:\cpp\void\dr\text.c
; Line 16
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rdi
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vswprintf
; File W:\cpp\void\dr\text.c
; Line 17
	test	r14, r14
	je	SHORT $LN35@FormatExte
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1066
	test	eax, eax
	mov	ecx, -1
	cmovs	eax, ecx
; File W:\cpp\void\dr\text.c
; Line 17
	mov	DWORD PTR [r14], eax
$LN35@FormatExte:
; Line 19
	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ENDP		; FormatExtendedW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
_TEXT	SEGMENT
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z PROC		; FormatExtendedA, COMDAT
; File W:\cpp\void\dr\text.c
; Line 7
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	lea	eax, DWORD PTR [rcx+257]
	mov	r14, r9
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 7
	movsxd	r10, eax
	mov	rdi, r8
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], r10
; File W:\cpp\void\dr\text.c
; Line 7
	mov	rsi, rdx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+32], 0
; File W:\cpp\void\dr\text.c
; Line 7
	mov	ebx, ecx
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	ecx, ecx
	lea	edx, QWORD PTR [r9+1]
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 8
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rbp, rax
; File W:\cpp\void\dr\text.c
; Line 8
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1491
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rdi
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
; File W:\cpp\void\dr\text.c
; Line 9
	test	r14, r14
	je	SHORT $LN35@FormatExte
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1495
	test	eax, eax
	mov	ecx, -1
	cmovs	eax, ecx
; File W:\cpp\void\dr\text.c
; Line 9
	mov	DWORD PTR [r14], eax
$LN35@FormatExte:
; Line 11
	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z ENDP		; FormatExtendedA
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
$T5 = 48
$T6 = 48
Location$ = 160
Expression$ = 168
IsTrue$ = 176
Message$ = 184
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ PROC	; AssertExtendedW, COMDAT
; File W:\cpp\void\dr\break.c
; Line 8
	mov	rax, rsp
	mov	QWORD PTR [rax+32], r9
	push	rsi
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
	mov	rsi, r9
	mov	r15, rdx
	mov	r14, rcx
; Line 9
	test	r8d, r8d
	jne	$LN2@AssertExte
; Line 12
	mov	QWORD PTR [rax-32], rbx
; Line 14
	mov	rbx, -1
	mov	QWORD PTR [rax-40], rbp
	mov	QWORD PTR [rax-48], rdi
	mov	QWORD PTR [rax-56], r12
	mov	QWORD PTR [rax-64], r13
	lea	r13, QWORD PTR [rax+40]
	npad	12
$LL44@AssertExte:
	cmp	WORD PTR [r9+rbx*2+2], 0
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL44@AssertExte
; File W:\cpp\void\dr\text.c
; Line 15
	lea	eax, DWORD PTR [rbx+257]
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r12d, r12d
; File W:\cpp\void\dr\text.c
; Line 15
	movsxd	rcx, eax
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	ebp, 1
; File W:\cpp\void\dr\text.c
; Line 15
	add	rcx, rcx
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
	mov	QWORD PTR [rsp+40], rcx
	mov	edx, ebp
	xor	ecx, ecx
	mov	QWORD PTR [rsp+32], r12
	lea	r8d, QWORD PTR [r12+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 16
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rdi, rax
; File W:\cpp\void\dr\text.c
; Line 16
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], r13
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], r12
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	or	rcx, rbp
	call	__stdio_common_vswprintf
; File W:\cpp\void\dr\break.c
; Line 14
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	mov	r9, rdi
	lea	r8, OFFSET FLAT:??_C@_15GANGMFKL@?$AA?$CF?$AAs@
	lea	edx, QWORD PTR [rbp+6]
	lea	rcx, QWORD PTR $T6[rsp]
	vmovups	XMMWORD PTR $T6[rsp], xmm0
	vmovsd	QWORD PTR $T6[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 18
	vmovups	xmm1, XMMWORD PTR [r14]
	vmovsd	xmm0, QWORD PTR [r14+16]
	vmovsd	QWORD PTR $T5[rsp+16], xmm0
; File W:\cpp\void\dr\plat-win32.c
; Line 89
	mov	rcx, QWORD PTR $T5[rsp+16]
	mov	rax, rcx
	mov	QWORD PTR [rsp+40], r15
	shr	rax, 32					; 00000020H
	mov	r8d, ecx
	vpextrq	r9, xmm1, 1
	vmovq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@
	mov	DWORD PTR [rsp+32], eax
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
; Line 92
	lea	r9d, QWORD PTR [r12+16]
	mov	rdx, rax
	lea	r8, OFFSET FLAT:??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@
	xor	ecx, ecx
	mov	rbx, rax
	call	QWORD PTR __imp_MessageBoxA
; Line 94
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@
	mov	edx, ebp
	lea	rcx, QWORD PTR $T2[rsp]
	vmovups	XMMWORD PTR $T2[rsp], xmm0
	vmovsd	QWORD PTR $T2[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 95
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	edx, ebp
	lea	rcx, QWORD PTR $T1[rsp]
	vmovups	XMMWORD PTR $T1[rsp], xmm0
	vmovsd	QWORD PTR $T1[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 96
	mov	rdx, rbx
	lea	ecx, QWORD PTR [rbp-2]
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	mov	r9, rax
	lea	r8, OFFSET FLAT:??_C@_15GANGMFKL@?$AA?$CF?$AAs@
	mov	edx, ebp
	lea	rcx, QWORD PTR $T4[rsp]
	vmovups	XMMWORD PTR $T4[rsp], xmm0
	vmovsd	QWORD PTR $T4[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 97
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	edx, ebp
	lea	rcx, QWORD PTR $T3[rsp]
	vmovsd	QWORD PTR $T3[rsp+16], xmm1
	vmovups	XMMWORD PTR $T3[rsp], xmm0
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 99
	lea	r9d, QWORD PTR [r12+18]
	xor	ecx, ecx
	lea	r8, OFFSET FLAT:??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@
	lea	rdx, OFFSET FLAT:??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@
	call	QWORD PTR __imp_MessageBoxA
	mov	r13, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+104]
	mov	rbx, QWORD PTR [rsp+120]
; Line 103
	cmp	eax, 3
	jne	SHORT $LN29@AssertExte
; Line 104
	mov	ecx, 777				; 00000309H
	call	QWORD PTR __imp_ExitProcess
	int	3
$LN29@AssertExte:
; Line 106
	cmp	eax, 4
	jne	SHORT $LN31@AssertExte
; Line 110
	call	QWORD PTR __imp_DebugBreak
; Line 111
	jmp	SHORT $LN33@AssertExte
$LN31@AssertExte:
; Line 112
	cmp	eax, 5
	cmove	ebp, r12d
$LN33@AssertExte:
	mov	r12, QWORD PTR [rsp+96]
; File W:\cpp\void\dr\break.c
; Line 18
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+112]
; Line 22
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
$LN2@AssertExte:
; Line 21
	xor	eax, eax
; Line 22
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
$LN47@AssertExte:
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ENDP	; AssertExtendedW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?LoadFileData@@YAPEAXPEAIPEBD@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
$T3 = 96
$T4 = 96
BytesRead$ = 176
Name$ = 184
FileRead$5 = 192
FileSizeHI$6 = 200
?LoadFileData@@YAPEAXPEAIPEBD@Z PROC			; LoadFileData, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 530
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 136				; 00000088H
; Line 531
	xor	r15d, r15d
	mov	r14, rdx
	mov	rsi, rcx
	mov	QWORD PTR [rsp+48], r15
	mov	DWORD PTR [rsp+40], r15d
	xor	r9d, r9d
	mov	edx, -2147483648			; 80000000H
	mov	DWORD PTR [rsp+32], 3
	lea	r8d, QWORD PTR [r15+3]
	mov	rcx, r14
	call	QWORD PTR __imp_CreateFileA
	mov	rdi, rax
; Line 536
	cmp	rax, -1
	je	$LN2@LoadFileDa
; Line 537
	mov	QWORD PTR [rsp+176], rbx
; Line 538
	lea	rdx, QWORD PTR FileSizeHI$6[rsp]
	mov	rcx, rax
	mov	QWORD PTR [rsp+128], rbp
	mov	DWORD PTR FileSizeHI$6[rsp], r15d
	mov	DWORD PTR FileRead$5[rsp], r15d
	call	QWORD PTR __imp_GetFileSize
; Line 542
	mov	edx, eax
	xor	ecx, ecx
	lea	r9d, QWORD PTR [r15+4]
	mov	ebx, eax
	mov	r8d, 12288				; 00003000H
	call	QWORD PTR __imp_VirtualAlloc
; Line 544
	lea	r9, QWORD PTR FileRead$5[rsp]
	mov	QWORD PTR [rsp+32], r15
	mov	rdx, rax
	mov	r8d, ebx
	mov	rcx, rdi
	mov	rbp, rax
	call	QWORD PTR __imp_ReadFile
	mov	rbx, QWORD PTR [rsp+176]
	test	eax, eax
	jne	SHORT $LN4@LoadFileDa
; Line 525
	xor	edx, edx
	mov	r8d, 32768				; 00008000H
	mov	rcx, rbp
	call	QWORD PTR __imp_VirtualFree
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rax, OFFSET FLAT:??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@
	mov	DWORD PTR $T2[rsp+16], 548		; 00000224H
	mov	QWORD PTR $T2[rsp], rax
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	lea	ecx, QWORD PTR [r15-1]
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rax, OFFSET FLAT:??_C@_0N@LDNIACEG@LoadFileData@
	mov	DWORD PTR $T2[rsp+20], 16
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	rdx, r14
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T2[rsp+8], rax
; File W:\cpp\void\dr\plat-win32.c
; Line 546
	mov	ebp, r15d
; Line 515
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 548
	vmovups	xmm0, XMMWORD PTR $T2[rsp]
	vmovsd	xmm1, QWORD PTR $T2[rsp+16]
	mov	r9, rax
	lea	r8, OFFSET FLAT:??_C@_1DC@NCJOBAHH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5@
	lea	edx, QWORD PTR [r15+6]
	lea	rcx, QWORD PTR $T4[rsp]
	vmovups	XMMWORD PTR $T4[rsp], xmm0
	vmovsd	QWORD PTR $T4[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@LoadFileDa:
; Line 551
	test	rsi, rsi
	je	SHORT $LN5@LoadFileDa
; Line 552
	mov	eax, DWORD PTR FileRead$5[rsp]
	mov	DWORD PTR [rsi], eax
$LN5@LoadFileDa:
; Line 554
	mov	rcx, rdi
	call	QWORD PTR __imp_CloseHandle
; Line 559
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+128]
; Line 560
	add	rsp, 136				; 00000088H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN2@LoadFileDa:
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rax, OFFSET FLAT:??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@
	mov	DWORD PTR $T1[rsp+16], 557		; 0000022dH
	mov	QWORD PTR $T1[rsp], rax
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	rdx, r14
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rax, OFFSET FLAT:??_C@_0N@LDNIACEG@LoadFileData@
	mov	DWORD PTR $T1[rsp+20], 17
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	ecx, -1
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T1[rsp+8], rax
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 557
	vmovups	xmm0, XMMWORD PTR $T1[rsp]
	vmovsd	xmm1, QWORD PTR $T1[rsp+16]
	mov	r9, rax
	lea	r8, OFFSET FLAT:??_C@_1DC@BNICGKJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAL?$AAo?$AAa?$AAd?$AA?5@
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	vmovups	XMMWORD PTR $T3[rsp], xmm0
	vmovsd	QWORD PTR $T3[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 559
	mov	rax, r15
; Line 560
	add	rsp, 136				; 00000088H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
?LoadFileData@@YAPEAXPEAIPEBD@Z ENDP			; LoadFileData
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?UnloadFileData@@YAXPEAX@Z
_TEXT	SEGMENT
FileData$ = 8
?UnloadFileData@@YAXPEAX@Z PROC				; UnloadFileData, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 525
	xor	edx, edx
	mov	r8d, 32768				; 00008000H
	rex_jmp	QWORD PTR __imp_VirtualFree
?UnloadFileData@@YAXPEAX@Z ENDP				; UnloadFileData
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
Location$ = 96
Expression$ = 104
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z PROC	; DebugBreakExtended, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 87
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 80					; 00000050H
; Line 89
	mov	eax, DWORD PTR [rcx+20]
	mov	rdi, rcx
	mov	r9, QWORD PTR [rcx+8]
	mov	esi, 1
	mov	r8d, DWORD PTR [rcx+16]
	mov	QWORD PTR [rsp+40], rdx
	mov	rdx, QWORD PTR [rcx]
	lea	rcx, OFFSET FLAT:??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@
	mov	DWORD PTR [rsp+32], eax
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
; Line 92
	lea	r9d, QWORD PTR [rsi+15]
	mov	rdx, rax
	lea	r8, OFFSET FLAT:??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@
	xor	ecx, ecx
	mov	rbx, rax
	call	QWORD PTR __imp_MessageBoxA
; Line 94
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovsd	xmm1, QWORD PTR [rdi+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@
	mov	edx, esi
	lea	rcx, QWORD PTR $T4[rsp]
	vmovups	XMMWORD PTR $T4[rsp], xmm0
	vmovsd	QWORD PTR $T4[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 95
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovsd	xmm1, QWORD PTR [rdi+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	edx, esi
	lea	rcx, QWORD PTR $T3[rsp]
	vmovups	XMMWORD PTR $T3[rsp], xmm0
	vmovsd	QWORD PTR $T3[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 96
	mov	rdx, rbx
	lea	ecx, QWORD PTR [rsi-2]
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovsd	xmm1, QWORD PTR [rdi+16]
	mov	r9, rax
	lea	r8, OFFSET FLAT:??_C@_15GANGMFKL@?$AA?$CF?$AAs@
	mov	edx, esi
	lea	rcx, QWORD PTR $T2[rsp]
	vmovups	XMMWORD PTR $T2[rsp], xmm0
	vmovsd	QWORD PTR $T2[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 97
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovsd	xmm1, QWORD PTR [rdi+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	edx, esi
	lea	rcx, QWORD PTR $T1[rsp]
	vmovups	XMMWORD PTR $T1[rsp], xmm0
	vmovsd	QWORD PTR $T1[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 99
	lea	r9d, QWORD PTR [rsi+17]
	xor	ecx, ecx
	lea	r8, OFFSET FLAT:??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@
	lea	rdx, OFFSET FLAT:??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@
	call	QWORD PTR __imp_MessageBoxA
; Line 103
	cmp	eax, 3
	jne	SHORT $LN2@DebugBreak
; Line 104
	mov	ecx, 777				; 00000309H
	call	QWORD PTR __imp_ExitProcess
	int	3
$LN2@DebugBreak:
; Line 106
	cmp	eax, 4
	jne	SHORT $LN4@DebugBreak
; Line 110
	call	QWORD PTR __imp_DebugBreak
; Line 116
	mov	eax, esi
; Line 117
	mov	rbx, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN4@DebugBreak:
	mov	rbx, QWORD PTR [rsp+96]
	xor	ecx, ecx
	cmp	eax, 5
	cmove	esi, ecx
	mov	eax, esi
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN16@DebugBreak:
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z ENDP	; DebugBreakExtended
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?OutputW@@YAXPEB_W@Z
_TEXT	SEGMENT
Text$ = 64
Wrote$ = 72
?OutputW@@YAXPEB_W@Z PROC				; OutputW, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 43
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	call	QWORD PTR __imp_OutputDebugStringW
; Line 46
	mov	r8, -1
	npad	10
$LL4@OutputW:
	inc	r8
	cmp	WORD PTR [rbx+r8*2], 0
	jne	SHORT $LL4@OutputW
	mov	rcx, QWORD PTR ?PROCESS@@3U_PROCESS@@A+96
	lea	r9, QWORD PTR Wrote$[rsp]
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], 0
	call	QWORD PTR __imp_WriteConsoleW
	test	eax, eax
	jne	SHORT $LN2@OutputW
; Line 48
	lea	rcx, OFFSET FLAT:??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@
	call	printf
$LN2@OutputW:
; Line 50
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
?OutputW@@YAXPEB_W@Z ENDP				; OutputW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?Widen@@YAPEA_WHPEBD@Z
_TEXT	SEGMENT
Len$ = 64
Str$ = 72
?Widen@@YAPEA_WHPEBD@Z PROC				; Widen, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 64
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	ebx, ecx
; Line 65
	test	rdx, rdx
	jne	SHORT $LN2@Widen
; Line 66
	xor	eax, eax
; Line 83
	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN2@Widen:
	mov	QWORD PTR [rsp+64], rbp
	mov	QWORD PTR [rsp+72], rsi
; Line 70
	xor	esi, esi
	mov	QWORD PTR [rsp+80], r14
; Line 72
	cmp	ecx, -1
	jne	SHORT $LN3@Widen
	mov	rbx, -1
	npad	2
$LL7@Widen:
	inc	rbx
	cmp	BYTE PTR [rdx+rbx], sil
	jne	SHORT $LL7@Widen
$LN3@Widen:
; Line 76
	mov	r14d, 65001				; 0000fde9H
	mov	DWORD PTR [rsp+40], esi
	mov	ecx, r14d
	mov	QWORD PTR [rsp+32], rsi
	mov	r9d, ebx
	mov	r8, rdi
	mov	edx, 8
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	ebp, eax
	test	eax, eax
	jne	SHORT $LN5@Widen
	mov	DWORD PTR [rsp+40], esi
	lea	edx, QWORD PTR [rax+8]
	mov	r9d, ebx
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	xor	ecx, ecx
	mov	r14d, esi
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	ebp, eax
	test	eax, eax
	jne	SHORT $LN5@Widen
	lea	r14d, QWORD PTR [rax+2]
	mov	DWORD PTR [rsp+40], esi
	mov	ecx, r14d
	mov	QWORD PTR [rsp+32], rsi
	mov	r9d, ebx
	lea	edx, QWORD PTR [rax+8]
	mov	r8, rdi
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	ebp, eax
	test	eax, eax
	je	SHORT $LN4@Widen
$LN5@Widen:
; Line 79
	lea	eax, DWORD PTR [rbp+1]
	mov	ecx, 1
	movsxd	rdx, eax
	add	rdx, rdx
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
; Line 80
	mov	r9d, ebx
	mov	DWORD PTR [rsp+40], ebp
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], rax
	mov	edx, 8
	mov	ecx, r14d
	mov	rsi, rax
	call	QWORD PTR __imp_MultiByteToWideChar
$LN4@Widen:
; Line 82
	mov	r14, QWORD PTR [rsp+80]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+64]
; Line 83
	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?Widen@@YAPEA_WHPEBD@Z ENDP				; Widen
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?GetPerformanceCounter@@YA_KXZ
_TEXT	SEGMENT
Result$ = 48
?GetPerformanceCounter@@YA_KXZ PROC			; GetPerformanceCounter, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 31
	sub	rsp, 40					; 00000028H
; Line 32
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 33
	mov	rax, QWORD PTR Result$[rsp]
; Line 34
	add	rsp, 40					; 00000028H
	ret	0
?GetPerformanceCounter@@YA_KXZ ENDP			; GetPerformanceCounter
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?GetPerformanceFrequency@@YA_KXZ
_TEXT	SEGMENT
Result$ = 48
?GetPerformanceFrequency@@YA_KXZ PROC			; GetPerformanceFrequency, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 24
	sub	rsp, 40					; 00000028H
; Line 25
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 26
	mov	rax, QWORD PTR Result$[rsp]
; Line 27
	add	rsp, 40					; 00000028H
	ret	0
?GetPerformanceFrequency@@YA_KXZ ENDP			; GetPerformanceFrequency
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?GetThreadID@@YAHXZ
_TEXT	SEGMENT
?GetThreadID@@YAHXZ PROC				; GetThreadID, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 38
	rex_jmp	QWORD PTR __imp_GetCurrentThreadId
?GetThreadID@@YAHXZ ENDP				; GetThreadID
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?MAIN@@YAXXZ
_TEXT	SEGMENT
sample_count$1$ = 48
images_file_size$ = 48
prd_val$12 = 52
labels_file_size$ = 52
img_col_len$1$ = 56
img_row_len$1$ = 60
$T13 = 64
inp$ = 64
img_mem$1$ = 80
Result$14 = 88
Result$15 = 96
Result$16 = 104
$T17 = 112
__traceblock__47$11 = 144
$T18 = 192
$T19 = 208
$T20 = 240
$T21 = 384
net$ = 528
valid_output_vectors$ = 5440
__$ArrayPad$ = 5600
?MAIN@@YAXXZ PROC					; MAIN, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 357
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r12
	push	r13
	push	r14
	push	r15
	mov	eax, 5760				; 00001680H
	call	__chkstk
	sub	rsp, rax
	vmovaps	XMMWORD PTR [rsp+5744], xmm6
	vmovaps	XMMWORD PTR [rsp+5728], xmm7
	vmovaps	XMMWORD PTR [rsp+5712], xmm8
	vmovaps	XMMWORD PTR [rsp+5696], xmm9
	vmovaps	XMMWORD PTR [rsp+5680], xmm10
	vmovaps	XMMWORD PTR [rsp+5664], xmm11
	vmovaps	XMMWORD PTR [rsp+5648], xmm12
	vmovaps	XMMWORD PTR [rsp+5632], xmm13
	vmovaps	XMMWORD PTR [rsp+5616], xmm14
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
; Line 358
	lea	rdx, OFFSET FLAT:??_C@_0BN@EEIDJDDN@data?2train?9labels?4idx1?9ubyte@
	lea	rcx, QWORD PTR labels_file_size$[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
; Line 362
	lea	rdx, OFFSET FLAT:??_C@_0BN@FIFMGHNF@data?2train?9images?4idx3?9ubyte@
	mov	r13, rax
	lea	rcx, QWORD PTR images_file_size$[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 364
	mov	ecx, DWORD PTR [rax+8]
	mov	ebx, DWORD PTR [rax+4]
; Line 365
	add	rax, 12
	mov	QWORD PTR img_mem$1$[rsp], rax
; File W:\cpp\void\dr-ai\num-ai.h
; Line 105
	bswap	ecx
	mov	DWORD PTR img_row_len$1$[rsp], ecx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	lea	ecx, QWORD PTR [rdx+32]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 365
	mov	eax, DWORD PTR [rax]
; File W:\cpp\void\dr-ai\num-ai.h
; Line 105
	bswap	eax
	mov	DWORD PTR img_col_len$1$[rsp], eax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
; Line 155
	xor	edi, edi
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
; Line 154
	lea	edx, QWORD PTR [rdi+32]
; Line 155
	mov	QWORD PTR [rax+56], rdi
; Line 154
	lea	ecx, QWORD PTR [rdi+64]
; Line 199
	mov	QWORD PTR [rax], 1065353216		; 3f800000H
; Line 200
	mov	QWORD PTR [rax+8], rdi
; Line 201
	mov	QWORD PTR [rax+16], rdi
; Line 202
	mov	QWORD PTR [rax+24], rdi
; Line 203
	mov	QWORD PTR [rax+32], rdi
; File W:\cpp\void\dr-ai\num-ai.c
; Line 369
	mov	DWORD PTR valid_output_vectors$[rsp], 10
	mov	DWORD PTR valid_output_vectors$[rsp+4], 16
	mov	QWORD PTR valid_output_vectors$[rsp+8], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
	lea	edx, QWORD PTR [rdi+32]
	lea	ecx, QWORD PTR [rdi+64]
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	DWORD PTR [rax], edi
	mov	QWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 200
	mov	QWORD PTR [rax+12], rdi
	mov	QWORD PTR [rax+20], rdi
	mov	QWORD PTR [rax+28], rdi
	mov	DWORD PTR [rax+36], edi
; File W:\cpp\void\dr-ai\num-ai.c
; Line 370
	mov	DWORD PTR valid_output_vectors$[rsp+16], 10
	mov	DWORD PTR valid_output_vectors$[rsp+20], 16
	mov	QWORD PTR valid_output_vectors$[rsp+24], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
	lea	edx, QWORD PTR [rdi+32]
	lea	ecx, QWORD PTR [rdi+64]
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	QWORD PTR [rax], rdi
; Line 200
	mov	QWORD PTR [rax+8], 1065353216		; 3f800000H
; Line 201
	mov	QWORD PTR [rax+16], rdi
; Line 202
	mov	QWORD PTR [rax+24], rdi
; Line 203
	mov	QWORD PTR [rax+32], rdi
; File W:\cpp\void\dr-ai\num-ai.c
; Line 371
	mov	DWORD PTR valid_output_vectors$[rsp+32], 10
	mov	DWORD PTR valid_output_vectors$[rsp+36], 16
	mov	QWORD PTR valid_output_vectors$[rsp+40], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
	lea	edx, QWORD PTR [rdi+32]
	lea	ecx, QWORD PTR [rdi+64]
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	QWORD PTR [rax], rdi
; Line 200
	mov	DWORD PTR [rax+8], edi
	mov	QWORD PTR [rax+12], 1065353216		; 3f800000H
; Line 201
	mov	QWORD PTR [rax+20], rdi
; Line 202
	mov	QWORD PTR [rax+28], rdi
; Line 203
	mov	DWORD PTR [rax+36], edi
; File W:\cpp\void\dr-ai\num-ai.c
; Line 372
	mov	DWORD PTR valid_output_vectors$[rsp+48], 10
	mov	DWORD PTR valid_output_vectors$[rsp+52], 16
	mov	QWORD PTR valid_output_vectors$[rsp+56], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	QWORD PTR [rax], rdi
; Line 154
	lea	edx, QWORD PTR [rdi+32]
; Line 199
	mov	QWORD PTR [rax+8], rdi
; Line 154
	lea	ecx, QWORD PTR [rdi+64]
; Line 201
	mov	QWORD PTR [rax+16], 1065353216		; 3f800000H
; Line 202
	mov	QWORD PTR [rax+24], rdi
; Line 203
	mov	QWORD PTR [rax+32], rdi
; File W:\cpp\void\dr-ai\num-ai.c
; Line 373
	mov	DWORD PTR valid_output_vectors$[rsp+64], 10
	mov	DWORD PTR valid_output_vectors$[rsp+68], 16
	mov	QWORD PTR valid_output_vectors$[rsp+72], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
	lea	edx, QWORD PTR [rdi+32]
	lea	ecx, QWORD PTR [rdi+64]
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	QWORD PTR [rax], rdi
; Line 200
	mov	QWORD PTR [rax+8], rdi
; Line 201
	mov	DWORD PTR [rax+16], edi
	mov	QWORD PTR [rax+20], 1065353216		; 3f800000H
; Line 202
	mov	QWORD PTR [rax+28], rdi
	mov	DWORD PTR [rax+36], edi
; File W:\cpp\void\dr-ai\num-ai.c
; Line 374
	mov	DWORD PTR valid_output_vectors$[rsp+80], 10
	mov	DWORD PTR valid_output_vectors$[rsp+84], 16
	mov	QWORD PTR valid_output_vectors$[rsp+88], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
	lea	edx, QWORD PTR [rdi+32]
	lea	ecx, QWORD PTR [rdi+64]
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	QWORD PTR [rax], rdi
; Line 200
	mov	QWORD PTR [rax+8], rdi
; Line 201
	mov	QWORD PTR [rax+16], rdi
; Line 202
	mov	QWORD PTR [rax+24], 1065353216		; 3f800000H
; Line 203
	mov	QWORD PTR [rax+32], rdi
; File W:\cpp\void\dr-ai\num-ai.c
; Line 375
	mov	DWORD PTR valid_output_vectors$[rsp+96], 10
	mov	DWORD PTR valid_output_vectors$[rsp+100], 16
	mov	QWORD PTR valid_output_vectors$[rsp+104], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
	lea	edx, QWORD PTR [rdi+32]
	lea	ecx, QWORD PTR [rdi+64]
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	QWORD PTR [rax], rdi
; Line 200
	mov	QWORD PTR [rax+8], rdi
; Line 201
	mov	QWORD PTR [rax+16], rdi
; Line 202
	mov	DWORD PTR [rax+24], edi
	mov	QWORD PTR [rax+28], 1065353216		; 3f800000H
; Line 203
	mov	DWORD PTR [rax+36], edi
; File W:\cpp\void\dr-ai\num-ai.c
; Line 376
	mov	DWORD PTR valid_output_vectors$[rsp+112], 10
	mov	DWORD PTR valid_output_vectors$[rsp+116], 16
	mov	QWORD PTR valid_output_vectors$[rsp+120], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
	lea	edx, QWORD PTR [rdi+32]
	lea	ecx, QWORD PTR [rdi+64]
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	QWORD PTR [rax], rdi
	mov	QWORD PTR [rax+8], rdi
	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], rdi
; Line 203
	mov	QWORD PTR [rax+32], 1065353216		; 3f800000H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 377
	mov	DWORD PTR valid_output_vectors$[rsp+128], 10
	mov	DWORD PTR valid_output_vectors$[rsp+132], 16
	mov	QWORD PTR valid_output_vectors$[rsp+136], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	call	_aligned_malloc
; Line 155
	mov	QWORD PTR [rax+40], rdi
	mov	QWORD PTR [rax+48], rdi
	mov	QWORD PTR [rax+56], rdi
; Line 199
	mov	QWORD PTR [rax], rdi
; Line 200
	mov	QWORD PTR [rax+8], rdi
; Line 201
	mov	QWORD PTR [rax+16], rdi
; Line 202
	mov	QWORD PTR [rax+24], rdi
; Line 203
	mov	DWORD PTR [rax+32], edi
	mov	DWORD PTR [rax+36], 1065353216		; 3f800000H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 378
	mov	DWORD PTR valid_output_vectors$[rsp+144], 10
	mov	DWORD PTR valid_output_vectors$[rsp+148], 16
	mov	QWORD PTR valid_output_vectors$[rsp+152], rax
; File W:\cpp\void\dr-ai\num-ai.h
; Line 96
	mov	edx, 784				; 00000310H
	lea	r8d, QWORD PTR [rdi+16]
	lea	rcx, QWORD PTR $T20[rsp]
	call	?new_lay@@YA?AUai_lay@@HH@Z		; new_lay
; Line 97
	lea	edx, QWORD PTR [rdi+16]
	lea	r8d, QWORD PTR [rdi+10]
	lea	rcx, QWORD PTR $T21[rsp]
	vmovups	ymm0, YMMWORD PTR [rax]
	vmovups	ymm1, YMMWORD PTR [rax+32]
	vmovups	YMMWORD PTR net$[rsp+144], ymm0
	vmovups	ymm0, YMMWORD PTR [rax+64]
	vmovups	YMMWORD PTR net$[rsp+208], ymm0
	vmovups	xmm0, XMMWORD PTR [rax+128]
	vmovups	YMMWORD PTR net$[rsp+176], ymm1
	vmovups	ymm1, YMMWORD PTR [rax+96]
	vmovups	XMMWORD PTR net$[rsp+272], xmm0
	vmovups	YMMWORD PTR net$[rsp+240], ymm1
	vzeroupper
	call	?new_lay@@YA?AUai_lay@@HH@Z		; new_lay
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	lea	edx, QWORD PTR [rdi+32]
	mov	ecx, 3136				; 00000c40H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 97
	vmovups	ymm0, YMMWORD PTR [rax]
	vmovups	ymm1, YMMWORD PTR [rax+32]
	vmovups	YMMWORD PTR net$[rsp], ymm0
	vmovups	ymm0, YMMWORD PTR [rax+64]
	vmovups	YMMWORD PTR net$[rsp+64], ymm0
	vmovups	xmm0, XMMWORD PTR [rax+128]
	vmovups	YMMWORD PTR net$[rsp+32], ymm1
	vmovups	ymm1, YMMWORD PTR [rax+96]
	vmovups	XMMWORD PTR net$[rsp+128], xmm0
	vmovups	YMMWORD PTR net$[rsp+96], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 154
	vzeroupper
	call	_aligned_malloc
; Line 155
	xor	edx, edx
	mov	r8d, 3136				; 00000c40H
	mov	rcx, rax
	mov	r14, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.c
; Line 397
	vmovups	xmm7, XMMWORD PTR __xmm@3b8080813b8080813b8080813b808081
	vmovss	xmm6, DWORD PTR __real@3b808081
	vmovss	xmm11, DWORD PTR __real@bf800000
	vmovss	xmm10, DWORD PTR __real@3f800000
	vmovss	xmm9, DWORD PTR __real@3dcccccd
	vmovss	xmm14, DWORD PTR __real@42c80000
	vmovsd	xmm13, QWORD PTR __real@408f400000000000
; File W:\cpp\void\dr-ai\num-ai.h
; Line 105
	bswap	ebx
	mov	DWORD PTR sample_count$1$[rsp], ebx
; File W:\cpp\void\dr-ai\num-ai.c
; Line 384
	mov	DWORD PTR inp$[rsp], 784		; 00000310H
	mov	DWORD PTR inp$[rsp+4], 784		; 00000310H
	mov	QWORD PTR inp$[rsp+8], r14
; Line 395
	vmovups	xmm12, XMMWORD PTR inp$[rsp]
	movsxd	rbx, ebx
$LN255@MAIN:
; File W:\cpp\void\dr\trace.c
; Line 48
	lea	rcx, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
	mov	DWORD PTR __traceblock__47$11[rsp+24], 391 ; 00000187H
	mov	QWORD PTR __traceblock__47$11[rsp+16], rcx
	lea	rax, OFFSET FLAT:??_C@_08KGMLKAKE@num?9ai?4c@
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	lea	rcx, QWORD PTR Result$15[rsp]
; File W:\cpp\void\dr\trace.c
; Line 48
	mov	QWORD PTR __traceblock__47$11[rsp+8], rax
	mov	DWORD PTR __traceblock__47$11[rsp+28], 48 ; 00000030H
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\dr\trace.h
; Line 43
	xor	edi, edi
	xor	r15d, r15d
	vxorps	xmm8, xmm8, xmm8
; File W:\cpp\void\dr-ai\num-ai.c
; Line 395
	test	rbx, rbx
	jle	$LN254@MAIN
	lea	r12, QWORD PTR [r14+3132]
	npad	9
$LL7@MAIN:
; Line 396
	xor	ebx, ebx
$LL10@MAIN:
; Line 399
	mov	ecx, edi
	lea	rax, QWORD PTR [r15+rbx]
	imul	ecx, DWORD PTR img_col_len$1$[rsp]
	movzx	esi, BYTE PTR [rax+r13+8]
	imul	ecx, DWORD PTR img_row_len$1$[rsp]
	add	rcx, QWORD PTR img_mem$1$[rsp]
	lea	rax, QWORD PTR [rcx+783]
	cmp	r14, rax
	ja	SHORT $LN185@MAIN
; Line 397
	cmp	r12, rcx
	jb	SHORT $LN185@MAIN
; Line 400
	add	rcx, 2
	lea	rdx, QWORD PTR [r14+8]
	mov	r8d, 196				; 000000c4H
	npad	4
$LL228@MAIN:
; Line 401
	movzx	eax, BYTE PTR [rcx-2]
	lea	rdx, QWORD PTR [rdx+16]
	lea	rcx, QWORD PTR [rcx+4]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm1, xmm0, xmm6
	vmovss	DWORD PTR [rdx-24], xmm1
	movzx	eax, BYTE PTR [rcx-5]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm1, xmm0, xmm6
	vmovss	DWORD PTR [rdx-20], xmm1
	movzx	eax, BYTE PTR [rcx-4]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm1, xmm0, xmm6
	vmovss	DWORD PTR [rdx-16], xmm1
	movzx	eax, BYTE PTR [rcx-3]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm1, xmm0, xmm6
	vmovss	DWORD PTR [rdx-12], xmm1
	sub	r8, 1
	jne	SHORT $LL228@MAIN
	jmp	SHORT $LN226@MAIN
$LN185@MAIN:
; Line 397
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 49					; 00000031H
	lea	rcx, QWORD PTR [r14+32]
$LL13@MAIN:
; Line 400
	lea	rcx, QWORD PTR [rcx+64]
; Line 401
	vpmovzxbd xmm1, DWORD PTR [rax-8]
	lea	rax, QWORD PTR [rax+16]
	vcvtdq2ps xmm2, xmm1
	vpmovzxbd xmm1, DWORD PTR [rax-20]
	vmulps	xmm3, xmm2, xmm7
	vmovups	XMMWORD PTR [rcx-96], xmm3
	vcvtdq2ps xmm2, xmm1
	vpmovzxbd xmm1, DWORD PTR [rax-16]
	vmulps	xmm3, xmm2, xmm7
	vmovups	XMMWORD PTR [rcx-80], xmm3
	vcvtdq2ps xmm2, xmm1
	vpmovzxbd xmm1, DWORD PTR [rax-12]
	vmulps	xmm3, xmm2, xmm7
	vmovups	XMMWORD PTR [rcx-64], xmm3
	vcvtdq2ps xmm2, xmm1
	vmulps	xmm3, xmm2, xmm7
	vmovups	XMMWORD PTR [rcx-48], xmm3
	sub	rdx, 1
	jne	SHORT $LL13@MAIN
$LN226@MAIN:
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 142
	mov	edx, DWORD PTR net$[rsp+48]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 404
	xor	ecx, ecx
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 142
	test	edx, edx
	je	SHORT $LN25@MAIN
	mov	r8, QWORD PTR net$[rsp+56]
	vxorps	xmm0, xmm0, xmm0
	npad	12
$LL26@MAIN:
; Line 143
	vmovups	YMMWORD PTR [r8+rcx*4], ymm0
	add	ecx, 8
	cmp	ecx, edx
	jb	SHORT $LL26@MAIN
$LN25@MAIN:
; Line 142
	mov	edx, DWORD PTR net$[rsp+192]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 405
	xor	ecx, ecx
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 142
	test	edx, edx
	je	SHORT $LN32@MAIN
	mov	r8, QWORD PTR net$[rsp+200]
	vxorps	xmm0, xmm0, xmm0
	npad	10
$LL33@MAIN:
; Line 143
	vmovups	YMMWORD PTR [r8+rcx*4], ymm0
	add	ecx, 8
	cmp	ecx, edx
	jb	SHORT $LL33@MAIN
$LN32@MAIN:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 407
	mov	edx, DWORD PTR net$[rsp+92]
	xor	ecx, ecx
	imul	edx, DWORD PTR net$[rsp+96]
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 142
	test	edx, edx
	je	SHORT $LN37@MAIN
	mov	r8, QWORD PTR net$[rsp+104]
	vxorps	xmm0, xmm0, xmm0
	npad	2
$LL38@MAIN:
; Line 143
	vmovups	YMMWORD PTR [r8+rcx*4], ymm0
	add	ecx, 8
	cmp	ecx, edx
	jb	SHORT $LL38@MAIN
$LN37@MAIN:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 408
	mov	edx, DWORD PTR net$[rsp+236]
	xor	ecx, ecx
	imul	edx, DWORD PTR net$[rsp+240]
; File W:\cpp\void\dr-ai\dr-lan.c
; Line 142
	test	edx, edx
	je	SHORT $LN42@MAIN
	mov	r8, QWORD PTR net$[rsp+248]
	vxorps	xmm0, xmm0, xmm0
	npad	2
$LL43@MAIN:
; Line 143
	vmovups	YMMWORD PTR [r8+rcx*4], ymm0
	add	ecx, 8
	cmp	ecx, edx
	jb	SHORT $LL43@MAIN
$LN42@MAIN:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 410
	mov	rax, rsi
	lea	r8, QWORD PTR $T13[rsp]
	add	rax, rax
	lea	rdx, QWORD PTR $T18[rsp]
	vmovdqa	XMMWORD PTR $T18[rsp], xmm12
	lea	rcx, QWORD PTR net$[rsp]
	vmovups	xmm0, XMMWORD PTR valid_output_vectors$[rsp+rax*8]
	vmovups	XMMWORD PTR $T13[rsp], xmm0
	vzeroupper
	call	?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z ; net_grd_dsc
; Line 413
	mov	r9d, DWORD PTR net$[rsp+128]
	xor	ecx, ecx
	vmovaps	xmm2, xmm11
	lea	r8d, QWORD PTR [rcx-1]
	test	r9d, r9d
	jle	SHORT $LN253@MAIN
; Line 410
	mov	rdx, QWORD PTR net$[rsp+136]
	npad	8
$LL186@MAIN:
; Line 414
	vmovss	xmm1, DWORD PTR [rdx]
	vcomiss	xmm1, xmm2
	mov	eax, ecx
	lea	rdx, QWORD PTR [rdx+4]
	cmovbe	eax, r8d
	inc	ecx
	mov	r8d, eax
	vcmpltss xmm0, xmm2, xmm1
	vblendvps xmm0, xmm2, xmm1, xmm0
	vmovss	DWORD PTR prd_val$12[rsp], xmm0
	cmp	ecx, r9d
	jge	SHORT $LN253@MAIN
; Line 413
	vmovss	xmm2, DWORD PTR prd_val$12[rsp]
	jmp	SHORT $LL186@MAIN
$LN253@MAIN:
; Line 419
	cmp	esi, r8d
	jne	SHORT $LN18@MAIN
; Line 420
	vaddss	xmm8, xmm8, xmm10
$LN18@MAIN:
; Line 424
	vmovaps	xmm1, xmm9
	lea	rcx, QWORD PTR net$[rsp+144]
	call	?lay_upd@@YAXPEAUai_lay@@M@Z		; lay_upd
; Line 425
	vmovaps	xmm1, xmm9
	lea	rcx, QWORD PTR net$[rsp]
	call	?lay_upd@@YAXPEAUai_lay@@M@Z		; lay_upd
	inc	edi
	inc	rbx
	cmp	rbx, 250				; 000000faH
	jl	$LL10@MAIN
; Line 395
	movsxd	rax, DWORD PTR sample_count$1$[rsp]
	add	r15, 250				; 000000faH
	mov	rbx, rax
	cmp	r15, rax
	jl	$LL7@MAIN
	jmp	SHORT $LN6@MAIN
$LN254@MAIN:
	mov	eax, DWORD PTR sample_count$1$[rsp]
$LN6@MAIN:
	vxorps	xmm0, xmm0, xmm0
; Line 433
	vcvtsi2ss xmm0, xmm0, eax
	vdivss	xmm1, xmm8, xmm0
; Line 434
	lea	rcx, OFFSET FLAT:??_C@_08KGMLKAKE@num?9ai?4c@
	mov	DWORD PTR $T17[rsp+16], 434		; 000001b2H
	mov	QWORD PTR $T17[rsp], rcx
	lea	r8, OFFSET FLAT:??_C@_1CE@ELMGMFNF@?$AAa?$AAc?$AAc?$AAu?$AAr?$AAa?$AAc?$AAy?$AA?5?$AA?$CF?$AA?$CF?$AA?$CF?$AA?9?$AA3?$AA?4@
	vmulss	xmm2, xmm1, xmm14
	lea	rcx, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
	mov	DWORD PTR $T17[rsp+20], 49		; 00000031H
	vcvtss2sd xmm3, xmm2, xmm2
	mov	QWORD PTR $T17[rsp+8], rcx
	mov	edx, 2
	vmovq	r9, xmm3
	lea	rcx, QWORD PTR $T17[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	lea	rcx, QWORD PTR Result$14[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 25
	lea	rcx, QWORD PTR Result$16[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\dr\trace.c
; Line 57
	vmovups	xmm0, XMMWORD PTR __traceblock__47$11[rsp+8]
	mov	rcx, QWORD PTR Result$14[rsp]
	sub	rcx, QWORD PTR Result$15[rsp]
	vmovsd	xmm1, QWORD PTR __traceblock__47$11[rsp+24]
	vmovups	XMMWORD PTR $T19[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovsd	QWORD PTR $T19[rsp+16], xmm1
	js	SHORT $LN248@MAIN
; Line 55
	vcvtsi2sd xmm0, xmm0, rcx
	jmp	SHORT $LN249@MAIN
$LN248@MAIN:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm0, xmm0, xmm0
$LN249@MAIN:
	mov	rcx, QWORD PTR Result$16[rsp]
	vmulsd	xmm1, xmm0, xmm13
	vxorps	xmm0, xmm0, xmm0
	test	rcx, rcx
	js	SHORT $LN246@MAIN
	vcvtsi2sd xmm0, xmm0, rcx
	jmp	SHORT $LN247@MAIN
$LN246@MAIN:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm0, xmm0, xmm0
$LN247@MAIN:
	vdivsd	xmm0, xmm1, xmm0
; Line 57
	lea	r9, OFFSET FLAT:??_C@_1M@CAIDPHAA@?$AAT?$AAI?$AAM?$AAE?$AAD@
	mov	edx, 2
	lea	r8, OFFSET FLAT:??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@
	lea	rcx, QWORD PTR $T19[rsp]
	vmovsd	QWORD PTR [rsp+32], xmm0
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; File W:\cpp\void\dr-ai\num-ai.c
; Line 435
	jmp	$LN255@MAIN
?MAIN@@YAXXZ ENDP					; MAIN
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?strtoi@@YA_JUstr32@@@Z
_TEXT	SEGMENT
s$ = 8
?strtoi@@YA_JUstr32@@@Z PROC				; strtoi, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 28
	mov	rax, QWORD PTR [rcx+4]
	mov	r9d, DWORD PTR [rcx]
	add	r9, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r11d, r11d
; Line 127
	lea	r10d, QWORD PTR [r11+1]
	lea	r8d, QWORD PTR [r11-1]
$LL4@strtoi:
; Line 131
	cmp	rax, r9
	je	SHORT $LN25@strtoi
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN8@strtoi
$LN25@strtoi:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN8@strtoi
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN19@strtoi
$LN8@strtoi:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r10d, 1
	cmove	r10d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL4@strtoi
$LN19@strtoi:
; Line 139
	cmp	rax, r9
	jae	SHORT $LN10@strtoi
	npad	7
$LL6@strtoi:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN10@strtoi
; Line 141
	lea	r11, QWORD PTR [r11+r11*4]
	inc	rax
	lea	r11, QWORD PTR [r11-24]
	lea	r11, QWORD PTR [r8+r11*2]
	cmp	rax, r9
	jb	SHORT $LL6@strtoi
$LN10@strtoi:
; Line 153
	movsxd	rax, r10d
	imul	rax, r11
; File W:\cpp\void\dr\str32.h
; Line 30
	ret	0
?strtoi@@YA_JUstr32@@@Z ENDP				; strtoi
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??7str32@@QEAAHXZ
_TEXT	SEGMENT
this$ = 8
??7str32@@QEAAHXZ PROC					; str32::operator!, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 172
	xor	eax, eax
	cmp	DWORD PTR [rcx], eax
	sete	al
; Line 173
	ret	0
??7str32@@QEAAHXZ ENDP					; str32::operator!
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAAHXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAAHXZ PROC					; str32::operator int, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 196
$LN33:
	sub	rsp, 24
; Line 197
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	xmm0, QWORD PTR [rcx]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 197
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rax, QWORD PTR $T1[rsp+4]
	add	r11, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r9d, r9d
; Line 127
	lea	r10d, QWORD PTR [r9+1]
	lea	r8d, QWORD PTR [r9-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rax, r11
	je	SHORT $LN27@operator
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r10d, 1
	cmove	r10d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rax, r11
	jae	SHORT $LN12@operator
	npad	12
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r9, QWORD PTR [r9+r9*4]
	inc	rax
	lea	r9, QWORD PTR [r9-24]
	lea	r9, QWORD PTR [r8+r9*2]
	cmp	rax, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	imul	r9d, r10d
; File W:\cpp\void\dr\str32.h
; Line 197
	mov	eax, r9d
; Line 198
	add	rsp, 24
	ret	0
??Bstr32@@QEAAHXZ ENDP					; str32::operator int
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAAIXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAAIXZ PROC					; str32::operator unsigned int, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 191
$LN33:
	sub	rsp, 24
; Line 192
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	xmm0, QWORD PTR [rcx]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 192
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rax, QWORD PTR $T1[rsp+4]
	add	r11, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r9d, r9d
; Line 127
	lea	r10d, QWORD PTR [r9+1]
	lea	r8d, QWORD PTR [r9-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rax, r11
	je	SHORT $LN27@operator
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r10d, 1
	cmove	r10d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rax, r11
	jae	SHORT $LN12@operator
	npad	12
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r9, QWORD PTR [r9+r9*4]
	inc	rax
	lea	r9, QWORD PTR [r9-24]
	lea	r9, QWORD PTR [r8+r9*2]
	cmp	rax, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	imul	r9d, r10d
; File W:\cpp\void\dr\str32.h
; Line 192
	mov	eax, r9d
; Line 193
	add	rsp, 24
	ret	0
??Bstr32@@QEAAIXZ ENDP					; str32::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAAMXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAAMXZ PROC					; str32::operator float, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 206
$LN33:
	sub	rsp, 24
; Line 207
	vmovsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 207
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rdx, QWORD PTR $T1[rsp+4]
	add	r11, rdx
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r10d, r10d
; Line 127
	lea	r9d, QWORD PTR [r10+1]
	lea	r8d, QWORD PTR [r10-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rdx, r11
	je	SHORT $LN27@operator
	movzx	ecx, BYTE PTR [rdx]
	cmp	cl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	eax, BYTE PTR [rdx]
	movzx	ecx, al
	cmp	al, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	cl, 45					; 0000002dH
	mov	r9d, 1
	cmove	r9d, r8d
; Line 135
	inc	rdx
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rdx, r11
	jae	SHORT $LN12@operator
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rdx]
	lea	eax, DWORD PTR [r8-48]
	cmp	al, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r10, QWORD PTR [r10+r10*4]
	inc	rdx
	lea	r10, QWORD PTR [r10-24]
	lea	r10, QWORD PTR [r8+r10*2]
	cmp	rdx, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	movsxd	rax, r9d
	imul	rax, r10
	vxorps	xmm0, xmm0, xmm0
; File W:\cpp\void\dr\str32.h
; Line 207
	vcvtsi2ss xmm0, xmm0, rax
; Line 208
	add	rsp, 24
	ret	0
??Bstr32@@QEAAMXZ ENDP					; str32::operator float
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAANXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAANXZ PROC					; str32::operator double, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 201
$LN33:
	sub	rsp, 24
; Line 202
	vmovsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 202
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rdx, QWORD PTR $T1[rsp+4]
	add	r11, rdx
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r10d, r10d
; Line 127
	lea	r9d, QWORD PTR [r10+1]
	lea	r8d, QWORD PTR [r10-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rdx, r11
	je	SHORT $LN27@operator
	movzx	ecx, BYTE PTR [rdx]
	cmp	cl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	eax, BYTE PTR [rdx]
	movzx	ecx, al
	cmp	al, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	cl, 45					; 0000002dH
	mov	r9d, 1
	cmove	r9d, r8d
; Line 135
	inc	rdx
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rdx, r11
	jae	SHORT $LN12@operator
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rdx]
	lea	eax, DWORD PTR [r8-48]
	cmp	al, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r10, QWORD PTR [r10+r10*4]
	inc	rdx
	lea	r10, QWORD PTR [r10-24]
	lea	r10, QWORD PTR [r8+r10*2]
	cmp	rdx, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	movsxd	rax, r9d
	imul	rax, r10
	vxorps	xmm0, xmm0, xmm0
; File W:\cpp\void\dr\str32.h
; Line 202
	vcvtsi2sd xmm0, xmm0, rax
; Line 203
	add	rsp, 24
	ret	0
??Bstr32@@QEAANXZ ENDP					; str32::operator double
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAA_KXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAA_KXZ PROC					; str32::operator unsigned __int64, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 186
$LN33:
	sub	rsp, 24
; Line 187
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	xmm0, QWORD PTR [rcx]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 187
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rax, QWORD PTR $T1[rsp+4]
	add	r11, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r10d, r10d
; Line 127
	lea	r9d, QWORD PTR [r10+1]
	lea	r8d, QWORD PTR [r10-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rax, r11
	je	SHORT $LN27@operator
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r9d, 1
	cmove	r9d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rax, r11
	jae	SHORT $LN12@operator
	npad	12
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r10, QWORD PTR [r10+r10*4]
	inc	rax
	lea	r10, QWORD PTR [r10-24]
	lea	r10, QWORD PTR [r8+r10*2]
	cmp	rax, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	movsxd	rax, r9d
	imul	rax, r10
; File W:\cpp\void\dr\str32.h
; Line 188
	add	rsp, 24
	ret	0
??Bstr32@@QEAA_KXZ ENDP					; str32::operator unsigned __int64
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAA_JXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAA_JXZ PROC					; str32::operator __int64, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 181
$LN33:
	sub	rsp, 24
; Line 182
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	xmm0, QWORD PTR [rcx]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 182
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rax, QWORD PTR $T1[rsp+4]
	add	r11, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r10d, r10d
; Line 127
	lea	r9d, QWORD PTR [r10+1]
	lea	r8d, QWORD PTR [r10-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rax, r11
	je	SHORT $LN27@operator
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r9d, 1
	cmove	r9d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rax, r11
	jae	SHORT $LN12@operator
	npad	12
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r10, QWORD PTR [r10+r10*4]
	inc	rax
	lea	r10, QWORD PTR [r10-24]
	lea	r10, QWORD PTR [r8+r10*2]
	cmp	rax, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	movsxd	rax, r9d
	imul	rax, r10
; File W:\cpp\void\dr\str32.h
; Line 183
	add	rsp, 24
	ret	0
??Bstr32@@QEAA_JXZ ENDP					; str32::operator __int64
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 8
??Bstr32@@QEAAPEADXZ PROC				; str32::operator char *, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 177
	mov	rax, QWORD PTR [rcx+4]
; Line 178
	ret	0
??Bstr32@@QEAAPEADXZ ENDP				; str32::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
_TEXT	SEGMENT
UserData$ = 48
Flags$ = 56
Alignment$ = 64
OldSize$ = 72
OldMemr$ = 80
NewSize$ = 88
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; HEAP_ALLOCATOR, COMDAT
; File W:\cpp\void\dr\cator.c
; Line 66
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	sub	rsp, 32					; 00000020H
; Line 68
	mov	rbx, QWORD PTR NewSize$[rsp]
	mov	rsi, r9
	mov	rcx, QWORD PTR OldMemr$[rsp]
	mov	ebp, edx
	test	rbx, rbx
	je	SHORT $LN2@HEAP_ALLOC
; Line 69
	mov	QWORD PTR [rsp+48], rdi
	mov	rdx, rbx
	test	r8d, r8d
	je	SHORT $LN4@HEAP_ALLOC
; Line 70
	movsxd	r8, r8d
	call	_aligned_realloc
; Line 71
	jmp	SHORT $LN14@HEAP_ALLOC
$LN4@HEAP_ALLOC:
; Line 72
	call	realloc
$LN14@HEAP_ALLOC:
; Line 75
	mov	rdi, rax
	test	bpl, 1
	je	SHORT $LN12@HEAP_ALLOC
; Line 76
	sub	rbx, rsi
	lea	rcx, QWORD PTR [rax+rsi]
	mov	r8, rbx
	xor	edx, edx
	call	memset
$LN12@HEAP_ALLOC:
; Line 88
	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+48]
; Line 89
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN2@HEAP_ALLOC:
; Line 79
	test	rcx, rcx
	je	SHORT $LN11@HEAP_ALLOC
; Line 80
	test	r8d, r8d
	je	SHORT $LN8@HEAP_ALLOC
; Line 81
	call	_aligned_free
$LN11@HEAP_ALLOC:
; Line 89
	xor	eax, eax
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN8@HEAP_ALLOC:
; Line 83
	call	free
; Line 89
	mov	rbx, QWORD PTR [rsp+56]
	xor	eax, eax
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; HEAP_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
UserData$ = 96
Flags$ = 104
Alignment$ = 112
OldSize$ = 120
OldMemr$ = 128
NewSize$ = 136
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; STATIC_ALLOCATOR, COMDAT
; File W:\cpp\void\dr\cator.c
; Line 20
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
; Line 34
	mov	ecx, DWORD PTR _tls_index
	mov	rbp, r9
	mov	rax, QWORD PTR gs:88
	mov	r14d, edx
	mov	r15d, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	rsi, QWORD PTR [rax+rcx*8]
	mov	ecx, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	eax, DWORD PTR [rcx+rsi]
	test	al, 1
	jne	SHORT $LN26@STATIC_ALL
	or	eax, 1
; Line 70
	mov	edx, 16384				; 00004000H
; Line 34
	mov	DWORD PTR [rcx+rsi], eax
; Line 70
	xor	ecx, ecx
	lea	r8d, QWORD PTR [rcx+16]
	call	_aligned_realloc
; Line 34
	mov	QWORD PTR [rsi+r15], rax
$LN26@STATIC_ALL:
; Line 36
	mov	rbx, QWORD PTR NewSize$[rsp]
	mov	edx, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	movsxd	rcx, DWORD PTR [rdx+rsi]
	lea	rax, QWORD PTR [rbx+rcx]
	cmp	rax, 16384				; 00004000H
	jb	SHORT $LN3@STATIC_ALL
; Line 38
	cmp	rbx, 16384				; 00004000H
	jb	SHORT $LN4@STATIC_ALL
; Line 40
	lea	rax, OFFSET FLAT:??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@
	mov	DWORD PTR $T2[rsp+16], 40		; 00000028H
	mov	QWORD PTR $T2[rsp], rax
	lea	r8, OFFSET FLAT:??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@
	lea	rax, OFFSET FLAT:??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@
	mov	DWORD PTR $T2[rsp+20], 38		; 00000026H
	mov	edx, 6
	mov	QWORD PTR $T2[rsp+8], rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 41
	xor	eax, eax
	jmp	$LN1@STATIC_ALL
$LN4@STATIC_ALL:
; Line 44
	mov	ecx, 1
$LN3@STATIC_ALL:
	mov	QWORD PTR [rsp+96], rdi
; Line 48
	lea	rax, QWORD PTR [rbx+63]
	and	eax, -64				; ffffffffffffffc0H
	movsxd	rdi, ecx
	add	rdi, QWORD PTR [rsi+r15]
	add	eax, ecx
	mov	DWORD PTR [rdx+rsi], eax
; Line 50
	test	rbx, rbx
	je	SHORT $LN8@STATIC_ALL
; Line 51
	cmp	QWORD PTR OldMemr$[rsp], 0
	je	SHORT $LN7@STATIC_ALL
; Line 52
	lea	rax, OFFSET FLAT:??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@
	mov	DWORD PTR $T1[rsp+16], 52		; 00000034H
	mov	QWORD PTR $T1[rsp], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rax, OFFSET FLAT:??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@
	mov	DWORD PTR $T1[rsp+20], 39		; 00000027H
	xor	r8d, r8d
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0CI@NPMNNLNI@?$CB?$CCnot?5supported?5for?5static?5allo@
	lea	rcx, QWORD PTR $T1[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN7@STATIC_ALL:
; Line 54
	test	r14b, 1
	je	SHORT $LN8@STATIC_ALL
; Line 55
	sub	rbx, rbp
	lea	rcx, QWORD PTR [rdi+rbp]
	mov	r8, rbx
	xor	edx, edx
	call	memset
$LN8@STATIC_ALL:
; Line 60
	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+96]
$LN1@STATIC_ALL:
; Line 61
	mov	rbx, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+112]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; STATIC_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?HeapAlloc@@YAPEAXH_K@Z
_TEXT	SEGMENT
Zeroed$ = 48
Size$ = 56
?HeapAlloc@@YAPEAXH_K@Z PROC				; HeapAlloc, COMDAT
; File W:\cpp\void\dr\cator.c
; Line 98
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	esi, ecx
; Line 68
	test	rdx, rdx
	je	SHORT $LN14@HeapAlloc
; Line 70
	xor	ecx, ecx
	mov	QWORD PTR [rsp+48], rbx
	lea	r8d, QWORD PTR [rcx+16]
	call	_aligned_realloc
	mov	rbx, rax
; Line 75
	test	esi, esi
	je	SHORT $LN15@HeapAlloc
; Line 76
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 98
	mov	rax, rbx
$LN15@HeapAlloc:
	mov	rbx, QWORD PTR [rsp+48]
; Line 100
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN14@HeapAlloc:
	mov	rsi, QWORD PTR [rsp+56]
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?HeapAlloc@@YAPEAXH_K@Z ENDP				; HeapAlloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?StaticAlloc@@YAPEAXH_K@Z
_TEXT	SEGMENT
$T1 = 32
Zeroed$ = 80
Size$ = 88
?StaticAlloc@@YAPEAXH_K@Z PROC				; StaticAlloc, COMDAT
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 64					; 00000040H
; Line 34
	mov	rax, QWORD PTR gs:88
; Line 104
	mov	ebp, ecx
; Line 34
	mov	r8d, DWORD PTR _tls_index
; Line 104
	mov	rdi, rdx
; Line 34
	mov	ecx, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	r14d, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	rsi, QWORD PTR [rax+r8*8]
	mov	eax, DWORD PTR [rcx+rsi]
	test	al, 1
	jne	SHORT $LN28@StaticAllo
	or	eax, 1
; Line 70
	mov	edx, 16384				; 00004000H
; Line 34
	mov	DWORD PTR [rcx+rsi], eax
; Line 70
	xor	ecx, ecx
	lea	r8d, QWORD PTR [rcx+16]
	call	_aligned_realloc
; Line 34
	mov	QWORD PTR [rsi+r14], rax
$LN28@StaticAllo:
; Line 36
	mov	r8d, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	movsxd	rdx, DWORD PTR [r8+rsi]
	lea	rax, QWORD PTR [rdi+rdx]
	cmp	rax, 16384				; 00004000H
	jb	SHORT $LN5@StaticAllo
; Line 38
	cmp	rdi, 16384				; 00004000H
	jb	SHORT $LN6@StaticAllo
; Line 40
	lea	rax, OFFSET FLAT:??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@
	mov	DWORD PTR $T1[rsp+16], 40		; 00000028H
	mov	QWORD PTR $T1[rsp], rax
	lea	r8, OFFSET FLAT:??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@
	lea	rax, OFFSET FLAT:??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@
	mov	DWORD PTR $T1[rsp+20], 38		; 00000026H
	mov	edx, 6
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 104
	xor	eax, eax
; Line 41
	jmp	SHORT $LN3@StaticAllo
$LN6@StaticAllo:
; Line 44
	mov	edx, 1
$LN5@StaticAllo:
	mov	QWORD PTR [rsp+80], rbx
; Line 48
	lea	rcx, QWORD PTR [rdi+63]
	and	ecx, -64				; ffffffffffffffc0H
	movsxd	rbx, edx
	add	rbx, QWORD PTR [rsi+r14]
	add	ecx, edx
	mov	DWORD PTR [r8+rsi], ecx
; Line 50
	test	rdi, rdi
	je	SHORT $LN10@StaticAllo
; Line 54
	test	ebp, ebp
	je	SHORT $LN10@StaticAllo
; Line 55
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rbx
	call	memset
$LN10@StaticAllo:
; Line 104
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+80]
$LN3@StaticAllo:
; Line 106
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
?StaticAlloc@@YAPEAXH_K@Z ENDP				; StaticAlloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
_TEXT	SEGMENT
Wrote$1 = 48
$T2 = 64
Location$ = 160
TraceMessageKind$ = 168
FormatString$ = 176
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ PROC	; OutputTraceMessage, COMDAT
; File W:\cpp\void\dr\trace.c
; Line 22
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rbp
	push	rsi
	push	r12
	push	r14
	sub	rsp, 112				; 00000070H
; Line 28
	mov	rax, QWORD PTR ?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA
	lea	r12, QWORD PTR FormatString$[rsp+8]
	movsxd	rbp, edx
	mov	rsi, r8
	mov	r14, rcx
	mov	rbx, -1
	test	rax, rax
	je	SHORT $LN31@OutputTrac
; Line 29
	vmovups	xmm0, XMMWORD PTR [rcx]
	vmovsd	xmm1, QWORD PTR [rcx+16]
	vmovups	XMMWORD PTR $T2[rsp], xmm0
	vmovsd	QWORD PTR $T2[rsp+16], xmm1
	mov	r8, rbx
$LL35@OutputTrac:
	inc	r8
	cmp	WORD PTR [rsi+r8*2], 0
	jne	SHORT $LL35@OutputTrac
	mov	r9, rsi
	mov	QWORD PTR [rsp+32], r12
	mov	edx, ebp
	lea	rcx, QWORD PTR $T2[rsp]
	call	rax
; Line 33
	test	eax, eax
	je	$LN29@OutputTrac
	mov	rsi, QWORD PTR FormatString$[rsp]
$LN31@OutputTrac:
	mov	QWORD PTR [rsp+104], rdi
; Line 35
	mov	rdi, rbx
	mov	QWORD PTR [rsp+96], r15
	npad	6
$LL34@OutputTrac:
	cmp	WORD PTR [rsi+rdi*2+2], 0
	lea	rdi, QWORD PTR [rdi+1]
	jne	SHORT $LL34@OutputTrac
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 15
	lea	eax, DWORD PTR [rdi+257]
	movsxd	rcx, eax
	add	rcx, rcx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], rcx
	xor	ecx, ecx
	lea	edx, QWORD PTR [r9+1]
	mov	QWORD PTR [rsp+32], 0
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 16
	lea	ecx, DWORD PTR [rdi+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	r15, rax
; File W:\cpp\void\dr\text.c
; Line 16
	movsxd	rdi, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], r12
	mov	r9, rsi
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, r15
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vswprintf
; File W:\cpp\void\dr\plat-win32.c
; Line 38
	call	QWORD PTR __imp_GetCurrentThreadId
; File W:\cpp\void\dr\trace.c
; Line 37
	mov	rdx, QWORD PTR [r14+8]
	mov	ecx, ebx
; File W:\cpp\void\dr\plat-win32.c
; Line 38
	mov	edi, eax
; File W:\cpp\void\dr\trace.c
; Line 37
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	rdx, QWORD PTR [r14]
	mov	ecx, ebx
	mov	rsi, rax
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 6
	cmp	ebp, 7
	ja	SHORT $LN17@OutputTrac
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN33@OutputTrac[r8+rbp*4]
	add	rdx, r8
	jmp	rdx
$LN19@OutputTrac:
; Line 7
	lea	rdx, OFFSET FLAT:??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN20@OutputTrac:
; Line 8
	lea	rdx, OFFSET FLAT:??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN21@OutputTrac:
; Line 9
	lea	rdx, OFFSET FLAT:??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN22@OutputTrac:
; Line 10
	lea	rdx, OFFSET FLAT:??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN23@OutputTrac:
; Line 11
	lea	rdx, OFFSET FLAT:??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN24@OutputTrac:
; Line 12
	lea	rdx, OFFSET FLAT:??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN25@OutputTrac:
; Line 13
	lea	rdx, OFFSET FLAT:??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN26@OutputTrac:
; Line 14
	lea	rdx, OFFSET FLAT:??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN17@OutputTrac:
; Line 16
	lea	rdx, OFFSET FLAT:??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@
$LN16@OutputTrac:
; Line 37
	mov	QWORD PTR [rsp+40], r15
	lea	rcx, OFFSET FLAT:??_C@_1DO@DEICCEEP@?$AAK?$AAL?$AAA?$AAR?$AAK?$AA_?$AAA?$AAP?$AAP?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAs@
	mov	r9, rsi
	mov	DWORD PTR [rsp+32], edi
	mov	r8, rax
	call	?FormatW@@YAPEA_WPEB_WZZ		; FormatW
; File W:\cpp\void\dr\plat-win32.c
; Line 43
	mov	rcx, rax
; File W:\cpp\void\dr\trace.c
; Line 37
	mov	rdi, rax
; File W:\cpp\void\dr\plat-win32.c
; Line 43
	call	QWORD PTR __imp_OutputDebugStringW
	mov	r15, QWORD PTR [rsp+96]
$LL32@OutputTrac:
; Line 46
	inc	rbx
	cmp	WORD PTR [rdi+rbx*2], 0
	jne	SHORT $LL32@OutputTrac
	mov	rcx, QWORD PTR ?PROCESS@@3U_PROCESS@@A+96
	lea	r9, QWORD PTR Wrote$1[rsp]
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rdi
	call	QWORD PTR __imp_WriteConsoleW
	mov	rdi, QWORD PTR [rsp+104]
	test	eax, eax
	jne	SHORT $LN29@OutputTrac
; Line 48
	lea	rcx, OFFSET FLAT:??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@
	call	printf
$LN29@OutputTrac:
; File W:\cpp\void\dr\trace.c
; Line 43
	add	rsp, 112				; 00000070H
	pop	r14
	pop	r12
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN33@OutputTrac:
	DD	$LN19@OutputTrac
	DD	$LN20@OutputTrac
	DD	$LN21@OutputTrac
	DD	$LN25@OutputTrac
	DD	$LN22@OutputTrac
	DD	$LN26@OutputTrac
	DD	$LN23@OutputTrac
	DD	$LN24@OutputTrac
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ENDP	; OutputTraceMessage
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 8
File$ = 16
Func$ = 24
Line$ = 32
Guid$ = 40
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z PROC	; TraceLocation, COMDAT
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	eax, DWORD PTR Guid$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
	mov	DWORD PTR [rcx+16], r9d
; Line 46
	ret	0
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ENDP	; TraceLocation
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1_TRACE_BLOCK@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
Result$2 = 96
this$ = 96
Result$3 = 104
??1_TRACE_BLOCK@@QEAA@XZ PROC				; _TRACE_BLOCK::~_TRACE_BLOCK, COMDAT
; File W:\cpp\void\dr\trace.c
; Line 54
$LN12:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	lea	rcx, QWORD PTR Result$2[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 25
	lea	rcx, QWORD PTR Result$3[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\dr\trace.c
; Line 57
	vmovups	xmm0, XMMWORD PTR [rbx+8]
	mov	rdx, QWORD PTR Result$2[rsp]
	sub	rdx, QWORD PTR [rbx+32]
	vmovsd	xmm1, QWORD PTR [rbx+24]
	vmovups	XMMWORD PTR $T1[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovsd	QWORD PTR $T1[rsp+16], xmm1
	js	SHORT $LN9@TRACE_BLOC
; Line 55
	vcvtsi2sd xmm0, xmm0, rdx
	jmp	SHORT $LN10@TRACE_BLOC
$LN9@TRACE_BLOC:
	mov	rax, rdx
	and	edx, 1
	shr	rax, 1
	or	rax, rdx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm0, xmm0, xmm0
$LN10@TRACE_BLOC:
	mov	rcx, QWORD PTR Result$3[rsp]
	vmulsd	xmm1, xmm0, QWORD PTR __real@408f400000000000
	vxorps	xmm0, xmm0, xmm0
	test	rcx, rcx
	js	SHORT $LN7@TRACE_BLOC
	vcvtsi2sd xmm0, xmm0, rcx
	jmp	SHORT $LN8@TRACE_BLOC
$LN7@TRACE_BLOC:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm0, xmm0, xmm0
$LN8@TRACE_BLOC:
; Line 57
	mov	r9, QWORD PTR [rbx]
	lea	r8, OFFSET FLAT:??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@
	vdivsd	xmm0, xmm1, xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR $T1[rsp]
	vmovsd	QWORD PTR [rsp+32], xmm0
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 58
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??1_TRACE_BLOCK@@QEAA@XZ ENDP				; _TRACE_BLOCK::~_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z
_TEXT	SEGMENT
Result$1 = 48
this$ = 48
Location$ = 56
FriendlyName$ = 64
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z PROC	; _TRACE_BLOCK::_TRACE_BLOCK, COMDAT
; File W:\cpp\void\dr\trace.c
; Line 48
$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	vmovups	xmm0, XMMWORD PTR [rdx]
	vmovsd	xmm1, QWORD PTR [rdx+16]
	vmovups	XMMWORD PTR [rcx+8], xmm0
	vmovsd	QWORD PTR [rcx+24], xmm1
	mov	rbx, rcx
; Line 49
	mov	QWORD PTR [rcx], r8
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	lea	rcx, QWORD PTR Result$1[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\dr\trace.c
; Line 50
	mov	rax, QWORD PTR Result$1[rsp]
	mov	QWORD PTR [rbx+32], rax
; Line 51
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z ENDP	; _TRACE_BLOCK::_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?rx7__stoi@@YAHHPEA_JPEBD1@Z
_TEXT	SEGMENT
base$ = 8
res$ = 16
min$ = 24
max$ = 32
?rx7__stoi@@YAHHPEA_JPEBD1@Z PROC			; rx7__stoi, COMDAT
; File W:\cpp\void\dr\rx7-text.h
; Line 125
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
; Line 126
	xor	r10d, r10d
	movsxd	rbx, ecx
	mov	r11, r9
	mov	rsi, rdx
; Line 127
	lea	edi, QWORD PTR [r10+1]
	lea	ecx, QWORD PTR [rdi-2]
$LL2@rx7__stoi:
; Line 131
	cmp	r8, r11
	je	SHORT $LN24@rx7__stoi
	movzx	r9d, BYTE PTR [r8]
	cmp	r9b, 32					; 00000020H
	je	SHORT $LN6@rx7__stoi
$LN24@rx7__stoi:
	movzx	eax, BYTE PTR [r8]
	movzx	r9d, al
	cmp	al, 43					; 0000002bH
	je	SHORT $LN6@rx7__stoi
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN17@rx7__stoi
$LN6@rx7__stoi:
; Line 134
	cmp	r9b, 45					; 0000002dH
	mov	edi, 1
	cmove	edi, ecx
; Line 135
	inc	r8
; Line 136
	jmp	SHORT $LL2@rx7__stoi
$LN17@rx7__stoi:
; Line 139
	cmp	r8, r11
	jae	SHORT $LN29@rx7__stoi
$LL4@rx7__stoi:
; Line 140
	cmp	ebx, 10
	jl	SHORT $LN25@rx7__stoi
	movsx	rdx, BYTE PTR [r8]
	lea	eax, DWORD PTR [rdx-48]
	cmp	al, 9
	ja	SHORT $LN25@rx7__stoi
; Line 141
	mov	rcx, rbx
	imul	rcx, r10
	lea	r10, QWORD PTR [rdx-48]
; Line 142
	jmp	SHORT $LN30@rx7__stoi
$LN25@rx7__stoi:
; Line 143
	cmp	ebx, 16
	jne	SHORT $LN29@rx7__stoi
	movsx	rdx, BYTE PTR [r8]
	lea	eax, DWORD PTR [rdx-97]
	cmp	al, 5
	ja	SHORT $LN23@rx7__stoi
; Line 144
	mov	rcx, rbx
	imul	rcx, r10
	lea	r10, QWORD PTR [rdx-87]
; Line 145
	jmp	SHORT $LN30@rx7__stoi
$LN23@rx7__stoi:
; Line 146
	lea	eax, DWORD PTR [rdx-65]
	cmp	al, 5
	ja	SHORT $LN29@rx7__stoi
; Line 147
	mov	rcx, rbx
	imul	rcx, r10
	lea	r10, QWORD PTR [rdx-55]
$LN30@rx7__stoi:
; Line 139
	add	r10, rcx
	inc	r8
	cmp	r8, r11
	jb	SHORT $LL4@rx7__stoi
$LN29@rx7__stoi:
; Line 156
	mov	rbx, QWORD PTR [rsp+8]
	sub	r11d, r8d
	movsxd	rax, edi
	mov	rdi, QWORD PTR [rsp+24]
	imul	rax, r10
	mov	QWORD PTR [rsi], rax
	mov	eax, r11d
	mov	rsi, QWORD PTR [rsp+16]
	ret	0
?rx7__stoi@@YAHHPEA_JPEBD1@Z ENDP			; rx7__stoi
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT vsprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
vsprintf_s PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1512
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 1491
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rdi
	mov	r8, rsi
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
; Line 1514
	mov	rbx, QWORD PTR [rsp+64]
; Line 1495
	test	eax, eax
; Line 1514
	mov	rbp, QWORD PTR [rsp+72]
; Line 1495
	mov	ecx, -1
; Line 1514
	mov	rsi, QWORD PTR [rsp+80]
; Line 1495
	cmovs	eax, ecx
; Line 1514
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
vsprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_Locale$ = 88
_ArgList$ = 96
_vsprintf_s_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1490
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 1491
	call	__local_stdio_printf_options
	mov	r10, QWORD PTR _ArgList$[rsp]
	mov	r9, rdi
	mov	QWORD PTR [rsp+40], r10
	mov	r8, rsi
	mov	rdx, rbp
	mov	QWORD PTR [rsp+32], rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
; Line 1496
	mov	rbx, QWORD PTR [rsp+64]
	test	eax, eax
	mov	rbp, QWORD PTR [rsp+72]
	mov	ecx, -1
	mov	rsi, QWORD PTR [rsp+80]
	cmovs	eax, ecx
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 960
	mov	ecx, 1
	lea	rdi, QWORD PTR _Format$[rsp+8]
	call	__acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	mov	r8, QWORD PTR _Format$[rsp]
	xor	r9d, r9d
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], rdi
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 963
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 645
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vsnwprintf
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
_vsnwprintf PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1129
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rdi
	mov	r8, rsi
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vswprintf
; Line 1131
	mov	rbx, QWORD PTR [rsp+64]
; Line 1066
	test	eax, eax
; Line 1131
	mov	rbp, QWORD PTR [rsp+72]
; Line 1066
	mov	ecx, -1
; Line 1131
	mov	rsi, QWORD PTR [rsp+80]
; Line 1066
	cmovs	eax, ecx
; Line 1131
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsnwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vsnwprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_Locale$ = 88
_ArgList$ = 96
_vsnwprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1061
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 1062
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR _ArgList$[rsp]
	or	rcx, 1
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rbx
	call	__stdio_common_vswprintf
; Line 1067
	mov	rbx, QWORD PTR [rsp+64]
	test	eax, eax
	mov	rbp, QWORD PTR [rsp+72]
	mov	ecx, -1
	mov	rsi, QWORD PTR [rsp+80]
	cmovs	eax, ecx
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsnwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
