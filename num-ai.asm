; Listing generated by Microsoft (R) Optimizing Compiler Version 19.32.31329.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
?lan_one@@3T__m256@@B DD 03f800000r		; 1	; lan_one
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
	DD	03f800000r			; 1
?lan_zro@@3T__m256@@B DD 000000000r		; 0	; lan_zro
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
	DD	000000000r			; 0
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vsnwprintf_l
PUBLIC	_vsnwprintf
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsprintf_s_l
PUBLIC	vsprintf_s
PUBLIC	??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z	; _TRACE_BLOCK::_TRACE_BLOCK
PUBLIC	??1_TRACE_BLOCK@@QEAA@XZ			; _TRACE_BLOCK::~_TRACE_BLOCK
PUBLIC	??Bstr32@@QEAAPEADXZ				; str32::operator char *
PUBLIC	??Bstr32@@QEAA_JXZ				; str32::operator __int64
PUBLIC	??Bstr32@@QEAA_KXZ				; str32::operator unsigned __int64
PUBLIC	??Bstr32@@QEAANXZ				; str32::operator double
PUBLIC	??Bstr32@@QEAAMXZ				; str32::operator float
PUBLIC	??Bstr32@@QEAAIXZ				; str32::operator unsigned int
PUBLIC	??Bstr32@@QEAAHXZ				; str32::operator int
PUBLIC	??7str32@@QEAAHXZ				; str32::operator!
PUBLIC	main
PUBLIC	??Aai_mat@@QEAAPEAMH@Z				; ai_mat::operator[]
PUBLIC	?xorshift32@@YAII@Z				; xorshift32
PUBLIC	?rand_f@@YAMMM@Z				; rand_f
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@ ; `string'
PUBLIC	??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@ ; `string'
PUBLIC	??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@ ; `string'
PUBLIC	??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@	; `string'
PUBLIC	??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@ ; `string'
PUBLIC	??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@ ; `string'
PUBLIC	??_C@_15GANGMFKL@?$AA?$CF?$AAs@			; `string'
PUBLIC	??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@	; `string'
PUBLIC	??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@ ; `string'
PUBLIC	??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@ ; `string'
PUBLIC	??_C@_0L@GMPLCCII@user32?4dll@			; `string'
PUBLIC	??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@ ; `string'
PUBLIC	??_C@_0BD@ENICNPLM@SetProcessDPIAware@		; `string'
PUBLIC	??_C@_1DC@NCJOBAHH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_0N@LDNIACEG@LoadFileData@			; `string'
PUBLIC	??_C@_1DC@BNICGKJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAL?$AAo?$AAa?$AAd?$AA?5@ ; `string'
PUBLIC	??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@ ; `string'
PUBLIC	??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@		; `string'
PUBLIC	??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@ ; `string'
PUBLIC	??_C@_0CI@NPMNNLNI@?$CB?$CCnot?5supported?5for?5static?5allo@ ; `string'
PUBLIC	??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@ ; `string'
PUBLIC	??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@ ; `string'
PUBLIC	??_C@_1DO@DEICCEEP@?$AAK?$AAL?$AAA?$AAR?$AAK?$AA_?$AAA?$AAP?$AAP?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAs@ ; `string'
PUBLIC	??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@ ; `string'
PUBLIC	??_C@_0M@HIENKLDG@operator?5?$FL?$FN@		; `string'
PUBLIC	??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@ ; `string'
PUBLIC	??_C@_09EHENKKKI@idx?5?$DM?5min@		; `string'
PUBLIC	??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@ ; `string'
PUBLIC	??_C@_08NBCBIHOP@vec_sub_@			; `string'
PUBLIC	??_C@_08CHCJAPEF@vec_add_@			; `string'
PUBLIC	??_C@_08EGPIDAG@vec_mul_@			; `string'
PUBLIC	??_C@_07KBNDKOJG@vec_dot@			; `string'
PUBLIC	??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@ ; `string'
PUBLIC	??_C@_08ENKIOJLC@new_mat_@			; `string'
PUBLIC	??_C@_0BN@EEIDJDDN@data?2train?9labels?4idx1?9ubyte@ ; `string'
PUBLIC	??_C@_0BN@FIFMGHNF@data?2train?9images?4idx3?9ubyte@ ; `string'
PUBLIC	??_C@_0CL@HGLGICOI@?$CB?$CB?5vec_eql?$CInew_vec2?$CI1?0?51?$CJ?0?5new_@ ; `string'
PUBLIC	??_C@_04KLKHHPIG@MAIN@				; `string'
PUBLIC	??_C@_08KGMLKAKE@num?9ai?4c@			; `string'
PUBLIC	??_C@_0CK@MHGHDOLC@?$CB?5vec_eql?$CInew_vec2?$CI1?0?50?$CJ?0?5new_v@ ; `string'
PUBLIC	??_C@_0FM@JNEJAHIP@vec_eql?$CI?5new_vec2?$CI3?4f?07?4f?$CJ?0?5mat@ ; `string'
PUBLIC	??_C@_0GO@MNIPECM@vec_eql?$CI?5new_vec2?$CI0?4f?0?50?4f?$CJ?0?5ve@ ; `string'
PUBLIC	??_C@_0HF@IAGKILKP@vec_eql?$CI?5new_vec2?$CI0?4f?0?50?4f?$CJ?0?5ve@ ; `string'
PUBLIC	??_C@_0DG@HJFNMGEH@0?5?$DN?$DN?5vec_dot?$CI?5new_vec2?$CI0?4f?0?51?4f@ ; `string'
PUBLIC	??_C@_0EA@IIDOMOOK@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI1?4f?0?50?4f@ ; `string'
PUBLIC	??_C@_0EA@ICOMMCIP@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI1?4f?0?50?4f@ ; `string'
PUBLIC	??_C@_0EA@PPILIGLL@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI0?4f?0?51?4f@ ; `string'
PUBLIC	??_C@_1M@CAIDPHAA@?$AAT?$AAI?$AAM?$AAE?$AAD@	; `string'
PUBLIC	??_C@_1BA@FBNCKCPD@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAS?$AAS@ ; `string'
PUBLIC	??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD@ ; `string'
PUBLIC	??_C@_1EM@LPOHNLCH@?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$FL?$AA?$CF?$AAi?$AA?3?$AA?$CF?$AA?9?$AA4?$AAi@ ; `string'
PUBLIC	__real@2f800000
PUBLIC	__real@3b808081
PUBLIC	__real@3dcccccd
PUBLIC	__real@408f400000000000
PUBLIC	__real@bf800000
PUBLIC	__xmm@3b8080813b8080813b8080813b808081
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	__acrt_iob_func:PROC
EXTRN	__stdio_common_vswprintf:PROC
EXTRN	__stdio_common_vfprintf:PROC
EXTRN	__stdio_common_vsprintf_s:PROC
EXTRN	free:PROC
EXTRN	realloc:PROC
EXTRN	_aligned_free:PROC
EXTRN	_aligned_malloc:PROC
EXTRN	_aligned_realloc:PROC
EXTRN	__imp_GetStdHandle:PROC
EXTRN	__imp_CreateFileA:PROC
EXTRN	__imp_GetFileSize:PROC
EXTRN	__imp_ReadFile:PROC
EXTRN	__imp_DebugBreak:PROC
EXTRN	__imp_OutputDebugStringW:PROC
EXTRN	__imp_CloseHandle:PROC
EXTRN	__imp_QueryPerformanceCounter:PROC
EXTRN	__imp_QueryPerformanceFrequency:PROC
EXTRN	__imp_ExitProcess:PROC
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_FreeLibrary:PROC
EXTRN	__imp_GetProcAddress:PROC
EXTRN	__imp_LoadLibraryA:PROC
EXTRN	__imp_MessageBoxA:PROC
EXTRN	__imp_MultiByteToWideChar:PROC
EXTRN	__imp_AllocConsole:PROC
EXTRN	__imp_WriteConsoleW:PROC
EXTRN	__imp_timeBeginPeriod:PROC
EXTRN	__imp_timeEndPeriod:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__vdecl_expf8:PROC
EXTRN	memset:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
EXTRN	_tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA DQ 01H DUP (?) ; Global_TraceMessageHook
?ARGUMENTS@@3U_ARGUMENTS@@A DB 030H DUP (?)		; ARGUMENTS
?SYSTEM@@3U_SYSTEM@@A DB 048H DUP (?)			; SYSTEM
?PROCESS@@3U_PROCESS@@A DB 088H DUP (?)			; PROCESS
_BSS	ENDS
;	COMDAT ?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
_TLS	SEGMENT
?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA DQ 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::Bed
_TLS	ENDS
;	COMDAT ?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
_TLS	SEGMENT
?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA DD 01H DUP (?) ; `STATIC_ALLOCATOR'::`2'::$S1
_TLS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf_l DD imagerel $LN4
	DD	imagerel $LN4+104
	DD	imagerel $unwind$_vsnwprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnwprintf DD imagerel $LN6
	DD	imagerel $LN6+103
	DD	imagerel $unwind$_vsnwprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN4
	DD	imagerel $LN4+80
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN6
	DD	imagerel $LN6+80
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_s_l DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$_vsprintf_s_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$vsprintf_s DD imagerel $LN6
	DD	imagerel $LN6+99
	DD	imagerel $unwind$vsprintf_s
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?rx7__stoi@@YAHHPEA_JPEBD1@Z DD imagerel ?rx7__stoi@@YAHHPEA_JPEBD1@Z
	DD	imagerel ?rx7__stoi@@YAHHPEA_JPEBD1@Z+206
	DD	imagerel $unwind$?rx7__stoi@@YAHHPEA_JPEBD1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD imagerel $LN6
	DD	imagerel $LN6+60
	DD	imagerel $unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??1_TRACE_BLOCK@@QEAA@XZ DD imagerel $LN12
	DD	imagerel $LN12+187
	DD	imagerel $unwind$??1_TRACE_BLOCK@@QEAA@XZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+133
	DD	imagerel $chain$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+133
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+432
	DD	imagerel $chain$1$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+432
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+484
	DD	imagerel $chain$2$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+484
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+540
	DD	imagerel $chain$3$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+192
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z+192
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+247
	DD	imagerel $chain$0$?StaticAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?StaticAlloc@@YAPEAXH_K@Z DD imagerel ?StaticAlloc@@YAPEAXH_K@Z+247
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+269
	DD	imagerel $chain$1$?StaticAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+22
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z+22
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+75
	DD	imagerel $chain$0$?HeapAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?HeapAlloc@@YAPEAXH_K@Z DD imagerel ?HeapAlloc@@YAPEAXH_K@Z+75
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+88
	DD	imagerel $chain$1$?HeapAlloc@@YAPEAXH_K@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+200
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+200
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+338
	DD	imagerel $chain$0$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+338
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+358
	DD	imagerel $chain$1$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+35
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+35
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+113
	DD	imagerel $chain$0$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+113
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+169
	DD	imagerel $chain$1$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAA_JXZ DD imagerel $LN33
	DD	imagerel $LN33+157
	DD	imagerel $unwind$??Bstr32@@QEAA_JXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAA_KXZ DD imagerel $LN33
	DD	imagerel $LN33+157
	DD	imagerel $unwind$??Bstr32@@QEAA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAANXZ DD imagerel $LN33
	DD	imagerel $LN33+151
	DD	imagerel $unwind$??Bstr32@@QEAANXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAAMXZ DD imagerel $LN33
	DD	imagerel $LN33+151
	DD	imagerel $unwind$??Bstr32@@QEAAMXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAAIXZ DD imagerel $LN33
	DD	imagerel $LN33+157
	DD	imagerel $unwind$??Bstr32@@QEAAIXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Bstr32@@QEAAHXZ DD imagerel $LN33
	DD	imagerel $LN33+157
	DD	imagerel $unwind$??Bstr32@@QEAAHXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?MAIN@@YAXXZ DD imagerel ?MAIN@@YAXXZ
	DD	imagerel ?MAIN@@YAXXZ+28
	DD	imagerel $unwind$?MAIN@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$9$?MAIN@@YAXXZ DD imagerel ?MAIN@@YAXXZ+28
	DD	imagerel ?MAIN@@YAXXZ+4846
	DD	imagerel $chain$9$?MAIN@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$11$?MAIN@@YAXXZ DD imagerel ?MAIN@@YAXXZ+4846
	DD	imagerel ?MAIN@@YAXXZ+5690
	DD	imagerel $chain$11$?MAIN@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$?MAIN@@YAXXZ DD imagerel ?MAIN@@YAXXZ+5690
	DD	imagerel ?MAIN@@YAXXZ+5859
	DD	imagerel $chain$12$?MAIN@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$13$?MAIN@@YAXXZ DD imagerel ?MAIN@@YAXXZ+5859
	DD	imagerel ?MAIN@@YAXXZ+6048
	DD	imagerel $chain$13$?MAIN@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetPerformanceFrequency@@YA_KXZ DD imagerel ?GetPerformanceFrequency@@YA_KXZ
	DD	imagerel ?GetPerformanceFrequency@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceFrequency@@YA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?GetPerformanceCounter@@YA_KXZ DD imagerel ?GetPerformanceCounter@@YA_KXZ
	DD	imagerel ?GetPerformanceCounter@@YA_KXZ+25
	DD	imagerel $unwind$?GetPerformanceCounter@@YA_KXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?Widen@@YAPEA_WHPEBD@Z DD imagerel ?Widen@@YAPEA_WHPEBD@Z
	DD	imagerel ?Widen@@YAPEA_WHPEBD@Z+266
	DD	imagerel $unwind$?Widen@@YAPEA_WHPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?OutputW@@YAXPEB_W@Z DD imagerel ?OutputW@@YAXPEB_W@Z
	DD	imagerel ?OutputW@@YAXPEB_W@Z+95
	DD	imagerel $unwind$?OutputW@@YAXPEB_W@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
	DD	imagerel ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z+355
	DD	imagerel $unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+189
	DD	imagerel $chain$1$?LoadFileData@@YAPEAXPEAIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+189
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+357
	DD	imagerel $chain$2$?LoadFileData@@YAPEAXPEAIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?LoadFileData@@YAPEAXPEAIPEBD@Z DD imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+357
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+476
	DD	imagerel $chain$3$?LoadFileData@@YAPEAXPEAIPEBD@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+552
	DD	imagerel $chain$4$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+552
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+609
	DD	imagerel $chain$5$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+609
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+624
	DD	imagerel $chain$6$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
	DD	imagerel ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z+174
	DD	imagerel $unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
	DD	imagerel ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z+181
	DD	imagerel $unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FormatA@@YAPEADPEBDZZ DD imagerel ?FormatA@@YAPEADPEBDZZ
	DD	imagerel ?FormatA@@YAPEADPEBDZZ+161
	DD	imagerel $unwind$?FormatA@@YAPEADPEBDZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?FormatW@@YAPEA_WPEB_WZZ DD imagerel ?FormatW@@YAPEA_WPEB_WZZ
	DD	imagerel ?FormatW@@YAPEA_WPEB_WZZ+169
	DD	imagerel $unwind$?FormatW@@YAPEA_WPEB_WZZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?PlatformInitialize@@YAXXZ DD imagerel ?PlatformInitialize@@YAXXZ
	DD	imagerel ?PlatformInitialize@@YAXXZ+145
	DD	imagerel $unwind$?PlatformInitialize@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?PlatformInitialize@@YAXXZ DD imagerel ?PlatformInitialize@@YAXXZ+145
	DD	imagerel ?PlatformInitialize@@YAXXZ+248
	DD	imagerel $chain$1$?PlatformInitialize@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?PlatformInitialize@@YAXXZ DD imagerel ?PlatformInitialize@@YAXXZ+248
	DD	imagerel ?PlatformInitialize@@YAXXZ+253
	DD	imagerel $chain$2$?PlatformInitialize@@YAXXZ
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$main DD	imagerel $LN18
	DD	imagerel $LN18+165
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$main DD imagerel $LN18+165
	DD	imagerel $LN18+268
	DD	imagerel $chain$1$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$main DD imagerel $LN18+268
	DD	imagerel $LN18+300
	DD	imagerel $chain$2$main
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$??Aai_mat@@QEAAPEAMH@Z DD imagerel $LN6
	DD	imagerel $LN6+115
	DD	imagerel $unwind$??Aai_mat@@QEAAPEAMH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_vec@@YA?AUai_vec@@H@Z DD imagerel ?new_vec@@YA?AUai_vec@@H@Z
	DD	imagerel ?new_vec@@YA?AUai_vec@@H@Z+121
	DD	imagerel $unwind$?new_vec@@YA?AUai_vec@@H@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_vec2@@YA?AUai_vec@@MM@Z DD imagerel ?new_vec2@@YA?AUai_vec@@MM@Z
	DD	imagerel ?new_vec2@@YA?AUai_vec@@MM@Z+117
	DD	imagerel $unwind$?new_vec2@@YA?AUai_vec@@MM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_vec3@@YA?AUai_vec@@MMM@Z DD imagerel ?new_vec3@@YA?AUai_vec@@MMM@Z
	DD	imagerel ?new_vec3@@YA?AUai_vec@@MMM@Z+138
	DD	imagerel $unwind$?new_vec3@@YA?AUai_vec@@MMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z DD imagerel ?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z
	DD	imagerel ?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z+242
	DD	imagerel $unwind$?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_sub_@@YQ?AUai_vec@@U1@00@Z DD imagerel ?vec_sub_@@YQ?AUai_vec@@U1@00@Z
	DD	imagerel ?vec_sub_@@YQ?AUai_vec@@U1@00@Z+221
	DD	imagerel $unwind$?vec_sub_@@YQ?AUai_vec@@U1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_add_@@YQ?AUai_vec@@U1@00@Z DD imagerel ?vec_add_@@YQ?AUai_vec@@U1@00@Z
	DD	imagerel ?vec_add_@@YQ?AUai_vec@@U1@00@Z+221
	DD	imagerel $unwind$?vec_add_@@YQ?AUai_vec@@U1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_mul_@@YQ?AUai_vec@@U1@00@Z DD imagerel ?vec_mul_@@YQ?AUai_vec@@U1@00@Z
	DD	imagerel ?vec_mul_@@YQ?AUai_vec@@U1@00@Z+221
	DD	imagerel $unwind$?vec_mul_@@YQ?AUai_vec@@U1@00@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_sig_@@YQ?AUai_vec@@U1@0@Z DD imagerel ?vec_sig_@@YQ?AUai_vec@@U1@0@Z
	DD	imagerel ?vec_sig_@@YQ?AUai_vec@@U1@0@Z+156
	DD	imagerel $unwind$?vec_sig_@@YQ?AUai_vec@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+30
	DD	imagerel $unwind$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+30
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+132
	DD	imagerel $chain$1$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+132
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+164
	DD	imagerel $chain$2$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?vec_dot@@YQMUai_vec@@0@Z DD imagerel ?vec_dot@@YQMUai_vec@@0@Z
	DD	imagerel ?vec_dot@@YQMUai_vec@@0@Z+236
	DD	imagerel $unwind$?vec_dot@@YQMUai_vec@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_mat_@@YA?AUai_mat@@HHHH@Z DD imagerel ?new_mat_@@YA?AUai_mat@@HHHH@Z
	DD	imagerel ?new_mat_@@YA?AUai_mat@@HHHH@Z+193
	DD	imagerel $unwind$?new_mat_@@YA?AUai_mat@@HHHH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mat_rnd@@YAXUai_mat@@@Z DD imagerel ?mat_rnd@@YAXUai_mat@@@Z
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+38
	DD	imagerel $unwind$?mat_rnd@@YAXUai_mat@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?mat_rnd@@YAXUai_mat@@@Z DD imagerel ?mat_rnd@@YAXUai_mat@@@Z+38
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+190
	DD	imagerel $chain$1$?mat_rnd@@YAXUai_mat@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?mat_rnd@@YAXUai_mat@@@Z DD imagerel ?mat_rnd@@YAXUai_mat@@@Z+190
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+199
	DD	imagerel $chain$2$?mat_rnd@@YAXUai_mat@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z DD imagerel ?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z
	DD	imagerel ?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z+382
	DD	imagerel $unwind$?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?new_lay@@YA?AUai_lay@@HH@Z DD imagerel ?new_lay@@YA?AUai_lay@@HH@Z
	DD	imagerel ?new_lay@@YA?AUai_lay@@HH@Z+769
	DD	imagerel $unwind$?new_lay@@YA?AUai_lay@@HH@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z DD imagerel ?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z
	DD	imagerel ?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z+713
	DD	imagerel $unwind$?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?lay_upd@@YAXPEAUai_lay@@M@Z DD imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+25
	DD	imagerel $unwind$?lay_upd@@YAXPEAUai_lay@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?lay_upd@@YAXPEAUai_lay@@M@Z DD imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+25
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+98
	DD	imagerel $chain$0$?lay_upd@@YAXPEAUai_lay@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$?lay_upd@@YAXPEAUai_lay@@M@Z DD imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+98
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+124
	DD	imagerel $chain$1$?lay_upd@@YAXPEAUai_lay@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$?lay_upd@@YAXPEAUai_lay@@M@Z DD imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+124
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+246
	DD	imagerel $chain$2$?lay_upd@@YAXPEAUai_lay@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?lay_upd@@YAXPEAUai_lay@@M@Z DD imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+246
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+251
	DD	imagerel $chain$3$?lay_upd@@YAXPEAUai_lay@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?lay_upd@@YAXPEAUai_lay@@M@Z DD imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+251
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+546
	DD	imagerel $chain$4$?lay_upd@@YAXPEAUai_lay@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?lay_upd@@YAXPEAUai_lay@@M@Z DD imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+546
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+715
	DD	imagerel $chain$5$?lay_upd@@YAXPEAUai_lay@@M@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z DD imagerel ?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z
	DD	imagerel ?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z+1275
	DD	imagerel $unwind$?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+38
	DD	imagerel $unwind$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+38
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+49
	DD	imagerel $chain$0$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+49
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+378
	DD	imagerel $chain$3$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+378
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+617
	DD	imagerel $chain$4$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+617
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+831
	DD	imagerel $chain$5$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+831
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+952
	DD	imagerel $chain$6$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$7$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+952
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+1062
	DD	imagerel $chain$7$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z DD imagerel ?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z
	DD	imagerel ?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z+1322
	DD	imagerel $unwind$?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z
pdata	ENDS
;	COMDAT ?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
_TLS	SEGMENT
?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA DD 00H ; `STATIC_ALLOCATOR'::`2'::Min
_TLS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@3b8080813b8080813b8080813b808081
CONST	SEGMENT
__xmm@3b8080813b8080813b8080813b808081 DB 081H, 080H, 080H, ';', 081H, 080H
	DB	080H, ';', 081H, 080H, 080H, ';', 081H, 080H, 080H, ';'
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@408f400000000000
CONST	SEGMENT
__real@408f400000000000 DQ 0408f400000000000r	; 1000
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3b808081
CONST	SEGMENT
__real@3b808081 DD 03b808081r			; 0.00392157
CONST	ENDS
;	COMDAT __real@2f800000
CONST	SEGMENT
__real@2f800000 DD 02f800000r			; 2.32831e-10
CONST	ENDS
;	COMDAT ??_C@_1EM@LPOHNLCH@?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$FL?$AA?$CF?$AAi?$AA?3?$AA?$CF?$AA?9?$AA4?$AAi@
CONST	SEGMENT
??_C@_1EM@LPOHNLCH@?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$FL?$AA?$CF?$AAi?$AA?3?$AA?$CF?$AA?9?$AA4?$AAi@ DB 's'
	DB	00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'[', 00H, '%', 00H, 'i', 00H, ':', 00H, '%', 00H, '-', 00H, '4'
	DB	00H, 'i', 00H, ']', 00H, ' ', 00H, 'l', 00H, 'b', 00H, 'l', 00H
	DB	' ', 00H, '%', 00H, 'i', 00H, ' ', 00H, '-', 00H, '>', 00H, '>'
	DB	00H, ' ', 00H, 'p', 00H, 'r', 00H, 'd', 00H, ' ', 00H, '%', 00H
	DB	'i', 00H, ' ', 00H, '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD@
CONST	SEGMENT
??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD@ DB 'F', 00H, 'A', 00H, 'I'
	DB	00H, 'L', 00H, 'E', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@FBNCKCPD@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAS?$AAS@
CONST	SEGMENT
??_C@_1BA@FBNCKCPD@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAS?$AAS@ DB 'S', 00H, 'U', 00H
	DB	'C', 00H, 'C', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@CAIDPHAA@?$AAT?$AAI?$AAM?$AAE?$AAD@
CONST	SEGMENT
??_C@_1M@CAIDPHAA@?$AAT?$AAI?$AAM?$AAE?$AAD@ DB 'T', 00H, 'I', 00H, 'M', 00H
	DB	'E', 00H, 'D', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@PPILIGLL@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI0?4f?0?51?4f@
CONST	SEGMENT
??_C@_0EA@PPILIGLL@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI0?4f?0?51?4f@ DB '0'
	DB	' == vec_dot( new_vec3(0.f, 1.f, 0.f), new_vec3(0.f, 0.f, 1.f)'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@ICOMMCIP@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI1?4f?0?50?4f@
CONST	SEGMENT
??_C@_0EA@ICOMMCIP@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI1?4f?0?50?4f@ DB '0'
	DB	' == vec_dot( new_vec3(1.f, 0.f, 0.f), new_vec3(0.f, 0.f, 1.f)'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@IIDOMOOK@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI1?4f?0?50?4f@
CONST	SEGMENT
??_C@_0EA@IIDOMOOK@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI1?4f?0?50?4f@ DB '0'
	DB	' == vec_dot( new_vec3(1.f, 0.f, 0.f), new_vec3(0.f, 1.f, 0.f)'
	DB	')', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@HJFNMGEH@0?5?$DN?$DN?5vec_dot?$CI?5new_vec2?$CI0?4f?0?51?4f@
CONST	SEGMENT
??_C@_0DG@HJFNMGEH@0?5?$DN?$DN?5vec_dot?$CI?5new_vec2?$CI0?4f?0?51?4f@ DB '0'
	DB	' == vec_dot( new_vec2(0.f, 1.f), new_vec2(1.f, 0.f))', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HF@IAGKILKP@vec_eql?$CI?5new_vec2?$CI0?4f?0?50?4f?$CJ?0?5ve@
CONST	SEGMENT
??_C@_0HF@IAGKILKP@vec_eql?$CI?5new_vec2?$CI0?4f?0?50?4f?$CJ?0?5ve@ DB 'v'
	DB	'ec_eql( new_vec2(0.f, 0.f), vec_add_(new_vec(new_vec2(- 1.f, '
	DB	'1.f).len),new_vec2(- 1.f, 1.f),new_vec2( 1.f, - 1.f)))', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@MNIPECM@vec_eql?$CI?5new_vec2?$CI0?4f?0?50?4f?$CJ?0?5ve@
CONST	SEGMENT
??_C@_0GO@MNIPECM@vec_eql?$CI?5new_vec2?$CI0?4f?0?50?4f?$CJ?0?5ve@ DB 've'
	DB	'c_eql( new_vec2(0.f, 0.f), vec_mul_(new_vec(new_vec2(0.f, 1.f'
	DB	').len),new_vec2(0.f, 1.f),new_vec2(1.f, 0.f)))', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@JNEJAHIP@vec_eql?$CI?5new_vec2?$CI3?4f?07?4f?$CJ?0?5mat@
CONST	SEGMENT
??_C@_0FM@JNEJAHIP@vec_eql?$CI?5new_vec2?$CI3?4f?07?4f?$CJ?0?5mat@ DB 've'
	DB	'c_eql( new_vec2(3.f,7.f), mat_dot_(new_vec(new_vec2(1.f,1.f).'
	DB	'len),mat,new_vec2(1.f,1.f)))', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MHGHDOLC@?$CB?5vec_eql?$CInew_vec2?$CI1?0?50?$CJ?0?5new_v@
CONST	SEGMENT
??_C@_0CK@MHGHDOLC@?$CB?5vec_eql?$CInew_vec2?$CI1?0?50?$CJ?0?5new_v@ DB '!'
	DB	' vec_eql(new_vec2(1, 0), new_vec2(1, 1))', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KGMLKAKE@num?9ai?4c@
CONST	SEGMENT
??_C@_08KGMLKAKE@num?9ai?4c@ DB 'num-ai.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLKHHPIG@MAIN@
CONST	SEGMENT
??_C@_04KLKHHPIG@MAIN@ DB 'MAIN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@HGLGICOI@?$CB?$CB?5vec_eql?$CInew_vec2?$CI1?0?51?$CJ?0?5new_@
CONST	SEGMENT
??_C@_0CL@HGLGICOI@?$CB?$CB?5vec_eql?$CInew_vec2?$CI1?0?51?$CJ?0?5new_@ DB '!'
	DB	'! vec_eql(new_vec2(1, 1), new_vec2(1, 1))', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FIFMGHNF@data?2train?9images?4idx3?9ubyte@
CONST	SEGMENT
??_C@_0BN@FIFMGHNF@data?2train?9images?4idx3?9ubyte@ DB 'data\train-image'
	DB	's.idx3-ubyte', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EEIDJDDN@data?2train?9labels?4idx1?9ubyte@
CONST	SEGMENT
??_C@_0BN@EEIDJDDN@data?2train?9labels?4idx1?9ubyte@ DB 'data\train-label'
	DB	's.idx1-ubyte', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENKIOJLC@new_mat_@
CONST	SEGMENT
??_C@_08ENKIOJLC@new_mat_@ DB 'new_mat_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@
CONST	SEGMENT
??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@ DB 'm'
	DB	00H, 'e', 00H, 'm', 00H, ' ', 00H, 'v', 00H, 'e', 00H, 'c', 00H
	DB	' ', 00H, 's', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '%', 00H, 'i'
	DB	00H, '/', 00H, '%', 00H, 'i', 00H, ',', 00H, ' ', 00H, 'p', 00H
	DB	'a', 00H, 'd', 00H, 'd', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' '
	DB	00H, 'n', 00H, 'e', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's', 00H
	DB	'a', 00H, 'r', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBNDKOJG@vec_dot@
CONST	SEGMENT
??_C@_07KBNDKOJG@vec_dot@ DB 'vec_dot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGPIDAG@vec_mul_@
CONST	SEGMENT
??_C@_08EGPIDAG@vec_mul_@ DB 'vec_mul_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CHCJAPEF@vec_add_@
CONST	SEGMENT
??_C@_08CHCJAPEF@vec_add_@ DB 'vec_add_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NBCBIHOP@vec_sub_@
CONST	SEGMENT
??_C@_08NBCBIHOP@vec_sub_@ DB 'vec_sub_', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
CONST	SEGMENT
??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@ DB 'lhs.len == rhs.len', 00H ; `string'
CONST	ENDS
;	COMDAT ?state@?1??rand_f@@YAMMM@Z@4IA
_DATA	SEGMENT
?state@?1??rand_f@@YAMMM@Z@4IA DD 061H			; `rand_f'::`2'::state
_DATA	ENDS
;	COMDAT ??_C@_09EHENKKKI@idx?5?$DM?5min@
CONST	SEGMENT
??_C@_09EHENKKKI@idx?5?$DM?5min@ DB 'idx < min', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
CONST	SEGMENT
??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@ DB 'W:\cpp\void\dr'
	DB	'-ai\dr-vec.h', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HIENKLDG@operator?5?$FL?$FN@
CONST	SEGMENT
??_C@_0M@HIENKLDG@operator?5?$FL?$FN@ DB 'operator []', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@
CONST	SEGMENT
??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@ DB 'T'
	DB	00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, '_', 00H, 'B', 00H
	DB	'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, ' ', 00H, '[', 00H, '%'
	DB	00H, 's', 00H, ']', 00H, ' ', 00H, '%', 00H, 'f', 00H, '(', 00H
	DB	'm', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@DEICCEEP@?$AAK?$AAL?$AAA?$AAR?$AAK?$AA_?$AAA?$AAP?$AAP?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAs@
CONST	SEGMENT
??_C@_1DO@DEICCEEP@?$AAK?$AAL?$AAA?$AAR?$AAK?$AA_?$AAA?$AAP?$AAP?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAs@ DB 'K'
	DB	00H, 'L', 00H, 'A', 00H, 'R', 00H, 'K', 00H, '_', 00H, 'A', 00H
	DB	'P', 00H, 'P', 00H, ' ', 00H, '%', 00H, 's', 00H, ' ', 00H, '%'
	DB	00H, 's', 00H, ',', 00H, ' ', 00H, '%', 00H, 's', 00H, '(', 00H
	DB	')', 00H, ' ', 00H, '[', 00H, '%', 00H, 'i', 00H, ']', 00H, ' '
	DB	00H, '%', 00H, 's', 00H, 0aH, 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@
CONST	SEGMENT
??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@ DB 'I'
	DB	00H, 'N', 00H, 'V', 00H, 'A', 00H, 'L', 00H, 'I', 00H, 'D', 00H
	DB	'_', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, '_'
	DB	00H, 'M', 00H, 'E', 00H, 'S', 00H, 'S', 00H, 'A', 00H, 'G', 00H
	DB	'E', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@
CONST	SEGMENT
??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@ DB 'P'
	DB	00H, 'E', 00H, 'D', 00H, 'A', 00H, 'N', 00H, 'T', 00H, 'I', 00H
	DB	'C', 00H, ':', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@ DB 'V'
	DB	00H, 'E', 00H, 'R', 00H, 'B', 00H, 'O', 00H, 'S', 00H, 'E', 00H
	DB	':', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'F'
	DB	00H, 'A', 00H, 'T', 00H, 'A', 00H, 'L', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'E'
	DB	00H, 'R', 00H, 'R', 00H, 'O', 00H, 'R', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@ DB 'W'
	DB	00H, 'A', 00H, 'R', 00H, 'N', 00H, 'I', 00H, 'N', 00H, 'G', 00H
	DB	':', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'I'
	DB	00H, 'N', 00H, 'F', 00H, 'O', 00H, ':', 00H, ' ', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'D'
	DB	00H, 'E', 00H, 'B', 00H, 'U', 00H, 'G', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
CONST	SEGMENT
??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@ DB 'T'
	DB	00H, 'R', 00H, 'A', 00H, 'C', 00H, 'E', 00H, ':', 00H, ' ', 00H
	DB	' ', 00H, ' ', 00H, ' ', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@NPMNNLNI@?$CB?$CCnot?5supported?5for?5static?5allo@
CONST	SEGMENT
??_C@_0CI@NPMNNLNI@?$CB?$CCnot?5supported?5for?5static?5allo@ DB '!"not s'
	DB	'upported for static allocations"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@
CONST	SEGMENT
??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@ DB 'W:\cpp\void\dr/cator'
	DB	'.c', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@
CONST	SEGMENT
??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@ DB 'STATIC_ALLOCATOR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@
CONST	SEGMENT
??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	'o', 00H, ' ', 00H, 'b', 00H, 'i', 00H, 'g', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@BNICGKJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAL?$AAo?$AAa?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1DC@BNICGKJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAL?$AAo?$AAa?$AAd?$AA?5@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'T', 00H, 'o', 00H, ' ', 00H, 'L', 00H, 'o', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDNIACEG@LoadFileData@
CONST	SEGMENT
??_C@_0N@LDNIACEG@LoadFileData@ DB 'LoadFileData', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@NCJOBAHH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5@
CONST	SEGMENT
??_C@_1DC@NCJOBAHH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5@ DB 'F'
	DB	00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd', 00H, ' ', 00H
	DB	'T', 00H, 'o', 00H, ' ', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, ' ', 00H, 'F', 00H, 'i', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'[', 00H, '%', 00H, 's', 00H, ']', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ENICNPLM@SetProcessDPIAware@
CONST	SEGMENT
??_C@_0BD@ENICNPLM@SetProcessDPIAware@ DB 'SetProcessDPIAware', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@
CONST	SEGMENT
??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@ DB 'SetProcessDPIAwaren'
	DB	'essContext', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GMPLCCII@user32?4dll@
CONST	SEGMENT
??_C@_0L@GMPLCCII@user32?4dll@ DB 'user32.dll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@
CONST	SEGMENT
??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@ DB 'W:\cpp\void\dr'
	DB	'/plat-win32.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@
CONST	SEGMENT
??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@ DB 'Would'
	DB	' You Like To Exit (Abort), Debug (Retry) or Continue (Ignore)'
	DB	'?', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@
CONST	SEGMENT
??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@ DB 'Choose Your Poison', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15GANGMFKL@?$AA?$CF?$AAs@
CONST	SEGMENT
??_C@_15GANGMFKL@?$AA?$CF?$AAs@ DB '%', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
CONST	SEGMENT
??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@ DB '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*'
	DB	00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H, '*', 00H
	DB	'*', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@
CONST	SEGMENT
??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@ DB 'B'
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'k', 00H, ' ', 00H, 'H', 00H
	DB	'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 'r', 00H, ' '
	DB	00H, 'I', 00H, 'n', 00H, 'v', 00H, 'o', 00H, 'k', 00H, 'e', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@
CONST	SEGMENT
??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@ DB 'Break Handler Invoked', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@
CONST	SEGMENT
??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@ DB '%'
	DB	's, %i %s() [%i] %s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@
CONST	SEGMENT
??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@ DB '[WARNIN'
	DB	'G] write console failed, are you using visual studio?', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
CONST	SEGMENT
??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@ DB 'N'
	DB	00H, 'O', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'S', 00H, 'S', 00H
	DB	'A', 00H, 'G', 00H, 'E', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z DD 0d3301H
	DD	0c682aH
	DD	0253425H
	DD	01a0125H
	DD	0e01cf01eH
	DD	0c018d01aH
	DD	060157016H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$7$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 021H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+38
	DD	imagerel $unwind$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 040021H
	DD	033e400H
	DD	0386400H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+38
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+49
	DD	imagerel $chain$0$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 060021H
	DD	032f400H
	DD	033e400H
	DD	0386400H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+38
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+49
	DD	imagerel $chain$0$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 020821H
	DD	0386408H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+49
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+378
	DD	imagerel $chain$3$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 061321H
	DD	032f413H
	DD	033e40fH
	DD	034d404H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+38
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+49
	DD	imagerel $chain$0$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 020421H
	DD	03ac404H
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
	DD	imagerel ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z+38
	DD	imagerel $unwind$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z DD 041001H
	DD	0350110H
	DD	030087009H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z DD 0f3101H
	DD	0c6828H
	DD	0237423H
	DD	0226423H
	DD	0213423H
	DD	01a0123H
	DD	0e01af01cH
	DD	0c016d018H
	DD	05014H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?lay_upd@@YAXPEAUai_lay@@M@Z DD 021H
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+25
	DD	imagerel $unwind$?lay_upd@@YAXPEAUai_lay@@M@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?lay_upd@@YAXPEAUai_lay@@M@Z DD 021H
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+25
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+98
	DD	imagerel $chain$0$?lay_upd@@YAXPEAUai_lay@@M@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?lay_upd@@YAXPEAUai_lay@@M@Z DD 021H
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+98
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+124
	DD	imagerel $chain$1$?lay_upd@@YAXPEAUai_lay@@M@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?lay_upd@@YAXPEAUai_lay@@M@Z DD 020521H
	DD	0b6405H
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+98
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+124
	DD	imagerel $chain$1$?lay_upd@@YAXPEAUai_lay@@M@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?lay_upd@@YAXPEAUai_lay@@M@Z DD 020521H
	DD	087405H
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+25
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+98
	DD	imagerel $chain$0$?lay_upd@@YAXPEAUai_lay@@M@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?lay_upd@@YAXPEAUai_lay@@M@Z DD 020521H
	DD	0a3405H
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z
	DD	imagerel ?lay_upd@@YAXPEAUai_lay@@M@Z+25
	DD	imagerel $unwind$?lay_upd@@YAXPEAUai_lay@@M@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lay_upd@@YAXPEAUai_lay@@M@Z DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z DD 0d2f01H
	DD	0c6826H
	DD	0243421H
	DD	01a0121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_lay@@YA?AUai_lay@@HH@Z DD 0a1a01H
	DD	013741aH
	DD	012641aH
	DD	011541aH
	DD	010341aH
	DD	0e016d21aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z DD 0b2a01H
	DD	0223421H
	DD	0180121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?mat_rnd@@YAXUai_mat@@@Z DD 021H
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+38
	DD	imagerel $unwind$?mat_rnd@@YAXUai_mat@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?mat_rnd@@YAXUai_mat@@@Z DD 040a21H
	DD	07740aH
	DD	066405H
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z
	DD	imagerel ?mat_rnd@@YAXUai_mat@@@Z+38
	DD	imagerel $unwind$?mat_rnd@@YAXUai_mat@@@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?mat_rnd@@YAXUai_mat@@@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_mat_@@YA?AUai_mat@@HHHH@Z DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_dot@@YQMUai_vec@@0@Z DD 081d01H
	DD	0107414H
	DD	0f6414H
	DD	0e3414H
	DD	05010b214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD 021H
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+30
	DD	imagerel $unwind$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD 040e21H
	DD	07e40eH
	DD	063405H
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
	DD	imagerel ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z+30
	DD	imagerel $unwind$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_dsg_@@YQ?AUai_vec@@U1@0@Z DD 061001H
	DD	097410H
	DD	086410H
	DD	0f00c3210H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_sig_@@YQ?AUai_vec@@U1@0@Z DD 0a1a01H
	DD	09e41aH
	DD	08741aH
	DD	07641aH
	DD	06341aH
	DD	0f016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_mul_@@YQ?AUai_vec@@U1@00@Z DD 081501H
	DD	0c7415H
	DD	0b6415H
	DD	0a3415H
	DD	0e0117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_add_@@YQ?AUai_vec@@U1@00@Z DD 081501H
	DD	0c7415H
	DD	0b6415H
	DD	0a3415H
	DD	0e0117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?vec_sub_@@YQ?AUai_vec@@U1@00@Z DD 081501H
	DD	0c7415H
	DD	0b6415H
	DD	0a3415H
	DD	0e0117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z DD 082001H
	DD	038820H
	DD	047817H
	DD	05680cH
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_vec3@@YA?AUai_vec@@MMM@Z DD 082001H
	DD	038820H
	DD	047817H
	DD	05680cH
	DD	03002b206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_vec2@@YA?AUai_vec@@MM@Z DD 061a01H
	DD	03781aH
	DD	04680cH
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?new_vec@@YA?AUai_vec@@H@Z DD 0a1a01H
	DD	09741aH
	DD	08641aH
	DD	07541aH
	DD	06341aH
	DD	0e016321aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Aai_mat@@QEAAPEAMH@Z DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$main DD 021H
	DD	imagerel $LN18
	DD	imagerel $LN18+165
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$main DD 041121H
	DD	047411H
	DD	063405H
	DD	imagerel $LN18
	DD	imagerel $LN18+165
	DD	imagerel $unwind$main
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$main DD	010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?PlatformInitialize@@YAXXZ DD 021H
	DD	imagerel ?PlatformInitialize@@YAXXZ
	DD	imagerel ?PlatformInitialize@@YAXXZ+145
	DD	imagerel $unwind$?PlatformInitialize@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?PlatformInitialize@@YAXXZ DD 041121H
	DD	047411H
	DD	073405H
	DD	imagerel ?PlatformInitialize@@YAXXZ
	DD	imagerel ?PlatformInitialize@@YAXXZ+145
	DD	imagerel $unwind$?PlatformInitialize@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?PlatformInitialize@@YAXXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FormatW@@YAPEA_WPEB_WZZ DD 051d01H
	DD	0e019621dH
	DD	060167017H
	DD	03015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FormatA@@YAPEADPEBDZZ DD 051d01H
	DD	0e019621dH
	DD	060167017H
	DD	03015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z DD 0a1a01H
	DD	0b741aH
	DD	0a641aH
	DD	09541aH
	DD	08341aH
	DD	0e016521aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 021H
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 040021H
	DD	0cc400H
	DD	0e5400H
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 0a1b21H
	DD	0bd41bH
	DD	0cc417H
	DD	0d7413H
	DD	0e540fH
	DD	0f3404H
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
	DD	imagerel ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ+37
	DD	imagerel $unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ DD 041301H
	DD	0f00cf213H
	DD	06008e00aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 021H
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 020021H
	DD	0105400H
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 041b21H
	DD	010541bH
	DD	0163408H
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z
	DD	imagerel ?LoadFileData@@YAPEAXPEAIPEBD@Z+75
	DD	imagerel $unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?LoadFileData@@YAPEAXPEAIPEBD@Z DD 060e01H
	DD	011010eH
	DD	0e005f007H
	DD	060027003H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z DD 060f01H
	DD	0d640fH
	DD	0c340fH
	DD	0700b920fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?OutputW@@YAXPEB_W@Z DD 020601H
	DD	030025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?Widen@@YAPEA_WHPEBD@Z DD 0a3201H
	DD	0ae432H
	DD	09642bH
	DD	085426H
	DD	0b340aH
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetPerformanceCounter@@YA_KXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?GetPerformanceFrequency@@YA_KXZ DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$13$?MAIN@@YAXXZ DD 021H
	DD	imagerel ?MAIN@@YAXXZ
	DD	imagerel ?MAIN@@YAXXZ+28
	DD	imagerel $unwind$?MAIN@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$?MAIN@@YAXXZ DD 021H
	DD	imagerel ?MAIN@@YAXXZ+28
	DD	imagerel ?MAIN@@YAXXZ+4846
	DD	imagerel $chain$9$?MAIN@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$11$?MAIN@@YAXXZ DD 042221H
	DD	06da822H
	DD	06e9809H
	DD	imagerel ?MAIN@@YAXXZ+28
	DD	imagerel ?MAIN@@YAXXZ+4846
	DD	imagerel $chain$9$?MAIN@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$9$?MAIN@@YAXXZ DD 0143c21H
	DD	06f883cH
	DD	0707836H
	DD	0716830H
	DD	0e4f42aH
	DD	0e5e426H
	DD	0e6d422H
	DD	0ebc41eH
	DD	0ea741aH
	DD	0e9640fH
	DD	0e83404H
	DD	imagerel ?MAIN@@YAXXZ
	DD	imagerel ?MAIN@@YAXXZ+28
	DD	imagerel $unwind$?MAIN@@YAXXZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?MAIN@@YAXXZ DD 021c19H
	DD	0e7010aH
	DD	imagerel __GSHandlerCheck
	DD	06c0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAAHXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAAIXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAAMXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAANXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAA_KXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??Bstr32@@QEAA_JXZ DD 010401H
	DD	02204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 021H
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+35
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 020521H
	DD	067405H
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+35
	DD	imagerel $unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 021H
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+200
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 020521H
	DD	0c7405H
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
	DD	imagerel ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z+200
	DD	imagerel $unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z DD 081301H
	DD	0e5413H
	DD	0d3413H
	DD	0f00f7213H
	DD	0600be00dH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?HeapAlloc@@YAPEAXH_K@Z DD 021H
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+22
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?HeapAlloc@@YAPEAXH_K@Z DD 020521H
	DD	063405H
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z
	DD	imagerel ?HeapAlloc@@YAPEAXH_K@Z+22
	DD	imagerel $unwind$?HeapAlloc@@YAPEAXH_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?HeapAlloc@@YAPEAXH_K@Z DD 040a01H
	DD	07640aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?StaticAlloc@@YAPEAXH_K@Z DD 021H
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+192
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?StaticAlloc@@YAPEAXH_K@Z DD 020521H
	DD	0a3405H
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z
	DD	imagerel ?StaticAlloc@@YAPEAXH_K@Z+192
	DD	imagerel $unwind$?StaticAlloc@@YAPEAXH_K@Z
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?StaticAlloc@@YAPEAXH_K@Z DD 081501H
	DD	0d7415H
	DD	0c6415H
	DD	0b5415H
	DD	0e0117215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 021H
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 021H
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+133
	DD	imagerel $chain$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 020521H
	DD	0cf405H
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+133
	DD	imagerel $chain$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 020521H
	DD	0d7405H
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
	DD	imagerel ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ+125
	DD	imagerel $unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ DD 061501H
	DD	0e011d215H
	DD	0600dc00fH
	DD	0300b500cH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??1_TRACE_BLOCK@@QEAA@XZ DD 020601H
	DD	030029206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?rx7__stoi@@YAHHPEA_JPEBD1@Z DD 060f01H
	DD	03740fH
	DD	02640aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$vsprintf_s DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_s_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 031a01H
	DD	07016621aH
	DD	03015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnwprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z
_TEXT	SEGMENT
lane_acc$1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
$T5 = 0
$T6 = 0
$T7 = 0
$T8 = 0
$T9 = 32
$T10 = 32
$T11 = 32
lane_acc$12 = 32
$T13 = 64
$T14 = 64
$T15 = 64
$T16 = 64
$T17 = 80
$T18 = 80
$T19 = 80
$T20 = 80
$T21 = 96
$T22 = 96
net$ = 272
inp_v$ = 280
tar_v$ = 288
?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z PROC		; net_grd_dsc, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 329
	mov	rax, rsp
	mov	QWORD PTR [rax+32], rbx
	mov	QWORD PTR [rax+24], r8
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 208				; 000000d0H
	vmovaps	XMMWORD PTR [rax-72], xmm6
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
; Line 253
	vmovups	xmm0, XMMWORD PTR [rcx+112]
	vmovups	ymm1, YMMWORD PTR [rcx]
; Line 276
	xor	ebx, ebx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	lea	r8, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 253
	vmovups	XMMWORD PTR $T16[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm0, ymm1, 1
	vmovd	r12d, xmm0
; File W:\cpp\void\dr-ai\num-ai.c
; Line 329
	mov	rax, rdx
	mov	r14, rcx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	lea	rdx, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 276
	mov	edi, ebx
; Line 253
	vmovups	YMMWORD PTR $T22[rbp], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	r12d, r12d
	jle	$LN9@net_grd_ds
; Line 433
	mov	r14, QWORD PTR $T22[rbp+8]
	mov	r13d, ebx
	vmovups	xmm0, XMMWORD PTR [rax]
	mov	rsi, QWORD PTR $T16[rbp+8]
	mov	r15, r14
	shr	r15, 32					; 00000020H
; Line 352
	vmovd	eax, xmm0
	cmp	r14d, eax
; Line 433
	vmovups	XMMWORD PTR $T18[rbp], xmm0
	sete	r13b
	npad	8
$LL10@net_grd_ds:
; Line 388
	mov	rcx, QWORD PTR $T22[rbp+24]
; Line 352
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; Line 388
	mov	eax, r15d
; Line 352
	mov	QWORD PTR $T5[rbp], rdx
; Line 388
	imul	eax, edi
; Line 352
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	QWORD PTR $T5[rbp+8], r8
	mov	r8d, r13d
	mov	DWORD PTR $T5[rbp+16], 352		; 00000160H
	mov	DWORD PTR $T5[rbp+20], 45		; 0000002dH
; Line 388
	cdqe
	lea	rbx, QWORD PTR [rcx+rax*4]
; Line 352
	lea	rcx, QWORD PTR $T5[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	vpxor	xmm1, xmm1, xmm1
; Line 355
	vmovups	YMMWORD PTR lane_acc$12[rbp], ymm1
; Line 356
	test	r14d, r14d
	jle	SHORT $LN16@net_grd_ds
; Line 388
	mov	rdx, QWORD PTR $T18[rbp+8]
	lea	ecx, DWORD PTR [r14-1]
	sub	rdx, rbx
	shr	ecx, 3
	inc	ecx
$LL17@net_grd_ds:
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rdx+rbx]
	lea	rbx, QWORD PTR [rbx+32]
	sub	rcx, 1
	jne	SHORT $LL17@net_grd_ds
	vmovups	YMMWORD PTR lane_acc$12[rbp], ymm1
$LN16@net_grd_ds:
; Line 362
	vmovss	xmm0, DWORD PTR lane_acc$12[rbp]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$12[rbp+4]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$12[rbp+8]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$12[rbp+12]
	vaddss	xmm0, xmm3, DWORD PTR lane_acc$12[rbp+16]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$12[rbp+20]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$12[rbp+24]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$12[rbp+28]
; Line 433
	vmovss	DWORD PTR [rsi], xmm3
	add	rsi, 4
	lea	rdx, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	inc	edi
	lea	r8, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	cmp	edi, r12d
	jl	$LL10@net_grd_ds
	mov	r14, QWORD PTR net$[rsp]
	lea	rdx, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	xor	ebx, ebx
$LN9@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm0, XMMWORD PTR [r14+112]
	vmovups	xmm1, XMMWORD PTR [r14+32]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	QWORD PTR $T11[rbp], rdx
	mov	QWORD PTR $T11[rbp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	DWORD PTR $T11[rbp+16], 264		; 00000108H
	mov	r8d, ebx
	mov	DWORD PTR $T11[rbp+20], 43		; 0000002bH
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	sete	r8b
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	XMMWORD PTR $T19[rbp], xmm1
	vmovups	XMMWORD PTR $T15[rbp], xmm0
	vmovups	XMMWORD PTR $T7[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	lea	rcx, QWORD PTR $T11[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 267
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN23@net_grd_ds
	mov	rcx, QWORD PTR $T19[rbp+8]
; Line 268
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T15[rbp+8]
	mov	r9, QWORD PTR $T7[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	3
$LL24@net_grd_ds:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL24@net_grd_ds
$LN23@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	xmm0, XMMWORD PTR [r14+128]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 316
	mov	rsi, QWORD PTR [r14+120]
; Line 319
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	XMMWORD PTR $T6[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 319
	test	eax, eax
	jle	SHORT $LN30@net_grd_ds
	mov	rbx, QWORD PTR $T6[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	8
$LL31@net_grd_ds:
; Line 322
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 323
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL31@net_grd_ds
	xor	ebx, ebx
$LN30@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 253
	vmovups	ymm1, YMMWORD PTR [r14+144]
	vmovups	xmm0, XMMWORD PTR [r14+128]
	vmovups	YMMWORD PTR $T21[rbp], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm1, ymm1, 1
	vmovd	r13d, xmm1
; File W:\cpp\void\dr-ai\num-ai.c
; Line 256
	mov	edi, ebx
; Line 253
	vmovups	XMMWORD PTR $T14[rbp], xmm0
	vmovups	xmm0, XMMWORD PTR [r14+256]
	vmovups	XMMWORD PTR $T4[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	r13d, r13d
	jle	$LN37@net_grd_ds
; Line 352
	mov	rsi, QWORD PTR $T21[rbp+8]
	mov	r12d, ebx
	mov	r14, QWORD PTR $T4[rbp+8]
	mov	r15, rsi
	shr	r15, 32					; 00000020H
	cmp	esi, DWORD PTR $T14[rbp]
	sete	r12b
	npad	4
$LL38@net_grd_ds:
; Line 388
	mov	rcx, QWORD PTR $T21[rbp+24]
; Line 352
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; Line 388
	mov	eax, r15d
; Line 352
	mov	DWORD PTR $T10[rbp+16], 352		; 00000160H
; Line 388
	imul	eax, edi
; Line 352
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	DWORD PTR $T10[rbp+20], 45		; 0000002dH
	mov	r8d, r12d
; Line 388
	cdqe
	lea	rbx, QWORD PTR [rcx+rax*4]
; Line 352
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	QWORD PTR $T10[rbp], rax
	lea	rcx, QWORD PTR $T10[rbp]
	lea	rax, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	QWORD PTR $T10[rbp+8], rax
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	vpxor	xmm1, xmm1, xmm1
; Line 355
	vmovups	YMMWORD PTR lane_acc$1[rbp], ymm1
; Line 356
	test	esi, esi
	jle	SHORT $LN44@net_grd_ds
; Line 388
	mov	rdx, QWORD PTR $T14[rbp+8]
	lea	ecx, DWORD PTR [rsi-1]
	sub	rdx, rbx
	shr	ecx, 3
	inc	ecx
	npad	3
$LL45@net_grd_ds:
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rdx+rbx]
	lea	rbx, QWORD PTR [rbx+32]
	sub	rcx, 1
	jne	SHORT $LL45@net_grd_ds
	vmovups	YMMWORD PTR lane_acc$1[rbp], ymm1
$LN44@net_grd_ds:
; Line 362
	vmovss	xmm0, DWORD PTR lane_acc$1[rbp]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$1[rbp+4]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$1[rbp+8]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$1[rbp+12]
	vaddss	xmm0, xmm3, DWORD PTR lane_acc$1[rbp+16]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$1[rbp+20]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$1[rbp+24]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$1[rbp+28]
; Line 433
	vmovss	DWORD PTR [r14], xmm3
	add	r14, 4
	inc	edi
	cmp	edi, r13d
	jl	$LL38@net_grd_ds
	mov	r14, QWORD PTR net$[rsp]
$LN37@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm0, XMMWORD PTR [r14+256]
	vmovups	xmm1, XMMWORD PTR [r14+176]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T9[rbp+16], 264		; 00000108H
	mov	QWORD PTR $T9[rbp], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	DWORD PTR $T9[rbp+20], 43		; 0000002bH
	mov	QWORD PTR $T9[rbp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	r8d, 0
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	sete	r8b
	lea	rcx, QWORD PTR $T9[rbp]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	XMMWORD PTR $T3[rbp], xmm1
	vmovups	XMMWORD PTR $T17[rbp], xmm0
	vmovups	XMMWORD PTR $T13[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 267
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN51@net_grd_ds
	mov	rcx, QWORD PTR $T3[rbp+8]
; Line 268
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T17[rbp+8]
	mov	r9, QWORD PTR $T13[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	10
$LL52@net_grd_ds:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL52@net_grd_ds
$LN51@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	xmm0, XMMWORD PTR [r14+272]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 316
	mov	rsi, QWORD PTR [r14+264]
; Line 319
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	XMMWORD PTR $T2[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 319
	test	eax, eax
	jle	SHORT $LN58@net_grd_ds
	mov	rbx, QWORD PTR $T2[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	5
$LL59@net_grd_ds:
; Line 322
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 323
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL59@net_grd_ds
$LN58@net_grd_ds:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 331
	mov	rax, QWORD PTR tar_v$[rsp]
	lea	r8, QWORD PTR $T8[rbp]
	lea	rdx, QWORD PTR $T20[rbp]
	mov	rcx, r14
	vmovups	xmm0, XMMWORD PTR [rax]
	mov	rax, QWORD PTR inp_v$[rsp]
	vmovups	XMMWORD PTR $T8[rbp], xmm0
	vmovups	xmm1, XMMWORD PTR [rax]
	vmovups	XMMWORD PTR $T20[rbp], xmm1
	vzeroupper
	call	?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z ; net_prp_bwd
; Line 332
	mov	rbx, QWORD PTR [rsp+296]
	vmovaps	xmm6, XMMWORD PTR [rsp+192]
	add	rsp, 208				; 000000d0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z ENDP		; net_grd_dsc
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
$T3 = 64
lay_o$ = 80
lay_i$ = 224
lay_o$9$ = 368
net$ = 448
inp_v$ = 456
tar_v$ = 464
?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z PROC		; net_prp_bwd, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 281
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rdx
	push	rbx
	push	rdi
	sub	rsp, 424				; 000001a8H
; Line 282
	vmovups	ymm0, YMMWORD PTR [rcx+144]
	vmovups	YMMWORD PTR lay_o$[rsp], ymm0
	vmovups	ymm0, YMMWORD PTR [rcx+176]
	mov	QWORD PTR [rax+24], r12
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 245
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 281
	mov	QWORD PTR [rax-24], r13
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 245
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 281
	mov	QWORD PTR [rax-32], r14
	mov	QWORD PTR [rax-40], r15
; Line 282
	vmovups	YMMWORD PTR [rax-72], ymm0
	vmovups	ymm1, YMMWORD PTR [rcx+240]
	vmovups	xmm2, XMMWORD PTR [rcx+272]
	vmovups	YMMWORD PTR lay_o$[rsp+32], ymm0
	vmovups	ymm0, YMMWORD PTR [rcx+208]
	vmovups	YMMWORD PTR [rax-296], ymm0
; Line 283
	vmovups	ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [rax-264], ymm1
	vmovups	ymm1, YMMWORD PTR [rcx+32]
	vmovups	YMMWORD PTR [rax-216], ymm0
	vmovups	ymm0, YMMWORD PTR [rcx+64]
	vmovups	YMMWORD PTR [rax-184], ymm1
	vmovups	ymm1, YMMWORD PTR [rcx+96]
	vmovups	YMMWORD PTR [rax-152], ymm0
	vmovups	xmm0, XMMWORD PTR [rcx+128]
	vmovups	YMMWORD PTR [rax-120], ymm1
; Line 300
	vmovups	xmm1, XMMWORD PTR [r8]
	vmovups	XMMWORD PTR [rax-88], xmm0
	vmovups	XMMWORD PTR [rax-232], xmm2
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 245
	vmovd	ecx, xmm2
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T2[rsp+16], 245		; 000000f5H
	mov	QWORD PTR $T2[rsp], rax
	xor	r8d, r8d
	lea	rax, OFFSET FLAT:??_C@_08NBCBIHOP@vec_sub_@
	mov	DWORD PTR $T2[rsp+20], 42		; 0000002aH
	mov	QWORD PTR $T2[rsp+8], rax
	vmovd	eax, xmm1
	cmp	ecx, eax
	lea	rcx, QWORD PTR $T2[rsp]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 300
	vmovups	XMMWORD PTR $T3[rsp], xmm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 245
	sete	r8b
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 247
	vmovups	ymm0, YMMWORD PTR lay_o$9$[rsp]
	mov	r12, QWORD PTR lay_o$[rsp+56]
	vextractf128 xmm0, ymm0, 1
	vmovd	r13d, xmm0
	test	r13d, r13d
	jle	SHORT $LN28@net_prp_bw
	mov	rcx, QWORD PTR $T3[rsp+8]
; Line 248
	lea	edx, DWORD PTR [r13-1]
	mov	r8, QWORD PTR lay_o$[rsp+136]
	mov	r9, r12
	sub	r8, rcx
	shr	edx, 3
	sub	r9, rcx
	inc	edx
	npad	3
$LL29@net_prp_bw:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vsubps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL29@net_prp_bw
$LN28@net_prp_bw:
; Line 336
	mov	r15d, DWORD PTR lay_o$[rsp+64]
	mov	rdi, QWORD PTR lay_o$[rsp+72]
	mov	QWORD PTR [rsp+448], rsi
	test	r15d, r15d
	jle	SHORT $LN35@net_prp_bw
	mov	r14, QWORD PTR lay_o$[rsp+120]
	lea	esi, DWORD PTR [r15-1]
	sub	r14, rdi
	shr	esi, 3
	inc	esi
	mov	rbx, rdi
	npad	2
$LL36@net_prp_bw:
; Line 339
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [r14+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm3, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm3
	vdivps	ymm2, ymm3, ymm1
	vsubps	ymm0, ymm3, ymm2
	vmulps	ymm1, ymm0, ymm2
; Line 340
	vmovups	YMMWORD PTR [rbx-32], ymm1
	sub	rsi, 1
	jne	SHORT $LL36@net_prp_bw
$LN35@net_prp_bw:
; Line 284
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T1[rsp+16], 284		; 0000011cH
	mov	QWORD PTR $T1[rsp], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	cmp	r13d, r15d
	mov	DWORD PTR $T1[rsp+20], 44		; 0000002cH
	lea	rax, OFFSET FLAT:??_C@_08EGPIDAG@vec_mul_@
	mov	r8d, 0
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	sete	r8b
	lea	rcx, QWORD PTR $T1[rsp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 286
	test	r13d, r13d
	jle	SHORT $LN40@net_prp_bw
	lea	edx, DWORD PTR [r13-1]
	sub	rdi, r12
	shr	edx, 3
	mov	rcx, r12
	inc	edx
	npad	2
$LL41@net_prp_bw:
; Line 287
	vmovups	ymm0, YMMWORD PTR [rdi+rcx]
	vmulps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL41@net_prp_bw
$LN40@net_prp_bw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 303
	mov	r14d, DWORD PTR lay_o$[rsp+4]
	mov	r13, QWORD PTR [rsp+416]
	test	r14d, r14d
	jle	SHORT $LN3@net_prp_bw
	movsxd	rbx, DWORD PTR lay_o$[rsp+92]
	mov	r8, r12
	mov	r9, QWORD PTR lay_o$[rsp+104]
	mov	r10d, r14d
	mov	r11d, DWORD PTR lay_o$[rsp]
	mov	rdi, QWORD PTR lay_i$[rsp+136]
	shl	rbx, 2
$LL4@net_prp_bw:
; Line 304
	test	r11d, r11d
	jle	SHORT $LN2@net_prp_bw
	mov	rax, rdi
	mov	rcx, r9
	mov	rdx, r11
	npad	2
$LL7@net_prp_bw:
	lea	rcx, QWORD PTR [rcx+4]
; Line 305
	vmovss	xmm0, DWORD PTR [rax]
	lea	rax, QWORD PTR [rax+4]
	vmulss	xmm1, xmm0, DWORD PTR [r8]
	vmovss	DWORD PTR [rcx-4], xmm1
	sub	rdx, 1
	jne	SHORT $LL7@net_prp_bw
$LN2@net_prp_bw:
; Line 303
	add	r9, rbx
	add	r8, 4
	sub	r10, 1
	jne	SHORT $LL4@net_prp_bw
$LN3@net_prp_bw:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 336
	mov	eax, DWORD PTR lay_i$[rsp+48]
	mov	rbx, QWORD PTR lay_i$[rsp+56]
	test	eax, eax
	jle	SHORT $LN23@net_prp_bw
	mov	r15, QWORD PTR lay_i$[rsp+120]
	lea	esi, DWORD PTR [rax-1]
	sub	r15, rbx
	shr	esi, 3
	inc	esi
	mov	rdi, rbx
$LL24@net_prp_bw:
; Line 339
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [r15+rdi]
	call	__vdecl_expf8
	lea	rdi, QWORD PTR [rdi+32]
	vmovups	ymm3, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm3
	vdivps	ymm2, ymm3, ymm1
	vsubps	ymm0, ymm3, ymm2
	vmulps	ymm1, ymm0, ymm2
; Line 340
	vmovups	YMMWORD PTR [rdi-32], ymm1
	sub	rsi, 1
	jne	SHORT $LL24@net_prp_bw
$LN23@net_prp_bw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 310
	mov	edi, DWORD PTR lay_i$[rsp+4]
	mov	r15, QWORD PTR [rsp+400]
	test	edi, edi
	jle	SHORT $LN9@net_prp_bw
	mov	r10, QWORD PTR lay_o$[rsp+24]
	mov	r9, rbx
	movsxd	rsi, DWORD PTR lay_o$[rsp+12]
	mov	r11d, edi
	npad	1
$LL10@net_prp_bw:
	vxorps	xmm2, xmm2, xmm2
; Line 312
	test	r14d, r14d
	jle	SHORT $LN12@net_prp_bw
; Line 311
	mov	r8, rsi
	mov	rax, r12
	shl	r8, 2
	mov	rcx, r10
	mov	rdx, r14
	npad	7
$LL13@net_prp_bw:
; Line 313
	vmovss	xmm0, DWORD PTR [rax]
	vmulss	xmm1, xmm0, DWORD PTR [rcx]
	add	rcx, r8
	lea	rax, QWORD PTR [rax+4]
	vaddss	xmm2, xmm2, xmm1
	sub	rdx, 1
	jne	SHORT $LL13@net_prp_bw
$LN12@net_prp_bw:
; Line 315
	vmovss	DWORD PTR [r9], xmm2
	add	r9, 4
	add	r10, 4
	sub	r11, 1
	jne	SHORT $LL10@net_prp_bw
$LN9@net_prp_bw:
	mov	r14, QWORD PTR [rsp+408]
; Line 317
	mov	r12, QWORD PTR [rsp+464]
	mov	rsi, QWORD PTR [rsp+448]
	test	edi, edi
	jle	SHORT $LN15@net_prp_bw
; Line 319
	movsxd	r11, DWORD PTR lay_i$[rsp+92]
	mov	r9, rdi
	mov	r8, QWORD PTR lay_i$[rsp+104]
	mov	r10d, DWORD PTR lay_i$[rsp]
	mov	rdi, QWORD PTR inp_v$[rsp]
	shl	r11, 2
	npad	1
$LL16@net_prp_bw:
; Line 318
	test	r10d, r10d
	jle	SHORT $LN14@net_prp_bw
; Line 319
	mov	rax, QWORD PTR [rdi+8]
	mov	rcx, r8
	mov	rdx, r10
	npad	1
$LL19@net_prp_bw:
; Line 318
	lea	rcx, QWORD PTR [rcx+4]
	lea	rax, QWORD PTR [rax+4]
; Line 319
	vmovss	xmm0, DWORD PTR [rbx]
	vmulss	xmm1, xmm0, DWORD PTR [rax-4]
	vmovss	DWORD PTR [rcx-4], xmm1
	sub	rdx, 1
	jne	SHORT $LL19@net_prp_bw
$LN14@net_prp_bw:
; Line 317
	add	r8, r11
	add	rbx, 4
	sub	r9, 1
	jne	SHORT $LL16@net_prp_bw
$LN15@net_prp_bw:
; Line 323
	vzeroupper
	add	rsp, 424				; 000001a8H
	pop	rdi
	pop	rbx
	ret	0
?net_prp_bwd@@YQXPEAUai_net@@Uai_vec@@1@Z ENDP		; net_prp_bwd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z
_TEXT	SEGMENT
lane_acc$1 = 0
$T2 = 0
$T3 = 0
$T4 = 0
$T5 = 0
$T6 = 0
$T7 = 0
$T8 = 32
$T9 = 32
$T10 = 32
lane_acc$11 = 32
$T12 = 64
$T13 = 64
$T14 = 64
$T15 = 64
$T16 = 80
$T17 = 80
$T18 = 80
$T19 = 96
$T20 = 96
net$ = 256
inp$ = 264
?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z PROC		; net_prp_fwd, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 276
	mov	rax, rsp
	mov	QWORD PTR [rax+16], rbx
	mov	QWORD PTR [rax+24], rsi
	mov	QWORD PTR [rax+32], rdi
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 208				; 000000d0H
	vmovaps	XMMWORD PTR [rax-56], xmm6
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
; Line 253
	vmovups	xmm0, XMMWORD PTR [rcx+112]
	vmovups	ymm1, YMMWORD PTR [rcx]
; Line 276
	xor	ebx, ebx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 253
	vmovups	XMMWORD PTR $T15[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm0, ymm1, 1
	vmovd	r12d, xmm0
	lea	r9, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 276
	mov	r14, rcx
	mov	edi, ebx
; Line 253
	vmovups	YMMWORD PTR $T20[rbp], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	r12d, r12d
	jle	$LN7@net_prp_fw
; Line 433
	mov	r14, QWORD PTR $T20[rbp+8]
	mov	r13d, ebx
	vmovups	xmm0, XMMWORD PTR [rdx]
	mov	rsi, QWORD PTR $T15[rbp+8]
	mov	r15, r14
	shr	r15, 32					; 00000020H
; Line 352
	vmovd	eax, xmm0
	cmp	r14d, eax
; Line 433
	vmovups	XMMWORD PTR $T17[rbp], xmm0
	sete	r13b
	npad	13
$LL8@net_prp_fw:
; Line 388
	mov	rcx, QWORD PTR $T20[rbp+24]
; Line 352
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; Line 388
	mov	eax, r15d
; Line 352
	mov	QWORD PTR $T5[rbp], r8
; Line 388
	imul	eax, edi
; Line 352
	mov	r8d, r13d
	mov	QWORD PTR $T5[rbp+8], r9
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T5[rbp+16], 352		; 00000160H
	mov	DWORD PTR $T5[rbp+20], 45		; 0000002dH
; Line 388
	cdqe
	lea	rbx, QWORD PTR [rcx+rax*4]
; Line 352
	lea	rcx, QWORD PTR $T5[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	vpxor	xmm1, xmm1, xmm1
; Line 355
	vmovups	YMMWORD PTR lane_acc$11[rbp], ymm1
; Line 356
	test	r14d, r14d
	jle	SHORT $LN14@net_prp_fw
; Line 388
	mov	rdx, QWORD PTR $T17[rbp+8]
	lea	ecx, DWORD PTR [r14-1]
	sub	rdx, rbx
	shr	ecx, 3
	inc	ecx
$LL15@net_prp_fw:
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rdx+rbx]
	lea	rbx, QWORD PTR [rbx+32]
	sub	rcx, 1
	jne	SHORT $LL15@net_prp_fw
	vmovups	YMMWORD PTR lane_acc$11[rbp], ymm1
$LN14@net_prp_fw:
; Line 362
	vmovss	xmm0, DWORD PTR lane_acc$11[rbp]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$11[rbp+4]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$11[rbp+8]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$11[rbp+12]
	vaddss	xmm0, xmm3, DWORD PTR lane_acc$11[rbp+16]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$11[rbp+20]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$11[rbp+24]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$11[rbp+28]
; Line 433
	vmovss	DWORD PTR [rsi], xmm3
	add	rsi, 4
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	inc	edi
	lea	r9, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	cmp	edi, r12d
	jl	$LL8@net_prp_fw
	mov	r14, QWORD PTR net$[rsp]
	lea	r8, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	xor	ebx, ebx
$LN7@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm0, XMMWORD PTR [r14+112]
	vmovups	xmm1, XMMWORD PTR [r14+32]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	QWORD PTR $T10[rbp], r8
	mov	QWORD PTR $T10[rbp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	DWORD PTR $T10[rbp+16], 264		; 00000108H
	mov	r8d, ebx
	mov	DWORD PTR $T10[rbp+20], 43		; 0000002bH
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	sete	r8b
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	XMMWORD PTR $T18[rbp], xmm1
	vmovups	XMMWORD PTR $T14[rbp], xmm0
	vmovups	XMMWORD PTR $T7[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	lea	rcx, QWORD PTR $T10[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 267
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN21@net_prp_fw
	mov	rcx, QWORD PTR $T18[rbp+8]
; Line 268
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T14[rbp+8]
	mov	r9, QWORD PTR $T7[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	3
$LL22@net_prp_fw:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL22@net_prp_fw
$LN21@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	xmm0, XMMWORD PTR [r14+128]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 316
	mov	rsi, QWORD PTR [r14+120]
; Line 319
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	XMMWORD PTR $T6[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 319
	test	eax, eax
	jle	SHORT $LN28@net_prp_fw
	mov	rbx, QWORD PTR $T6[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	8
$LL29@net_prp_fw:
; Line 322
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 323
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL29@net_prp_fw
	xor	ebx, ebx
$LN28@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 253
	vmovups	ymm1, YMMWORD PTR [r14+144]
	vmovups	xmm0, XMMWORD PTR [r14+128]
	vmovups	YMMWORD PTR $T19[rbp], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm1, ymm1, 1
	vmovd	r13d, xmm1
; File W:\cpp\void\dr-ai\num-ai.c
; Line 256
	mov	edi, ebx
; Line 253
	vmovups	XMMWORD PTR $T13[rbp], xmm0
	vmovups	xmm0, XMMWORD PTR [r14+256]
	vmovups	XMMWORD PTR $T4[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	r13d, r13d
	jle	$LN35@net_prp_fw
; Line 352
	mov	rsi, QWORD PTR $T19[rbp+8]
	mov	r12d, ebx
	mov	r14, QWORD PTR $T4[rbp+8]
	mov	r15, rsi
	shr	r15, 32					; 00000020H
	cmp	esi, DWORD PTR $T13[rbp]
	sete	r12b
	npad	4
$LL36@net_prp_fw:
; Line 388
	mov	rcx, QWORD PTR $T19[rbp+24]
; Line 352
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; Line 388
	mov	eax, r15d
; Line 352
	mov	DWORD PTR $T9[rbp+16], 352		; 00000160H
; Line 388
	imul	eax, edi
; Line 352
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	DWORD PTR $T9[rbp+20], 45		; 0000002dH
	mov	r8d, r12d
; Line 388
	cdqe
	lea	rbx, QWORD PTR [rcx+rax*4]
; Line 352
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	QWORD PTR $T9[rbp], rax
	lea	rcx, QWORD PTR $T9[rbp]
	lea	rax, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	QWORD PTR $T9[rbp+8], rax
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	vpxor	xmm1, xmm1, xmm1
; Line 355
	vmovups	YMMWORD PTR lane_acc$1[rbp], ymm1
; Line 356
	test	esi, esi
	jle	SHORT $LN42@net_prp_fw
; Line 388
	mov	rdx, QWORD PTR $T13[rbp+8]
	lea	ecx, DWORD PTR [rsi-1]
	sub	rdx, rbx
	shr	ecx, 3
	inc	ecx
	npad	3
$LL43@net_prp_fw:
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rdx+rbx]
	lea	rbx, QWORD PTR [rbx+32]
	sub	rcx, 1
	jne	SHORT $LL43@net_prp_fw
	vmovups	YMMWORD PTR lane_acc$1[rbp], ymm1
$LN42@net_prp_fw:
; Line 362
	vmovss	xmm0, DWORD PTR lane_acc$1[rbp]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$1[rbp+4]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$1[rbp+8]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$1[rbp+12]
	vaddss	xmm0, xmm3, DWORD PTR lane_acc$1[rbp+16]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$1[rbp+20]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$1[rbp+24]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$1[rbp+28]
; Line 433
	vmovss	DWORD PTR [r14], xmm3
	add	r14, 4
	inc	edi
	cmp	edi, r13d
	jl	$LL36@net_prp_fw
	mov	r14, QWORD PTR net$[rsp]
$LN35@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm0, XMMWORD PTR [r14+256]
	vmovups	xmm1, XMMWORD PTR [r14+176]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T8[rbp+16], 264		; 00000108H
	mov	QWORD PTR $T8[rbp], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	DWORD PTR $T8[rbp+20], 43		; 0000002bH
	mov	QWORD PTR $T8[rbp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	r8d, 0
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	sete	r8b
	lea	rcx, QWORD PTR $T8[rbp]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	XMMWORD PTR $T3[rbp], xmm1
	vmovups	XMMWORD PTR $T16[rbp], xmm0
	vmovups	XMMWORD PTR $T12[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 267
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN49@net_prp_fw
	mov	rcx, QWORD PTR $T3[rbp+8]
; Line 268
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T16[rbp+8]
	mov	r9, QWORD PTR $T12[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	10
$LL50@net_prp_fw:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL50@net_prp_fw
$LN49@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	xmm0, XMMWORD PTR [r14+272]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 316
	mov	rsi, QWORD PTR [r14+264]
; Line 319
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	XMMWORD PTR $T2[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 319
	test	eax, eax
	jle	SHORT $LN56@net_prp_fw
	mov	rbx, QWORD PTR $T2[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	5
$LL57@net_prp_fw:
; Line 322
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 323
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL57@net_prp_fw
$LN56@net_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 278
	vzeroupper
	lea	r11, QWORD PTR [rsp+208]
	mov	rbx, QWORD PTR [r11+56]
	mov	rsi, QWORD PTR [r11+64]
	mov	rdi, QWORD PTR [r11+72]
	vmovaps	xmm6, XMMWORD PTR [r11-16]
	mov	rsp, r11
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rbp
	ret	0
?net_prp_fwd@@YAXPEAUai_net@@Uai_vec@@@Z ENDP		; net_prp_fwd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?lay_upd@@YAXPEAUai_lay@@M@Z
_TEXT	SEGMENT
wei_new$ = 0
bia_old$ = 0
wei_old$ = 32
bia_new$ = 32
lay$ = 80
alpha$ = 88
?lay_upd@@YAXPEAUai_lay@@M@Z PROC			; lay_upd, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 260
	sub	rsp, 72					; 00000048H
; Line 261
	vmovups	xmm2, XMMWORD PTR [rcx+32]
; Line 262
	vmovups	xmm0, XMMWORD PTR [rcx+48]
	vmovups	xmm4, XMMWORD PTR __xmm@80000000800000008000000080000000
	xor	r10d, r10d
	mov	QWORD PTR [rsp+80], rbx
	vmovd	r8d, xmm2
	mov	rbx, rcx
	mov	r11d, r10d
; Line 267
	vmovaps	xmm3, xmm1
	vmovaps	xmm5, xmm1
	vshufps	xmm3, xmm1, xmm1, 0
	vmovups	XMMWORD PTR bia_old$[rsp], xmm2
	vmovups	XMMWORD PTR bia_new$[rsp], xmm0
	test	r8d, r8d
	jle	$LN32@lay_upd
; Line 263
	mov	r9, QWORD PTR bia_old$[rsp+8]
	mov	rdx, QWORD PTR bia_new$[rsp+8]
	cmp	r8d, 16
	jb	$LN14@lay_upd
; Line 261
	lea	eax, DWORD PTR [r8-1]
	mov	QWORD PTR [rsp+64], rdi
	movsxd	rcx, eax
	lea	rax, QWORD PTR [rdx+rcx*4]
	lea	rdi, QWORD PTR [r9+rcx*4]
	cmp	r9, rax
	ja	SHORT $LN15@lay_upd
	cmp	rdi, rdx
	jae	SHORT $LN41@lay_upd
$LN15@lay_upd:
	mov	QWORD PTR [rsp+88], rsi
	mov	ecx, r8d
	and	ecx, -2147483633			; ffffffff8000000fH
	jge	SHORT $LN40@lay_upd
	dec	ecx
	or	ecx, -16
	inc	ecx
$LN40@lay_upd:
	mov	eax, r8d
; Line 263
	mov	rdi, r10
	sub	eax, ecx
	mov	rcx, rdx
	vxorps	xmm2, xmm3, xmm4
	movsxd	rsi, eax
	sub	rcx, r9
	lea	rax, QWORD PTR [r9+16]
	vinsertf128 ymm2, ymm2, xmm2, 1
	npad	14
$LL4@lay_upd:
; Line 264
	vmulps	ymm1, ymm2, YMMWORD PTR [rcx+rax-16]
; Line 265
	vaddps	ymm1, ymm1, YMMWORD PTR [rax-16]
	vmovups	YMMWORD PTR [rax-16], ymm1
	vmulps	ymm1, ymm2, YMMWORD PTR [rcx+rax+16]
	vaddps	ymm1, ymm1, YMMWORD PTR [rax+16]
	add	r11d, 16
	add	rdi, 16
	vmovups	YMMWORD PTR [rax+16], ymm1
	lea	rax, QWORD PTR [rax+64]
	cmp	rdi, rsi
	jl	SHORT $LL4@lay_upd
; Line 261
	mov	rsi, QWORD PTR [rsp+88]
$LN41@lay_upd:
	mov	rdi, QWORD PTR [rsp+64]
$LN14@lay_upd:
; Line 263
	cmp	r11d, r8d
	jge	SHORT $LN32@lay_upd
	movsxd	rax, r11d
	sub	rdx, r9
	sub	r8d, r11d
	vxorps	xmm2, xmm5, xmm4
	lea	rcx, QWORD PTR [r9+rax*4]
	mov	eax, r8d
	npad	12
$LL13@lay_upd:
; Line 264
	vmulss	xmm0, xmm2, DWORD PTR [rcx+rdx]
; Line 265
	vaddss	xmm1, xmm0, DWORD PTR [rcx]
	vmovss	DWORD PTR [rcx], xmm1
	lea	rcx, QWORD PTR [rcx+4]
	sub	rax, 1
	jne	SHORT $LL13@lay_upd
	jmp	SHORT $LN3@lay_upd
$LN32@lay_upd:
	vxorps	xmm2, xmm5, xmm4
$LN3@lay_upd:
; Line 267
	vmovups	ymm1, YMMWORD PTR [rbx]
; Line 268
	vmovups	ymm0, YMMWORD PTR [rbx+80]
	vmovups	YMMWORD PTR wei_new$[rsp], ymm0
; Line 269
	mov	r9, QWORD PTR wei_new$[rsp+24]
	mov	r8d, r10d
	vextractf128 xmm0, ymm1, 1
	vpextrq	rdx, xmm1, 1
	shr	rdx, 32					; 00000020H
	vmovd	eax, xmm0
	imul	edx, eax
	vmovups	YMMWORD PTR wei_old$[rsp], ymm1
	mov	r11, QWORD PTR wei_old$[rsp+24]
	test	edx, edx
	jle	$LN17@lay_upd
	cmp	edx, 16
	jb	$LN17@lay_upd
; Line 267
	lea	eax, DWORD PTR [rdx-1]
	movsxd	rcx, eax
	lea	rax, QWORD PTR [r9+rcx*4]
	lea	rbx, QWORD PTR [r11+rcx*4]
	cmp	r11, rax
	ja	SHORT $LN18@lay_upd
	cmp	rbx, r9
	jae	SHORT $LN17@lay_upd
$LN18@lay_upd:
	mov	ecx, edx
	and	ecx, -2147483633			; ffffffff8000000fH
	jge	SHORT $LN39@lay_upd
	dec	ecx
	or	ecx, -16
	inc	ecx
$LN39@lay_upd:
	mov	eax, edx
	sub	eax, ecx
	mov	rcx, r9
	vxorps	xmm3, xmm3, xmm4
; Line 269
	movsxd	rbx, eax
	sub	rcx, r11
	lea	rax, QWORD PTR [r11+16]
	vinsertf128 ymm3, ymm3, xmm3, 1
	npad	6
$LL7@lay_upd:
; Line 270
	vmulps	xmm1, xmm3, XMMWORD PTR [rcx+rax-16]
; Line 271
	vaddps	xmm1, xmm1, XMMWORD PTR [rax-16]
	vmovups	XMMWORD PTR [rax-16], xmm1
	vmulps	xmm1, xmm3, XMMWORD PTR [rax+rcx]
	vaddps	xmm1, xmm1, XMMWORD PTR [rax]
	vmovups	XMMWORD PTR [rax], xmm1
	vmulps	ymm1, ymm3, YMMWORD PTR [rcx+rax+16]
	vaddps	ymm1, ymm1, YMMWORD PTR [rax+16]
	add	r8d, 16
	add	r10, 16
	vmovups	YMMWORD PTR [rax+16], ymm1
	lea	rax, QWORD PTR [rax+64]
	cmp	r10, rbx
	jl	SHORT $LL7@lay_upd
$LN17@lay_upd:
; Line 269
	mov	rbx, QWORD PTR [rsp+80]
	movsxd	r10, r8d
	movsxd	rcx, edx
	cmp	r10, rcx
	jge	$LN29@lay_upd
	mov	rax, rcx
	sub	rax, r10
	cmp	rax, 4
	jl	SHORT $LN38@lay_upd
	mov	rdx, rcx
	lea	rax, QWORD PTR [r11+4]
	sub	rdx, r10
	lea	rax, QWORD PTR [rax+r10*4]
	sub	rdx, 4
	mov	r8, r9
	shr	rdx, 2
	sub	r8, r11
	inc	rdx
	lea	r10, QWORD PTR [r10+rdx*4]
$LL31@lay_upd:
; Line 270
	vmulss	xmm0, xmm2, DWORD PTR [r8+rax-4]
; Line 271
	vaddss	xmm1, xmm0, DWORD PTR [rax-4]
	vmovss	DWORD PTR [rax-4], xmm1
	vmulss	xmm0, xmm2, DWORD PTR [r8+rax]
	vaddss	xmm1, xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR [rax], xmm1
	vmulss	xmm0, xmm2, DWORD PTR [r8+rax+4]
	vaddss	xmm1, xmm0, DWORD PTR [rax+4]
	vmovss	DWORD PTR [rax+4], xmm1
	vmulss	xmm0, xmm2, DWORD PTR [r8+rax+8]
	vaddss	xmm1, xmm0, DWORD PTR [rax+8]
	vmovss	DWORD PTR [rax+8], xmm1
	lea	rax, QWORD PTR [rax+16]
	sub	rdx, 1
	jne	SHORT $LL31@lay_upd
; Line 269
	cmp	r10, rcx
	jge	SHORT $LN29@lay_upd
$LN38@lay_upd:
	sub	r9, r11
	lea	rax, QWORD PTR [r11+r10*4]
	sub	rcx, r10
$LC16@lay_upd:
; Line 270
	vmulss	xmm0, xmm2, DWORD PTR [r9+rax]
; Line 271
	vaddss	xmm1, xmm0, DWORD PTR [rax]
	vmovss	DWORD PTR [rax], xmm1
	lea	rax, QWORD PTR [rax+4]
	sub	rcx, 1
	jne	SHORT $LC16@lay_upd
$LN29@lay_upd:
; Line 273
	vzeroupper
	add	rsp, 72					; 00000048H
	ret	0
?lay_upd@@YAXPEAUai_lay@@M@Z ENDP			; lay_upd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z
_TEXT	SEGMENT
$T1 = 0
lane_acc$2 = 0
$T3 = 32
$T4 = 32
$T5 = 32
$T6 = 64
$T7 = 64
$T8 = 80
$T9 = 80
$T10 = 96
__$ReturnAddress$ = 272
lay$ = 280
inp$ = 288
?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z PROC	; lay_prp_fwd, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 253
	mov	rax, rsp
	mov	QWORD PTR [rax+24], rbx
	mov	QWORD PTR [rax+16], rdx
	mov	QWORD PTR [rax+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 208				; 000000d0H
	vmovaps	XMMWORD PTR [rax-72], xmm6
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
	vmovups	xmm0, XMMWORD PTR [rdx+112]
	vmovups	ymm1, YMMWORD PTR [rdx]
	vmovups	XMMWORD PTR $T7[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vextractf128 xmm0, ymm1, 1
; File W:\cpp\void\dr-ai\num-ai.c
; Line 253
	mov	r14, rdx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	lea	r9, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 253
	xor	edx, edx
	mov	r15, rcx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	vmovd	r12d, xmm0
; File W:\cpp\void\dr-ai\num-ai.c
; Line 253
	mov	edi, edx
	vmovups	YMMWORD PTR $T10[rbp], ymm1
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 432
	test	r12d, r12d
	jle	$LN5@lay_prp_fw
; Line 433
	mov	r15, QWORD PTR $T10[rbp+8]
	mov	r14d, edx
	vmovups	xmm0, XMMWORD PTR [r8]
	mov	rsi, QWORD PTR $T7[rbp+8]
	lea	rdx, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	r13, r15
	shr	r13, 32					; 00000020H
; Line 352
	vmovd	eax, xmm0
	cmp	r15d, eax
; Line 433
	vmovups	XMMWORD PTR $T8[rbp], xmm0
	sete	r14b
	npad	11
$LL6@lay_prp_fw:
; Line 388
	mov	rcx, QWORD PTR $T10[rbp+24]
	mov	eax, r13d
	imul	eax, edi
; Line 352
	mov	r8d, r14d
	mov	QWORD PTR $T3[rbp], r9
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	QWORD PTR $T3[rbp+8], rdx
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	DWORD PTR $T3[rbp+16], 352		; 00000160H
	mov	DWORD PTR $T3[rbp+20], 45		; 0000002dH
; Line 388
	cdqe
	lea	rbx, QWORD PTR [rcx+rax*4]
; Line 352
	lea	rcx, QWORD PTR $T3[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	vpxor	xmm1, xmm1, xmm1
; Line 355
	vmovups	YMMWORD PTR lane_acc$2[rbp], ymm1
; Line 356
	test	r15d, r15d
	jle	SHORT $LN12@lay_prp_fw
; Line 388
	mov	rdx, QWORD PTR $T8[rbp+8]
	lea	ecx, DWORD PTR [r15-1]
	sub	rdx, rbx
	shr	ecx, 3
	inc	ecx
$LL13@lay_prp_fw:
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rdx+rbx]
	lea	rbx, QWORD PTR [rbx+32]
	sub	rcx, 1
	jne	SHORT $LL13@lay_prp_fw
	vmovups	YMMWORD PTR lane_acc$2[rbp], ymm1
$LN12@lay_prp_fw:
; Line 362
	vmovss	xmm0, DWORD PTR lane_acc$2[rbp]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$2[rbp+4]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$2[rbp+8]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$2[rbp+12]
	vaddss	xmm0, xmm3, DWORD PTR lane_acc$2[rbp+16]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$2[rbp+20]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$2[rbp+24]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$2[rbp+28]
; Line 433
	vmovss	DWORD PTR [rsi], xmm3
	add	rsi, 4
	lea	r9, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	inc	edi
	lea	rdx, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	cmp	edi, r12d
	jl	$LL6@lay_prp_fw
	mov	r14, QWORD PTR lay$[rsp]
	lea	r9, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	r15, QWORD PTR __$ReturnAddress$[rsp]
$LN5@lay_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm0, XMMWORD PTR [r14+112]
	vmovups	xmm1, XMMWORD PTR [r14+32]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	vmovd	ecx, xmm0
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	QWORD PTR $T1[rbp], r9
	mov	QWORD PTR $T1[rbp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	vmovd	eax, xmm1
	cmp	ecx, eax
	mov	DWORD PTR $T1[rbp+16], 264		; 00000108H
	mov	r8d, 0
	mov	DWORD PTR $T1[rbp+20], 43		; 0000002bH
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	xmm6, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	sete	r8b
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 254
	vmovups	XMMWORD PTR $T9[rbp], xmm1
	vmovups	XMMWORD PTR $T6[rbp], xmm0
	vmovups	XMMWORD PTR $T5[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 264
	lea	rcx, QWORD PTR $T1[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 267
	vmovd	eax, xmm6
	test	eax, eax
	jle	SHORT $LN19@lay_prp_fw
	mov	rcx, QWORD PTR $T9[rbp+8]
; Line 268
	lea	edx, DWORD PTR [rax-1]
	mov	r8, QWORD PTR $T6[rbp+8]
	mov	r9, QWORD PTR $T5[rbp+8]
	sub	r8, rcx
	sub	r9, rcx
	shr	edx, 3
	inc	edx
	npad	10
$LL20@lay_prp_fw:
	vmovups	ymm0, YMMWORD PTR [r8+rcx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rcx]
	vmovups	YMMWORD PTR [r9+rcx], ymm1
	lea	rcx, QWORD PTR [rcx+32]
	sub	rdx, 1
	jne	SHORT $LL20@lay_prp_fw
$LN19@lay_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	xmm0, XMMWORD PTR [r14+128]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 316
	mov	rsi, QWORD PTR [r14+120]
; Line 319
	vmovd	eax, xmm0
	movsxd	rdi, eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 255
	vmovups	XMMWORD PTR $T4[rbp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 319
	test	eax, eax
	jle	SHORT $LN26@lay_prp_fw
	mov	rbx, QWORD PTR $T4[rbp+8]
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	8
$LL27@lay_prp_fw:
; Line 322
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 323
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL27@lay_prp_fw
$LN26@lay_prp_fw:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 256
	vmovups	xmm0, XMMWORD PTR [r14+128]
	vmovups	XMMWORD PTR [r15], xmm0
	mov	rax, r15
	vzeroupper
; Line 257
	mov	rbx, QWORD PTR [rsp+288]
	vmovaps	xmm6, XMMWORD PTR [rsp+192]
	add	rsp, 208				; 000000d0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?lay_prp_fwd@@YQ?AUai_vec@@PEAUai_lay@@U1@@Z ENDP	; lay_prp_fwd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?int_flip@@YAII@Z
_TEXT	SEGMENT
i$ = 8
?int_flip@@YAII@Z PROC					; int_flip, COMDAT
; File W:\cpp\void\dr-ai\num-ai.h
; Line 84
	bswap	ecx
	mov	eax, ecx
; Line 88
	ret	0
?int_flip@@YAII@Z ENDP					; int_flip
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_lay@@YA?AUai_lay@@HH@Z
_TEXT	SEGMENT
$T2 = 48
$T3 = 48
$T4 = 80
$T5 = 80
$T6 = 80
__$ReturnAddress$ = 128
col_len$ = 136
row_len$ = 144
?new_lay@@YA?AUai_lay@@HH@Z PROC			; new_lay, COMDAT
; File W:\cpp\void\dr-ai\num-ai.h
; Line 70
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 112				; 00000070H
	mov	r14, rcx
; Line 71
	mov	DWORD PTR [rsp+32], edx
	lea	rcx, QWORD PTR $T6[rsp]
	mov	r9d, r8d
	mov	ebp, r8d
	call	?new_mat_@@YA?AUai_mat@@HHHH@Z		; new_mat_
	vmovups	ymm0, YMMWORD PTR [rax]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 131
	lea	eax, DWORD PTR [rbp+7]
	cdq
	and	edx, 7
; File W:\cpp\void\dr-ai\num-ai.h
; Line 71
	vmovups	YMMWORD PTR [r14], ymm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 131
	lea	esi, DWORD PTR [rdx+rax]
; Line 150
	mov	edx, 32					; 00000020H
; Line 131
	and	esi, -8
; Line 150
	movsxd	rdi, esi
	shl	rdi, 2
	mov	rcx, rdi
	vzeroupper
	call	_aligned_malloc
; Line 151
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 72
	mov	DWORD PTR [r14+128], ebp
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 72
	mov	DWORD PTR [r14+132], esi
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	rcx, rdi
; File W:\cpp\void\dr-ai\num-ai.h
; Line 72
	mov	QWORD PTR [r14+136], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
; Line 151
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 73
	mov	DWORD PTR [r14+112], ebp
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 73
	mov	DWORD PTR [r14+116], esi
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	rcx, rdi
; File W:\cpp\void\dr-ai\num-ai.h
; Line 73
	mov	QWORD PTR [r14+120], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
; Line 151
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 74
	mov	DWORD PTR [r14+32], ebp
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 74
	mov	DWORD PTR [r14+36], esi
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	rcx, rdi
; File W:\cpp\void\dr-ai\num-ai.h
; Line 74
	mov	QWORD PTR [r14+40], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
; Line 151
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 75
	mov	DWORD PTR [r14+48], ebp
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.h
; Line 75
	mov	DWORD PTR [r14+52], esi
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	rcx, rdi
; File W:\cpp\void\dr-ai\num-ai.h
; Line 75
	mov	QWORD PTR [r14+56], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
; Line 151
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	mov	rbx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 76
	mov	DWORD PTR [r14+64], ebp
	mov	DWORD PTR [r14+68], esi
	mov	QWORD PTR [r14+72], rbx
; Line 77
	mov	r9d, DWORD PTR [r14+8]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 397
	mov	eax, DWORD PTR [r14]
; File W:\cpp\void\dr-ai\num-ai.h
; Line 77
	movsxd	rdi, DWORD PTR [r14+16]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 397
	mov	DWORD PTR $T5[rsp], eax
; Line 398
	mov	eax, DWORD PTR [r14+4]
	mov	DWORD PTR $T5[rsp+4], eax
; Line 131
	lea	eax, DWORD PTR [r9+7]
; Line 400
	mov	DWORD PTR $T5[rsp+16], edi
; Line 401
	mov	DWORD PTR $T5[rsp+20], edi
; Line 402
	mov	DWORD PTR $T5[rsp+8], r9d
; Line 131
	cdq
	and	edx, 7
	lea	ebx, DWORD PTR [rdx+rax]
	and	ebx, -8
; Line 403
	mov	DWORD PTR $T5[rsp+12], ebx
	cmp	ebx, r9d
; Line 405
	je	SHORT $LN27@new_lay
; Line 406
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T2[rsp+16], 406		; 00000196H
	mov	QWORD PTR $T2[rsp], rax
	lea	r8, OFFSET FLAT:??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@
	lea	rax, OFFSET FLAT:??_C@_08ENKIOJLC@new_mat_@
	mov	DWORD PTR $T2[rsp+20], 46		; 0000002eH
	mov	edx, 4
	mov	QWORD PTR $T2[rsp+8], rax
	lea	rcx, QWORD PTR $T2[rsp]
	mov	DWORD PTR [rsp+32], ebx
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN27@new_lay:
; Line 409
	movsxd	rbx, ebx
	mov	edx, 32					; 00000020H
	imul	rbx, rdi
	shl	rbx, 2
	mov	rcx, rbx
	call	_aligned_malloc
; Line 410
	mov	r8, rbx
	mov	QWORD PTR $T5[rsp+24], rax
	xor	edx, edx
	mov	rcx, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.h
; Line 77
	vmovups	ymm0, YMMWORD PTR $T5[rsp]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 422
	mov	edi, DWORD PTR [r14+16]
; File W:\cpp\void\dr-ai\num-ai.h
; Line 77
	xor	r10d, r10d
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 422
	mov	edx, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
; File W:\cpp\void\dr-ai\num-ai.h
; Line 78
	vmovups	ymm1, YMMWORD PTR [r14]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 422
	vmovss	xmm2, DWORD PTR __real@2f800000
; File W:\cpp\void\dr-ai\num-ai.h
; Line 77
	vmovups	YMMWORD PTR [r14+80], ymm0
	vxorps	xmm3, xmm3, xmm3
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 422
	test	edi, edi
	jle	$LN37@new_lay
; Line 423
	vmovups	ymm0, ymm1
	vpextrq	r11, xmm0, 1
	mov	rbx, r11
	vmovups	YMMWORD PTR $T4[rsp], ymm1
	mov	rsi, QWORD PTR $T4[rsp+24]
	shr	rbx, 32					; 00000020H
	npad	4
$LL38@new_lay:
; Line 388
	mov	eax, ebx
	imul	eax, r10d
	cdqe
	lea	r8, QWORD PTR [rsi+rax*4]
; Line 423
	test	r11d, r11d
; Line 217
	jle	SHORT $LN36@new_lay
; Line 423
	mov	r9d, r11d
	npad	12
$LL68@new_lay:
; Line 115
	mov	ecx, edx
; Line 217
	lea	r8, QWORD PTR [r8+4]
; Line 115
	shl	ecx, 13
	xor	ecx, edx
; Line 116
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 117
	mov	edx, ecx
	shl	edx, 5
	xor	edx, ecx
; Line 123
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, edx
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, rdx
; Line 124
	vmulss	xmm1, xmm0, xmm2
	vaddss	xmm1, xmm1, xmm3
; Line 218
	vmovss	DWORD PTR [r8-4], xmm1
	sub	r9, 1
	jne	SHORT $LL68@new_lay
$LN36@new_lay:
; Line 422
	inc	r10d
	cmp	r10d, edi
	jl	SHORT $LL38@new_lay
$LN37@new_lay:
; File W:\cpp\void\dr-ai\num-ai.h
; Line 79
	vmovups	xmm0, XMMWORD PTR [r14+32]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 217
	vmovd	eax, xmm0
; File W:\cpp\void\dr-ai\num-ai.h
; Line 79
	vmovups	XMMWORD PTR $T3[rsp], xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 217
	test	eax, eax
	jle	SHORT $LN80@new_lay
	mov	r8, QWORD PTR $T3[rsp+8]
	mov	r9d, eax
$LL70@new_lay:
; Line 115
	mov	ecx, edx
; Line 217
	lea	r8, QWORD PTR [r8+4]
; Line 115
	shl	ecx, 13
	xor	ecx, edx
; Line 116
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 117
	mov	eax, ecx
	shl	eax, 5
	xor	eax, ecx
	mov	ecx, eax
; Line 123
	mov	edx, eax
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, ecx
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, rcx
; Line 124
	vmulss	xmm1, xmm0, xmm2
	vaddss	xmm1, xmm1, xmm3
; Line 218
	vmovss	DWORD PTR [r8-4], xmm1
	sub	r9, 1
	jne	SHORT $LL70@new_lay
$LN80@new_lay:
; File W:\cpp\void\dr-ai\num-ai.h
; Line 81
	mov	rax, r14
	vzeroupper
	lea	r11, QWORD PTR [rsp+112]
	mov	rbx, QWORD PTR [r11+16]
	mov	rbp, QWORD PTR [r11+24]
	mov	rsi, QWORD PTR [r11+32]
	mov	rdi, QWORD PTR [r11+40]
	mov	rsp, r11
	pop	r14
	ret	0
?new_lay@@YA?AUai_lay@@HH@Z ENDP			; new_lay
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z
_TEXT	SEGMENT
$T1 = 0
$T2 = 16
lane_acc$3 = 64
$T4 = 96
__$ReturnAddress$ = 256
dst$ = 264
mat$ = 272
src$ = 280
?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z PROC		; mat_dot_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 428
	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 192				; 000000c0H
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
; Line 432
	mov	r15d, DWORD PTR [r8+16]
	xor	edi, edi
	mov	r12, rcx
	test	r15d, r15d
	jle	$LN3@mat_dot_
; Line 433
	vmovups	ymm0, YMMWORD PTR [r8]
	mov	rsi, QWORD PTR [rdx+8]
	lea	r8, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	vpextrq	r14, xmm0, 1
	vmovups	YMMWORD PTR $T4[rbp], ymm0
	vmovups	xmm0, XMMWORD PTR [r9]
	mov	r13, r14
	lea	rdx, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	shr	r13, 32					; 00000020H
	mov	r12d, edi
; Line 352
	vmovd	eax, xmm0
	cmp	r14d, eax
; Line 433
	vmovups	XMMWORD PTR $T1[rbp], xmm0
	sete	r12b
	npad	3
$LL4@mat_dot_:
; Line 388
	mov	rcx, QWORD PTR $T4[rbp+24]
; Line 352
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; Line 388
	mov	eax, r13d
; Line 352
	mov	QWORD PTR $T2[rbp], rdx
; Line 388
	imul	eax, edi
; Line 352
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	QWORD PTR $T2[rbp+8], r8
	mov	r8d, r12d
	mov	DWORD PTR $T2[rbp+16], 352		; 00000160H
	mov	DWORD PTR $T2[rbp+20], 45		; 0000002dH
; Line 388
	cdqe
	lea	rbx, QWORD PTR [rcx+rax*4]
; Line 352
	lea	rcx, QWORD PTR $T2[rbp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	vpxor	xmm1, xmm1, xmm1
; Line 355
	vmovups	YMMWORD PTR lane_acc$3[rbp], ymm1
; Line 356
	test	r14d, r14d
	jle	SHORT $LN10@mat_dot_
; Line 433
	mov	rdx, QWORD PTR $T1[rbp+8]
	lea	ecx, DWORD PTR [r14-1]
	sub	rdx, rbx
	shr	ecx, 3
	inc	ecx
$LL11@mat_dot_:
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rdx+rbx]
	lea	rbx, QWORD PTR [rbx+32]
	sub	rcx, 1
	jne	SHORT $LL11@mat_dot_
	vmovups	YMMWORD PTR lane_acc$3[rbp], ymm1
$LN10@mat_dot_:
; Line 362
	vmovss	xmm0, DWORD PTR lane_acc$3[rbp]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$3[rbp+4]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$3[rbp+8]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$3[rbp+12]
	vaddss	xmm0, xmm3, DWORD PTR lane_acc$3[rbp+16]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$3[rbp+20]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$3[rbp+24]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$3[rbp+28]
; Line 433
	vmovss	DWORD PTR [rsi], xmm3
	add	rsi, 4
	lea	rdx, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	inc	edi
	lea	r8, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	cmp	edi, r15d
	jl	$LL4@mat_dot_
	mov	r12, QWORD PTR __$ReturnAddress$[rsp]
	mov	rdx, QWORD PTR dst$[rsp]
$LN3@mat_dot_:
; Line 435
	vmovups	xmm0, XMMWORD PTR [rdx]
	vmovups	XMMWORD PTR [r12], xmm0
	mov	rax, r12
	vzeroupper
; Line 436
	mov	rbx, QWORD PTR [rsp+272]
	add	rsp, 192				; 000000c0H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?mat_dot_@@YQ?AUai_vec@@U1@Uai_mat@@0@Z ENDP		; mat_dot_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?mat_rnd@@YAXUai_mat@@@Z
_TEXT	SEGMENT
$T2 = 0
mat$ = 48
?mat_rnd@@YAXUai_mat@@@Z PROC				; mat_rnd, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 421
	push	rbx
	sub	rsp, 32					; 00000020H
; Line 422
	mov	ebx, DWORD PTR [rcx+16]
	xor	r8d, r8d
	test	ebx, ebx
	jle	$LN3@mat_rnd
; Line 423
	vmovups	ymm0, YMMWORD PTR [rcx]
	vmovss	xmm2, DWORD PTR __real@2f800000
	mov	edx, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
	mov	QWORD PTR [rsp+48], rsi
	mov	QWORD PTR [rsp+56], rdi
	vpextrq	r11, xmm0, 1
	mov	rdi, r11
	vmovups	YMMWORD PTR $T2[rsp], ymm0
	mov	rsi, QWORD PTR $T2[rsp+24]
	shr	rdi, 32					; 00000020H
	vxorps	xmm3, xmm3, xmm3
	npad	5
$LL4@mat_rnd:
; Line 388
	mov	eax, edi
	imul	eax, r8d
	cdqe
	lea	r9, QWORD PTR [rsi+rax*4]
; Line 423
	test	r11d, r11d
; Line 217
	jle	SHORT $LN2@mat_rnd
; Line 423
	mov	r10d, r11d
	npad	12
$LL21@mat_rnd:
; Line 115
	mov	ecx, edx
; Line 217
	lea	r9, QWORD PTR [r9+4]
; Line 115
	shl	ecx, 13
	xor	ecx, edx
; Line 116
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 117
	mov	edx, ecx
	shl	edx, 5
	xor	edx, ecx
; Line 123
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, edx
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, rdx
; Line 124
	vmulss	xmm1, xmm0, xmm2
	vaddss	xmm1, xmm1, xmm3
; Line 218
	vmovss	DWORD PTR [r9-4], xmm1
	sub	r10, 1
	jne	SHORT $LL21@mat_rnd
$LN2@mat_rnd:
; Line 422
	inc	r8d
	cmp	r8d, ebx
	jl	SHORT $LL4@mat_rnd
	mov	rdi, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+48]
$LN3@mat_rnd:
; Line 425
	vzeroupper
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
?mat_rnd@@YAXUai_mat@@@Z ENDP				; mat_rnd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_mat_@@YA?AUai_mat@@HHHH@Z
_TEXT	SEGMENT
$T1 = 48
__$ReturnAddress$ = 96
col$ = 104
row$ = 112
min$ = 120
vec$ = 128
?new_mat_@@YA?AUai_mat@@HHHH@Z PROC			; new_mat_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 396
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H
	movsxd	rdi, r9d
	mov	rbx, rcx
; Line 402
	mov	r9d, DWORD PTR vec$[rsp]
	mov	DWORD PTR [rcx], edx
	mov	DWORD PTR [rcx+4], r8d
	mov	DWORD PTR [rcx+16], edi
; Line 131
	lea	eax, DWORD PTR [r9+7]
; Line 401
	mov	DWORD PTR [rcx+20], edi
; Line 131
	cdq
; Line 402
	mov	DWORD PTR [rcx+8], r9d
; Line 131
	and	edx, 7
	add	eax, edx
	and	eax, -8
; Line 403
	mov	DWORD PTR [rcx+12], eax
; Line 405
	cmp	eax, r9d
	je	SHORT $LN5@new_mat_
; Line 406
	lea	rcx, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T1[rsp+16], 406		; 00000196H
	mov	QWORD PTR $T1[rsp], rcx
	lea	r8, OFFSET FLAT:??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@
	lea	rcx, OFFSET FLAT:??_C@_08ENKIOJLC@new_mat_@
	mov	DWORD PTR $T1[rsp+20], 46		; 0000002eH
	mov	QWORD PTR $T1[rsp+8], rcx
	mov	edx, 4
	lea	rcx, QWORD PTR $T1[rsp]
	mov	DWORD PTR [rsp+32], eax
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN5@new_mat_:
; Line 409
	movsxd	rcx, DWORD PTR [rbx+12]
	mov	edx, 32					; 00000020H
	imul	rcx, rdi
	shl	rcx, 2
	call	_aligned_malloc
; Line 410
	movsxd	rcx, DWORD PTR [rbx+16]
	xor	edx, edx
	movsxd	r8, DWORD PTR [rbx+12]
	imul	r8, rcx
	mov	rcx, rax
	mov	QWORD PTR [rbx+24], rax
	shl	r8, 2
	call	memset
; Line 417
	mov	rax, rbx
; Line 418
	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
?new_mat_@@YA?AUai_mat@@HHHH@Z ENDP			; new_mat_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?mat_vec@@YA?AUai_vec@@Uai_mat@@H@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 8
mat$ = 16
index$ = 24
?mat_vec@@YA?AUai_vec@@Uai_mat@@H@Z PROC		; mat_vec, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 388
	mov	r9d, DWORD PTR [rdx+12]
	mov	eax, r9d
	imul	eax, r8d
; Line 390
	mov	DWORD PTR [rcx+4], r9d
	movsxd	r8, eax
	mov	rax, QWORD PTR [rdx+24]
	lea	r8, QWORD PTR [rax+r8*4]
	mov	eax, DWORD PTR [rdx+8]
	mov	DWORD PTR [rcx], eax
; Line 392
	mov	rax, rcx
	mov	QWORD PTR [rcx+8], r8
; Line 393
	ret	0
?mat_vec@@YA?AUai_vec@@Uai_mat@@H@Z ENDP		; mat_vec
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_dot@@YQMUai_vec@@0@Z
_TEXT	SEGMENT
$T1 = 0
lane_acc$ = 0
lhs$ = 112
rhs$ = 120
?vec_dot@@YQMUai_vec@@0@Z PROC				; vec_dot, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 352
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	rbp
	sub	rsp, 96					; 00000060H
	lea	rbp, QWORD PTR [rsp+64]
	and	rbp, -32				; ffffffffffffffe0H
	movsxd	rbx, DWORD PTR [rcx]
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	xor	r8d, r8d
	mov	QWORD PTR $T1[rbp], rax
	cmp	ebx, DWORD PTR [rdx]
	lea	rax, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	rdi, rdx
	mov	QWORD PTR $T1[rbp+8], rax
	mov	rsi, rcx
	mov	DWORD PTR $T1[rbp+16], 352		; 00000160H
	sete	r8b
	mov	DWORD PTR $T1[rbp+20], 45		; 0000002dH
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	lea	rcx, QWORD PTR $T1[rbp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 356
	mov	rcx, rbx
	vpxor	xmm1, xmm1, xmm1
	vmovups	YMMWORD PTR lane_acc$[rbp], ymm1
	test	ebx, ebx
	jle	SHORT $LN3@vec_dot
; Line 357
	mov	rax, QWORD PTR [rsi+8]
; Line 358
	mov	rdx, QWORD PTR [rdi+8]
	sub	rdx, rax
	dec	rcx
	shr	rcx, 3
	inc	rcx
	npad	1
$LL4@vec_dot:
; Line 359
	vmovups	ymm0, YMMWORD PTR [rax]
	vfmadd231ps ymm1, ymm0, YMMWORD PTR [rdx+rax]
	lea	rax, QWORD PTR [rax+32]
	sub	rcx, 1
	jne	SHORT $LL4@vec_dot
	vmovups	YMMWORD PTR lane_acc$[rbp], ymm1
$LN3@vec_dot:
; Line 362
	vmovss	xmm0, DWORD PTR lane_acc$[rbp]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$[rbp+4]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$[rbp+8]
	vaddss	xmm3, xmm2, DWORD PTR lane_acc$[rbp+12]
	vaddss	xmm0, xmm3, DWORD PTR lane_acc$[rbp+16]
	vaddss	xmm1, xmm0, DWORD PTR lane_acc$[rbp+20]
	vaddss	xmm2, xmm1, DWORD PTR lane_acc$[rbp+24]
	vaddss	xmm0, xmm2, DWORD PTR lane_acc$[rbp+28]
	vzeroupper
; Line 370
	mov	rbx, QWORD PTR [rsp+112]
	mov	rsi, QWORD PTR [rsp+120]
	mov	rdi, QWORD PTR [rsp+128]
	add	rsp, 96					; 00000060H
	pop	rbp
	ret	0
?vec_dot@@YQMUai_vec@@0@Z ENDP				; vec_dot
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_dsg_@@YQ?AUai_vec@@U1@0@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 48
dst$ = 56
lhs$ = 64
?vec_dsg_@@YQ?AUai_vec@@U1@0@Z PROC			; vec_dsg_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 334
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r15
	sub	rsp, 32					; 00000020H
; Line 336
	movsxd	rdi, DWORD PTR [rdx]
	mov	rsi, rdx
	mov	r15, rcx
	test	rdi, rdi
	jle	SHORT $LN3@vec_dsg_
; Line 340
	mov	QWORD PTR [rsp+48], rbx
	mov	rbx, QWORD PTR [rdx+8]
	mov	QWORD PTR [rsp+56], r14
	mov	r14, QWORD PTR [r8+8]
	sub	r14, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	3
$LL4@vec_dsg_:
; Line 339
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [r14+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm3, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm3
	vdivps	ymm2, ymm3, ymm1
	vsubps	ymm0, ymm3, ymm2
	vmulps	ymm1, ymm0, ymm2
; Line 340
	vmovups	YMMWORD PTR [rbx-32], ymm1
	sub	rdi, 1
	jne	SHORT $LL4@vec_dsg_
; Line 336
	mov	r14, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
$LN3@vec_dsg_:
; Line 347
	vmovups	xmm0, XMMWORD PTR [rsi]
	vmovups	XMMWORD PTR [r15], xmm0
	mov	rax, r15
	vzeroupper
; Line 348
	mov	rsi, QWORD PTR [rsp+64]
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
?vec_dsg_@@YQ?AUai_vec@@U1@0@Z ENDP			; vec_dsg_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_sig_@@YQ?AUai_vec@@U1@0@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 48
dst$ = 56
lhs$ = 64
?vec_sig_@@YQ?AUai_vec@@U1@0@Z PROC			; vec_sig_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 313
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	mov	QWORD PTR [rsp+32], r14
	push	r15
	sub	rsp, 32					; 00000020H
; Line 319
	movsxd	rdi, DWORD PTR [rdx]
	mov	r14, rdx
	mov	rbx, QWORD PTR [rdx+8]
	mov	r15, rcx
	mov	rsi, QWORD PTR [r8+8]
	test	rdi, rdi
	jle	SHORT $LN3@vec_sig_
	sub	rsi, rbx
	dec	rdi
	shr	rdi, 3
	inc	rdi
	npad	3
$LL4@vec_sig_:
; Line 322
	vmovups	ymm0, YMMWORD PTR ?lan_zro@@3T__m256@@B
	vsubps	ymm0, ymm0, YMMWORD PTR [rsi+rbx]
	call	__vdecl_expf8
	lea	rbx, QWORD PTR [rbx+32]
	vmovups	ymm2, YMMWORD PTR ?lan_one@@3T__m256@@B
	vaddps	ymm1, ymm0, ymm2
	vdivps	ymm2, ymm2, ymm1
; Line 323
	vmovups	YMMWORD PTR [rbx-32], ymm2
	sub	rdi, 1
	jne	SHORT $LL4@vec_sig_
$LN3@vec_sig_:
; Line 330
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovups	XMMWORD PTR [r15], xmm0
	mov	rax, r15
	vzeroupper
; Line 331
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	mov	r14, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r15
	ret	0
?vec_sig_@@YQ?AUai_vec@@U1@0@Z ENDP			; vec_sig_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_mul_@@YQ?AUai_vec@@U1@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
dst$ = 88
lhs$ = 96
rhs$ = 104
?vec_mul_@@YQ?AUai_vec@@U1@00@Z PROC			; vec_mul_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 279
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 64					; 00000040H
	mov	r14, r8
; Line 284
	mov	DWORD PTR $T1[rsp+16], 284		; 0000011cH
	xor	r8d, r8d
	mov	DWORD PTR $T1[rsp+20], 44		; 0000002cH
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	rsi, r9
	mov	QWORD PTR $T1[rsp], rax
	mov	rdi, rdx
	lea	rax, OFFSET FLAT:??_C@_08EGPIDAG@vec_mul_@
	mov	rbx, rcx
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	eax, DWORD PTR [r9]
	lea	rcx, QWORD PTR $T1[rsp]
	cmp	DWORD PTR [r14], eax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	sete	r8b
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 286
	movsxd	rcx, DWORD PTR [rdi]
	test	rcx, rcx
	jle	SHORT $LN3@vec_mul_
; Line 287
	mov	rax, QWORD PTR [r14+8]
	mov	rdx, QWORD PTR [rsi+8]
	mov	r8, QWORD PTR [rdi+8]
	sub	rdx, rax
	sub	r8, rax
	dec	rcx
	shr	rcx, 3
	inc	rcx
	npad	14
$LL4@vec_mul_:
	vmovups	ymm0, YMMWORD PTR [rdx+rax]
	vmulps	ymm1, ymm0, YMMWORD PTR [rax]
	vmovups	YMMWORD PTR [r8+rax], ymm1
	lea	rax, QWORD PTR [rax+32]
	sub	rcx, 1
	jne	SHORT $LL4@vec_mul_
$LN3@vec_mul_:
; Line 294
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovups	XMMWORD PTR [rbx], xmm0
	mov	rax, rbx
	vzeroupper
; Line 295
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
?vec_mul_@@YQ?AUai_vec@@U1@00@Z ENDP			; vec_mul_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_add_@@YQ?AUai_vec@@U1@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
dst$ = 88
lhs$ = 96
rhs$ = 104
?vec_add_@@YQ?AUai_vec@@U1@00@Z PROC			; vec_add_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 259
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 64					; 00000040H
	mov	r14, r8
; Line 264
	mov	DWORD PTR $T1[rsp+16], 264		; 00000108H
	xor	r8d, r8d
	mov	DWORD PTR $T1[rsp+20], 43		; 0000002bH
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	rsi, r9
	mov	QWORD PTR $T1[rsp], rax
	mov	rdi, rdx
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	rbx, rcx
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	eax, DWORD PTR [r9]
	lea	rcx, QWORD PTR $T1[rsp]
	cmp	DWORD PTR [r14], eax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	sete	r8b
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 267
	movsxd	rcx, DWORD PTR [rdi]
	test	rcx, rcx
	jle	SHORT $LN3@vec_add_
; Line 268
	mov	rax, QWORD PTR [r14+8]
	mov	rdx, QWORD PTR [rsi+8]
	mov	r8, QWORD PTR [rdi+8]
	sub	rdx, rax
	sub	r8, rax
	dec	rcx
	shr	rcx, 3
	inc	rcx
	npad	14
$LL4@vec_add_:
	vmovups	ymm0, YMMWORD PTR [rdx+rax]
	vaddps	ymm1, ymm0, YMMWORD PTR [rax]
	vmovups	YMMWORD PTR [r8+rax], ymm1
	lea	rax, QWORD PTR [rax+32]
	sub	rcx, 1
	jne	SHORT $LL4@vec_add_
$LN3@vec_add_:
; Line 275
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovups	XMMWORD PTR [rbx], xmm0
	mov	rax, rbx
	vzeroupper
; Line 276
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
?vec_add_@@YQ?AUai_vec@@U1@00@Z ENDP			; vec_add_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_sub_@@YQ?AUai_vec@@U1@00@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 80
dst$ = 88
lhs$ = 96
rhs$ = 104
?vec_sub_@@YQ?AUai_vec@@U1@00@Z PROC			; vec_sub_, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 241
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 64					; 00000040H
	mov	r14, r8
; Line 245
	mov	DWORD PTR $T1[rsp+16], 245		; 000000f5H
	xor	r8d, r8d
	mov	DWORD PTR $T1[rsp+20], 42		; 0000002aH
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	rsi, r9
	mov	QWORD PTR $T1[rsp], rax
	mov	rdi, rdx
	lea	rax, OFFSET FLAT:??_C@_08NBCBIHOP@vec_sub_@
	mov	rbx, rcx
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	eax, DWORD PTR [r9]
	lea	rcx, QWORD PTR $T1[rsp]
	cmp	DWORD PTR [r14], eax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	sete	r8b
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 247
	movsxd	rcx, DWORD PTR [rdi]
	test	rcx, rcx
	jle	SHORT $LN3@vec_sub_
; Line 248
	mov	rax, QWORD PTR [r14+8]
	mov	rdx, QWORD PTR [rsi+8]
	mov	r8, QWORD PTR [rdi+8]
	sub	rdx, rax
	sub	r8, rax
	dec	rcx
	shr	rcx, 3
	inc	rcx
	npad	14
$LL4@vec_sub_:
	vmovups	ymm0, YMMWORD PTR [rax]
	vsubps	ymm1, ymm0, YMMWORD PTR [rdx+rax]
	vmovups	YMMWORD PTR [r8+rax], ymm1
	lea	rax, QWORD PTR [rax+32]
	sub	rcx, 1
	jne	SHORT $LL4@vec_sub_
$LN3@vec_sub_:
; Line 255
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovups	XMMWORD PTR [rbx], xmm0
	mov	rax, rbx
	vzeroupper
; Line 256
	mov	rbx, QWORD PTR [rsp+80]
	mov	rsi, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+96]
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
?vec_sub_@@YQ?AUai_vec@@U1@00@Z ENDP			; vec_sub_
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_rnd@@YAXUai_vec@@@Z
_TEXT	SEGMENT
v$ = 8
?vec_rnd@@YAXUai_vec@@@Z PROC				; vec_rnd, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 217
	movsxd	rdx, DWORD PTR [rcx]
	test	rdx, rdx
	jle	SHORT $LN3@vec_rnd
; Line 218
	mov	r8, QWORD PTR [rcx+8]
	vmovss	xmm2, DWORD PTR __real@2f800000
	mov	eax, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
	vxorps	xmm3, xmm3, xmm3
	npad	2
$LL12@vec_rnd:
; Line 115
	mov	ecx, eax
; Line 217
	lea	r8, QWORD PTR [r8+4]
; Line 115
	shl	ecx, 13
	xor	ecx, eax
; Line 116
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 117
	mov	eax, ecx
	shl	eax, 5
	xor	eax, ecx
; Line 123
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, eax
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, rax
; Line 124
	vmulss	xmm1, xmm0, xmm2
	vaddss	xmm1, xmm1, xmm3
; Line 218
	vmovss	DWORD PTR [r8-4], xmm1
	sub	rdx, 1
	jne	SHORT $LL12@vec_rnd
$LN3@vec_rnd:
; Line 219
	ret	0
?vec_rnd@@YAXUai_vec@@@Z ENDP				; vec_rnd
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_eql@@YAHUai_vec@@0@Z
_TEXT	SEGMENT
lhs$ = 8
rhs$ = 16
?vec_eql@@YAHUai_vec@@0@Z PROC				; vec_eql, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 207
	movsxd	r8, DWORD PTR [rcx]
	cmp	r8d, DWORD PTR [rdx]
	jne	SHORT $LN9@vec_eql
; Line 209
	test	r8d, r8d
	jle	SHORT $LN3@vec_eql
; Line 210
	mov	rax, QWORD PTR [rdx+8]
	xor	edx, edx
	mov	rcx, QWORD PTR [rcx+8]
	sub	rcx, rax
	npad	6
$LL4@vec_eql:
	vmovss	xmm0, DWORD PTR [rcx+rax]
	vucomiss xmm0, DWORD PTR [rax]
	jp	SHORT $LN9@vec_eql
	jne	SHORT $LN9@vec_eql
; Line 209
	inc	rdx
	add	rax, 4
	cmp	rdx, r8
	jl	SHORT $LL4@vec_eql
$LN3@vec_eql:
; Line 212
	mov	eax, 1
; Line 213
	ret	0
$LN9@vec_eql:
; Line 211
	xor	eax, eax
; Line 213
	ret	0
?vec_eql@@YAHUai_vec@@0@Z ENDP				; vec_eql
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 112
s0$ = 120
s1$ = 128
s2$ = 136
s3$ = 144
s4$ = 152
s5$ = 160
s6$ = 168
s7$ = 176
s8$ = 184
s9$ = 192
?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z PROC		; new_vec10, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 194
	push	rbx
	sub	rsp, 96					; 00000060H
	vmovaps	XMMWORD PTR [rsp+80], xmm6
; Line 150
	mov	edx, 32					; 00000020H
	vmovaps	XMMWORD PTR [rsp+64], xmm7
; Line 194
	mov	rbx, rcx
	vmovaps	XMMWORD PTR [rsp+48], xmm8
	vmovaps	xmm8, xmm3
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 194
	vmovaps	xmm7, xmm2
	vmovaps	xmm6, xmm1
; Line 150
	call	_aligned_malloc
; Line 197
	vmovss	xmm1, DWORD PTR s4$[rsp]
	vpxor	xmm0, xmm0, xmm0
; Line 156
	mov	QWORD PTR $T1[rsp+8], rax
	vmovups	YMMWORD PTR [rax], ymm0
	vmovups	YMMWORD PTR [rax+32], ymm0
	mov	DWORD PTR $T1[rsp], 10
	mov	DWORD PTR $T1[rsp+4], 16
; Line 194
	vmovups	xmm0, XMMWORD PTR $T1[rsp]
	vmovups	XMMWORD PTR [rbx], xmm0
; Line 195
	mov	rax, QWORD PTR [rbx+8]
; Line 196
	vmovss	xmm0, DWORD PTR s3$[rsp]
	vmovss	DWORD PTR [rax], xmm6
	vmovss	DWORD PTR [rax+4], xmm7
	vmovss	DWORD PTR [rax+8], xmm8
	vmovss	DWORD PTR [rax+12], xmm0
; Line 197
	vmovss	xmm0, DWORD PTR s5$[rsp]
	vmovss	DWORD PTR [rax+16], xmm1
; Line 198
	vmovss	xmm1, DWORD PTR s6$[rsp]
	vmovss	DWORD PTR [rax+20], xmm0
	vmovss	xmm0, DWORD PTR s7$[rsp]
	vmovss	DWORD PTR [rax+24], xmm1
; Line 199
	vmovss	xmm1, DWORD PTR s8$[rsp]
	vmovss	DWORD PTR [rax+28], xmm0
	vmovss	xmm0, DWORD PTR s9$[rsp]
	vmovss	DWORD PTR [rax+32], xmm1
	vmovss	DWORD PTR [rax+36], xmm0
; Line 200
	mov	rax, rbx
	vzeroupper
; Line 201
	vmovaps	xmm6, XMMWORD PTR [rsp+80]
	vmovaps	xmm7, XMMWORD PTR [rsp+64]
	vmovaps	xmm8, XMMWORD PTR [rsp+48]
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
?new_vec10@@YA?AUai_vec@@MMMMMMMMMM@Z ENDP		; new_vec10
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_vec3@@YA?AUai_vec@@MMM@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 112
s0$ = 120
s1$ = 128
s2$ = 136
?new_vec3@@YA?AUai_vec@@MMM@Z PROC			; new_vec3, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 171
	push	rbx
	sub	rsp, 96					; 00000060H
	vmovaps	XMMWORD PTR [rsp+80], xmm6
; Line 150
	mov	edx, 32					; 00000020H
	vmovaps	XMMWORD PTR [rsp+64], xmm7
; Line 171
	mov	rbx, rcx
	vmovaps	XMMWORD PTR [rsp+48], xmm8
; Line 150
	mov	ecx, edx
; Line 171
	vmovaps	xmm8, xmm3
	vmovaps	xmm7, xmm2
	vmovaps	xmm6, xmm1
; Line 150
	call	_aligned_malloc
	vpxor	xmm0, xmm0, xmm0
; Line 156
	mov	QWORD PTR $T1[rsp+8], rax
	mov	DWORD PTR $T1[rsp], 3
	vmovups	YMMWORD PTR [rax], ymm0
	mov	DWORD PTR $T1[rsp+4], 8
; Line 171
	vmovups	xmm0, XMMWORD PTR $T1[rsp]
	vmovups	XMMWORD PTR [rbx], xmm0
; Line 172
	mov	rax, QWORD PTR [rbx+8]
	vmovss	DWORD PTR [rax], xmm6
; Line 173
	vmovss	DWORD PTR [rax+4], xmm7
; Line 174
	vmovss	DWORD PTR [rax+8], xmm8
; Line 175
	mov	rax, rbx
	vzeroupper
; Line 176
	vmovaps	xmm6, XMMWORD PTR [rsp+80]
	vmovaps	xmm7, XMMWORD PTR [rsp+64]
	vmovaps	xmm8, XMMWORD PTR [rsp+48]
	add	rsp, 96					; 00000060H
	pop	rbx
	ret	0
?new_vec3@@YA?AUai_vec@@MMM@Z ENDP			; new_vec3
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_vec2@@YA?AUai_vec@@MM@Z
_TEXT	SEGMENT
$T1 = 32
__$ReturnAddress$ = 96
s0$ = 104
s1$ = 112
?new_vec2@@YA?AUai_vec@@MM@Z PROC			; new_vec2, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 162
	push	rbx
	sub	rsp, 80					; 00000050H
	vmovaps	XMMWORD PTR [rsp+64], xmm6
; Line 150
	mov	edx, 32					; 00000020H
; Line 162
	mov	rbx, rcx
	vmovaps	XMMWORD PTR [rsp+48], xmm7
; Line 150
	mov	ecx, edx
; Line 162
	vmovaps	xmm7, xmm2
	vmovaps	xmm6, xmm1
; Line 150
	call	_aligned_malloc
	vpxor	xmm0, xmm0, xmm0
; Line 156
	mov	QWORD PTR $T1[rsp+8], rax
	mov	DWORD PTR $T1[rsp], 2
	vmovups	YMMWORD PTR [rax], ymm0
	mov	DWORD PTR $T1[rsp+4], 8
; Line 162
	vmovups	xmm0, XMMWORD PTR $T1[rsp]
	vmovups	XMMWORD PTR [rbx], xmm0
; Line 163
	mov	rax, QWORD PTR [rbx+8]
	vmovss	DWORD PTR [rax], xmm6
	vmovss	DWORD PTR [rax+4], xmm7
; Line 164
	mov	rax, rbx
	vzeroupper
; Line 165
	vmovaps	xmm6, XMMWORD PTR [rsp+64]
	vmovaps	xmm7, XMMWORD PTR [rsp+48]
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
?new_vec2@@YA?AUai_vec@@MM@Z ENDP			; new_vec2
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?new_vec@@YA?AUai_vec@@H@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 48
len$ = 56
?new_vec@@YA?AUai_vec@@H@Z PROC				; new_vec, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 146
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 32					; 00000020H
; Line 131
	lea	eax, DWORD PTR [rdx+7]
; Line 146
	mov	ebp, edx
; Line 131
	cdq
; Line 146
	mov	r14, rcx
; Line 131
	and	edx, 7
	lea	esi, DWORD PTR [rdx+rax]
; Line 150
	mov	edx, 32					; 00000020H
; Line 131
	and	esi, -8
; Line 150
	movsxd	rbx, esi
	shl	rbx, 2
	mov	rcx, rbx
	call	_aligned_malloc
; Line 151
	mov	r8, rbx
	xor	edx, edx
	mov	rcx, rax
	mov	rdi, rax
	call	memset
; Line 158
	mov	rbx, QWORD PTR [rsp+48]
	mov	rax, r14
	mov	DWORD PTR [r14], ebp
	mov	rbp, QWORD PTR [rsp+56]
	mov	DWORD PTR [r14+4], esi
	mov	rsi, QWORD PTR [rsp+64]
	mov	QWORD PTR [r14+8], rdi
	mov	rdi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
?new_vec@@YA?AUai_vec@@H@Z ENDP				; new_vec
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?vec_max@@YAHH@Z
_TEXT	SEGMENT
len$ = 8
?vec_max@@YAHH@Z PROC					; vec_max, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 131
	lea	eax, DWORD PTR [rcx+7]
	cdq
	and	edx, 7
	add	eax, edx
	and	eax, -8
; Line 135
	ret	0
?vec_max@@YAHH@Z ENDP					; vec_max
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?rand_f@@YAMMM@Z
_TEXT	SEGMENT
min$ = 8
max$ = 16
?rand_f@@YAMMM@Z PROC					; rand_f, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 115
	mov	ecx, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
; Line 122
	vmovaps	xmm3, xmm0
; Line 115
	shl	ecx, 13
	xor	ecx, DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA
; Line 116
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 117
	mov	eax, ecx
	shl	eax, 5
	xor	eax, ecx
	vxorps	xmm0, xmm0, xmm0
; Line 123
	vcvtsi2ss xmm0, xmm0, rax
; Line 124
	vmulss	xmm2, xmm0, DWORD PTR __real@2f800000
	vsubss	xmm1, xmm1, xmm3
	vmulss	xmm2, xmm2, xmm1
	vaddss	xmm0, xmm2, xmm3
	mov	DWORD PTR ?state@?1??rand_f@@YAMMM@Z@4IA, eax
; Line 125
	ret	0
?rand_f@@YAMMM@Z ENDP					; rand_f
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?xorshift32@@YAII@Z
_TEXT	SEGMENT
x$ = 8
?xorshift32@@YAII@Z PROC				; xorshift32, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 115
	mov	eax, ecx
	shl	eax, 13
	xor	ecx, eax
; Line 116
	mov	eax, ecx
	shr	eax, 17
	xor	ecx, eax
; Line 117
	mov	eax, ecx
	shl	eax, 5
	xor	eax, ecx
; Line 119
	ret	0
?xorshift32@@YAII@Z ENDP				; xorshift32
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?mem_chk_vec@@YAXUai_vec@@@Z
_TEXT	SEGMENT
vec$ = 8
?mem_chk_vec@@YAXUai_vec@@@Z PROC			; mem_chk_vec, COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 110
	ret	0
?mem_chk_vec@@YAXUai_vec@@@Z ENDP			; mem_chk_vec
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Aai_mat@@QEAAPEAMH@Z
_TEXT	SEGMENT
$T1 = 32
this$ = 80
idx$ = 88
??Aai_mat@@QEAAPEAMH@Z PROC				; ai_mat::operator[], COMDAT
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 85
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	xor	r8d, r8d
	mov	DWORD PTR $T1[rsp+16], 85		; 00000055H
	cmp	edx, DWORD PTR [rcx+16]
	lea	rax, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	QWORD PTR $T1[rsp], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	ebx, edx
	mov	DWORD PTR $T1[rsp+20], 41		; 00000029H
	mov	rdi, rcx
	lea	rax, OFFSET FLAT:??_C@_0M@HIENKLDG@operator?5?$FL?$FN@
	setl	r8b
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_09EHENKKKI@idx?5?$DM?5min@
	lea	rcx, QWORD PTR $T1[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 86
	imul	ebx, DWORD PTR [rdi+12]
	mov	rax, QWORD PTR [rdi+24]
	movsxd	rcx, ebx
; Line 87
	mov	rbx, QWORD PTR [rsp+80]
	lea	rax, QWORD PTR [rax+rcx*4]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
??Aai_mat@@QEAAPEAMH@Z ENDP				; ai_mat::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?TraceMessageKindToString@@YAPEB_WH@Z
_TEXT	SEGMENT
Kind$ = 8
?TraceMessageKindToString@@YAPEB_WH@Z PROC		; TraceMessageKindToString, COMDAT
; File W:\cpp\void\dr\trace.c
; Line 6
	cmp	ecx, 7
	ja	SHORT $LN2@TraceMessa
	movsxd	rax, ecx
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	ecx, DWORD PTR $LN13@TraceMessa[rdx+rax*4]
	add	rcx, rdx
	jmp	rcx
$LN4@TraceMessa:
; Line 7
	lea	rax, OFFSET FLAT:??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN5@TraceMessa:
; Line 8
	lea	rax, OFFSET FLAT:??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN6@TraceMessa:
; Line 9
	lea	rax, OFFSET FLAT:??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN7@TraceMessa:
; Line 10
	lea	rax, OFFSET FLAT:??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@
; Line 17
	ret	0
$LN8@TraceMessa:
; Line 11
	lea	rax, OFFSET FLAT:??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN9@TraceMessa:
; Line 12
	lea	rax, OFFSET FLAT:??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
; Line 17
	ret	0
$LN10@TraceMessa:
; Line 13
	lea	rax, OFFSET FLAT:??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@
; Line 17
	ret	0
$LN11@TraceMessa:
; Line 14
	lea	rax, OFFSET FLAT:??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@
; Line 17
	ret	0
$LN2@TraceMessa:
; Line 16
	lea	rax, OFFSET FLAT:??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@
; Line 17
	ret	0
	npad	1
$LN13@TraceMessa:
	DD	$LN4@TraceMessa
	DD	$LN5@TraceMessa
	DD	$LN6@TraceMessa
	DD	$LN10@TraceMessa
	DD	$LN7@TraceMessa
	DD	$LN11@TraceMessa
	DD	$LN8@TraceMessa
	DD	$LN9@TraceMessa
?TraceMessageKindToString@@YAPEB_WH@Z ENDP		; TraceMessageKindToString
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?CStrW@@YAPEB_WPEBD@Z
_TEXT	SEGMENT
Str$ = 8
?CStrW@@YAPEB_WPEBD@Z PROC				; CStrW, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	rdx, rcx
	mov	ecx, -1
	jmp	?Widen@@YAPEA_WHPEBD@Z			; Widen
?CStrW@@YAPEB_WPEBD@Z ENDP				; CStrW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT main
_TEXT	SEGMENT
ArgC$ = 48
Result$1 = 56
ArgV$ = 56
main	PROC						; COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 434
$LN18:
	sub	rsp, 40					; 00000028H
; Line 384
	test	BYTE PTR ?PROCESS@@3U_PROCESS@@A+128, 4
; Line 434
	lea	eax, DWORD PTR [rcx-1]
	mov	DWORD PTR ?ARGUMENTS@@3U_ARGUMENTS@@A, eax
; Line 435
	lea	rax, QWORD PTR [rdx+8]
	mov	QWORD PTR ?ARGUMENTS@@3U_ARGUMENTS@@A+8, rax
; Line 384
	je	SHORT $LN4@main
; Line 385
	call	QWORD PTR __imp_AllocConsole
$LN4@main:
; Line 387
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
; Line 388
	mov	ecx, -10				; fffffff6H
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+96, rax
	call	QWORD PTR __imp_GetStdHandle
; Line 389
	mov	ecx, -12				; fffffff4H
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+64, rax
	call	QWORD PTR __imp_GetStdHandle
; Line 393
	mov	ecx, 1
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 1
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+120, rax
	call	QWORD PTR __imp_timeBeginPeriod
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	xor	edx, edx
	test	eax, eax
	cmovne	ecx, edx
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, ecx
; Line 25
	lea	rcx, QWORD PTR Result$1[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 399
	test	BYTE PTR ?PROCESS@@3U_PROCESS@@A+128, 4
	mov	rax, QWORD PTR Result$1[rsp]
	mov	QWORD PTR ?SYSTEM@@3U_SYSTEM@@A+64, rax
	je	SHORT $LN6@main
; Line 405
	mov	QWORD PTR [rsp+48], rbx
	lea	rcx, OFFSET FLAT:??_C@_0L@GMPLCCII@user32?4dll@
	mov	QWORD PTR [rsp+32], rdi
	call	QWORD PTR __imp_LoadLibraryA
; Line 407
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@
	mov	rbx, rax
	call	QWORD PTR __imp_GetProcAddress
; Line 409
	lea	rdx, OFFSET FLAT:??_C@_0BD@ENICNPLM@SetProcessDPIAware@
	mov	rcx, rbx
	mov	rdi, rax
	call	QWORD PTR __imp_GetProcAddress
; Line 412
	test	rdi, rdi
	je	SHORT $LN7@main
; Line 413
	mov	rcx, -3
	call	rdi
; Line 414
	jmp	SHORT $LN9@main
$LN7@main:
; Line 415
	test	rax, rax
	je	SHORT $LN9@main
; Line 416
	call	rax
$LN9@main:
; Line 419
	mov	rcx, rbx
	call	QWORD PTR __imp_FreeLibrary
	mov	rdi, QWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+48]
$LN6@main:
; Line 437
	call	?MAIN@@YAXXZ				; MAIN
; Line 426
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	test	ecx, ecx
	je	SHORT $LN16@main
; Line 427
	call	QWORD PTR __imp_timeEndPeriod
$LN16@main:
; Line 440
	mov	eax, DWORD PTR ?PROCESS@@3U_PROCESS@@A+20
	add	rsp, 40					; 00000028H
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?PlatformDeinitialize@@YAXXZ
_TEXT	SEGMENT
?PlatformDeinitialize@@YAXXZ PROC			; PlatformDeinitialize, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 426
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	test	ecx, ecx
	je	SHORT $LN2@PlatformDe
; Line 427
	rex_jmp	QWORD PTR __imp_timeEndPeriod
$LN2@PlatformDe:
; Line 429
	ret	0
?PlatformDeinitialize@@YAXXZ ENDP			; PlatformDeinitialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?PlatformInitialize@@YAXXZ
_TEXT	SEGMENT
Result$1 = 48
?PlatformInitialize@@YAXXZ PROC				; PlatformInitialize, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 383
	sub	rsp, 40					; 00000028H
; Line 384
	test	BYTE PTR ?PROCESS@@3U_PROCESS@@A+128, 4
	je	SHORT $LN2@PlatformIn
; Line 385
	call	QWORD PTR __imp_AllocConsole
$LN2@PlatformIn:
; Line 387
	mov	ecx, -11				; fffffff5H
	call	QWORD PTR __imp_GetStdHandle
; Line 388
	mov	ecx, -10				; fffffff6H
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+96, rax
	call	QWORD PTR __imp_GetStdHandle
; Line 389
	mov	ecx, -12				; fffffff4H
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+64, rax
	call	QWORD PTR __imp_GetStdHandle
; Line 393
	mov	ecx, 1
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, 1
	mov	QWORD PTR ?PROCESS@@3U_PROCESS@@A+120, rax
	call	QWORD PTR __imp_timeBeginPeriod
	mov	ecx, DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56
	xor	edx, edx
	test	eax, eax
	cmovne	ecx, edx
	mov	DWORD PTR ?SYSTEM@@3U_SYSTEM@@A+56, ecx
; Line 25
	lea	rcx, QWORD PTR Result$1[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 399
	test	BYTE PTR ?PROCESS@@3U_PROCESS@@A+128, 4
	mov	rax, QWORD PTR Result$1[rsp]
	mov	QWORD PTR ?SYSTEM@@3U_SYSTEM@@A+64, rax
	je	SHORT $LN4@PlatformIn
; Line 405
	mov	QWORD PTR [rsp+56], rbx
	lea	rcx, OFFSET FLAT:??_C@_0L@GMPLCCII@user32?4dll@
	mov	QWORD PTR [rsp+32], rdi
	call	QWORD PTR __imp_LoadLibraryA
; Line 407
	mov	rcx, rax
	lea	rdx, OFFSET FLAT:??_C@_0BO@MMAJNAJO@SetProcessDPIAwarenessContext@
	mov	rbx, rax
	call	QWORD PTR __imp_GetProcAddress
; Line 409
	lea	rdx, OFFSET FLAT:??_C@_0BD@ENICNPLM@SetProcessDPIAware@
	mov	rcx, rbx
	mov	rdi, rax
	call	QWORD PTR __imp_GetProcAddress
; Line 412
	test	rdi, rdi
	je	SHORT $LN5@PlatformIn
; Line 413
	mov	rcx, -3
	call	rdi
; Line 414
	jmp	SHORT $LN7@PlatformIn
$LN5@PlatformIn:
; Line 415
	test	rax, rax
	je	SHORT $LN7@PlatformIn
; Line 416
	call	rax
$LN7@PlatformIn:
; Line 419
	mov	rcx, rbx
	call	QWORD PTR __imp_FreeLibrary
	mov	rdi, QWORD PTR [rsp+32]
	mov	rbx, QWORD PTR [rsp+56]
$LN4@PlatformIn:
; Line 421
	add	rsp, 40					; 00000028H
	ret	0
?PlatformInitialize@@YAXXZ ENDP				; PlatformInitialize
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FormatW@@YAPEA_WPEB_WZZ
_TEXT	SEGMENT
Format$ = 96
?FormatW@@YAPEA_WPEB_WZZ PROC				; FormatW, COMDAT
; File W:\cpp\void\dr\text.c
; Line 32
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 56					; 00000038H
	mov	rsi, rcx
; Line 33
	lea	r14, QWORD PTR Format$[rsp+8]
; Line 34
	mov	rbx, -1
	npad	4
$LL37@FormatW:
	cmp	WORD PTR [rcx+rbx*2+2], 0
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL37@FormatW
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 15
	lea	eax, DWORD PTR [rbx+257]
	movsxd	rcx, eax
	add	rcx, rcx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], rcx
	xor	ecx, ecx
	lea	edx, QWORD PTR [r9+1]
	mov	QWORD PTR [rsp+32], 0
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 16
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rdi, rax
; File W:\cpp\void\dr\text.c
; Line 16
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], r14
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vswprintf
; File W:\cpp\void\dr\text.c
; Line 36
	mov	rax, rdi
; Line 37
	add	rsp, 56					; 00000038H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?FormatW@@YAPEA_WPEB_WZZ ENDP				; FormatW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FormatA@@YAPEADPEBDZZ
_TEXT	SEGMENT
Format$ = 96
?FormatA@@YAPEADPEBDZZ PROC				; FormatA, COMDAT
; File W:\cpp\void\dr\text.c
; Line 23
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 56					; 00000038H
	mov	rsi, rcx
; Line 24
	lea	r14, QWORD PTR Format$[rsp+8]
; Line 25
	mov	rbx, -1
	npad	4
$LL37@FormatA:
	cmp	BYTE PTR [rcx+rbx+1], 0
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL37@FormatA
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 7
	lea	eax, DWORD PTR [rbx+257]
	movsxd	rcx, eax
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], rcx
	xor	ecx, ecx
	mov	QWORD PTR [rsp+32], 0
	lea	edx, QWORD PTR [r9+1]
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 8
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rdi, rax
; File W:\cpp\void\dr\text.c
; Line 8
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1491
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], r14
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
; File W:\cpp\void\dr\text.c
; Line 27
	mov	rax, rdi
; Line 28
	add	rsp, 56					; 00000038H
	pop	r14
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
?FormatA@@YAPEADPEBDZZ ENDP				; FormatA
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z
_TEXT	SEGMENT
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z PROC		; FormatExtendedW, COMDAT
; File W:\cpp\void\dr\text.c
; Line 15
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	lea	eax, DWORD PTR [rcx+257]
	mov	r14, r9
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 15
	movsxd	r10, eax
	add	r10, r10
	mov	rdi, r8
	mov	rsi, rdx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], r10
; File W:\cpp\void\dr\text.c
; Line 15
	mov	ebx, ecx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+32], 0
	lea	edx, QWORD PTR [r9+1]
	xor	ecx, ecx
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 16
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rbp, rax
; File W:\cpp\void\dr\text.c
; Line 16
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rdi
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vswprintf
; File W:\cpp\void\dr\text.c
; Line 17
	test	r14, r14
	je	SHORT $LN35@FormatExte
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1066
	test	eax, eax
	mov	ecx, -1
	cmovs	eax, ecx
; File W:\cpp\void\dr\text.c
; Line 17
	mov	DWORD PTR [r14], eax
$LN35@FormatExte:
; Line 19
	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?FormatExtendedW@@YAPEA_WHPEB_WPEADPEAH@Z ENDP		; FormatExtendedW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z
_TEXT	SEGMENT
FormatLen$ = 64
FormatStr$ = 72
Args$ = 80
Len$ = 88
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z PROC		; FormatExtendedA, COMDAT
; File W:\cpp\void\dr\text.c
; Line 7
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 48					; 00000030H
	lea	eax, DWORD PTR [rcx+257]
	mov	r14, r9
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 7
	movsxd	r10, eax
	mov	rdi, r8
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], r10
; File W:\cpp\void\dr\text.c
; Line 7
	mov	rsi, rdx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+32], 0
; File W:\cpp\void\dr\text.c
; Line 7
	mov	ebx, ecx
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	ecx, ecx
	lea	edx, QWORD PTR [r9+1]
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 8
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rbp, rax
; File W:\cpp\void\dr\text.c
; Line 8
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1491
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rdi
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
; File W:\cpp\void\dr\text.c
; Line 9
	test	r14, r14
	je	SHORT $LN35@FormatExte
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1495
	test	eax, eax
	mov	ecx, -1
	cmovs	eax, ecx
; File W:\cpp\void\dr\text.c
; Line 9
	mov	DWORD PTR [r14], eax
$LN35@FormatExte:
; Line 11
	mov	rbx, QWORD PTR [rsp+64]
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	mov	rdi, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	r14
	ret	0
?FormatExtendedA@@YAPEADHPEBDPEADPEAH@Z ENDP		; FormatExtendedA
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
$T5 = 48
$T6 = 48
Location$ = 160
Expression$ = 168
IsTrue$ = 176
Message$ = 184
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ PROC	; AssertExtendedW, COMDAT
; File W:\cpp\void\dr\break.c
; Line 8
	mov	rax, rsp
	mov	QWORD PTR [rax+32], r9
	push	rsi
	push	r14
	push	r15
	sub	rsp, 128				; 00000080H
	mov	rsi, r9
	mov	r15, rdx
	mov	r14, rcx
; Line 9
	test	r8d, r8d
	jne	$LN2@AssertExte
; Line 12
	mov	QWORD PTR [rax-32], rbx
; Line 14
	mov	rbx, -1
	mov	QWORD PTR [rax-40], rbp
	mov	QWORD PTR [rax-48], rdi
	mov	QWORD PTR [rax-56], r12
	mov	QWORD PTR [rax-64], r13
	lea	r13, QWORD PTR [rax+40]
	npad	12
$LL44@AssertExte:
	cmp	WORD PTR [r9+rbx*2+2], 0
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL44@AssertExte
; File W:\cpp\void\dr\text.c
; Line 15
	lea	eax, DWORD PTR [rbx+257]
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r12d, r12d
; File W:\cpp\void\dr\text.c
; Line 15
	movsxd	rcx, eax
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	ebp, 1
; File W:\cpp\void\dr\text.c
; Line 15
	add	rcx, rcx
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
	mov	QWORD PTR [rsp+40], rcx
	mov	edx, ebp
	xor	ecx, ecx
	mov	QWORD PTR [rsp+32], r12
	lea	r8d, QWORD PTR [r12+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 16
	lea	ecx, DWORD PTR [rbx+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	rdi, rax
; File W:\cpp\void\dr\text.c
; Line 16
	movsxd	rbx, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], r13
	mov	r9, rsi
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], r12
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	or	rcx, rbp
	call	__stdio_common_vswprintf
; File W:\cpp\void\dr\break.c
; Line 14
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	mov	r9, rdi
	lea	r8, OFFSET FLAT:??_C@_15GANGMFKL@?$AA?$CF?$AAs@
	lea	edx, QWORD PTR [rbp+6]
	lea	rcx, QWORD PTR $T6[rsp]
	vmovups	XMMWORD PTR $T6[rsp], xmm0
	vmovsd	QWORD PTR $T6[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 18
	vmovups	xmm1, XMMWORD PTR [r14]
	vmovsd	xmm0, QWORD PTR [r14+16]
	vmovsd	QWORD PTR $T5[rsp+16], xmm0
; File W:\cpp\void\dr\plat-win32.c
; Line 89
	mov	rcx, QWORD PTR $T5[rsp+16]
	mov	rax, rcx
	mov	QWORD PTR [rsp+40], r15
	shr	rax, 32					; 00000020H
	mov	r8d, ecx
	vpextrq	r9, xmm1, 1
	vmovq	rdx, xmm1
	lea	rcx, OFFSET FLAT:??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@
	mov	DWORD PTR [rsp+32], eax
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
; Line 92
	lea	r9d, QWORD PTR [r12+16]
	mov	rdx, rax
	lea	r8, OFFSET FLAT:??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@
	xor	ecx, ecx
	mov	rbx, rax
	call	QWORD PTR __imp_MessageBoxA
; Line 94
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@
	mov	edx, ebp
	lea	rcx, QWORD PTR $T2[rsp]
	vmovups	XMMWORD PTR $T2[rsp], xmm0
	vmovsd	QWORD PTR $T2[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 95
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	edx, ebp
	lea	rcx, QWORD PTR $T1[rsp]
	vmovups	XMMWORD PTR $T1[rsp], xmm0
	vmovsd	QWORD PTR $T1[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 96
	mov	rdx, rbx
	lea	ecx, QWORD PTR [rbp-2]
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	mov	r9, rax
	lea	r8, OFFSET FLAT:??_C@_15GANGMFKL@?$AA?$CF?$AAs@
	mov	edx, ebp
	lea	rcx, QWORD PTR $T4[rsp]
	vmovups	XMMWORD PTR $T4[rsp], xmm0
	vmovsd	QWORD PTR $T4[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 97
	vmovups	xmm0, XMMWORD PTR [r14]
	vmovsd	xmm1, QWORD PTR [r14+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	edx, ebp
	lea	rcx, QWORD PTR $T3[rsp]
	vmovsd	QWORD PTR $T3[rsp+16], xmm1
	vmovups	XMMWORD PTR $T3[rsp], xmm0
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 99
	lea	r9d, QWORD PTR [r12+18]
	xor	ecx, ecx
	lea	r8, OFFSET FLAT:??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@
	lea	rdx, OFFSET FLAT:??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@
	call	QWORD PTR __imp_MessageBoxA
	mov	r13, QWORD PTR [rsp+88]
	mov	rdi, QWORD PTR [rsp+104]
	mov	rbx, QWORD PTR [rsp+120]
; Line 103
	cmp	eax, 3
	jne	SHORT $LN29@AssertExte
; Line 104
	mov	ecx, 777				; 00000309H
	call	QWORD PTR __imp_ExitProcess
	int	3
$LN29@AssertExte:
; Line 106
	cmp	eax, 4
	jne	SHORT $LN31@AssertExte
; Line 110
	call	QWORD PTR __imp_DebugBreak
; Line 111
	jmp	SHORT $LN33@AssertExte
$LN31@AssertExte:
; Line 112
	cmp	eax, 5
	cmove	ebp, r12d
$LN33@AssertExte:
	mov	r12, QWORD PTR [rsp+96]
; File W:\cpp\void\dr\break.c
; Line 18
	mov	eax, ebp
	mov	rbp, QWORD PTR [rsp+112]
; Line 22
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
$LN2@AssertExte:
; Line 21
	xor	eax, eax
; Line 22
	add	rsp, 128				; 00000080H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
$LN47@AssertExte:
?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ENDP	; AssertExtendedW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?LoadFileData@@YAPEAXPEAIPEBD@Z
_TEXT	SEGMENT
$T1 = 64
$T2 = 64
$T3 = 96
$T4 = 96
BytesRead$ = 176
Name$ = 184
FileRead$5 = 192
FileSizeHI$6 = 200
?LoadFileData@@YAPEAXPEAIPEBD@Z PROC			; LoadFileData, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 530
	push	rsi
	push	rdi
	push	r14
	push	r15
	sub	rsp, 136				; 00000088H
; Line 531
	xor	r15d, r15d
	mov	r14, rdx
	mov	rsi, rcx
	mov	QWORD PTR [rsp+48], r15
	mov	DWORD PTR [rsp+40], r15d
	xor	r9d, r9d
	mov	edx, -2147483648			; 80000000H
	mov	DWORD PTR [rsp+32], 3
	lea	r8d, QWORD PTR [r15+3]
	mov	rcx, r14
	call	QWORD PTR __imp_CreateFileA
	mov	rdi, rax
; Line 536
	cmp	rax, -1
	je	$LN2@LoadFileDa
; Line 537
	mov	QWORD PTR [rsp+176], rbx
; Line 538
	lea	rdx, QWORD PTR FileSizeHI$6[rsp]
	mov	rcx, rax
	mov	QWORD PTR [rsp+128], rbp
	mov	DWORD PTR FileSizeHI$6[rsp], r15d
	mov	DWORD PTR FileRead$5[rsp], r15d
	call	QWORD PTR __imp_GetFileSize
; Line 542
	mov	edx, eax
	xor	ecx, ecx
	lea	r9d, QWORD PTR [r15+4]
	mov	ebx, eax
	mov	r8d, 12288				; 00003000H
	call	QWORD PTR __imp_VirtualAlloc
; Line 544
	lea	r9, QWORD PTR FileRead$5[rsp]
	mov	QWORD PTR [rsp+32], r15
	mov	rdx, rax
	mov	r8d, ebx
	mov	rcx, rdi
	mov	rbp, rax
	call	QWORD PTR __imp_ReadFile
	mov	rbx, QWORD PTR [rsp+176]
	test	eax, eax
	jne	SHORT $LN4@LoadFileDa
; Line 525
	xor	edx, edx
	mov	r8d, 32768				; 00008000H
	mov	rcx, rbp
	call	QWORD PTR __imp_VirtualFree
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rax, OFFSET FLAT:??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@
	mov	DWORD PTR $T2[rsp+16], 548		; 00000224H
	mov	QWORD PTR $T2[rsp], rax
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	lea	ecx, QWORD PTR [r15-1]
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rax, OFFSET FLAT:??_C@_0N@LDNIACEG@LoadFileData@
	mov	DWORD PTR $T2[rsp+20], 16
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	rdx, r14
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T2[rsp+8], rax
; File W:\cpp\void\dr\plat-win32.c
; Line 546
	mov	ebp, r15d
; Line 515
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 548
	vmovups	xmm0, XMMWORD PTR $T2[rsp]
	vmovsd	xmm1, QWORD PTR $T2[rsp+16]
	mov	r9, rax
	lea	r8, OFFSET FLAT:??_C@_1DC@NCJOBAHH@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAR?$AAe?$AAa?$AAd?$AA?5@
	lea	edx, QWORD PTR [r15+6]
	lea	rcx, QWORD PTR $T4[rsp]
	vmovups	XMMWORD PTR $T4[rsp], xmm0
	vmovsd	QWORD PTR $T4[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
$LN4@LoadFileDa:
; Line 551
	test	rsi, rsi
	je	SHORT $LN5@LoadFileDa
; Line 552
	mov	eax, DWORD PTR FileRead$5[rsp]
	mov	DWORD PTR [rsi], eax
$LN5@LoadFileDa:
; Line 554
	mov	rcx, rdi
	call	QWORD PTR __imp_CloseHandle
; Line 559
	mov	rax, rbp
	mov	rbp, QWORD PTR [rsp+128]
; Line 560
	add	rsp, 136				; 00000088H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN2@LoadFileDa:
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rax, OFFSET FLAT:??_C@_0BM@OLIADPDK@W?3?2cpp?2void?2dr?1plat?9win32?4c@
	mov	DWORD PTR $T1[rsp+16], 557		; 0000022dH
	mov	QWORD PTR $T1[rsp], rax
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	rdx, r14
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rax, OFFSET FLAT:??_C@_0N@LDNIACEG@LoadFileData@
	mov	DWORD PTR $T1[rsp+20], 17
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	mov	ecx, -1
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T1[rsp+8], rax
; File W:\cpp\void\dr\plat-win32.c
; Line 515
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 557
	vmovups	xmm0, XMMWORD PTR $T1[rsp]
	vmovsd	xmm1, QWORD PTR $T1[rsp+16]
	mov	r9, rax
	lea	r8, OFFSET FLAT:??_C@_1DC@BNICGKJG@?$AAF?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?5?$AAT?$AAo?$AA?5?$AAL?$AAo?$AAa?$AAd?$AA?5@
	mov	edx, 6
	lea	rcx, QWORD PTR $T3[rsp]
	vmovups	XMMWORD PTR $T3[rsp], xmm0
	vmovsd	QWORD PTR $T3[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 559
	mov	rax, r15
; Line 560
	add	rsp, 136				; 00000088H
	pop	r15
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
?LoadFileData@@YAPEAXPEAIPEBD@Z ENDP			; LoadFileData
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?UnloadFileData@@YAXPEAX@Z
_TEXT	SEGMENT
FileData$ = 8
?UnloadFileData@@YAXPEAX@Z PROC				; UnloadFileData, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 525
	xor	edx, edx
	mov	r8d, 32768				; 00008000H
	rex_jmp	QWORD PTR __imp_VirtualFree
?UnloadFileData@@YAXPEAX@Z ENDP				; UnloadFileData
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z
_TEXT	SEGMENT
$T1 = 48
$T2 = 48
$T3 = 48
$T4 = 48
Location$ = 96
Expression$ = 104
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z PROC	; DebugBreakExtended, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 87
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 80					; 00000050H
; Line 89
	mov	eax, DWORD PTR [rcx+20]
	mov	rdi, rcx
	mov	r9, QWORD PTR [rcx+8]
	mov	esi, 1
	mov	r8d, DWORD PTR [rcx+16]
	mov	QWORD PTR [rsp+40], rdx
	mov	rdx, QWORD PTR [rcx]
	lea	rcx, OFFSET FLAT:??_C@_0BE@PBOCHOIM@?$CFs?0?5?$CFi?5?$CFs?$CI?$CJ?5?$FL?$CFi?$FN?5?$CFs@
	mov	DWORD PTR [rsp+32], eax
	call	?FormatA@@YAPEADPEBDZZ			; FormatA
; Line 92
	lea	r9d, QWORD PTR [rsi+15]
	mov	rdx, rax
	lea	r8, OFFSET FLAT:??_C@_0BG@CIEEAKDM@Break?5Handler?5Invoked@
	xor	ecx, ecx
	mov	rbx, rax
	call	QWORD PTR __imp_MessageBoxA
; Line 94
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovsd	xmm1, QWORD PTR [rdi+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@PECFLPJH@?$AAB?$AAr?$AAe?$AAa?$AAk?$AA?5?$AAH?$AAa?$AAn?$AAd?$AAl?$AAe?$AAr?$AA?5?$AAI@
	mov	edx, esi
	lea	rcx, QWORD PTR $T4[rsp]
	vmovups	XMMWORD PTR $T4[rsp], xmm0
	vmovsd	QWORD PTR $T4[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 95
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovsd	xmm1, QWORD PTR [rdi+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	edx, esi
	lea	rcx, QWORD PTR $T3[rsp]
	vmovups	XMMWORD PTR $T3[rsp], xmm0
	vmovsd	QWORD PTR $T3[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 96
	mov	rdx, rbx
	lea	ecx, QWORD PTR [rsi-2]
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovsd	xmm1, QWORD PTR [rdi+16]
	mov	r9, rax
	lea	r8, OFFSET FLAT:??_C@_15GANGMFKL@?$AA?$CF?$AAs@
	mov	edx, esi
	lea	rcx, QWORD PTR $T2[rsp]
	vmovups	XMMWORD PTR $T2[rsp], xmm0
	vmovsd	QWORD PTR $T2[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 97
	vmovups	xmm0, XMMWORD PTR [rdi]
	vmovsd	xmm1, QWORD PTR [rdi+16]
	lea	r8, OFFSET FLAT:??_C@_1CM@DGNIFEPH@?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK?$AA?$CK@
	mov	edx, esi
	lea	rcx, QWORD PTR $T1[rsp]
	vmovups	XMMWORD PTR $T1[rsp], xmm0
	vmovsd	QWORD PTR $T1[rsp+16], xmm1
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 99
	lea	r9d, QWORD PTR [rsi+17]
	xor	ecx, ecx
	lea	r8, OFFSET FLAT:??_C@_0BD@EPEJOPLH@Choose?5Your?5Poison@
	lea	rdx, OFFSET FLAT:??_C@_0EE@CDJJKPKB@Would?5You?5Like?5To?5Exit?5?$CIAbort?$CJ?0@
	call	QWORD PTR __imp_MessageBoxA
; Line 103
	cmp	eax, 3
	jne	SHORT $LN2@DebugBreak
; Line 104
	mov	ecx, 777				; 00000309H
	call	QWORD PTR __imp_ExitProcess
	int	3
$LN2@DebugBreak:
; Line 106
	cmp	eax, 4
	jne	SHORT $LN4@DebugBreak
; Line 110
	call	QWORD PTR __imp_DebugBreak
; Line 116
	mov	eax, esi
; Line 117
	mov	rbx, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN4@DebugBreak:
	mov	rbx, QWORD PTR [rsp+96]
	xor	ecx, ecx
	cmp	eax, 5
	cmove	esi, ecx
	mov	eax, esi
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN16@DebugBreak:
?DebugBreakExtended@@YAHUTRACE_LOCATION@@PEBD@Z ENDP	; DebugBreakExtended
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?OutputW@@YAXPEB_W@Z
_TEXT	SEGMENT
Text$ = 64
Wrote$ = 72
?OutputW@@YAXPEB_W@Z PROC				; OutputW, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 43
	push	rbx
	sub	rsp, 48					; 00000030H
	mov	rbx, rcx
	call	QWORD PTR __imp_OutputDebugStringW
; Line 46
	mov	r8, -1
	npad	10
$LL4@OutputW:
	inc	r8
	cmp	WORD PTR [rbx+r8*2], 0
	jne	SHORT $LL4@OutputW
	mov	rcx, QWORD PTR ?PROCESS@@3U_PROCESS@@A+96
	lea	r9, QWORD PTR Wrote$[rsp]
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], 0
	call	QWORD PTR __imp_WriteConsoleW
	test	eax, eax
	jne	SHORT $LN2@OutputW
; Line 48
	lea	rcx, OFFSET FLAT:??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@
	call	printf
$LN2@OutputW:
; Line 50
	add	rsp, 48					; 00000030H
	pop	rbx
	ret	0
?OutputW@@YAXPEB_W@Z ENDP				; OutputW
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?Widen@@YAPEA_WHPEBD@Z
_TEXT	SEGMENT
Len$ = 64
Str$ = 72
?Widen@@YAPEA_WHPEBD@Z PROC				; Widen, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 64
	mov	QWORD PTR [rsp+32], rbx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rdx
	mov	ebx, ecx
; Line 65
	test	rdx, rdx
	jne	SHORT $LN2@Widen
; Line 66
	xor	eax, eax
; Line 83
	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN2@Widen:
	mov	QWORD PTR [rsp+64], rbp
	mov	QWORD PTR [rsp+72], rsi
; Line 70
	xor	esi, esi
	mov	QWORD PTR [rsp+80], r14
; Line 72
	cmp	ecx, -1
	jne	SHORT $LN3@Widen
	mov	rbx, -1
	npad	2
$LL7@Widen:
	inc	rbx
	cmp	BYTE PTR [rdx+rbx], sil
	jne	SHORT $LL7@Widen
$LN3@Widen:
; Line 76
	mov	r14d, 65001				; 0000fde9H
	mov	DWORD PTR [rsp+40], esi
	mov	ecx, r14d
	mov	QWORD PTR [rsp+32], rsi
	mov	r9d, ebx
	mov	r8, rdi
	mov	edx, 8
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	ebp, eax
	test	eax, eax
	jne	SHORT $LN5@Widen
	mov	DWORD PTR [rsp+40], esi
	lea	edx, QWORD PTR [rax+8]
	mov	r9d, ebx
	mov	QWORD PTR [rsp+32], rsi
	mov	r8, rdi
	xor	ecx, ecx
	mov	r14d, esi
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	ebp, eax
	test	eax, eax
	jne	SHORT $LN5@Widen
	lea	r14d, QWORD PTR [rax+2]
	mov	DWORD PTR [rsp+40], esi
	mov	ecx, r14d
	mov	QWORD PTR [rsp+32], rsi
	mov	r9d, ebx
	lea	edx, QWORD PTR [rax+8]
	mov	r8, rdi
	call	QWORD PTR __imp_MultiByteToWideChar
	mov	ebp, eax
	test	eax, eax
	je	SHORT $LN4@Widen
$LN5@Widen:
; Line 79
	lea	eax, DWORD PTR [rbp+1]
	mov	ecx, 1
	movsxd	rdx, eax
	add	rdx, rdx
	call	?StaticAlloc@@YAPEAXH_K@Z		; StaticAlloc
; Line 80
	mov	r9d, ebx
	mov	DWORD PTR [rsp+40], ebp
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], rax
	mov	edx, 8
	mov	ecx, r14d
	mov	rsi, rax
	call	QWORD PTR __imp_MultiByteToWideChar
$LN4@Widen:
; Line 82
	mov	r14, QWORD PTR [rsp+80]
	mov	rax, rsi
	mov	rsi, QWORD PTR [rsp+72]
	mov	rbp, QWORD PTR [rsp+64]
; Line 83
	mov	rbx, QWORD PTR [rsp+88]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
?Widen@@YAPEA_WHPEBD@Z ENDP				; Widen
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?GetPerformanceCounter@@YA_KXZ
_TEXT	SEGMENT
Result$ = 48
?GetPerformanceCounter@@YA_KXZ PROC			; GetPerformanceCounter, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 31
	sub	rsp, 40					; 00000028H
; Line 32
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 33
	mov	rax, QWORD PTR Result$[rsp]
; Line 34
	add	rsp, 40					; 00000028H
	ret	0
?GetPerformanceCounter@@YA_KXZ ENDP			; GetPerformanceCounter
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?GetPerformanceFrequency@@YA_KXZ
_TEXT	SEGMENT
Result$ = 48
?GetPerformanceFrequency@@YA_KXZ PROC			; GetPerformanceFrequency, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 24
	sub	rsp, 40					; 00000028H
; Line 25
	lea	rcx, QWORD PTR Result$[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; Line 26
	mov	rax, QWORD PTR Result$[rsp]
; Line 27
	add	rsp, 40					; 00000028H
	ret	0
?GetPerformanceFrequency@@YA_KXZ ENDP			; GetPerformanceFrequency
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?GetThreadID@@YAHXZ
_TEXT	SEGMENT
?GetThreadID@@YAHXZ PROC				; GetThreadID, COMDAT
; File W:\cpp\void\dr\plat-win32.c
; Line 38
	rex_jmp	QWORD PTR __imp_GetCurrentThreadId
?GetThreadID@@YAHXZ ENDP				; GetThreadID
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?MAIN@@YAXXZ
_TEXT	SEGMENT
$T56 = 64
$T57 = 64
$T58 = 64
$T59 = 64
$T60 = 64
$T61 = 64
img_num$1$ = 96
prd_val$62 = 96
img_col_len$1$ = 100
img_row_len$1$ = 104
$T63 = 112
mem$1$ = 112
labels_file_data$1$ = 120
images_file_data$1$ = 128
$T64 = 144
inp$ = 144
images_file_size$ = 164
Result$65 = 168
Result$66 = 176
Result$67 = 184
__traceblock__56$55 = 192
$T68 = 192
$T69 = 240
$T70 = 272
$T71 = 304
$T72 = 336
$T73 = 368
$T74 = 400
$T75 = 432
$T76 = 464
$T77 = 496
$T78 = 528
$T79 = 560
$T80 = 592
$T81 = 624
$T82 = 656
$T83 = 688
$T84 = 720
$T85 = 752
$T86 = 784
$T87 = 816
$T88 = 848
$T89 = 880
$T90 = 912
$T91 = 944
net$ = 976
$T92 = 1280
$T93 = 1424
valid_output_vectors$ = 1568
__$ArrayPad$ = 1728
?MAIN@@YAXXZ PROC					; MAIN, COMDAT
; File W:\cpp\void\dr-ai\num-ai.c
; Line 336
	mov	r11, rsp
	sub	rsp, 1848				; 00000738H
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax
	mov	QWORD PTR [r11+8], rbx
; Line 337
	lea	rdx, OFFSET FLAT:??_C@_0BN@EEIDJDDN@data?2train?9labels?4idx1?9ubyte@
	mov	QWORD PTR [r11+16], rsi
	lea	rcx, QWORD PTR [r11-1688]
	mov	QWORD PTR [r11+24], rdi
	mov	QWORD PTR [r11+32], r12
	mov	QWORD PTR [r11-8], r13
	mov	QWORD PTR [r11-16], r14
	mov	QWORD PTR [r11-24], r15
	vmovaps	XMMWORD PTR [r11-40], xmm6
	vmovaps	XMMWORD PTR [r11-56], xmm7
	vmovaps	XMMWORD PTR [r11-72], xmm8
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
; Line 341
	lea	rdx, OFFSET FLAT:??_C@_0BN@FIFMGHNF@data?2train?9images?4idx3?9ubyte@
	mov	QWORD PTR labels_file_data$1$[rsp], rax
	lea	rcx, QWORD PTR images_file_size$[rsp]
	call	?LoadFileData@@YAPEAXPEAIPEBD@Z		; LoadFileData
	mov	rcx, rax
	mov	QWORD PTR images_file_data$1$[rsp], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 342
	mov	eax, DWORD PTR [rax+4]
; File W:\cpp\void\dr-ai\num-ai.h
; Line 84
	bswap	eax
	mov	DWORD PTR img_num$1$[rsp], eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 343
	mov	eax, DWORD PTR [rcx+8]
; File W:\cpp\void\dr-ai\num-ai.h
; Line 84
	bswap	eax
	mov	DWORD PTR img_row_len$1$[rsp], eax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 344
	mov	eax, DWORD PTR [rcx+12]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	ecx, edx
; File W:\cpp\void\dr-ai\num-ai.h
; Line 84
	bswap	eax
	mov	DWORD PTR img_col_len$1$[rsp], eax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
; Line 151
	xor	edi, edi
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	mov	rbx, rax
; Line 151
	mov	QWORD PTR [rax+8], rdi
	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], rdi
; Line 163
	mov	DWORD PTR [rax], 1065353216		; 3f800000H
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	r14, OFFSET FLAT:??_C@_08KGMLKAKE@num?9ai?4c@
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 209
	mov	ecx, edi
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	r15, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 151
	mov	QWORD PTR [rax+8], rdi
	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], rdi
; Line 163
	mov	DWORD PTR [rax], 1065353216		; 3f800000H
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 337
	sub	rax, rbx
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T61[rsp], r14
	mov	QWORD PTR $T61[rsp+8], r15
	mov	DWORD PTR $T61[rsp+16], 347		; 0000015bH
	mov	DWORD PTR $T61[rsp+20], 47		; 0000002fH
	npad	8
$LL47@MAIN:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 210
	vmovss	xmm0, DWORD PTR [rax+rbx]
	vucomiss xmm0, DWORD PTR [rbx]
	mov	esi, 1
	jp	SHORT $LN419@MAIN
	jne	SHORT $LN419@MAIN
; Line 209
	inc	ecx
	add	rbx, 4
	cmp	ecx, 2
	jl	SHORT $LL47@MAIN
; Line 212
	mov	r8d, esi
	jmp	SHORT $LN44@MAIN
$LN419@MAIN:
; Line 211
	mov	r8d, edi
$LN44@MAIN:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 347
	vmovups	xmm0, XMMWORD PTR $T61[rsp]
	vmovsd	xmm1, QWORD PTR $T61[rsp+16]
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rdx, OFFSET FLAT:??_C@_0CL@HGLGICOI@?$CB?$CB?5vec_eql?$CInew_vec2?$CI1?0?51?$CJ?0?5new_@
	lea	rcx, QWORD PTR $T91[rsp]
	vmovups	XMMWORD PTR $T91[rsp], xmm0
	vmovsd	QWORD PTR $T91[rsp+16], xmm1
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rbx, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], rdi
	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], rdi
; Line 163
	mov	DWORD PTR [rax], 1065353216		; 3f800000H
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
; Line 209
	mov	ecx, edi
; Line 151
	mov	QWORD PTR [rax+8], rdi
	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], rdi
; Line 163
	mov	QWORD PTR [rax], 1065353216		; 3f800000H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 347
	sub	rax, rbx
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T60[rsp], r14
	mov	QWORD PTR $T60[rsp+8], r15
	mov	DWORD PTR $T60[rsp+16], 348		; 0000015cH
	mov	DWORD PTR $T60[rsp+20], 48		; 00000030H
$LL68@MAIN:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 210
	vmovss	xmm0, DWORD PTR [rax+rbx]
	vucomiss xmm0, DWORD PTR [rbx]
	jp	SHORT $LN420@MAIN
	jne	SHORT $LN420@MAIN
; Line 209
	inc	ecx
	add	rbx, 4
	cmp	ecx, 2
	jl	SHORT $LL68@MAIN
; Line 212
	mov	r8d, edi
	jmp	SHORT $LN65@MAIN
$LN420@MAIN:
; Line 211
	mov	r8d, esi
$LN65@MAIN:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 348
	vmovups	xmm0, XMMWORD PTR $T60[rsp]
	vmovsd	xmm1, QWORD PTR $T60[rsp+16]
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rdx, OFFSET FLAT:??_C@_0CK@MHGHDOLC@?$CB?5vec_eql?$CInew_vec2?$CI1?0?50?$CJ?0?5new_v@
	lea	rcx, QWORD PTR $T86[rsp]
	vmovups	XMMWORD PTR $T86[rsp], xmm0
	vmovsd	QWORD PTR $T86[rsp+16], xmm1
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 406
	mov	r9d, 2
	mov	DWORD PTR $T68[rsp+8], 2
	lea	rax, OFFSET FLAT:??_C@_08ENKIOJLC@new_mat_@
	mov	DWORD PTR $T68[rsp+12], 8
	lea	r14, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	QWORD PTR $T85[rsp+8], rax
	lea	r8, OFFSET FLAT:??_C@_1EK@LHFKDKMH@?$AAm?$AAe?$AAm?$AA?5?$AAv?$AAe?$AAc?$AA?5?$AAs?$AAz?$AAe?$AA?5?$AA?$CF?$AAi?$AA?1@
	mov	QWORD PTR $T85[rsp], r14
	lea	edx, QWORD PTR [r9+2]
	mov	DWORD PTR $T85[rsp+16], 406		; 00000196H
	lea	rcx, QWORD PTR $T85[rsp]
	mov	DWORD PTR $T85[rsp+20], 46		; 0000002eH
	mov	DWORD PTR [rsp+32], 8
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 409
	mov	edx, 32					; 00000020H
	lea	ecx, QWORD PTR [rdx+32]
	call	_aligned_malloc
	vpxor	xmm0, xmm0, xmm0
; Line 85
	lea	rbx, OFFSET FLAT:??_C@_0M@HIENKLDG@operator?5?$FL?$FN@
	mov	QWORD PTR $T69[rsp], r14
; Line 409
	mov	r15, rax
; Line 85
	mov	QWORD PTR $T69[rsp+8], rbx
; Line 410
	vmovups	YMMWORD PTR [rax], ymm0
	vmovups	YMMWORD PTR [rax+32], ymm0
; Line 85
	mov	DWORD PTR $T69[rsp+16], 85		; 00000055H
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T69[rsp+20], 41		; 00000029H
	lea	rdx, OFFSET FLAT:??_C@_09EHENKKKI@idx?5?$DM?5min@
	mov	r8d, esi
	lea	rcx, QWORD PTR $T69[rsp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 352
	mov	DWORD PTR [r15], 1065353216		; 3f800000H
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 85
	mov	r8d, esi
	mov	QWORD PTR $T70[rsp], r14
	lea	rdx, OFFSET FLAT:??_C@_09EHENKKKI@idx?5?$DM?5min@
	mov	QWORD PTR $T70[rsp+8], rbx
	lea	rcx, QWORD PTR $T70[rsp]
	mov	DWORD PTR $T70[rsp+16], 85		; 00000055H
	mov	DWORD PTR $T70[rsp+20], 41		; 00000029H
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 352
	mov	DWORD PTR [r15+4], 1073741824		; 40000000H
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 85
	mov	r8d, esi
	mov	QWORD PTR $T71[rsp], r14
	lea	rdx, OFFSET FLAT:??_C@_09EHENKKKI@idx?5?$DM?5min@
	mov	QWORD PTR $T71[rsp+8], rbx
	lea	rcx, QWORD PTR $T71[rsp]
	mov	DWORD PTR $T71[rsp+16], 85		; 00000055H
	mov	DWORD PTR $T71[rsp+20], 41		; 00000029H
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; File W:\cpp\void\dr-ai\num-ai.c
; Line 353
	mov	DWORD PTR [r15+32], 1077936128		; 40400000H
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 85
	mov	r8d, esi
	mov	QWORD PTR $T72[rsp], r14
	lea	rdx, OFFSET FLAT:??_C@_09EHENKKKI@idx?5?$DM?5min@
	mov	QWORD PTR $T72[rsp+8], rbx
	lea	rcx, QWORD PTR $T72[rsp]
	mov	DWORD PTR $T72[rsp+16], 85		; 00000055H
	mov	DWORD PTR $T72[rsp+20], 41		; 00000029H
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 150
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 353
	mov	DWORD PTR [r15+36], 1082130432		; 40800000H
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	ecx, edx
	call	_aligned_malloc
	mov	r12, rax
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+8], rdi
	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], rdi
; Line 163
	mov	DWORD PTR [rax], 1065353216		; 3f800000H
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	mov	ecx, edx
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], rdi
	mov	QWORD PTR [rax+16], rdi
	mov	QWORD PTR [rax+24], rdi
; Line 163
	mov	DWORD PTR [rax], 1065353216		; 3f800000H
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
	mov	r13, QWORD PTR $T68[rsp+8]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 348
	lea	rbx, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	vpxor	xmm0, xmm0, xmm0
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	QWORD PTR mem$1$[rsp], rax
; File W:\cpp\void\dr-ai\num-ai.c
; Line 348
	mov	r14, rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 151
	vmovups	YMMWORD PTR [rax], ymm0
; File W:\cpp\void\dr-ai\num-ai.c
; Line 348
	lea	rax, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	shr	r13, 32					; 00000020H
	npad	10
$LL119@MAIN:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 352
	mov	QWORD PTR $T73[rsp], rbx
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	QWORD PTR $T73[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	DWORD PTR $T73[rsp+16], 352		; 00000160H
	lea	rcx, QWORD PTR $T73[rsp]
	mov	DWORD PTR $T73[rsp+20], 45		; 0000002dH
	mov	r8d, esi
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 388
	mov	eax, edi
; Line 432
	lea	r14, QWORD PTR [r14+4]
; Line 388
	imul	eax, r13d
; Line 432
	inc	edi
	vpxor	xmm4, xmm4, xmm4
; Line 388
	movsxd	rcx, eax
; Line 432
	lea	rax, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
; Line 359
	vmovups	ymm0, YMMWORD PTR [r15+rcx*4]
	vfmadd231ps ymm4, ymm0, YMMWORD PTR [r12]
; Line 362
	vshufps	xmm0, xmm4, xmm4, 85			; 00000055H
	vaddss	xmm2, xmm4, xmm0
	vshufps	xmm1, xmm4, xmm4, 170			; 000000aaH
	vaddss	xmm3, xmm2, xmm1
	vshufps	xmm0, xmm4, xmm4, 255			; 000000ffH
	vaddss	xmm1, xmm3, xmm0
	vextractf128 xmm0, ymm4, 1
	vaddss	xmm3, xmm1, xmm0
	vextractf128 xmm2, ymm4, 1
	vshufps	xmm2, xmm2, xmm2, 85			; 00000055H
	vaddss	xmm1, xmm3, xmm2
	vextractf128 xmm0, ymm4, 1
	vshufps	xmm0, xmm0, xmm0, 170			; 000000aaH
	vaddss	xmm2, xmm1, xmm0
	vextractf128 xmm1, ymm4, 1
	vshufps	xmm1, xmm1, xmm1, 255			; 000000ffH
	vaddss	xmm0, xmm2, xmm1
; Line 433
	vmovss	DWORD PTR [r14-4], xmm0
	cmp	edi, 2
	jl	$LL119@MAIN
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	vzeroupper
	call	_aligned_malloc
; Line 209
	mov	rbx, QWORD PTR mem$1$[rsp]
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rcx, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 151
	xor	r12d, r12d
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	r13, OFFSET FLAT:??_C@_08KGMLKAKE@num?9ai?4c@
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	DWORD PTR [rax], 1077936128		; 40400000H
	mov	DWORD PTR [rax+4], 1088421888		; 40e00000H
; Line 209
	sub	rax, rbx
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T59[rsp+8], rcx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 209
	mov	ecx, r12d
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T59[rsp], r13
	mov	DWORD PTR $T59[rsp+16], 358		; 00000166H
	mov	DWORD PTR $T59[rsp+20], 49		; 00000031H
	npad	4
$LL141@MAIN:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 210
	vmovss	xmm0, DWORD PTR [rax+rbx]
	vucomiss xmm0, DWORD PTR [rbx]
	jp	SHORT $LN421@MAIN
	jne	SHORT $LN421@MAIN
; Line 209
	inc	ecx
	add	rbx, 4
	cmp	ecx, 2
	jl	SHORT $LL141@MAIN
; Line 212
	mov	r8d, esi
	jmp	SHORT $LN138@MAIN
$LN421@MAIN:
; Line 211
	mov	r8d, r12d
$LN138@MAIN:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 355
	vmovups	xmm0, XMMWORD PTR $T59[rsp]
	vmovsd	xmm1, QWORD PTR $T59[rsp+16]
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rdx, OFFSET FLAT:??_C@_0FM@JNEJAHIP@vec_eql?$CI?5new_vec2?$CI3?4f?07?4f?$CJ?0?5mat@
	lea	rcx, QWORD PTR $T87[rsp]
	vmovups	XMMWORD PTR $T87[rsp], xmm0
	vmovsd	QWORD PTR $T87[rsp+16], xmm1
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rdi, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	QWORD PTR [rax], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rbx, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	DWORD PTR [rax], r12d
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	DWORD PTR [rax], r12d
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
	vpxor	xmm0, xmm0, xmm0
	mov	r14, rax
; Line 284
	mov	DWORD PTR $T74[rsp+16], 284		; 0000011cH
	lea	r15, OFFSET FLAT:??_C@_0BL@BLCIKNLN@W?3?2cpp?2void?2dr?9ai?2dr?9vec?4h@
	mov	DWORD PTR $T74[rsp+20], 44		; 0000002cH
; Line 151
	vmovups	YMMWORD PTR [rax], ymm0
; Line 284
	lea	rax, OFFSET FLAT:??_C@_08EGPIDAG@vec_mul_@
	mov	QWORD PTR $T74[rsp], r15
	mov	QWORD PTR $T74[rsp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	lea	rcx, QWORD PTR $T74[rsp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 287
	vmovups	ymm0, YMMWORD PTR [rdi]
	vmulps	ymm1, ymm0, YMMWORD PTR [rbx]
; Line 150
	mov	edx, 32					; 00000020H
; Line 287
	vmovups	YMMWORD PTR [r14], ymm1
; Line 150
	mov	ecx, edx
	vzeroupper
	call	_aligned_malloc
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rcx, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	QWORD PTR [rax], r12
; Line 209
	sub	rax, r14
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T58[rsp+8], rcx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 209
	mov	ecx, r12d
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T58[rsp], r13
	mov	DWORD PTR $T58[rsp+16], 365		; 0000016dH
	mov	DWORD PTR $T58[rsp+20], 50		; 00000032H
$LL185@MAIN:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 210
	vmovss	xmm0, DWORD PTR [rax+r14]
	vucomiss xmm0, DWORD PTR [r14]
	jp	SHORT $LN422@MAIN
	jne	SHORT $LN422@MAIN
; Line 209
	inc	ecx
	add	r14, 4
	cmp	ecx, 2
	jl	SHORT $LL185@MAIN
; Line 212
	mov	r8d, esi
	jmp	SHORT $LN182@MAIN
$LN422@MAIN:
; Line 211
	mov	r8d, r12d
$LN182@MAIN:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 360
	vmovups	xmm0, XMMWORD PTR $T58[rsp]
	vmovsd	xmm1, QWORD PTR $T58[rsp+16]
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rdx, OFFSET FLAT:??_C@_0GO@MNIPECM@vec_eql?$CI?5new_vec2?$CI0?4f?0?50?4f?$CJ?0?5ve@
	lea	rcx, QWORD PTR $T88[rsp]
	vmovups	XMMWORD PTR $T88[rsp], xmm0
	vmovsd	QWORD PTR $T88[rsp+16], xmm1
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rdi, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	DWORD PTR [rax], 1065353216		; 3f800000H
	mov	DWORD PTR [rax+4], -1082130432		; bf800000H
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rbx, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	DWORD PTR [rax], -1082130432		; bf800000H
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	DWORD PTR [rax], -1082130432		; bf800000H
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
	vpxor	xmm0, xmm0, xmm0
	mov	r14, rax
; Line 264
	mov	QWORD PTR $T75[rsp], r15
	mov	DWORD PTR $T75[rsp+16], 264		; 00000108H
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; Line 151
	vmovups	YMMWORD PTR [rax], ymm0
; Line 264
	lea	rax, OFFSET FLAT:??_C@_08CHCJAPEF@vec_add_@
	mov	DWORD PTR $T75[rsp+20], 43		; 0000002bH
	mov	QWORD PTR $T75[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
	mov	r8d, esi
	lea	rcx, QWORD PTR $T75[rsp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 268
	vmovups	ymm0, YMMWORD PTR [rbx]
	vaddps	ymm1, ymm0, YMMWORD PTR [rdi]
; Line 150
	mov	edx, 32					; 00000020H
; Line 268
	vmovups	YMMWORD PTR [r14], ymm1
; Line 150
	mov	ecx, edx
	vzeroupper
	call	_aligned_malloc
; File W:\cpp\void\dr\trace.h
; Line 43
	lea	rcx, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	QWORD PTR [rax], r12
; Line 209
	sub	rax, r14
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T57[rsp+8], rcx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 209
	mov	ecx, r12d
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	QWORD PTR $T57[rsp], r13
	mov	DWORD PTR $T57[rsp+16], 371		; 00000173H
	mov	DWORD PTR $T57[rsp+20], 51		; 00000033H
	npad	9
$LL229@MAIN:
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 210
	vmovss	xmm0, DWORD PTR [rax+r14]
	vucomiss xmm0, DWORD PTR [r14]
	jp	SHORT $LN423@MAIN
	jne	SHORT $LN423@MAIN
; Line 209
	inc	ecx
	add	r14, 4
	cmp	ecx, 2
	jl	SHORT $LL229@MAIN
; Line 212
	mov	r8d, esi
	jmp	SHORT $LN226@MAIN
$LN423@MAIN:
; Line 211
	mov	r8d, r12d
$LN226@MAIN:
; File W:\cpp\void\dr-ai\num-ai.c
; Line 366
	vmovups	xmm0, XMMWORD PTR $T57[rsp]
	vmovsd	xmm1, QWORD PTR $T57[rsp+16]
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rdx, OFFSET FLAT:??_C@_0HF@IAGKILKP@vec_eql?$CI?5new_vec2?$CI0?4f?0?50?4f?$CJ?0?5ve@
	lea	rcx, QWORD PTR $T89[rsp]
	vmovups	XMMWORD PTR $T89[rsp], xmm0
	vmovsd	QWORD PTR $T89[rsp+16], xmm1
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rdi, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	QWORD PTR [rax], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
; Line 352
	lea	r14, OFFSET FLAT:??_C@_07KBNDKOJG@vec_dot@
	mov	r8d, esi
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
; Line 150
	mov	rbx, rax
; Line 352
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; Line 151
	mov	QWORD PTR [rax+8], r12
; Line 352
	lea	rcx, QWORD PTR $T76[rsp]
; Line 151
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
; Line 163
	mov	DWORD PTR [rax], r12d
	mov	DWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 352
	mov	QWORD PTR $T76[rsp], r15
	mov	QWORD PTR $T76[rsp+8], r14
	mov	DWORD PTR $T76[rsp+16], 352		; 00000160H
	mov	DWORD PTR $T76[rsp+20], 45		; 0000002dH
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vpxor	xmm4, xmm4, xmm4
	vfmadd231ps ymm4, ymm0, YMMWORD PTR [rdi]
; Line 362
	vshufps	xmm0, xmm4, xmm4, 85			; 00000055H
	vaddss	xmm2, xmm4, xmm0
	vshufps	xmm1, xmm4, xmm4, 170			; 000000aaH
	vaddss	xmm3, xmm2, xmm1
	vshufps	xmm0, xmm4, xmm4, 255			; 000000ffH
	vaddss	xmm1, xmm3, xmm0
	vextractf128 xmm0, ymm4, 1
	vaddss	xmm3, xmm1, xmm0
	vextractf128 xmm2, ymm4, 1
	vshufps	xmm2, xmm2, xmm2, 85			; 00000055H
	vaddss	xmm1, xmm3, xmm2
	vextractf128 xmm0, ymm4, 1
	vshufps	xmm0, xmm0, xmm0, 170			; 000000aaH
	vaddss	xmm2, xmm1, xmm0
	vextractf128 xmm1, ymm4, 1
	vshufps	xmm1, xmm1, xmm1, 255			; 000000ffH
	vaddss	xmm0, xmm2, xmm1
	vxorps	xmm6, xmm6, xmm6
; File W:\cpp\void\dr-ai\num-ai.c
; Line 372
	vucomiss xmm6, xmm0
	jp	SHORT $LN16@MAIN
	mov	r8d, esi
	je	SHORT $LN17@MAIN
$LN16@MAIN:
	mov	r8d, r12d
$LN17@MAIN:
	lea	rax, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
	mov	QWORD PTR $T77[rsp], r13
	mov	QWORD PTR $T77[rsp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T77[rsp+16], 374		; 00000176H
	lea	rdx, OFFSET FLAT:??_C@_0DG@HJFNMGEH@0?5?$DN?$DN?5vec_dot?$CI?5new_vec2?$CI0?4f?0?51?4f@
	mov	DWORD PTR $T77[rsp+20], 52		; 00000034H
	lea	rcx, QWORD PTR $T77[rsp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rdi, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+12], r12
	mov	QWORD PTR [rax+20], r12
	mov	DWORD PTR [rax+28], r12d
; Line 172
	mov	DWORD PTR [rax], r12d
; Line 173
	mov	QWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
; Line 352
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; Line 150
	mov	rbx, rax
; Line 352
	lea	rcx, QWORD PTR $T78[rsp]
; Line 151
	mov	QWORD PTR [rax+12], r12
	mov	QWORD PTR [rax+20], r12
	mov	DWORD PTR [rax+28], r12d
; Line 172
	mov	QWORD PTR [rax], 1065353216		; 3f800000H
; Line 174
	mov	DWORD PTR [rax+8], r12d
; Line 352
	mov	QWORD PTR $T78[rsp], r15
	mov	QWORD PTR $T78[rsp+8], r14
	mov	DWORD PTR $T78[rsp+16], 352		; 00000160H
	mov	DWORD PTR $T78[rsp+20], 45		; 0000002dH
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vpxor	xmm4, xmm4, xmm4
	vfmadd231ps ymm4, ymm0, YMMWORD PTR [rdi]
; Line 362
	vshufps	xmm0, xmm4, xmm4, 85			; 00000055H
	vaddss	xmm2, xmm4, xmm0
	vshufps	xmm1, xmm4, xmm4, 170			; 000000aaH
	vaddss	xmm3, xmm2, xmm1
	vshufps	xmm0, xmm4, xmm4, 255			; 000000ffH
	vaddss	xmm1, xmm3, xmm0
	vextractf128 xmm0, ymm4, 1
	vaddss	xmm3, xmm1, xmm0
	vextractf128 xmm2, ymm4, 1
	vshufps	xmm2, xmm2, xmm2, 85			; 00000055H
	vaddss	xmm1, xmm3, xmm2
	vextractf128 xmm0, ymm4, 1
	vshufps	xmm0, xmm0, xmm0, 170			; 000000aaH
	vaddss	xmm2, xmm1, xmm0
	vextractf128 xmm1, ymm4, 1
	vshufps	xmm1, xmm1, xmm1, 255			; 000000ffH
	vaddss	xmm0, xmm2, xmm1
; File W:\cpp\void\dr-ai\num-ai.c
; Line 375
	vucomiss xmm6, xmm0
	jp	SHORT $LN18@MAIN
	mov	r8d, esi
	je	SHORT $LN19@MAIN
$LN18@MAIN:
	mov	r8d, r12d
$LN19@MAIN:
	lea	rax, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
	mov	QWORD PTR $T79[rsp], r13
	mov	QWORD PTR $T79[rsp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T79[rsp+16], 377		; 00000179H
	lea	rdx, OFFSET FLAT:??_C@_0EA@IIDOMOOK@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI1?4f?0?50?4f@
	mov	DWORD PTR $T79[rsp+20], 53		; 00000035H
	lea	rcx, QWORD PTR $T79[rsp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rdi, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+12], r12
	mov	QWORD PTR [rax+20], r12
	mov	DWORD PTR [rax+28], r12d
; Line 172
	mov	QWORD PTR [rax], r12
; Line 174
	mov	DWORD PTR [rax+8], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
; Line 352
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; Line 150
	mov	rbx, rax
; Line 352
	lea	rcx, QWORD PTR $T80[rsp]
; Line 151
	mov	QWORD PTR [rax+12], r12
	mov	QWORD PTR [rax+20], r12
	mov	DWORD PTR [rax+28], r12d
; Line 172
	mov	QWORD PTR [rax], 1065353216		; 3f800000H
; Line 174
	mov	DWORD PTR [rax+8], r12d
; Line 352
	mov	QWORD PTR $T80[rsp], r15
	mov	QWORD PTR $T80[rsp+8], r14
	mov	DWORD PTR $T80[rsp+16], 352		; 00000160H
	mov	DWORD PTR $T80[rsp+20], 45		; 0000002dH
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vpxor	xmm4, xmm4, xmm4
	vfmadd231ps ymm4, ymm0, YMMWORD PTR [rdi]
; Line 362
	vshufps	xmm0, xmm4, xmm4, 85			; 00000055H
	vaddss	xmm2, xmm4, xmm0
	vshufps	xmm1, xmm4, xmm4, 170			; 000000aaH
	vaddss	xmm3, xmm2, xmm1
	vshufps	xmm0, xmm4, xmm4, 255			; 000000ffH
	vaddss	xmm1, xmm3, xmm0
	vextractf128 xmm0, ymm4, 1
	vaddss	xmm3, xmm1, xmm0
	vextractf128 xmm2, ymm4, 1
	vshufps	xmm2, xmm2, xmm2, 85			; 00000055H
	vaddss	xmm1, xmm3, xmm2
	vextractf128 xmm0, ymm4, 1
	vshufps	xmm0, xmm0, xmm0, 170			; 000000aaH
	vaddss	xmm2, xmm1, xmm0
	vextractf128 xmm1, ymm4, 1
	vshufps	xmm1, xmm1, xmm1, 255			; 000000ffH
	vaddss	xmm0, xmm2, xmm1
; File W:\cpp\void\dr-ai\num-ai.c
; Line 378
	vucomiss xmm6, xmm0
	jp	SHORT $LN20@MAIN
	mov	r8d, esi
	je	SHORT $LN21@MAIN
$LN20@MAIN:
	mov	r8d, r12d
$LN21@MAIN:
	lea	rax, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
	mov	QWORD PTR $T81[rsp], r13
	mov	QWORD PTR $T81[rsp+8], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T81[rsp+16], 380		; 0000017cH
	lea	rdx, OFFSET FLAT:??_C@_0EA@ICOMMCIP@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI1?4f?0?50?4f@
	mov	DWORD PTR $T81[rsp+20], 54		; 00000036H
	lea	rcx, QWORD PTR $T81[rsp]
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
	mov	ecx, edx
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
	mov	rdi, rax
	mov	ecx, edx
; Line 151
	mov	QWORD PTR [rax+12], r12
	mov	QWORD PTR [rax+20], r12
	mov	DWORD PTR [rax+28], r12d
; Line 172
	mov	QWORD PTR [rax], r12
; Line 174
	mov	DWORD PTR [rax+8], 1065353216		; 3f800000H
; Line 150
	call	_aligned_malloc
; Line 352
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	r8d, esi
	lea	rdx, OFFSET FLAT:??_C@_0BD@CANBDCOP@lhs?4len?5?$DN?$DN?5rhs?4len@
; Line 150
	mov	rbx, rax
; Line 352
	lea	rcx, QWORD PTR $T82[rsp]
; Line 151
	mov	QWORD PTR [rax+12], r12
	mov	QWORD PTR [rax+20], r12
	mov	DWORD PTR [rax+28], r12d
; Line 172
	mov	DWORD PTR [rax], r12d
; Line 173
	mov	QWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 352
	mov	QWORD PTR $T82[rsp], r15
	mov	QWORD PTR $T82[rsp+8], r14
	mov	DWORD PTR $T82[rsp+16], 352		; 00000160H
	mov	DWORD PTR $T82[rsp+20], 45		; 0000002dH
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; Line 359
	vmovups	ymm0, YMMWORD PTR [rbx]
	vpxor	xmm4, xmm4, xmm4
	vfmadd231ps ymm4, ymm0, YMMWORD PTR [rdi]
; Line 362
	vshufps	xmm0, xmm4, xmm4, 85			; 00000055H
	vaddss	xmm2, xmm4, xmm0
	vshufps	xmm1, xmm4, xmm4, 170			; 000000aaH
	vaddss	xmm3, xmm2, xmm1
	vshufps	xmm0, xmm4, xmm4, 255			; 000000ffH
	vaddss	xmm1, xmm3, xmm0
	vextractf128 xmm0, ymm4, 1
	vaddss	xmm3, xmm1, xmm0
	vextractf128 xmm2, ymm4, 1
	vshufps	xmm2, xmm2, xmm2, 85			; 00000055H
	vaddss	xmm1, xmm3, xmm2
	vextractf128 xmm0, ymm4, 1
	vshufps	xmm0, xmm0, xmm0, 170			; 000000aaH
	vaddss	xmm2, xmm1, xmm0
	vextractf128 xmm1, ymm4, 1
	vshufps	xmm1, xmm1, xmm1, 255			; 000000ffH
	vaddss	xmm0, xmm2, xmm1
; File W:\cpp\void\dr-ai\num-ai.c
; Line 381
	vucomiss xmm6, xmm0
	jp	SHORT $LN22@MAIN
	je	SHORT $LN23@MAIN
$LN22@MAIN:
	mov	esi, r12d
$LN23@MAIN:
	lea	rdi, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
	mov	QWORD PTR $T83[rsp], r13
	mov	QWORD PTR $T83[rsp+8], rdi
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	mov	DWORD PTR $T83[rsp+16], 383		; 0000017fH
	lea	rdx, OFFSET FLAT:??_C@_0EA@PPILIGLL@0?5?$DN?$DN?5vec_dot?$CI?5new_vec3?$CI0?4f?0?51?4f@
	mov	DWORD PTR $T83[rsp+20], 55		; 00000037H
	lea	rcx, QWORD PTR $T83[rsp]
	mov	r8d, esi
	vzeroupper
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
	lea	ecx, QWORD PTR [rdx+32]
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 151
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], 1065353216		; 3f800000H
	mov	QWORD PTR [rax+8], r12
	mov	QWORD PTR [rax+16], r12
; Line 198
	mov	QWORD PTR [rax+24], r12
; Line 199
	mov	QWORD PTR [rax+32], r12
; File W:\cpp\void\dr-ai\num-ai.c
; Line 387
	mov	DWORD PTR valid_output_vectors$[rsp], 10
	mov	DWORD PTR valid_output_vectors$[rsp+4], 16
	mov	QWORD PTR valid_output_vectors$[rsp+8], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 151
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	DWORD PTR [rax], r12d
	mov	QWORD PTR [rax+4], 1065353216		; 3f800000H
; Line 196
	mov	QWORD PTR [rax+12], r12
; Line 197
	mov	QWORD PTR [rax+20], r12
; Line 198
	mov	QWORD PTR [rax+28], r12
; Line 199
	mov	DWORD PTR [rax+36], r12d
; File W:\cpp\void\dr-ai\num-ai.c
; Line 388
	mov	DWORD PTR valid_output_vectors$[rsp+16], 10
	mov	DWORD PTR valid_output_vectors$[rsp+20], 16
	mov	QWORD PTR valid_output_vectors$[rsp+24], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 151
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], r12
; Line 196
	mov	QWORD PTR [rax+8], 1065353216		; 3f800000H
; Line 197
	mov	QWORD PTR [rax+16], r12
; Line 198
	mov	QWORD PTR [rax+24], r12
; Line 199
	mov	QWORD PTR [rax+32], r12
; File W:\cpp\void\dr-ai\num-ai.c
; Line 389
	mov	DWORD PTR valid_output_vectors$[rsp+32], 10
	mov	DWORD PTR valid_output_vectors$[rsp+36], 16
	mov	QWORD PTR valid_output_vectors$[rsp+40], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 151
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], r12
; Line 196
	mov	DWORD PTR [rax+8], r12d
	mov	QWORD PTR [rax+12], 1065353216		; 3f800000H
; Line 197
	mov	QWORD PTR [rax+20], r12
; Line 198
	mov	QWORD PTR [rax+28], r12
; Line 199
	mov	DWORD PTR [rax+36], r12d
; File W:\cpp\void\dr-ai\num-ai.c
; Line 390
	mov	DWORD PTR valid_output_vectors$[rsp+48], 10
	mov	DWORD PTR valid_output_vectors$[rsp+52], 16
	mov	QWORD PTR valid_output_vectors$[rsp+56], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], r12
	mov	QWORD PTR [rax+8], r12
; Line 197
	mov	QWORD PTR [rax+16], 1065353216		; 3f800000H
; Line 198
	mov	QWORD PTR [rax+24], r12
; Line 199
	mov	QWORD PTR [rax+32], r12
; File W:\cpp\void\dr-ai\num-ai.c
; Line 391
	mov	DWORD PTR valid_output_vectors$[rsp+64], 10
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 391
	mov	DWORD PTR valid_output_vectors$[rsp+68], 16
	mov	QWORD PTR valid_output_vectors$[rsp+72], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 151
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], r12
; Line 196
	mov	QWORD PTR [rax+8], r12
; Line 197
	mov	DWORD PTR [rax+16], r12d
	mov	QWORD PTR [rax+20], 1065353216		; 3f800000H
; Line 198
	mov	QWORD PTR [rax+28], r12
	mov	DWORD PTR [rax+36], r12d
; File W:\cpp\void\dr-ai\num-ai.c
; Line 392
	mov	DWORD PTR valid_output_vectors$[rsp+80], 10
	mov	DWORD PTR valid_output_vectors$[rsp+84], 16
	mov	QWORD PTR valid_output_vectors$[rsp+88], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 151
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], r12
; Line 196
	mov	QWORD PTR [rax+8], r12
; Line 197
	mov	QWORD PTR [rax+16], r12
; Line 198
	mov	QWORD PTR [rax+24], 1065353216		; 3f800000H
; Line 199
	mov	QWORD PTR [rax+32], r12
; File W:\cpp\void\dr-ai\num-ai.c
; Line 393
	mov	DWORD PTR valid_output_vectors$[rsp+96], 10
	mov	DWORD PTR valid_output_vectors$[rsp+100], 16
	mov	QWORD PTR valid_output_vectors$[rsp+104], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 151
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], r12
; Line 196
	mov	QWORD PTR [rax+8], r12
; Line 197
	mov	QWORD PTR [rax+16], r12
; Line 198
	mov	DWORD PTR [rax+24], r12d
	mov	QWORD PTR [rax+28], 1065353216		; 3f800000H
; Line 199
	mov	DWORD PTR [rax+36], r12d
; File W:\cpp\void\dr-ai\num-ai.c
; Line 394
	mov	DWORD PTR valid_output_vectors$[rsp+112], 10
	mov	DWORD PTR valid_output_vectors$[rsp+116], 16
	mov	QWORD PTR valid_output_vectors$[rsp+120], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
	mov	edx, 32					; 00000020H
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
; Line 150
	lea	ecx, QWORD PTR [rdx+32]
; Line 151
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], r12
; Line 196
	mov	QWORD PTR [rax+8], r12
; Line 197
	mov	QWORD PTR [rax+16], r12
; Line 198
	mov	QWORD PTR [rax+24], r12
; Line 199
	mov	QWORD PTR [rax+32], 1065353216		; 3f800000H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 395
	mov	DWORD PTR valid_output_vectors$[rsp+128], 10
	mov	DWORD PTR valid_output_vectors$[rsp+132], 16
	mov	QWORD PTR valid_output_vectors$[rsp+136], rax
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	call	_aligned_malloc
; File W:\cpp\void\dr-ai\num-ai.c
; Line 400
	mov	edx, 784				; 00000310H
	lea	rcx, QWORD PTR $T92[rsp]
	mov	r8d, 16
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 151
	mov	QWORD PTR [rax+40], r12
	mov	QWORD PTR [rax+48], r12
	mov	QWORD PTR [rax+56], r12
; Line 195
	mov	QWORD PTR [rax], r12
; Line 196
	mov	QWORD PTR [rax+8], r12
; Line 197
	mov	QWORD PTR [rax+16], r12
	mov	QWORD PTR [rax+24], r12
	mov	DWORD PTR [rax+32], r12d
; Line 199
	mov	DWORD PTR [rax+36], 1065353216		; 3f800000H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 396
	mov	DWORD PTR valid_output_vectors$[rsp+144], 10
	mov	DWORD PTR valid_output_vectors$[rsp+148], 16
	mov	QWORD PTR valid_output_vectors$[rsp+152], rax
; Line 400
	call	?new_lay@@YA?AUai_lay@@HH@Z		; new_lay
	vmovups	ymm0, YMMWORD PTR [rax]
	vmovups	YMMWORD PTR net$[rsp], ymm0
	vmovups	ymm1, YMMWORD PTR [rax+32]
	vmovups	ymm0, YMMWORD PTR [rax+64]
	vmovups	YMMWORD PTR net$[rsp+32], ymm1
	vmovups	ymm1, YMMWORD PTR [rax+96]
	vmovups	YMMWORD PTR net$[rsp+64], ymm0
	vmovups	xmm0, XMMWORD PTR [rax+128]
; Line 401
	mov	edx, 16
	lea	rcx, QWORD PTR $T93[rsp]
	vmovups	YMMWORD PTR net$[rsp+96], ymm1
	vmovups	XMMWORD PTR net$[rsp+128], xmm0
	lea	r8d, QWORD PTR [rdx-6]
	vzeroupper
	call	?new_lay@@YA?AUai_lay@@HH@Z		; new_lay
; Line 403
	vmovss	xmm8, DWORD PTR __real@3dcccccd
	movsxd	rbx, DWORD PTR img_num$1$[rsp]
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	edx, 32					; 00000020H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 403
	vmovss	DWORD PTR net$[rsp+296], xmm8
	vmovups	ymm0, YMMWORD PTR [rax]
	vmovups	ymm1, YMMWORD PTR [rax+32]
	vmovups	YMMWORD PTR net$[rsp+144], ymm0
	vmovups	ymm0, YMMWORD PTR [rax+64]
	vmovups	YMMWORD PTR net$[rsp+208], ymm0
	vmovups	xmm0, XMMWORD PTR [rax+128]
	vmovups	YMMWORD PTR net$[rsp+176], ymm1
	vmovups	ymm1, YMMWORD PTR [rax+96]
	vmovups	XMMWORD PTR net$[rsp+272], xmm0
	vmovups	YMMWORD PTR net$[rsp+240], ymm1
	mov	DWORD PTR net$[rsp+288], ebx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	mov	ecx, 3136				; 00000c40H
; File W:\cpp\void\dr-ai\num-ai.c
; Line 404
	mov	DWORD PTR net$[rsp+292], 500		; 000001f4H
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 150
	vzeroupper
	call	_aligned_malloc
; Line 151
	xor	edx, edx
	mov	r8d, 3136				; 00000c40H
	mov	rcx, rax
	mov	r14, rax
	call	memset
; File W:\cpp\void\dr-ai\num-ai.c
; Line 417
	vmovups	xmm7, XMMWORD PTR __xmm@3b8080813b8080813b8080813b808081
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	lea	rcx, QWORD PTR Result$66[rsp]
; File W:\cpp\void\dr-ai\num-ai.c
; Line 405
	mov	DWORD PTR inp$[rsp], 784		; 00000310H
	mov	DWORD PTR inp$[rsp+4], 784		; 00000310H
	mov	QWORD PTR inp$[rsp+8], r14
; File W:\cpp\void\dr\trace.c
; Line 48
	mov	QWORD PTR __traceblock__56$55[rsp+8], r13
	mov	QWORD PTR __traceblock__56$55[rsp+16], rdi
	mov	DWORD PTR __traceblock__56$55[rsp+24], 414 ; 0000019eH
	mov	DWORD PTR __traceblock__56$55[rsp+28], 57 ; 00000039H
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\dr-ai\num-ai.c
; Line 415
	mov	QWORD PTR $T63[rsp], rbx
; File W:\cpp\void\dr-ai\dr-vec.h
; Line 199
	mov	r15d, r12d
; File W:\cpp\void\dr-ai\num-ai.c
; Line 415
	test	ebx, ebx
	jle	$LN3@MAIN
	vmovss	xmm6, DWORD PTR __real@3b808081
	vmovaps	XMMWORD PTR [rsp+1760], xmm9
	lea	r13, QWORD PTR [r14+3132]
	vmovups	xmm9, XMMWORD PTR inp$[rsp]
	vmovaps	XMMWORD PTR [rsp+1744], xmm10
	vmovss	xmm10, DWORD PTR __real@bf800000
	npad	8
$LL4@MAIN:
; Line 416
	xor	ebx, ebx
	xor	edi, edi
	npad	12
$LL7@MAIN:
; Line 419
	mov	rax, QWORD PTR labels_file_data$1$[rsp]
; Line 425
	lea	ecx, DWORD PTR [rbx+r15]
	imul	ecx, DWORD PTR img_col_len$1$[rsp]
	add	rax, rdi
	movzx	esi, BYTE PTR [rax+r12+8]
	imul	ecx, DWORD PTR img_row_len$1$[rsp]
	mov	rax, QWORD PTR images_file_data$1$[rsp]
	add	rax, 12
	add	rcx, rax
	lea	rax, QWORD PTR [rcx+783]
	cmp	r14, rax
	ja	SHORT $LN482@MAIN
; Line 417
	cmp	r13, rcx
	jb	SHORT $LN482@MAIN
; Line 427
	add	rcx, 2
	lea	rdx, QWORD PTR [r14+8]
	mov	r8d, 196				; 000000c4H
	npad	6
$LL529@MAIN:
; Line 428
	movzx	eax, BYTE PTR [rcx-2]
	lea	rdx, QWORD PTR [rdx+16]
	lea	rcx, QWORD PTR [rcx+4]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm1, xmm0, xmm6
	vmovss	DWORD PTR [rdx-24], xmm1
	movzx	eax, BYTE PTR [rcx-5]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm1, xmm0, xmm6
	vmovss	DWORD PTR [rdx-20], xmm1
	movzx	eax, BYTE PTR [rcx-4]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm1, xmm0, xmm6
	vmovss	DWORD PTR [rdx-16], xmm1
	movzx	eax, BYTE PTR [rcx-3]
	vxorps	xmm0, xmm0, xmm0
	vcvtsi2ss xmm0, xmm0, eax
	vmulss	xmm1, xmm0, xmm6
	vmovss	DWORD PTR [rdx-12], xmm1
	sub	r8, 1
	jne	SHORT $LL529@MAIN
; Line 417
	jmp	SHORT $LN527@MAIN
$LN482@MAIN:
	lea	rax, QWORD PTR [rcx+8]
	mov	edx, 49					; 00000031H
	lea	rcx, QWORD PTR [r14+32]
$LL10@MAIN:
; Line 427
	lea	rcx, QWORD PTR [rcx+64]
; Line 428
	vpmovzxbd xmm1, DWORD PTR [rax-8]
	lea	rax, QWORD PTR [rax+16]
	vcvtdq2ps xmm2, xmm1
	vpmovzxbd xmm1, DWORD PTR [rax-20]
	vmulps	xmm3, xmm2, xmm7
	vmovups	XMMWORD PTR [rcx-96], xmm3
	vcvtdq2ps xmm2, xmm1
	vpmovzxbd xmm1, DWORD PTR [rax-16]
	vmulps	xmm3, xmm2, xmm7
	vmovups	XMMWORD PTR [rcx-80], xmm3
	vcvtdq2ps xmm2, xmm1
	vpmovzxbd xmm1, DWORD PTR [rax-12]
	vmulps	xmm3, xmm2, xmm7
	vmovups	XMMWORD PTR [rcx-64], xmm3
	vcvtdq2ps xmm2, xmm1
	vmulps	xmm3, xmm2, xmm7
	vmovups	XMMWORD PTR [rcx-48], xmm3
	sub	rdx, 1
	jne	SHORT $LL10@MAIN
$LN527@MAIN:
; Line 431
	movsxd	r8, DWORD PTR net$[rsp+48]
	xor	edx, edx
	mov	rcx, QWORD PTR net$[rsp+56]
	shl	r8, 2
	call	memset
; Line 434
	movsxd	rax, DWORD PTR net$[rsp+96]
	xor	edx, edx
	movsxd	r8, DWORD PTR net$[rsp+92]
	mov	rcx, QWORD PTR net$[rsp+104]
	imul	r8, rax
	shl	r8, 2
	call	memset
; Line 437
	movsxd	r8, DWORD PTR net$[rsp+192]
	xor	edx, edx
	mov	rcx, QWORD PTR net$[rsp+200]
	shl	r8, 2
	call	memset
; Line 440
	movsxd	rax, DWORD PTR net$[rsp+240]
	xor	edx, edx
	movsxd	r8, DWORD PTR net$[rsp+236]
	mov	rcx, QWORD PTR net$[rsp+248]
	imul	r8, rax
	shl	r8, 2
	call	memset
; Line 443
	mov	rax, rsi
	lea	r8, QWORD PTR $T64[rsp]
	add	rax, rax
	lea	rdx, QWORD PTR $T56[rsp]
	lea	rcx, QWORD PTR net$[rsp]
	vmovdqa	XMMWORD PTR $T56[rsp], xmm9
	vmovups	xmm0, XMMWORD PTR valid_output_vectors$[rsp+rax*8]
	vmovups	XMMWORD PTR $T64[rsp], xmm0
	call	?net_grd_dsc@@YAXPEAUai_net@@Uai_vec@@1@Z ; net_grd_dsc
; Line 447
	mov	r9d, DWORD PTR net$[rsp+272]
	xor	ecx, ecx
	mov	edx, -1
	vmovaps	xmm2, xmm10
	test	r9d, r9d
	jle	SHORT $LN562@MAIN
; Line 431
	mov	r8, QWORD PTR net$[rsp+280]
	npad	8
$LL483@MAIN:
; Line 448
	vmovss	xmm1, DWORD PTR [r8]
	vcomiss	xmm1, xmm2
	mov	eax, ecx
	lea	r8, QWORD PTR [r8+4]
	cmovbe	eax, edx
	inc	ecx
	mov	edx, eax
	vcmpltss xmm0, xmm2, xmm1
	vblendvps xmm0, xmm2, xmm1, xmm0
	vmovss	DWORD PTR prd_val$62[rsp], xmm0
	cmp	ecx, r9d
	jge	SHORT $LN562@MAIN
; Line 447
	vmovss	xmm2, DWORD PTR prd_val$62[rsp]
	jmp	SHORT $LL483@MAIN
$LN562@MAIN:
; Line 454
	cmp	edx, esi
	mov	DWORD PTR $T84[rsp+16], 455		; 000001c7H
	lea	rax, OFFSET FLAT:??_C@_08KGMLKAKE@num?9ai?4c@
	mov	DWORD PTR $T84[rsp+20], 58		; 0000003aH
	mov	QWORD PTR $T84[rsp], rax
	lea	rcx, OFFSET FLAT:??_C@_1BA@FBNCKCPD@?$AAS?$AAU?$AAC?$AAC?$AAE?$AAS?$AAS@
	lea	rax, OFFSET FLAT:??_C@_04KLKHHPIG@MAIN@
	mov	r9d, r15d
	mov	QWORD PTR $T84[rsp+8], rax
	lea	r8, OFFSET FLAT:??_C@_1EM@LPOHNLCH@?$AAs?$AAa?$AAm?$AAp?$AAl?$AAe?$AA?5?$AA?$FL?$AA?$CF?$AAi?$AA?3?$AA?$CF?$AA?9?$AA4?$AAi@
	lea	rax, OFFSET FLAT:??_C@_1O@GLIHGOJN@?$AAF?$AAA?$AAI?$AAL?$AAE?$AAD@
	cmove	rax, rcx
	lea	rcx, QWORD PTR $T84[rsp]
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], edx
	mov	edx, 2
	mov	DWORD PTR [rsp+40], esi
	mov	DWORD PTR [rsp+32], ebx
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 457
	vmovaps	xmm1, xmm8
	lea	rcx, QWORD PTR net$[rsp]
	call	?lay_upd@@YAXPEAUai_lay@@M@Z		; lay_upd
; Line 458
	vmovaps	xmm1, xmm8
	lea	rcx, QWORD PTR net$[rsp+144]
	call	?lay_upd@@YAXPEAUai_lay@@M@Z		; lay_upd
	inc	ebx
	inc	rdi
	cmp	rdi, 250				; 000000faH
	jl	$LL7@MAIN
; Line 415
	add	r15d, 250				; 000000faH
	add	r12, 250				; 000000faH
	cmp	r12, QWORD PTR $T63[rsp]
	jl	$LL4@MAIN
	vmovaps	xmm10, XMMWORD PTR [rsp+1744]
	vmovaps	xmm9, XMMWORD PTR [rsp+1760]
$LN3@MAIN:
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	lea	rcx, QWORD PTR Result$65[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 25
	lea	rcx, QWORD PTR Result$67[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\dr\trace.c
; Line 57
	vmovups	xmm0, XMMWORD PTR __traceblock__56$55[rsp+8]
	mov	rcx, QWORD PTR Result$65[rsp]
	sub	rcx, QWORD PTR Result$66[rsp]
	vmovsd	xmm1, QWORD PTR __traceblock__56$55[rsp+24]
	vmovaps	xmm8, XMMWORD PTR [rsp+1776]
	vmovaps	xmm7, XMMWORD PTR [rsp+1792]
	vmovaps	xmm6, XMMWORD PTR [rsp+1808]
	mov	r15, QWORD PTR [rsp+1824]
	mov	r14, QWORD PTR [rsp+1832]
	mov	r13, QWORD PTR [rsp+1840]
	mov	r12, QWORD PTR [rsp+1880]
	mov	rdi, QWORD PTR [rsp+1872]
	mov	rsi, QWORD PTR [rsp+1864]
	mov	rbx, QWORD PTR [rsp+1856]
	vmovups	XMMWORD PTR $T90[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovsd	QWORD PTR $T90[rsp+16], xmm1
	js	SHORT $LN557@MAIN
; Line 55
	vcvtsi2sd xmm0, xmm0, rcx
	jmp	SHORT $LN558@MAIN
$LN557@MAIN:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm0, xmm0, xmm0
$LN558@MAIN:
	mov	rcx, QWORD PTR Result$67[rsp]
	vmulsd	xmm1, xmm0, QWORD PTR __real@408f400000000000
	vxorps	xmm0, xmm0, xmm0
	test	rcx, rcx
	js	SHORT $LN555@MAIN
	vcvtsi2sd xmm0, xmm0, rcx
	jmp	SHORT $LN556@MAIN
$LN555@MAIN:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm0, xmm0, xmm0
$LN556@MAIN:
	vdivsd	xmm0, xmm1, xmm0
; Line 57
	lea	r9, OFFSET FLAT:??_C@_1M@CAIDPHAA@?$AAT?$AAI?$AAM?$AAE?$AAD@
	mov	edx, 2
	lea	r8, OFFSET FLAT:??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@
	lea	rcx, QWORD PTR $T90[rsp]
	vmovsd	QWORD PTR [rsp+32], xmm0
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; File W:\cpp\void\dr\plat-win32.c
; Line 525
	mov	rcx, QWORD PTR labels_file_data$1$[rsp]
	xor	edx, edx
	mov	r8d, 32768				; 00008000H
	call	QWORD PTR __imp_VirtualFree
	mov	rcx, QWORD PTR images_file_data$1$[rsp]
	xor	edx, edx
	mov	r8d, 32768				; 00008000H
	call	QWORD PTR __imp_VirtualFree
; File W:\cpp\void\dr-ai\num-ai.c
; Line 471
	int	3
; Line 472
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1848				; 00000738H
	ret	0
?MAIN@@YAXXZ ENDP					; MAIN
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?strtoi@@YA_JUstr32@@@Z
_TEXT	SEGMENT
s$ = 8
?strtoi@@YA_JUstr32@@@Z PROC				; strtoi, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 28
	mov	rax, QWORD PTR [rcx+4]
	mov	r9d, DWORD PTR [rcx]
	add	r9, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r11d, r11d
; Line 127
	lea	r10d, QWORD PTR [r11+1]
	lea	r8d, QWORD PTR [r11-1]
$LL4@strtoi:
; Line 131
	cmp	rax, r9
	je	SHORT $LN25@strtoi
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN8@strtoi
$LN25@strtoi:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN8@strtoi
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN19@strtoi
$LN8@strtoi:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r10d, 1
	cmove	r10d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL4@strtoi
$LN19@strtoi:
; Line 139
	cmp	rax, r9
	jae	SHORT $LN10@strtoi
	npad	7
$LL6@strtoi:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN10@strtoi
; Line 141
	lea	r11, QWORD PTR [r11+r11*4]
	inc	rax
	lea	r11, QWORD PTR [r11-24]
	lea	r11, QWORD PTR [r8+r11*2]
	cmp	rax, r9
	jb	SHORT $LL6@strtoi
$LN10@strtoi:
; Line 153
	movsxd	rax, r10d
	imul	rax, r11
; File W:\cpp\void\dr\str32.h
; Line 30
	ret	0
?strtoi@@YA_JUstr32@@@Z ENDP				; strtoi
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??7str32@@QEAAHXZ
_TEXT	SEGMENT
this$ = 8
??7str32@@QEAAHXZ PROC					; str32::operator!, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 172
	xor	eax, eax
	cmp	DWORD PTR [rcx], eax
	sete	al
; Line 173
	ret	0
??7str32@@QEAAHXZ ENDP					; str32::operator!
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAAHXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAAHXZ PROC					; str32::operator int, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 196
$LN33:
	sub	rsp, 24
; Line 197
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	xmm0, QWORD PTR [rcx]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 197
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rax, QWORD PTR $T1[rsp+4]
	add	r11, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r9d, r9d
; Line 127
	lea	r10d, QWORD PTR [r9+1]
	lea	r8d, QWORD PTR [r9-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rax, r11
	je	SHORT $LN27@operator
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r10d, 1
	cmove	r10d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rax, r11
	jae	SHORT $LN12@operator
	npad	12
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r9, QWORD PTR [r9+r9*4]
	inc	rax
	lea	r9, QWORD PTR [r9-24]
	lea	r9, QWORD PTR [r8+r9*2]
	cmp	rax, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	imul	r9d, r10d
; File W:\cpp\void\dr\str32.h
; Line 197
	mov	eax, r9d
; Line 198
	add	rsp, 24
	ret	0
??Bstr32@@QEAAHXZ ENDP					; str32::operator int
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAAIXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAAIXZ PROC					; str32::operator unsigned int, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 191
$LN33:
	sub	rsp, 24
; Line 192
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	xmm0, QWORD PTR [rcx]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 192
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rax, QWORD PTR $T1[rsp+4]
	add	r11, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r9d, r9d
; Line 127
	lea	r10d, QWORD PTR [r9+1]
	lea	r8d, QWORD PTR [r9-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rax, r11
	je	SHORT $LN27@operator
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r10d, 1
	cmove	r10d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rax, r11
	jae	SHORT $LN12@operator
	npad	12
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r9, QWORD PTR [r9+r9*4]
	inc	rax
	lea	r9, QWORD PTR [r9-24]
	lea	r9, QWORD PTR [r8+r9*2]
	cmp	rax, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	imul	r9d, r10d
; File W:\cpp\void\dr\str32.h
; Line 192
	mov	eax, r9d
; Line 193
	add	rsp, 24
	ret	0
??Bstr32@@QEAAIXZ ENDP					; str32::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAAMXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAAMXZ PROC					; str32::operator float, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 206
$LN33:
	sub	rsp, 24
; Line 207
	vmovsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 207
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rdx, QWORD PTR $T1[rsp+4]
	add	r11, rdx
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r10d, r10d
; Line 127
	lea	r9d, QWORD PTR [r10+1]
	lea	r8d, QWORD PTR [r10-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rdx, r11
	je	SHORT $LN27@operator
	movzx	ecx, BYTE PTR [rdx]
	cmp	cl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	eax, BYTE PTR [rdx]
	movzx	ecx, al
	cmp	al, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	cl, 45					; 0000002dH
	mov	r9d, 1
	cmove	r9d, r8d
; Line 135
	inc	rdx
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rdx, r11
	jae	SHORT $LN12@operator
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rdx]
	lea	eax, DWORD PTR [r8-48]
	cmp	al, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r10, QWORD PTR [r10+r10*4]
	inc	rdx
	lea	r10, QWORD PTR [r10-24]
	lea	r10, QWORD PTR [r8+r10*2]
	cmp	rdx, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	movsxd	rax, r9d
	imul	rax, r10
	vxorps	xmm0, xmm0, xmm0
; File W:\cpp\void\dr\str32.h
; Line 207
	vcvtsi2ss xmm0, xmm0, rax
; Line 208
	add	rsp, 24
	ret	0
??Bstr32@@QEAAMXZ ENDP					; str32::operator float
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAANXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAANXZ PROC					; str32::operator double, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 201
$LN33:
	sub	rsp, 24
; Line 202
	vmovsd	xmm0, QWORD PTR [rcx]
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 202
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rdx, QWORD PTR $T1[rsp+4]
	add	r11, rdx
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r10d, r10d
; Line 127
	lea	r9d, QWORD PTR [r10+1]
	lea	r8d, QWORD PTR [r10-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rdx, r11
	je	SHORT $LN27@operator
	movzx	ecx, BYTE PTR [rdx]
	cmp	cl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	eax, BYTE PTR [rdx]
	movzx	ecx, al
	cmp	al, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	cl, 45					; 0000002dH
	mov	r9d, 1
	cmove	r9d, r8d
; Line 135
	inc	rdx
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rdx, r11
	jae	SHORT $LN12@operator
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rdx]
	lea	eax, DWORD PTR [r8-48]
	cmp	al, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r10, QWORD PTR [r10+r10*4]
	inc	rdx
	lea	r10, QWORD PTR [r10-24]
	lea	r10, QWORD PTR [r8+r10*2]
	cmp	rdx, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	movsxd	rax, r9d
	imul	rax, r10
	vxorps	xmm0, xmm0, xmm0
; File W:\cpp\void\dr\str32.h
; Line 202
	vcvtsi2sd xmm0, xmm0, rax
; Line 203
	add	rsp, 24
	ret	0
??Bstr32@@QEAANXZ ENDP					; str32::operator double
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAA_KXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAA_KXZ PROC					; str32::operator unsigned __int64, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 186
$LN33:
	sub	rsp, 24
; Line 187
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	xmm0, QWORD PTR [rcx]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 187
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rax, QWORD PTR $T1[rsp+4]
	add	r11, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r10d, r10d
; Line 127
	lea	r9d, QWORD PTR [r10+1]
	lea	r8d, QWORD PTR [r10-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rax, r11
	je	SHORT $LN27@operator
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r9d, 1
	cmove	r9d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rax, r11
	jae	SHORT $LN12@operator
	npad	12
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r10, QWORD PTR [r10+r10*4]
	inc	rax
	lea	r10, QWORD PTR [r10-24]
	lea	r10, QWORD PTR [r8+r10*2]
	cmp	rax, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	movsxd	rax, r9d
	imul	rax, r10
; File W:\cpp\void\dr\str32.h
; Line 188
	add	rsp, 24
	ret	0
??Bstr32@@QEAA_KXZ ENDP					; str32::operator unsigned __int64
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAA_JXZ
_TEXT	SEGMENT
$T1 = 0
this$ = 32
??Bstr32@@QEAA_JXZ PROC					; str32::operator __int64, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 181
$LN33:
	sub	rsp, 24
; Line 182
	mov	eax, DWORD PTR [rcx+8]
	vmovsd	xmm0, QWORD PTR [rcx]
	vmovsd	QWORD PTR $T1[rsp], xmm0
; Line 28
	mov	r11d, DWORD PTR $T1[rsp]
; Line 182
	mov	DWORD PTR $T1[rsp+8], eax
; Line 28
	mov	rax, QWORD PTR $T1[rsp+4]
	add	r11, rax
; File W:\cpp\void\dr\rx7-text.h
; Line 126
	xor	r10d, r10d
; Line 127
	lea	r9d, QWORD PTR [r10+1]
	lea	r8d, QWORD PTR [r10-1]
	npad	5
$LL6@operator:
; Line 131
	cmp	rax, r11
	je	SHORT $LN27@operator
	movzx	edx, BYTE PTR [rax]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN10@operator
$LN27@operator:
	movzx	ecx, BYTE PTR [rax]
	movzx	edx, cl
	cmp	cl, 43					; 0000002bH
	je	SHORT $LN10@operator
	cmp	cl, 45					; 0000002dH
	jne	SHORT $LN21@operator
$LN10@operator:
; Line 134
	cmp	dl, 45					; 0000002dH
	mov	r9d, 1
	cmove	r9d, r8d
; Line 135
	inc	rax
; Line 136
	jmp	SHORT $LL6@operator
$LN21@operator:
; Line 139
	cmp	rax, r11
	jae	SHORT $LN12@operator
	npad	12
$LL8@operator:
; Line 140
	movsx	r8, BYTE PTR [rax]
	lea	ecx, DWORD PTR [r8-48]
	cmp	cl, 9
	ja	SHORT $LN12@operator
; Line 141
	lea	r10, QWORD PTR [r10+r10*4]
	inc	rax
	lea	r10, QWORD PTR [r10-24]
	lea	r10, QWORD PTR [r8+r10*2]
	cmp	rax, r11
	jb	SHORT $LL8@operator
$LN12@operator:
; Line 153
	movsxd	rax, r9d
	imul	rax, r10
; File W:\cpp\void\dr\str32.h
; Line 183
	add	rsp, 24
	ret	0
??Bstr32@@QEAA_JXZ ENDP					; str32::operator __int64
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??Bstr32@@QEAAPEADXZ
_TEXT	SEGMENT
this$ = 8
??Bstr32@@QEAAPEADXZ PROC				; str32::operator char *, COMDAT
; File W:\cpp\void\dr\str32.h
; Line 177
	mov	rax, QWORD PTR [rcx+4]
; Line 178
	ret	0
??Bstr32@@QEAAPEADXZ ENDP				; str32::operator char *
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
_TEXT	SEGMENT
UserData$ = 48
Flags$ = 56
Alignment$ = 64
OldSize$ = 72
OldMemr$ = 80
NewSize$ = 88
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; HEAP_ALLOCATOR, COMDAT
; File W:\cpp\void\dr\cator.c
; Line 66
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	sub	rsp, 32					; 00000020H
; Line 68
	mov	rbx, QWORD PTR NewSize$[rsp]
	mov	rsi, r9
	mov	rcx, QWORD PTR OldMemr$[rsp]
	mov	ebp, edx
	test	rbx, rbx
	je	SHORT $LN2@HEAP_ALLOC
; Line 69
	mov	QWORD PTR [rsp+48], rdi
	mov	rdx, rbx
	test	r8d, r8d
	je	SHORT $LN4@HEAP_ALLOC
; Line 70
	movsxd	r8, r8d
	call	_aligned_realloc
; Line 71
	jmp	SHORT $LN14@HEAP_ALLOC
$LN4@HEAP_ALLOC:
; Line 72
	call	realloc
$LN14@HEAP_ALLOC:
; Line 75
	mov	rdi, rax
	test	bpl, 1
	je	SHORT $LN12@HEAP_ALLOC
; Line 76
	sub	rbx, rsi
	lea	rcx, QWORD PTR [rax+rsi]
	mov	r8, rbx
	xor	edx, edx
	call	memset
$LN12@HEAP_ALLOC:
; Line 88
	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+48]
; Line 89
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN2@HEAP_ALLOC:
; Line 79
	test	rcx, rcx
	je	SHORT $LN11@HEAP_ALLOC
; Line 80
	test	r8d, r8d
	je	SHORT $LN8@HEAP_ALLOC
; Line 81
	call	_aligned_free
$LN11@HEAP_ALLOC:
; Line 89
	xor	eax, eax
	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN8@HEAP_ALLOC:
; Line 83
	call	free
; Line 89
	mov	rbx, QWORD PTR [rsp+56]
	xor	eax, eax
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
?HEAP_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; HEAP_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z
_TEXT	SEGMENT
$T1 = 32
$T2 = 32
UserData$ = 96
Flags$ = 104
Alignment$ = 112
OldSize$ = 120
OldMemr$ = 128
NewSize$ = 136
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z PROC		; STATIC_ALLOCATOR, COMDAT
; File W:\cpp\void\dr\cator.c
; Line 20
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H
; Line 34
	mov	ecx, DWORD PTR _tls_index
	mov	rbp, r9
	mov	rax, QWORD PTR gs:88
	mov	r14d, edx
	mov	r15d, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	rsi, QWORD PTR [rax+rcx*8]
	mov	ecx, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	eax, DWORD PTR [rcx+rsi]
	test	al, 1
	jne	SHORT $LN26@STATIC_ALL
	or	eax, 1
; Line 70
	mov	edx, 16384				; 00004000H
; Line 34
	mov	DWORD PTR [rcx+rsi], eax
; Line 70
	xor	ecx, ecx
	lea	r8d, QWORD PTR [rcx+16]
	call	_aligned_realloc
; Line 34
	mov	QWORD PTR [rsi+r15], rax
$LN26@STATIC_ALL:
; Line 36
	mov	rbx, QWORD PTR NewSize$[rsp]
	mov	edx, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	movsxd	rcx, DWORD PTR [rdx+rsi]
	lea	rax, QWORD PTR [rbx+rcx]
	cmp	rax, 16384				; 00004000H
	jb	SHORT $LN3@STATIC_ALL
; Line 38
	cmp	rbx, 16384				; 00004000H
	jb	SHORT $LN4@STATIC_ALL
; Line 40
	lea	rax, OFFSET FLAT:??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@
	mov	DWORD PTR $T2[rsp+16], 40		; 00000028H
	mov	QWORD PTR $T2[rsp], rax
	lea	r8, OFFSET FLAT:??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@
	lea	rax, OFFSET FLAT:??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@
	mov	DWORD PTR $T2[rsp+20], 38		; 00000026H
	mov	edx, 6
	mov	QWORD PTR $T2[rsp+8], rax
	lea	rcx, QWORD PTR $T2[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 41
	xor	eax, eax
	jmp	$LN1@STATIC_ALL
$LN4@STATIC_ALL:
; Line 44
	mov	ecx, 1
$LN3@STATIC_ALL:
	mov	QWORD PTR [rsp+96], rdi
; Line 48
	lea	rax, QWORD PTR [rbx+63]
	and	eax, -64				; ffffffffffffffc0H
	movsxd	rdi, ecx
	add	rdi, QWORD PTR [rsi+r15]
	add	eax, ecx
	mov	DWORD PTR [rdx+rsi], eax
; Line 50
	test	rbx, rbx
	je	SHORT $LN8@STATIC_ALL
; Line 51
	cmp	QWORD PTR OldMemr$[rsp], 0
	je	SHORT $LN7@STATIC_ALL
; Line 52
	lea	rax, OFFSET FLAT:??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@
	mov	DWORD PTR $T1[rsp+16], 52		; 00000034H
	mov	QWORD PTR $T1[rsp], rax
	lea	r9, OFFSET FLAT:??_C@_1BG@NNFEIBFP@?$AAN?$AAO?$AA_?$AAM?$AAE?$AAS?$AAS?$AAA?$AAG?$AAE@
	lea	rax, OFFSET FLAT:??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@
	mov	DWORD PTR $T1[rsp+20], 39		; 00000027H
	xor	r8d, r8d
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rdx, OFFSET FLAT:??_C@_0CI@NPMNNLNI@?$CB?$CCnot?5supported?5for?5static?5allo@
	lea	rcx, QWORD PTR $T1[rsp]
	call	?AssertExtendedW@@YAHUTRACE_LOCATION@@PEBDHPEB_WZZ ; AssertExtendedW
$LN7@STATIC_ALL:
; Line 54
	test	r14b, 1
	je	SHORT $LN8@STATIC_ALL
; Line 55
	sub	rbx, rbp
	lea	rcx, QWORD PTR [rdi+rbp]
	mov	r8, rbx
	xor	edx, edx
	call	memset
$LN8@STATIC_ALL:
; Line 60
	mov	rax, rdi
	mov	rdi, QWORD PTR [rsp+96]
$LN1@STATIC_ALL:
; Line 61
	mov	rbx, QWORD PTR [rsp+104]
	mov	rbp, QWORD PTR [rsp+112]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	rsi
	ret	0
?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z ENDP		; STATIC_ALLOCATOR
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?HeapAlloc@@YAPEAXH_K@Z
_TEXT	SEGMENT
Zeroed$ = 48
Size$ = 56
?HeapAlloc@@YAPEAXH_K@Z PROC				; HeapAlloc, COMDAT
; File W:\cpp\void\dr\cator.c
; Line 98
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rdx
	mov	esi, ecx
; Line 68
	test	rdx, rdx
	je	SHORT $LN14@HeapAlloc
; Line 70
	xor	ecx, ecx
	mov	QWORD PTR [rsp+48], rbx
	lea	r8d, QWORD PTR [rcx+16]
	call	_aligned_realloc
	mov	rbx, rax
; Line 75
	test	esi, esi
	je	SHORT $LN15@HeapAlloc
; Line 76
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rax
	call	memset
; Line 98
	mov	rax, rbx
$LN15@HeapAlloc:
	mov	rbx, QWORD PTR [rsp+48]
; Line 100
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN14@HeapAlloc:
	mov	rsi, QWORD PTR [rsp+56]
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
?HeapAlloc@@YAPEAXH_K@Z ENDP				; HeapAlloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?StaticAlloc@@YAPEAXH_K@Z
_TEXT	SEGMENT
$T1 = 32
Zeroed$ = 80
Size$ = 88
?StaticAlloc@@YAPEAXH_K@Z PROC				; StaticAlloc, COMDAT
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	mov	QWORD PTR [rsp+32], rdi
	push	r14
	sub	rsp, 64					; 00000040H
; Line 34
	mov	rax, QWORD PTR gs:88
; Line 104
	mov	ebp, ecx
; Line 34
	mov	r8d, DWORD PTR _tls_index
; Line 104
	mov	rdi, rdx
; Line 34
	mov	ecx, OFFSET FLAT:?$S1@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4IA
	mov	r14d, OFFSET FLAT:?Bed@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4PEADEA
	mov	rsi, QWORD PTR [rax+r8*8]
	mov	eax, DWORD PTR [rcx+rsi]
	test	al, 1
	jne	SHORT $LN28@StaticAllo
	or	eax, 1
; Line 70
	mov	edx, 16384				; 00004000H
; Line 34
	mov	DWORD PTR [rcx+rsi], eax
; Line 70
	xor	ecx, ecx
	lea	r8d, QWORD PTR [rcx+16]
	call	_aligned_realloc
; Line 34
	mov	QWORD PTR [rsi+r14], rax
$LN28@StaticAllo:
; Line 36
	mov	r8d, OFFSET FLAT:?Min@?1??STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z@4HA
	movsxd	rdx, DWORD PTR [r8+rsi]
	lea	rax, QWORD PTR [rdi+rdx]
	cmp	rax, 16384				; 00004000H
	jb	SHORT $LN5@StaticAllo
; Line 38
	cmp	rdi, 16384				; 00004000H
	jb	SHORT $LN6@StaticAllo
; Line 40
	lea	rax, OFFSET FLAT:??_C@_0BH@GKGGKHND@W?3?2cpp?2void?2dr?1cator?4c@
	mov	DWORD PTR $T1[rsp+16], 40		; 00000028H
	mov	QWORD PTR $T1[rsp], rax
	lea	r8, OFFSET FLAT:??_C@_1BK@DCIHPDHI@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AAt?$AAo?$AAo?$AA?5?$AAb?$AAi?$AAg@
	lea	rax, OFFSET FLAT:??_C@_0BB@DGCFDEEE@STATIC_ALLOCATOR@
	mov	DWORD PTR $T1[rsp+20], 38		; 00000026H
	mov	edx, 6
	mov	QWORD PTR $T1[rsp+8], rax
	lea	rcx, QWORD PTR $T1[rsp]
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 104
	xor	eax, eax
; Line 41
	jmp	SHORT $LN3@StaticAllo
$LN6@StaticAllo:
; Line 44
	mov	edx, 1
$LN5@StaticAllo:
	mov	QWORD PTR [rsp+80], rbx
; Line 48
	lea	rcx, QWORD PTR [rdi+63]
	and	ecx, -64				; ffffffffffffffc0H
	movsxd	rbx, edx
	add	rbx, QWORD PTR [rsi+r14]
	add	ecx, edx
	mov	DWORD PTR [r8+rsi], ecx
; Line 50
	test	rdi, rdi
	je	SHORT $LN10@StaticAllo
; Line 54
	test	ebp, ebp
	je	SHORT $LN10@StaticAllo
; Line 55
	mov	r8, rdi
	xor	edx, edx
	mov	rcx, rbx
	call	memset
$LN10@StaticAllo:
; Line 104
	mov	rax, rbx
	mov	rbx, QWORD PTR [rsp+80]
$LN3@StaticAllo:
; Line 106
	mov	rbp, QWORD PTR [rsp+88]
	mov	rsi, QWORD PTR [rsp+96]
	mov	rdi, QWORD PTR [rsp+104]
	add	rsp, 64					; 00000040H
	pop	r14
	ret	0
?StaticAlloc@@YAPEAXH_K@Z ENDP				; StaticAlloc
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ
_TEXT	SEGMENT
Wrote$1 = 48
$T2 = 64
Location$ = 160
TraceMessageKind$ = 168
FormatString$ = 176
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ PROC	; OutputTraceMessage, COMDAT
; File W:\cpp\void\dr\trace.c
; Line 22
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rbp
	push	rsi
	push	r12
	push	r14
	sub	rsp, 112				; 00000070H
; Line 28
	mov	rax, QWORD PTR ?Global_TraceMessageHook@@3P6AHUTRACE_LOCATION@@HHPEB_WPEAD@ZEA
	lea	r12, QWORD PTR FormatString$[rsp+8]
	movsxd	rbp, edx
	mov	rsi, r8
	mov	r14, rcx
	mov	rbx, -1
	test	rax, rax
	je	SHORT $LN31@OutputTrac
; Line 29
	vmovups	xmm0, XMMWORD PTR [rcx]
	vmovsd	xmm1, QWORD PTR [rcx+16]
	vmovups	XMMWORD PTR $T2[rsp], xmm0
	vmovsd	QWORD PTR $T2[rsp+16], xmm1
	mov	r8, rbx
$LL35@OutputTrac:
	inc	r8
	cmp	WORD PTR [rsi+r8*2], 0
	jne	SHORT $LL35@OutputTrac
	mov	r9, rsi
	mov	QWORD PTR [rsp+32], r12
	mov	edx, ebp
	lea	rcx, QWORD PTR $T2[rsp]
	call	rax
; Line 33
	test	eax, eax
	je	$LN29@OutputTrac
	mov	rsi, QWORD PTR FormatString$[rsp]
$LN31@OutputTrac:
	mov	QWORD PTR [rsp+104], rdi
; Line 35
	mov	rdi, rbx
	mov	QWORD PTR [rsp+96], r15
	npad	6
$LL34@OutputTrac:
	cmp	WORD PTR [rsi+rdi*2+2], 0
	lea	rdi, QWORD PTR [rdi+1]
	jne	SHORT $LL34@OutputTrac
; File W:\cpp\void\dr\cator.c
; Line 104
	xor	r9d, r9d
; File W:\cpp\void\dr\text.c
; Line 15
	lea	eax, DWORD PTR [rdi+257]
	movsxd	rcx, eax
	add	rcx, rcx
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	QWORD PTR [rsp+40], rcx
	xor	ecx, ecx
	lea	edx, QWORD PTR [r9+1]
	mov	QWORD PTR [rsp+32], 0
	lea	r8d, QWORD PTR [r9+16]
	call	?STATIC_ALLOCATOR@@YAPEAXPEAXHH_K01@Z	; STATIC_ALLOCATOR
; File W:\cpp\void\dr\text.c
; Line 16
	lea	ecx, DWORD PTR [rdi+256]
; File W:\cpp\void\dr\cator.c
; Line 104
	mov	r15, rax
; File W:\cpp\void\dr\text.c
; Line 16
	movsxd	rdi, ecx
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], r12
	mov	r9, rsi
	mov	r8, rdi
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, r15
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vswprintf
; File W:\cpp\void\dr\plat-win32.c
; Line 38
	call	QWORD PTR __imp_GetCurrentThreadId
; File W:\cpp\void\dr\trace.c
; Line 37
	mov	rdx, QWORD PTR [r14+8]
	mov	ecx, ebx
; File W:\cpp\void\dr\plat-win32.c
; Line 38
	mov	edi, eax
; File W:\cpp\void\dr\trace.c
; Line 37
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
	mov	rdx, QWORD PTR [r14]
	mov	ecx, ebx
	mov	rsi, rax
	call	?Widen@@YAPEA_WHPEBD@Z			; Widen
; Line 6
	cmp	ebp, 7
	ja	SHORT $LN17@OutputTrac
	lea	r8, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR $LN33@OutputTrac[r8+rbp*4]
	add	rdx, r8
	jmp	rdx
$LN19@OutputTrac:
; Line 7
	lea	rdx, OFFSET FLAT:??_C@_1BG@POGMBNI@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN20@OutputTrac:
; Line 8
	lea	rdx, OFFSET FLAT:??_C@_1BG@BJMNMIJK@?$AAD?$AAE?$AAB?$AAU?$AAG?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN21@OutputTrac:
; Line 9
	lea	rdx, OFFSET FLAT:??_C@_1BG@HLPDBHBF@?$AAI?$AAN?$AAF?$AAO?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN22@OutputTrac:
; Line 10
	lea	rdx, OFFSET FLAT:??_C@_1BG@GHGHFABI@?$AAW?$AAA?$AAR?$AAN?$AAI?$AAN?$AAG?$AA?3?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN23@OutputTrac:
; Line 11
	lea	rdx, OFFSET FLAT:??_C@_1BG@NBEBCLEH@?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN24@OutputTrac:
; Line 12
	lea	rdx, OFFSET FLAT:??_C@_1BG@CEIBEDCK@?$AAF?$AAA?$AAT?$AAA?$AAL?$AA?3?$AA?5?$AA?5?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN25@OutputTrac:
; Line 13
	lea	rdx, OFFSET FLAT:??_C@_1BG@PHAAHLNA@?$AAV?$AAE?$AAR?$AAB?$AAO?$AAS?$AAE?$AA?3?$AA?5?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN26@OutputTrac:
; Line 14
	lea	rdx, OFFSET FLAT:??_C@_1BG@GOBPDGAO@?$AAP?$AAE?$AAD?$AAA?$AAN?$AAT?$AAI?$AAC?$AA?3?$AA?5@
	jmp	SHORT $LN16@OutputTrac
$LN17@OutputTrac:
; Line 16
	lea	rdx, OFFSET FLAT:??_C@_1CM@MFEPLLDG@?$AAI?$AAN?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAM@
$LN16@OutputTrac:
; Line 37
	mov	QWORD PTR [rsp+40], r15
	lea	rcx, OFFSET FLAT:??_C@_1DO@DEICCEEP@?$AAK?$AAL?$AAA?$AAR?$AAK?$AA_?$AAA?$AAP?$AAP?$AA?5?$AA?$CF?$AAs?$AA?5?$AA?$CF?$AAs@
	mov	r9, rsi
	mov	DWORD PTR [rsp+32], edi
	mov	r8, rax
	call	?FormatW@@YAPEA_WPEB_WZZ		; FormatW
; File W:\cpp\void\dr\plat-win32.c
; Line 43
	mov	rcx, rax
; File W:\cpp\void\dr\trace.c
; Line 37
	mov	rdi, rax
; File W:\cpp\void\dr\plat-win32.c
; Line 43
	call	QWORD PTR __imp_OutputDebugStringW
	mov	r15, QWORD PTR [rsp+96]
$LL32@OutputTrac:
; Line 46
	inc	rbx
	cmp	WORD PTR [rdi+rbx*2], 0
	jne	SHORT $LL32@OutputTrac
	mov	rcx, QWORD PTR ?PROCESS@@3U_PROCESS@@A+96
	lea	r9, QWORD PTR Wrote$1[rsp]
	mov	r8, rbx
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rdi
	call	QWORD PTR __imp_WriteConsoleW
	mov	rdi, QWORD PTR [rsp+104]
	test	eax, eax
	jne	SHORT $LN29@OutputTrac
; Line 48
	lea	rcx, OFFSET FLAT:??_C@_0DO@COJDMKIE@?$FLWARNING?$FN?5write?5console?5failed?0@
	call	printf
$LN29@OutputTrac:
; File W:\cpp\void\dr\trace.c
; Line 43
	add	rsp, 112				; 00000070H
	pop	r14
	pop	r12
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
$LN33@OutputTrac:
	DD	$LN19@OutputTrac
	DD	$LN20@OutputTrac
	DD	$LN21@OutputTrac
	DD	$LN25@OutputTrac
	DD	$LN22@OutputTrac
	DD	$LN26@OutputTrac
	DD	$LN23@OutputTrac
	DD	$LN24@OutputTrac
?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ENDP	; OutputTraceMessage
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z
_TEXT	SEGMENT
__$ReturnAddress$ = 8
File$ = 16
Func$ = 24
Line$ = 32
Guid$ = 40
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z PROC	; TraceLocation, COMDAT
; File W:\cpp\void\dr\trace.h
; Line 43
	mov	eax, DWORD PTR Guid$[rsp]
	mov	DWORD PTR [rcx+20], eax
	mov	rax, rcx
	mov	QWORD PTR [rcx], rdx
	mov	QWORD PTR [rcx+8], r8
	mov	DWORD PTR [rcx+16], r9d
; Line 46
	ret	0
?TraceLocation@@YA?AUTRACE_LOCATION@@PEBD0HH@Z ENDP	; TraceLocation
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??1_TRACE_BLOCK@@QEAA@XZ
_TEXT	SEGMENT
$T1 = 48
Result$2 = 96
this$ = 96
Result$3 = 104
??1_TRACE_BLOCK@@QEAA@XZ PROC				; _TRACE_BLOCK::~_TRACE_BLOCK, COMDAT
; File W:\cpp\void\dr\trace.c
; Line 54
$LN12:
	push	rbx
	sub	rsp, 80					; 00000050H
	mov	rbx, rcx
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	lea	rcx, QWORD PTR Result$2[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; Line 25
	lea	rcx, QWORD PTR Result$3[rsp]
	call	QWORD PTR __imp_QueryPerformanceFrequency
; File W:\cpp\void\dr\trace.c
; Line 57
	vmovups	xmm0, XMMWORD PTR [rbx+8]
	mov	rdx, QWORD PTR Result$2[rsp]
	sub	rdx, QWORD PTR [rbx+32]
	vmovsd	xmm1, QWORD PTR [rbx+24]
	vmovups	XMMWORD PTR $T1[rsp], xmm0
	vxorps	xmm0, xmm0, xmm0
	vmovsd	QWORD PTR $T1[rsp+16], xmm1
	js	SHORT $LN9@TRACE_BLOC
; Line 55
	vcvtsi2sd xmm0, xmm0, rdx
	jmp	SHORT $LN10@TRACE_BLOC
$LN9@TRACE_BLOC:
	mov	rax, rdx
	and	edx, 1
	shr	rax, 1
	or	rax, rdx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm0, xmm0, xmm0
$LN10@TRACE_BLOC:
	mov	rcx, QWORD PTR Result$3[rsp]
	vmulsd	xmm1, xmm0, QWORD PTR __real@408f400000000000
	vxorps	xmm0, xmm0, xmm0
	test	rcx, rcx
	js	SHORT $LN7@TRACE_BLOC
	vcvtsi2sd xmm0, xmm0, rcx
	jmp	SHORT $LN8@TRACE_BLOC
$LN7@TRACE_BLOC:
	mov	rax, rcx
	and	ecx, 1
	shr	rax, 1
	or	rax, rcx
	vcvtsi2sd xmm0, xmm0, rax
	vaddsd	xmm0, xmm0, xmm0
$LN8@TRACE_BLOC:
; Line 57
	mov	r9, QWORD PTR [rbx]
	lea	r8, OFFSET FLAT:??_C@_1DA@LCFOHEAK@?$AAT?$AAR?$AAA?$AAC?$AAE?$AA_?$AAB?$AAL?$AAO?$AAC?$AAK?$AA?5?$AA?$FL?$AA?$CF?$AAs@
	vdivsd	xmm0, xmm1, xmm0
	mov	edx, 2
	lea	rcx, QWORD PTR $T1[rsp]
	vmovsd	QWORD PTR [rsp+32], xmm0
	call	?OutputTraceMessage@@YAXUTRACE_LOCATION@@HPEB_WZZ ; OutputTraceMessage
; Line 58
	add	rsp, 80					; 00000050H
	pop	rbx
	ret	0
??1_TRACE_BLOCK@@QEAA@XZ ENDP				; _TRACE_BLOCK::~_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z
_TEXT	SEGMENT
Result$1 = 48
this$ = 48
Location$ = 56
FriendlyName$ = 64
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z PROC	; _TRACE_BLOCK::_TRACE_BLOCK, COMDAT
; File W:\cpp\void\dr\trace.c
; Line 48
$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	vmovups	xmm0, XMMWORD PTR [rdx]
	vmovsd	xmm1, QWORD PTR [rdx+16]
	vmovups	XMMWORD PTR [rcx+8], xmm0
	vmovsd	QWORD PTR [rcx+24], xmm1
	mov	rbx, rcx
; Line 49
	mov	QWORD PTR [rcx], r8
; File W:\cpp\void\dr\plat-win32.c
; Line 32
	lea	rcx, QWORD PTR Result$1[rsp]
	call	QWORD PTR __imp_QueryPerformanceCounter
; File W:\cpp\void\dr\trace.c
; Line 50
	mov	rax, QWORD PTR Result$1[rsp]
	mov	QWORD PTR [rbx+32], rax
; Line 51
	mov	rax, rbx
	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
??0_TRACE_BLOCK@@QEAA@UTRACE_LOCATION@@PEB_W@Z ENDP	; _TRACE_BLOCK::_TRACE_BLOCK
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?rx7__stoi@@YAHHPEA_JPEBD1@Z
_TEXT	SEGMENT
base$ = 8
res$ = 16
min$ = 24
max$ = 32
?rx7__stoi@@YAHHPEA_JPEBD1@Z PROC			; rx7__stoi, COMDAT
; File W:\cpp\void\dr\rx7-text.h
; Line 125
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
; Line 126
	xor	r10d, r10d
	movsxd	rbx, ecx
	mov	r11, r9
	mov	rsi, rdx
; Line 127
	lea	edi, QWORD PTR [r10+1]
	lea	ecx, QWORD PTR [rdi-2]
$LL2@rx7__stoi:
; Line 131
	cmp	r8, r11
	je	SHORT $LN24@rx7__stoi
	movzx	r9d, BYTE PTR [r8]
	cmp	r9b, 32					; 00000020H
	je	SHORT $LN6@rx7__stoi
$LN24@rx7__stoi:
	movzx	eax, BYTE PTR [r8]
	movzx	r9d, al
	cmp	al, 43					; 0000002bH
	je	SHORT $LN6@rx7__stoi
	cmp	al, 45					; 0000002dH
	jne	SHORT $LN17@rx7__stoi
$LN6@rx7__stoi:
; Line 134
	cmp	r9b, 45					; 0000002dH
	mov	edi, 1
	cmove	edi, ecx
; Line 135
	inc	r8
; Line 136
	jmp	SHORT $LL2@rx7__stoi
$LN17@rx7__stoi:
; Line 139
	cmp	r8, r11
	jae	SHORT $LN29@rx7__stoi
$LL4@rx7__stoi:
; Line 140
	cmp	ebx, 10
	jl	SHORT $LN25@rx7__stoi
	movsx	rdx, BYTE PTR [r8]
	lea	eax, DWORD PTR [rdx-48]
	cmp	al, 9
	ja	SHORT $LN25@rx7__stoi
; Line 141
	mov	rcx, rbx
	imul	rcx, r10
	lea	r10, QWORD PTR [rdx-48]
; Line 142
	jmp	SHORT $LN30@rx7__stoi
$LN25@rx7__stoi:
; Line 143
	cmp	ebx, 16
	jne	SHORT $LN29@rx7__stoi
	movsx	rdx, BYTE PTR [r8]
	lea	eax, DWORD PTR [rdx-97]
	cmp	al, 5
	ja	SHORT $LN23@rx7__stoi
; Line 144
	mov	rcx, rbx
	imul	rcx, r10
	lea	r10, QWORD PTR [rdx-87]
; Line 145
	jmp	SHORT $LN30@rx7__stoi
$LN23@rx7__stoi:
; Line 146
	lea	eax, DWORD PTR [rdx-65]
	cmp	al, 5
	ja	SHORT $LN29@rx7__stoi
; Line 147
	mov	rcx, rbx
	imul	rcx, r10
	lea	r10, QWORD PTR [rdx-55]
$LN30@rx7__stoi:
; Line 139
	add	r10, rcx
	inc	r8
	cmp	r8, r11
	jb	SHORT $LL4@rx7__stoi
$LN29@rx7__stoi:
; Line 156
	mov	rbx, QWORD PTR [rsp+8]
	sub	r11d, r8d
	movsxd	rax, edi
	mov	rdi, QWORD PTR [rsp+24]
	imul	rax, r10
	mov	QWORD PTR [rsi], rax
	mov	eax, r11d
	mov	rsi, QWORD PTR [rsp+16]
	ret	0
?rx7__stoi@@YAHHPEA_JPEBD1@Z ENDP			; rx7__stoi
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT vsprintf_s
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
vsprintf_s PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1512
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 1491
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rdi
	mov	r8, rsi
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
; Line 1514
	mov	rbx, QWORD PTR [rsp+64]
; Line 1495
	test	eax, eax
; Line 1514
	mov	rbp, QWORD PTR [rsp+72]
; Line 1495
	mov	ecx, -1
; Line 1514
	mov	rsi, QWORD PTR [rsp+80]
; Line 1495
	cmovs	eax, ecx
; Line 1514
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
vsprintf_s ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vsprintf_s_l
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_Locale$ = 88
_ArgList$ = 96
_vsprintf_s_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 1490
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 1491
	call	__local_stdio_printf_options
	mov	r10, QWORD PTR _ArgList$[rsp]
	mov	r9, rdi
	mov	QWORD PTR [rsp+40], r10
	mov	r8, rsi
	mov	rdx, rbp
	mov	QWORD PTR [rsp+32], rbx
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vsprintf_s
; Line 1496
	mov	rbx, QWORD PTR [rsp+64]
	test	eax, eax
	mov	rbp, QWORD PTR [rsp+72]
	mov	ecx, -1
	mov	rsi, QWORD PTR [rsp+80]
	cmovs	eax, ecx
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsprintf_s_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT printf
_TEXT	SEGMENT
_Format$ = 80
printf	PROC						; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 956
$LN6:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rdi
	sub	rsp, 56					; 00000038H
; Line 960
	mov	ecx, 1
	lea	rdi, QWORD PTR _Format$[rsp+8]
	call	__acrt_iob_func
	mov	rbx, rax
; Line 645
	call	__local_stdio_printf_options
	mov	r8, QWORD PTR _Format$[rsp]
	xor	r9d, r9d
	mov	rdx, rbx
	mov	QWORD PTR [rsp+32], rdi
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 963
	add	rsp, 56					; 00000038H
	pop	rdi
	pop	rbx
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\stdio.h
; Line 644
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 645
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	QWORD PTR [rsp+32], rbx
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	call	__stdio_common_vfprintf
; Line 646
	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vsnwprintf
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_ArgList$ = 88
_vsnwprintf PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1129
$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 1062
	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rdi
	mov	r8, rsi
	mov	QWORD PTR [rsp+32], 0
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vswprintf
; Line 1131
	mov	rbx, QWORD PTR [rsp+64]
; Line 1066
	test	eax, eax
; Line 1131
	mov	rbp, QWORD PTR [rsp+72]
; Line 1066
	mov	ecx, -1
; Line 1131
	mov	rsi, QWORD PTR [rsp+80]
; Line 1066
	cmovs	eax, ecx
; Line 1131
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsnwprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT _vsnwprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_Locale$ = 88
_ArgList$ = 96
_vsnwprintf_l PROC					; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_wstdio.h
; Line 1061
$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx
; Line 1062
	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR _ArgList$[rsp]
	or	rcx, 1
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rbx
	call	__stdio_common_vswprintf
; Line 1067
	mov	rbx, QWORD PTR [rsp+64]
	test	eax, eax
	mov	rbp, QWORD PTR [rsp+72]
	mov	ecx, -1
	mov	rsi, QWORD PTR [rsp+80]
	cmovs	eax, ecx
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsnwprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT
; File W:\Windows Kits\10\include\10.0.22000.0\ucrt\corecrt_stdio_config.h
; Line 92
	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 93
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
